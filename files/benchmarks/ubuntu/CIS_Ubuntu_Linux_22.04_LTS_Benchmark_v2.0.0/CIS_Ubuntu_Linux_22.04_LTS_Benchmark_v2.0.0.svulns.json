[
  {
    "name": "Ensure cramfs kernel module is not available",
    "id": "1.1.1.1",
    "type": "Automated",
    "start_page": 22,
    "end_page": 26,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The cramfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A cramfs image can be used without having to first decompress the image.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the cramfs module is disabled: -IF- the module is available in the running kernel: \u2022 An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory \u2022 The module is not loaded in the kernel -IF- available in ANY installed kernel: \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory -IF- the kernel module is not available on the system, or pre-compiled into the kernel: \u2022 No additional configuration is necessary",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"cramfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/true' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the cramfs module: -IF- the module is available in the running kernel: \u2022 Create a file ending in .conf with install cramfs /bin/false in the /etc/modprobe.d/ directory \u2022 Create a file ending in .conf with blacklist cramfs in the /etc/modprobe.d/ directory \u2022 Unload cramfs from the kernel -IF- available in ANY installed kernel: \u2022 Create a file ending in .conf with blacklist cramfs in the /etc/modprobe.d/ directory -IF- the kernel module is not available on the system or pre-compiled into the kernel: \u2022 No remediation is necessary",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"cramfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/true' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport pathlib\nimport subprocess\n\nMODULE_NAME = \"cramfs\"\nMODULE_TYPE = \"fs\"\nMODPROBE_D_DIR = pathlib.Path(\"/etc/modprobe.d\")\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the cramfs kernel module vulnerability.\"\"\"\n    vulnerability_found = False\n\n    # Check if the module exists on the system\n    for kernel_dir in pathlib.Path(\"/lib/modules\").glob(\"*/kernel/\" + MODULE_TYPE):\n        if (kernel_dir / MODULE_NAME).exists():\n            print(f\" - Module '{MODULE_NAME}' exists in '{kernel_dir}'\")\n\n            # Check if the module is loaded in the kernel\n            if subprocess.run([\"lsmod\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.decode().find(MODULE_NAME)!= -1:\n                print(f\" - Module '{MODULE_NAME}' is loaded ( FAIL )\")\n                vulnerability_found = True\n            else:\n                print(f\" - Module '{MODULE_NAME}' is not loaded\")\n\n            # Check if the module is deny-listed or marked as not loadable\n            config_files = list(MODPROBE_D_DIR.glob(\"*.conf\"))\n            if not any(subprocess.run([\"grep\", \"-P\", \"^\\\\h*blacklist\\\\h+\" + MODULE_NAME, str(file)]).returncode == 0 for file in config_files):\n                print(f\" - Module '{MODULE_NAME}' is not deny-listed ( FAIL )\")\n                vulnerability_found = True\n            else:\n                print(f\" - Module '{MODULE_NAME}' is deny-listed\")\n\n            if not any(subprocess.run([\"grep\", \"-P\", \"^\\\\h*install\\\\h+\" + MODULE_NAME + \"\\\\h+/bin/false\", str(file)]).returncode == 0 for file in config_files):\n                print(f\" - Module '{MODULE_NAME}' is not marked as not loadable ( FAIL )\")\n                vulnerability_found = True\n            else:\n                print(f\" - Module '{MODULE_NAME}' is marked as not loadable\")\n\n    return not vulnerability_found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the cramfs kernel module vulnerability.\"\"\"\n    # Create a file to deny-list the module\n    deny_list_file = MODPROBE_D_DIR / (MODULE_NAME + \".conf\")\n    if not deny_list_file.exists():\n        with open(deny_list_file, \"w\") as file:\n            file.write(f\"blacklist {MODULE_NAME}\")\n        print(f\" - Created file '{deny_list_file}' with 'blacklist {MODULE_NAME}'\")\n\n    # Create a file to mark the module as not loadable (if not already present)\n    config_files = list(MODPROBE_D_DIR.glob(\"*.conf\"))\n    if not any(subprocess.run([\"grep\", \"-P\", \"^\\\\h*install\\\\h+\" + MODULE_NAME + \"\\\\h+/bin/false\", str(file)]).returncode == 0 for file in config_files):\n        with open(MODPROBE_D_DIR / (MODULE_NAME + \"_not_loadable.conf\"), \"w\") as file:\n            file.write(f\"install {MODULE_NAME} /bin/false\")\n        print(f\" - Created file '{MODPROBE_D_DIR / (MODULE_NAME + '_not_loadable.conf']}' with 'install {MODULE_NAME} /bin/false'\")\n\n    # Unload the module if it's currently loaded\n    if subprocess.run([\"lsmod\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.decode().find(MODULE_NAME)!= -1:\n        subprocess.run([\"modprobe\", \"-r\", MODULE_NAME])\n        print(f\" - Unloaded module '{MODULE_NAME}'\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure freevxfs kernel module is not available",
    "id": "1.1.1.2",
    "type": "Automated",
    "start_page": 27,
    "end_page": 31,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The freevxfs filesystem type is a free version of the Veritas type filesystem. This is the primary filesystem type for HP-UX operating systems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the freevxfs module is disabled: -IF- the module is available in the running kernel:\n\n#### \u2022 An entry including /bin/true or /bin/false exists in a file within the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n \u2022 The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n\n#### \u2022 No additional configuration is necessary\n\n Page 26\n```\n\n-----\n\n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"freevxfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\",
    "audit_code": "if grep -Pq -- '^\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\",
    "remediation_details": "Run the following script to disable the freevxfs module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install freevxfs /bin/false in the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 Create a file ending in .conf with blacklist freevxfs in the /etc/modprobe.d/\n### directory\n\n#### \u2022 Unload freevxfs from the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 Create a file ending in .conf with blacklist freevxfs in the /etc/modprobe.d/\n### directory\n\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n\n#### \u2022 No remediation is necessary\n\n Page 28\n```\n\n-----\n\n```\n#!/usr/bin/env bash\n{\n  l_mname=\"freevxfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\",
    "remediation_code": "### References:\n\n 1. NIST SP 800-53 Rev. 5: CM-7\n\n#### Page 29\n\n```\n\n-----\n\n### CIS Controls:\n\n Controls\n Control IG 1 IG 2 IG 3 Version\n\n 4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software\n v8 Uninstall or disable unnecessary services on enterprise assets and software, \u25cf \u25cf\n\n##### such as an unused file sharing service, web application module, or service function.\n\n### 9.2 Ensure Only Approved Ports, Protocols and Services\n v7 Are Running \u25cf \u25cf\n\n##### Ensure that only network ports, protocols, and services listening on a system\n with validated business needs, are running on each system.\n\n### MITRE ATT&CK Mappings:\n\n Techniques / Sub Tactics Mitigations techniques\n\n T1005, T1005.000 TA0005 M1050\n\n#### Page 30\n\n|Controls Version|Control|IG 1|IG 2|IG 3|\n|---|---|---|---|---|\n|v8|4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software Uninstall or disable unnecessary services on enterprise assets and software, such as an unused file sharing service, web application module, or service function.||\u25cf|\u25cf|\n|v7|9.2 Ensure Only Approved Ports, Protocols and Services Are Running Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.||\u25cf|\u25cf|\n\n|MITRE ATT&CK Mappings:|Col2|Col3|\n|---|---|---|\n|Techniques / Sub- techniques|Tactics|Mitigations|\n|T1005, T1005.000|TA0005|M1050|",
    "python_script": "\nimport os\nimport glob\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if freevxfs kernel module is not available.\"\"\"\n    module_name = \"freevxfs\"\n    module_type = \"fs\"\n\n    # Check if module is loaded in the kernel\n    if subprocess.run([\"lsmod\"], stdout=subprocess.PIPE).stdout.decode().find(module_name) != -1:\n        print(f\"Module {module_name} is loaded in the kernel.\")\n        return False\n\n    # Check if module is deny-listed in /etc/modprobe.d/\n    for file in glob.glob(\"/etc/modprobe.d/*.conf\"):\n        with open(file, 'r') as f:\n            if f.read().find(f\"blacklist {module_name}\") != -1 or f.read().find(f\"install {module_name} /bin/false\") != -1:\n                print(f\"Module {module_name} is deny-listed in {file}.\")\n                break\n    else:\n        print(f\"Module {module_name} is not deny-listed in /etc/modprobe.d/.\")\n        return False\n\n    # Check availability in all installed kernels\n    for kernel_path in glob.glob(\"/lib/modules/**/kernel/fs\", recursive=True):\n        if os.path.exists(os.path.join(kernel_path, module_name)):\n            print(f\"Module {module_name} found in {kernel_path}, but not loaded or deny-listed.\")\n            return False\n\n    print(f\"No issues found with module {module_name}.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring freevxfs kernel module is not available.\"\"\"\n    module_name = \"freevxfs\"\n    config_dir = \"/etc/modprobe.d/\"\n    config_file = f\"disable_{module_name}.conf\"\n\n    # Create a .conf file with blacklist entry\n    config_path = os.path.join(config_dir, config_file)\n    with open(config_path, 'w') as f:\n        f.write(f\"blacklist {module_name}\")\n    print(f\"Created {config_path} with blacklist entry for {module_name}.\")\n\n    # Check if module is loaded and unload if necessary\n    if subprocess.run([\"lsmod\"], stdout=subprocess.PIPE).stdout.decode().find(module_name) != -1:\n        subprocess.run([f\"modprobe -r {module_name}\"], shell=True)\n        print(f\"Unloaded {module_name} from the kernel.\")\n\n    # For running kernel, also create a .conf with install /bin/false (in addition to blacklist for all kernels)\n    config_file_running_kernel = f\"disable-running_{module_name}.conf\"\n    config_path_running_kernel = os.path.join(config_dir, config_file_running_kernel)\n    with open(config_path_running_kernel, 'w') as f:\n        f.write(f\"install {module_name} /bin/false\")\n    print(f\"Created {config_path_running_kernel} for the running kernel.\")\n"
  },
  {
    "name": "Ensure hfs kernel module is not available",
    "id": "1.1.1.3",
    "type": "Automated",
    "start_page": 32,
    "end_page": 36,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The hfs filesystem type is a hierarchical filesystem that allows you to mount Mac OS filesystems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the hfs module is disabled: -IF- the module is available in the running kernel:\n- An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory\n- The module is deny listed in a file within the /etc/modprobe.d/ directory\n- The module is not loaded in the kernel\n-IF- available in ANY installed kernel:\n- The module is deny listed in a file within the /etc/modprobe.d/ directory\n-IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n- No additional configuration is necessary",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"hfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \"$l_mname\" is not loadable: \"$l_loadable\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \"$l_mname\" is loadable: \"$l_loadable\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \"$l_mname\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \"$l_mname\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \"$l_mname\" is deny listed in: \"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \"$l_mname\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \"$l_mdir\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \"$l_mname\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the hfs module: -IF- the module is available in the running kernel:\n- Create a file ending in .conf with install hfs /bin/false in the /etc/modprobe.d/ directory\n- Create a file ending in .conf with blacklist hfs in the /etc/modprobe.d/ directory\n- Unload hfs from the kernel\n-IF- available in ANY installed kernel:\n- Create a file ending in .conf with blacklist hfs in the /etc/modprobe.d/ directory\n-IF- the kernel module is not available on the system or pre-compiled into the kernel:\n- No remediation is necessary",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"hfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \"$l_mname\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \"$l_mname\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \"$l_mname\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \"$l_mname\" exists in \"$l_mdir\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \"$l_mname\" doesn't exist in \"$l_mdir\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \"$l_mname\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport subprocess\nfrom pathlib import Path\n\nMODULE_NAME = \"hfs\"\nMODULE_TYPE = \"fs\"\nMODULE_PATH = f\"/lib/modules/**/kernel/{MODULE_TYPE}\"\nMODULE_DENAME = MODULE_NAME.replace('-', '/')\nCONF_DIR = Path(\"/etc/modprobe.d\")\n\ndef audit_vuln() -> bool:\n    # Check if module exists on the system\n    module_exists = False\n    for path in Path(\"/lib/modules\").glob(f\"**/kernel/{MODULE_TYPE}/{MODULE_DENAME}\"):\n        if path.is_dir() and any(path.iterdir()):\n            module_exists = True\n            module_path = path.parent\n            \n            # Check if module is deny listed\n            deny_listed = any(\"blacklist \" + MODULE_NAME in line for file in CONF_DIR.glob(\"*.conf\") for line in file.read_text().splitlines())\n            if not deny_listed:\n                print(f\"- Module {MODULE_NAME} is not deny listed\")\n                return False\n            \n            # Check if module is loadable and loaded in the running kernel\n            if module_path == Path(f\"/lib/modules/{os.uname().release}/kernel/{MODULE_TYPE}\"):\n                loadable_output = subprocess.check_output(f\"modprobe -n -v {MODULE_NAME}\", shell=True).decode().strip()\n                if \"install /bin/(true|false)\" not in loadable_output:\n                    print(f\"- Module {MODULE_NAME} is loadable: {loadable_output}\")\n                    return False\n                if subprocess.check_output(f\"lsmod | grep {MODULE_NAME}\", shell=True):\n                    print(f\"- Module {MODULE_NAME} is loaded\")\n                    return False\n    \n    # If we reach this point, the audit passes\n    print(\"- Audit Result: ** PASS **\")\n    return True\n\ndef remediate_vuln() -> None:\n    # Create a.conf file to deny list the module if it doesn't exist\n    conf_file = CONF_DIR / f\"{MODULE_NAME}.conf\"\n    if not conf_file.exists() or \"blacklist \" + MODULE_NAME not in conf_file.read_text():\n        with conf_file.open(\"a\") as f:\n            f.write(f\"blacklist {MODULE_NAME}\\n\")\n        print(f\"- Deny listed {MODULE_NAME}\")\n\n    # Check if the module exists on the system\n    for path in Path(\"/lib/modules\").glob(f\"**/kernel/{MODULE_TYPE}/{MODULE_DENAME}\"):\n        if path.is_dir() and any(path.iterdir()):\n            module_path = path.parent\n            \n            # If the module is in the running kernel, unload it and make it not loadable\n            if module_path == Path(f\"/lib/modules/{os.uname().release}/kernel/{MODULE_TYPE}\"):\n                loadable_output = subprocess.check_output(f\"modprobe -n -v {MODULE_NAME}\", shell=True).decode().strip()\n                if \"install /bin/(true|false)\" not in loadable_output:\n                    with (CONF_DIR / f\"{MODULE_NAME}_loadable.conf\").open(\"w\") as f:\n                        f.write(f\"install {MODULE_NAME} /bin/false\\n\")\n                    print(f\"- Set module {MODULE_NAME} to be not loadable\")\n                \n                if subprocess.check_output(f\"lsmod | grep {MODULE_NAME}\", shell=True):\n                    subprocess.check_call(f\"modprobe -r {MODULE_NAME}\", shell=True)\n                    print(f\"- Unloaded module {MODULE_NAME}\")\n"
  },
  {
    "name": "Ensure hfsplus kernel module is not available",
    "id": "1.1.1.4",
    "type": "Automated",
    "start_page": 37,
    "end_page": 41,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The hfsplus filesystem type is a hierarchical filesystem designed to replace hfs that allows you to mount Mac OS filesystems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the hfsplus module is disabled: -IF- the module is available in the running kernel:\n\n#### \u2022 An entry including /bin/true or /bin/false exists in a file within the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n \u2022 The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n#### \u2022 No additional configuration is necessary\n\n Page 36\n```",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"hfsplus\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the hfsplus module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install hfsplus /bin/false in the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 Create a file ending in .conf with blacklist hfsplus in the /etc/modprobe.d/\n### directory\n\n#### \u2022 Unload hfsplus from the kernel\n\n### -IF- available in ANY installed kernel:\n#### \u2022 Create a file ending in .conf with blacklist hfsplus in the /etc/modprobe.d/\n### directory\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n#### \u2022 No remediation is necessary\n\n Page 38\n```",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"hfsplus\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\n\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the hfsplus kernel module\"\"\"\n    module_name = \"hfsplus\"\n    module_type = \"fs\"\n    search_loc = [\"/lib/modprobe.d/\", \"/etc/modprobe.d/\"]\n    module_path = f\"/lib/modules/**/kernel/{module_type}\"\n    module_dir_name = module_name.replace(\"-\", \"/\")\n\n    # Check if the module exists on the system\n    module_exists = False\n    for root, dirs, files in os.walk(\"/lib/modules/\"):\n        if module_dir_name in dirs:\n            module_exists = True\n            module_dir = os.path.join(root, module_dir_name)\n            break\n\n    if not module_exists:\n        print(f\"- Module {module_name} doesn't exist on the system\")\n        return True  # Pass: Module not present\n\n    # Check if the module is deny-listed\n    deny_listed = False\n    for loc in search_loc:\n        for file in os.listdir(loc):\n            if file.endswith(\".conf\"):\n                with open(os.path.join(loc, file), \"r\") as f:\n                    if f.read().strip() == f\"blacklist {module_name}\":\n                        deny_listed = True\n                        print(f\"- Module {module_name} is deny-listed in {os.path.join(loc, file)}\")\n                        break\n\n    # Check if the module is loaded\n    loaded = subprocess.run([\"lsmod\"], capture_output=True, text=True).stdout\n    if module_name in loaded:\n        print(f\"- Module {module_name} is loaded\")\n        return False  # Fail: Module loaded\n    else:\n        print(f\"- Module {module_name} is not loaded\")\n\n    # Check if the module is loadable\n    loadable = subprocess.run([\"modprobe\", \"-n\", \"-v\", module_name], capture_output=True, text=True).stdout\n    if \"install /bin/false\" in loadable or \"install /bin/true\" in loadable:\n        print(f\"- Module {module_name} is not loadable: {loadable.strip()}\")\n        return True  # Pass: Module not loadable\n    else:\n        print(f\"- Module {module_name} is loadable: {loadable.strip()}\")\n        return False  # Fail: Module loadable\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the hfsplus kernel module\"\"\"\n    module_name = \"hfsplus\"\n    module_type = \"fs\"\n    conf_file_name = f\"{module_name}.conf\"\n    conf_file_path = f\"/etc/modprobe.d/{conf_file_name}\"\n\n    # Check if the module is loaded and unload it\n    if subprocess.run([\"lsmod\"], capture_output=True, text=True).stdout.find(module_name)!= -1:\n        print(f\"- Unloading module {module_name}\")\n        subprocess.run([\"modprobe\", \"-r\", module_name])\n\n    # Create a.conf file to deny-list the module\n    if not os.path.exists(conf_file_path):\n        print(f\"- Deny listing {module_name}\")\n        with open(conf_file_path, \"w\") as f:\n            f.write(f\"blacklist {module_name}\")\n\n    # Create a.conf file to make the module not loadable (if not already)\n    loadable = subprocess.run([\"modprobe\", \"-n\", \"-v\", module_name], capture_output=True, text=True).stdout\n    if \"install /bin/false\" not in loadable and \"install /bin/true\" not in loadable:\n        print(f\"- Setting module {module_name} to be not loadable\")\n        with open(conf_file_path, \"a\") as f:\n            f.write(f\"\\ninstall {module_name} /bin/false\")\n"
  },
  {
    "name": "Ensure jffs2 kernel module is not available",
    "id": "1.1.1.5",
    "type": "Automated",
    "start_page": 42,
    "end_page": 46,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The jffs2 (journaling flash filesystem 2) filesystem type is a log-structured filesystem used in flash memory devices.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the jffs2 module is disabled: -IF- the module is available in the running kernel:\n\n#### \u2022 An entry including /bin/true or /bin/false exists in a file within the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n \u2022 The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n\n#### \u2022 No additional configuration is necessary\n\n Page 41\n\n```\n\n-----\n\n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf\n/etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"${l_mname}\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"${l_mname}\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"\n   $(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n\n#### Page 42\n\n```\n\n-----\n\n### Remediation:\n\n Run the following script to disable the jffs2 module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install jffs2 /bin/false in the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/\n### directory\n\n#### \u2022 Unload jffs2 from the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/\n### directory\n\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n\n#### \u2022 No remediation is necessary\n\n Page 43\n\n```\n\n-----\n\n```\n#!/usr/bin/env bash\n{\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\n\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname.conf\"\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname.conf\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}\n\n### References:\n\n 1. NIST SP 800-53 Rev. 5: CM-7\n\n#### Page 44\n\n```\n\n-----\n\n### CIS Controls:\n\n Controls\n Control IG 1 IG 2 IG 3 Version\n\n 4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software\n v8 Uninstall or disable unnecessary services on enterprise assets and software, \u25cf \u25cf\n\n##### such as an unused file sharing service, web application module, or service function.\n\n### 9.2 Ensure Only Approved Ports, Protocols and Services\n v7 Are Running \u25cf \u25cf\n\n##### Ensure that only network ports, protocols, and services listening on a system\n with validated business needs, are running on each system.\n\n### MITRE ATT&CK Mappings:\n\n Techniques / Sub Tactics Mitigations techniques\n\n T1005, T1005.000 TA0005 M1050\n\n#### Page 45\n\n|Controls Version|Control|IG 1|IG 2|IG 3|\n|---|---|---|---|---|\n|v8|4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software Uninstall or disable unnecessary services on enterprise assets and software, such as an unused file sharing service, web application module, or service function.||\u25cf|\u25cf|\n|v7|9.2 Ensure Only Approved Ports, Protocols and Services Are Running Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.||\u25cf|\u25cf|\n\n|MITRE ATT&CK Mappings:|Col2|Col3|\n|---|---|---|\n|Techniques / Sub- techniques|Tactics|Mitigations|\n|T1005, T1005.000|TA0005|M1050|",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf\n/etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n\n#### Page 42\n",
    "remediation_details": "Run the following script to disable the jffs2 module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install jffs2 /bin/false in the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/\n### directory\n\n#### \u2022 Unload jffs2 from the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/\n### directory\n\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n\n#### \u2022 No remediation is necessary\n\n Page 43\n\n```\n\n-----\n\n```\n#!/usr/bin/env bash\n{\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\n\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname.conf\"\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname.conf\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}\n\n### References:\n\n 1. NIST SP 800-53 Rev. 5: CM-7\n\n#### Page 44\n\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\n\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname.conf\"\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname.conf\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport subprocess\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the jffs2 kernel module is available and not disabled.\n\n    Returns:\n        bool: True if the module is available and not disabled, False otherwise.\n    \"\"\"\n    module_name = \"jffs2\"\n    module_type = \"fs\"\n\n    # Check if module exists in any kernel version\n    kernel_paths = Path(\"/lib/modules\").glob(f\"*/kernel/{module_type}/{module_name}\")\n    if not any(kernel_paths):\n        print(f\"- Module '{module_name}' doesn't exist in any kernel version.\")\n        return False\n\n    # Check if module is deny-listed\n    modprobe_conf_dir = Path(\"/etc/modprobe.d\")\n    deny_listed = any((conf_file.read_text().find(f\"blacklist {module_name}\")!= -1)\n                      for conf_file in modprobe_conf_dir.glob(\"*.conf\"))\n    if deny_listed:\n        print(f\"- Module '{module_name}' is deny-listed.\")\n        return False\n\n    # Check if module is currently loaded\n    if subprocess.run([\"lsmod\"], stdout=subprocess.PIPE).stdout.decode().find(module_name)!= -1:\n        print(f\"- Module '{module_name}' is currently loaded.\")\n        return True\n\n    # Check if module is loadable (not explicitly set to false)\n    modprobe_output = subprocess.run([\"modprobe\", \"-n\", \"-v\", module_name], stdout=subprocess.PIPE).stdout.decode()\n    if \"install /bin/false\" in modprobe_output:\n        print(f\"- Module '{module_name}' is not loadable.\")\n        return False\n\n    print(f\"- Module '{module_name}' is loadable and not deny-listed.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the jffs2 kernel module vulnerability by deny-listing it and unloading if loaded.\n    \"\"\"\n    module_name = \"jffs2\"\n    module_type = \"fs\"\n    conf_file_name = f\"{module_name}.conf\"\n    conf_file_path = Path(f\"/etc/modprobe.d/{conf_file_name}\")\n\n    # Deny-list the module\n    if not conf_file_path.exists():\n        with conf_file_path.open(\"w\") as conf_file:\n            conf_file.write(f\"blacklist {module_name}\\n\")\n        print(f\"- Created '{conf_file_name}' with 'blacklist {module_name}' in /etc/modprobe.d/\")\n    elif conf_file_path.read_text().find(f\"blacklist {module_name}\") == -1:\n        with conf_file_path.open(\"a\") as conf_file:\n            conf_file.write(f\"blacklist {module_name}\\n\")\n        print(f\"- Appended 'blacklist {module_name}' to '{conf_file_name}' in /etc/modprobe.d/\")\n\n    # Set module to not loadable (if not already)\n    modprobe_output = subprocess.run([\"modprobe\", \"-n\", \"-v\", module_name], stdout=subprocess.PIPE).stdout.decode()\n    if \"install /bin/false\" not in modprobe_output:\n        with conf_file_path.open(\"a\") as conf_file:\n            conf_file.write(f\"install {module_name} /bin/false\\n\")\n        print(f\"- Set '{module_name}' to not loadable.\")\n\n    # Unload the module if it's currently loaded\n    if subprocess.run([\"lsmod\"], stdout=subprocess.PIPE).stdout.decode().find(module_name)!= -1:\n        subprocess.run([\"modprobe\", \"-r\", module_name])\n        print(f\"- Unloaded module '{module_name}'.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"- Audit Result: **FAIL**\")\n        remediate_vuln()\n    else:\n        print(\"- Audit Result: **PASS**\")\n"
  },
  {
    "name": "Ensure /tmp is a separate partition",
    "id": "1.1.2.1.1",
    "type": "Automated",
    "start_page": 64,
    "end_page": 67,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /tmp directory is a world-writable directory used for temporary storage by all users and some applications. - IF - an entry for /tmp exists in /etc/fstab it will take precedence over entries in systemd default unit file. Note: In an environment where the main system is diskless and connected to iSCSI, entries in /etc/fstab may not take precedence. /tmp can be configured to use tmpfs. tmpfs puts everything into the kernel internal caches and grows and shrinks to accommodate the files it contains and is able to swap unneeded pages out to swap space. It has maximum size limits which can be adjusted on the fly via mount -o remount. Since tmpfs lives completely in the page cache and on swap, all tmpfs pages will be shown as \"Shmem\" in /proc/meminfo and \"Shared\" in free. Notice that these counters also include shared memory. The most reliable way to get the count is using df and du. tmpfs has three mount options for sizing: - `size: The limit of allocated bytes for this tmpfs instance. The default is half of your physical RAM without swap. If you oversize your tmpfs instances the machine will deadlock since the OOM handler will not be able to free that memory. - `nr_blocks: The same as size, but in blocks of PAGE_SIZE. - `nr_inodes: The maximum number of inodes for this instance. The default is half of the number of your physical RAM pages, or (on a machine with highmem) the number of lowmem RAM pages, whichever is the lower. These parameters accept a suffix k, m or g and can be changed on remount. The size parameter also accepts a suffix % to limit this tmpfs instance to that percentage of your physical RAM. The default, when neither size nor nr_blocks is specified, is size=50%.",
    "rationale": "Making /tmp its own file system allows an administrator to set additional mount options such as the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system setuid program and wait for it to be updated. Once the program was updated, the hard link would be broken, and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw. This can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp.",
    "audit_details": "Run the following command and verify the output shows that /tmp is mounted. Particular requirements pertaining to mount options are covered in ensuing sections.\n\n# findmnt -kn /tmp\n\nExample output:\n/tmp  tmpfs tmpfs rw,nosuid,nodev,noexec\n\nEnsure that systemd will mount the /tmp partition at boot time.\n\n# systemctl is-enabled tmp.mount\n\nExample output:\ngenerated\n\nVerify output is not masked or disabled. Note: By default, systemd will output generated if there is an entry in /etc/fstab for /tmp. This just means systemd will use the entry in /etc/fstab instead of its default unit file configuration for /tmp.",
    "audit_code": "# findmnt -kn /tmp\n\n# systemctl is-enabled tmp.mount",
    "remediation_details": "First ensure that systemd is correctly configured to ensure that /tmp will be mounted at boot time.\n\n# systemctl unmask tmp.mount\n\nFor specific configuration requirements of the /tmp mount for your environment, modify /etc/fstab.\nExample of using tmpfs with specific mount options:\ntmpfs /tmp tmpfs   defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\nNote: the size=2G is an example of setting a specific size for tmpfs. Example of using a volume or disk with specific mount options. The source location of the volume or disk will vary depending on your environment:\n<device> /tmp  <fstype>  defaults,nodev,nosuid,noexec  0 0",
    "remediation_code": "# systemctl unmask tmp.mount\n\ntmpfs /tmp tmpfs   defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n<device> /tmp  <fstype>  defaults,nodev,nosuid,noexec  0 0",
    "python_script": "\nimport os\nimport subprocess\nimport re\n\n# Constants\nTMP_MOUNT_OPTIONS = [\"rw\", \"nosuid\", \"nodev\", \"noexec\", \"relatime\"]\nTMP_FSTAB_ENTRY_TMPFS = f\"tmpfs /tmp tmpfs defaults,{','.join(TMP_MOUNT_OPTIONS)},size=2G 0 0\"\nTMP_SYSTEMD_SERVICE = \"tmp.mount\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if /tmp is a separate partition with correct mount options\"\"\"\n    # Check if /tmp is mounted with correct options\n    mount_output = subprocess.check_output([\"findmnt\", \"-kn\", \"/tmp\"]).decode(\"utf-8\")\n    mount_options = re.findall(r\"rw|nosuid|nodev|noexec|relatime\", mount_output)\n    if set(TMP_MOUNT_OPTIONS).issubset(set(mount_options)):\n        print(f\"/tmp mounted with required options: {', '.join(mount_options)}\")\n    else:\n        print(f\"/tmp missing required mount options: {', '.join(set(TMP_MOUNT_OPTIONS) - set(mount_options))}\")\n        return False\n\n    # Check if systemd will mount /tmp at boot time\n    systemctl_output = subprocess.check_output([\"systemctl\", \"is-enabled\", TMP_SYSTEMD_SERVICE]).decode(\"utf-8\").strip()\n    if systemctl_output in [\"enabled\", \"generated\"]:\n        print(f\"Systemd will mount {TMP_SYSTEMD_SERVICE} at boot time (Status: {systemctl_output})\")\n    else:\n        print(f\"Systemd will NOT mount {TMP_SYSTEMD_SERVICE} at boot time (Status: {systemctl_output})\")\n        return False\n\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate if /tmp is not a separate partition with correct mount options\"\"\"\n    # Unmask tmp.mount if necessary\n    if os.path.exists(f\"/etc/systemd/system/{TMP_SYSTEMD_SERVICE}.mask\"):\n        subprocess.run([\"systemctl\", \"unmask\", TMP_SYSTEMD_SERVICE])\n        print(f\"Unmasked {TMP_SYSTEMD_SERVICE}\")\n\n    # Configure /etc/fstab for /tmp with specific mount options (using tmpfs as example)\n    with open(\"/etc/fstab\", \"a+\") as fstab_file:\n        if TMP_FSTAB_ENTRY_TMPFS not in fstab_file.read():\n            fstab_file.write(TMP_FSTAB_ENTRY_TMPFS + \"\\n\")\n            print(f\"Added '{TMP_FSTAB_ENTRY_TMPFS}' to /etc/fstab\")\n\n    # Inform about dedicating a volume/disk for /tmp (manual step)\n    print(\"WARNING: If desiring a dedicated volume/disk for /tmp, manually update /etc/fstab with the appropriate device and fstype.\")\n"
  },
  {
    "name": "Ensure nodev option set on /tmp partition",
    "id": "1.1.2.1.2",
    "type": "Automated",
    "start_page": 68,
    "end_page": 69,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /tmp filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /tmp.",
    "audit_details": "**- IF - a separate partition exists for /tmp, verify that the nodev option is set.** Run the following command to verify that the nodev mount option is set. _Example:_ \n```\n# findmnt -kn /tmp | grep -v nodev\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /tmp | grep -v nodev\nNothing should be returned",
    "remediation_details": "**- IF - a separate partition exists for /tmp.** Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /tmp partition. _Example:_ \n```\n<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /tmp with the configured options:\n```\n# mount -o remount /tmp\n```",
    "remediation_code": "<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n\n# mount -o remount /tmp\n",
    "python_script": ""
  },
  {
    "name": "Ensure nosuid option set on /tmp partition",
    "id": "1.1.2.1.3",
    "type": "Automated",
    "start_page": 70,
    "end_page": 71,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /tmp.",
    "audit_details": "IF - a separate partition exists for /tmp, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. Example:\n\n```\n# findmnt -kn /tmp | grep -v nosuid\nNothing should be returned\n```",
    "audit_code": "",
    "remediation_details": "IF - a separate partition exists for /tmp. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /tmp partition.\n\nExample:\n\n```\n<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount /tmp with the configured options:\n\n```\n# mount -o remount /tmp\n```",
    "remediation_code": "",
    "python_script": "\nimport psutil\nimport subprocess\nimport tempfile\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /tmp partition\"\"\"\n    # Get the mount point for /tmp\n    tmp_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/tmp'), None)\n    \n    if tmp_mount is None:\n        print(\"No separate partition found for /tmp.\")\n        return False  # or raise an exception, depending on your preference\n    \n    # Check if nosuid option is set\n    nosuid_set = 'nosuid' in tmp_mount.opts.split(',')\n    \n    if not nosuid_set:\n        print(\"nosuid option is not set for /tmp partition.\")\n    \n    return nosuid_set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting nosuid option on /tmp partition\"\"\"\n    # Edit /etc/fstab to add nosuid option\n    fstab_path = '/etc/fstab'\n    with open(fstab_path, 'r+') as file:\n        lines = file.readlines()\n        file.seek(0)\n        tmp_entry_found = False\n        \n        for line in lines:\n            if line.startswith('/tmp'):\n                # Add nosuid if not already present\n                opts = line.split()[3].split(',')\n                if 'nosuid' not in opts:\n                    opts.append('nosuid')\n                    line = f\"{' '.join(line.split()[:3])} {','.join(opts)} {line.split()[4]}\\\n                            \\n\"\n                tmp_entry_found = True\n            file.write(line)\n        \n        # If no /tmp entry exists (though this is unlikely), add a basic one\n        if not tmp_entry_found:\n            print(\"Warning: /tmp fstab entry not found. Creating a basic one.\")\n            file.write(\"/tmp /tmp tmpfs defaults,nosuid,nodev,noexec,relatime 0 0\\n\")\n    \n    # Remount /tmp with updated options\n    subprocess.run(['mount', '-o', 'remount', '/tmp'])\n    print(\"Added nosuid option to /tmp partition and remounted.\")\n"
  },
  {
    "name": "Ensure noexec option set on /tmp partition",
    "id": "1.1.2.1.4",
    "type": "Automated",
    "start_page": 72,
    "end_page": 73,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /tmp.",
    "audit_details": "IF - a separate partition exists for /tmp, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example:\n```\n# findmnt -kn /tmp | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /tmp | grep -v noexec\nNothing should be returned",
    "remediation_details": "IF - a separate partition exists for /tmp. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /tmp partition. Example:\n```\n<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n``` Run the following command to remount /tmp with the configured options:\n```\n# mount -o remount /tmp\n```",
    "remediation_code": "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /tmp partition. Example:\n```\n<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n``` Run the following command to remount /tmp:\n```\n# mount -o remount /tmp\n```",
    "python_script": "\nimport subprocess\nimport psutil\nimport fileinput\nimport tempfile\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /tmp partition.\"\"\"\n    # Check if /tmp is a separate partition\n    tmp_partition = next((p for p in psutil.disk_partitions() if p.mountpoint == '/tmp'), None)\n    if not tmp_partition:\n        print(\"/tmp is not a separate partition.\")\n        return False  # Not applicable, but not vulnerable in this context\n\n    # Verify noexec option is set\n    options = tmp_partition.opts.split(',')\n    if 'noexec' in options:\n        return True\n    else:\n        print(\"noexec option not found for /tmp partition.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding noexec option to /tmp partition in /etc/fstab and remount.\"\"\"\n    # Identify the line in /etc/fstab for /tmp\n    fstab_path = '/etc/fstab'\n    tmp_line = None\n    with open(fstab_path, 'r') as fstab_file:\n        for line in fstab_file:\n            if line.startswith(('/dev/', 'UUID=', 'LABEL=')) and '/tmp' in line:\n                tmp_line = line.strip()\n                break\n\n    if not tmp_line:\n        print(\"Could not find /tmp entry in /etc/fstab.\")\n        return\n\n    # Edit /etc/fstab to add noexec if not present\n    options_start = tmp_line.find('\\t', tmp_line.find('/tmp')) + 1\n    options_end = tmp_line.find('\\t', options_start)\n    options = tmp_line[options_start:options_end].split(',')\n    if 'noexec' not in options:\n        options.append('noexec')\n        new_line = f\"{tmp_line[:options_start]}{',.join(options)}{tmp_line[options_end:]}\\n\"\n        \n        # Use tempfile to safely edit /etc/fstab\n        with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_fstab:\n            with open(fstab_path, 'r') as orig_fstab:\n                for orig_line in orig_fstab:\n                    if orig_line.strip() == tmp_line:\n                        tmp_fstab.write(new_line)\n                    else:\n                        tmp_fstab.write(orig_line)\n            tmp_fstab_path = tmp_fstab.name\n        \n        # Replace original with edited version, handling permissions\n        try:\n            os.replace(tmp_fstab_path, fstab_path)\n            print(\"Added noexec to /tmp options in /etc/fstab.\")\n        except PermissionError:\n            print(\"Failed to update /etc/fstab due to permissions issue.\")\n        finally:\n            if os.path.exists(tmp_fstab_path):\n                os.remove(tmp_fstab_path)\n\n    # Remount /tmp\n    try:\n        subprocess.check_call(['mount', '-o', 'remount', '/tmp'])\n        print(\"Remounted /tmp with updated options.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to remount /tmp: {e}\")\n"
  },
  {
    "name": "Ensure /dev/shm is a separate partition",
    "id": "1.1.2.2.1",
    "type": "Automated",
    "start_page": 75,
    "end_page": 76,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /dev/shm directory is a world-writable directory that can function as shared memory that facilitates inter process communication (IPC).",
    "rationale": "Making /dev/shm its own file system allows an administrator to set additional mount options such as the noexec option on the mount, making /dev/shm useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system setuid program and wait for it to be updated. Once the program was updated, the hard link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.\n\nThis can be accomplished by mounting tmpfs to /dev/shm.",
    "audit_details": "**-IF-** `/dev/shm is to be used on the system, run the following command and verify the` output shows that /dev/shm is mounted. Particular requirements pertaining to mount options are covered in ensuing sections.\n\n```\n# findmnt -kn /dev/shm\n```\n\n_Example output:_\n```\n/dev/shm  tmpfs tmpfs rw,nosuid,nodev,noexec,relatime,seclabel\n```\n\nPage 74",
    "audit_code": "# findmnt -kn /dev/shm",
    "remediation_details": "For specific configuration requirements of the /dev/shm mount for your environment, modify /etc/fstab.\n_Example:_\n```\ntmpfs /dev/shm tmpfs  \ndefaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n```\n",
    "remediation_code": "tmpfs /dev/shm tmpfs  \ndefaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0",
    "python_script": "```python\nimport psutil\nimport tempfile\n\n# Define the required mount options for /dev/shm\nREQUIRED_MOUNT_OPTIONS = ['rw', 'nosuid', 'nodev', 'noexec', 'relatime']\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if /dev/shm is a separate partition with required mount options\"\"\"\n    # Get the mount points for /dev/shm\n    shm_mounts = [mount for mount in psutil.disk_partitions() if mount.mountpoint == '/dev/shm']\n    \n    # If no mount point is found, or if the mount options don't match the required ones, return False\n    if not shm_mounts or not all(option in shm_mounts[0].opts for option in REQUIRED_MOUNT_OPTIONS):\n        return False\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by modifying /etc/fstab for /dev/shm\"\"\"\n    fstab_path = '/etc/fstab'\n    tmp_fstab_path = tempfile.mkstemp()[1]\n    \n    # Read the original /etc/fstab content\n    with open(fstab_path, 'r') as orig_fstab, open(tmp_fstab_path, 'w') as new_fstab:\n        # Write the required /dev/shm mount config, preserving other existing configs\n        new_fstab.write('tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\\n')\n        for line in orig_fstab:\n            if not line.strip().startswith('tmpfs /dev/shm'):\n                new_fstab.write(line)\n    \n    # Replace the original /etc/fstab with the updated one, preserving permissions\n    import shutil\n    import stat\n    orig_perms = stat.S_IMODE(os.lstat(fstab_path).st_mode)\n    shutil.move(tmp_fstab_path, fstab_path)\n    os.chmod(fstab_path, orig_perms)\n    \n    print(f\"Modified `/etc/fstab` to include required mount options for `/dev/shm`.\")\n    print(\"Please reboot the system for the changes to take effect.\")\n```\n**Note:** \n\n* The `audit_vuln` function checks for the presence of required mount options but does not verify the `size` parameter, as it might vary depending on the environment. Adjust the `REQUIRED_MOUNT_OPTIONS` list if you want to include additional checks.\n* The `remediate_vuln` function creates a temporary file to update `/etc/fstab` while preserving the original file's permissions. A system reboot is required for the changes to take effect.\n* Ensure you run this script with sufficient privileges (e.g., using `sudo`) to modify `/etc/fstab`.\n* Import the missing `os` module by adding `import os` at the top of the script, alongside the other imports."
  },
  {
    "name": "Ensure nodev option set on /dev/shm partition",
    "id": "1.1.2.2.2",
    "type": "Automated",
    "start_page": 77,
    "end_page": 78,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /dev/shm filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create special devices in /dev/shm partitions.",
    "audit_details": "IF - a separate partition exists for /dev/shm, verify that the nodev option is set. \n```\n# findmnt -kn /dev/shm | grep -v 'nodev'\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /dev/shm | grep -v 'nodev'",
    "remediation_details": "IF - a separate partition exists for /dev/shm. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the \n```\n/dev/shm partition. See the fstab(5) manual page for more information.\n```\n_Example:_\n```\ntmpfs /dev/shm  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /dev/shm with the configured options:\n```\n# mount -o remount /dev/shm\n```",
    "remediation_code": "# mount -o remount /dev/shm",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the nodev option is set on /dev/shm partition.\n    \n    Returns:\n    bool: True if no separate partition or nodev is set, False otherwise.\n    \"\"\"\n    # Find if /dev/shm has a separate partition and check for nodev option\n    try:\n        output = subprocess.check_output([\"findmnt\", \"-kn\", \"/dev/shm\"]).decode('utf-8')\n        if \"nodev\" not in output:\n            # Either no separate partition or nodev not set\n            if \"/dev/shm\" not in output:\n                return True  # No separate partition\n            else:\n                return False  # Separate partition but nodev not set\n        else:\n            return True  # nodev is set\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing vulnerability: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding nodev to /dev/shm's mounting options in /etc/fstab if necessary.\n    \"\"\"\n    # Check if /dev/shm has a separate partition\n    try:\n        output = subprocess.check_output([\"findmnt\", \"-kn\", \"/dev/shm\"]).decode('utf-8')\n        if \"/dev/shm\" in output:\n            # Edit /etc/fstab to add nodev if not present\n            with open(\"/etc/fstab\", 'r+') as fstab_file:\n                lines = fstab_file.readlines()\n                fstab_file.seek(0)\n                nodev_added = False\n                for line in lines:\n                    if \"/dev/shm\" in line and \"nodev\" not in line:\n                        # Add nodev to the options\n                        options_start = line.find(\"defaults\") if line.find(\"defaults\")!= -1 else line.find(\"tmpfs\")\n                        if options_start!= -1:\n                            line_parts = line.split()\n                            options = line_parts[3]\n                            if \",\" in options:\n                                options += \",nodev\"\n                            else:\n                                options += \",nodev\" if options else \"nodev\"\n                            line_parts[3] = options\n                            line = \" \".join(line_parts)\n                            print(f\"Added nodev to /dev/shm's mounting options in /etc/fstab: {line.strip()}\")\n                            nodev_added = True\n                    fstab_file.write(line)\n                if nodev_added:\n                    fstab_file.truncate()\n            # Remount /dev/shm\n            subprocess.run([\"mount\", \"-o\", \"remount\", \"/dev/shm\"])\n            print(\"Remounted /dev/shm with the new configuration.\")\n        else:\n            print(\"/dev/shm does not have a separate partition, no remediation needed.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error remediating vulnerability: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found regarding nodev on /dev/shm.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /dev/shm partition",
    "id": "1.1.2.2.3",
    "type": "Automated",
    "start_page": 79,
    "end_page": 80,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Setting this option on a file system prevents users from introducing privileged programs onto the system and allowing non-root users to execute them.",
    "audit_details": "IF a separate partition exists for /dev/shm, verify that the nosuid option is set.\n```\n# findmnt -kn /dev/shm | grep -v 'nosuid'\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /dev/shm | grep -v 'nosuid'\nNothing should be returned\n",
    "remediation_details": "IF a separate partition exists for /dev/shm.\nEdit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information.\n\nExample:\n```\ntmpfs /dev/shm  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /dev/shm with the configured options:\n```\n# mount -o remount /dev/shm\n```\nNote: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications.",
    "remediation_code": "# mount -o remount /dev/shm\n",
    "python_script": "\nimport subprocess\nimport pathlib\nfrom typing import Optional\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the 'nosuid' option is set on the /dev/shm partition.\n\n    Returns:\n        bool: True if 'nosuid' is set, False otherwise.\n    \"\"\"\n    # Check if a separate /dev/shm partition exists\n    if not pathlib.Path('/dev/shm').is_mount():\n        print(\"/dev/shm is not a separate partition. Skipping audit.\")\n        return True  # Not applicable, thus not vulnerable in this context\n\n    try:\n        # Run the findmnt command and capture its output\n        output = subprocess.check_output(['findmnt', '-kn', '/dev/shm']).decode('utf-8')\n        \n        # Check if 'nosuid' is absent in the output, indicating it's set\n        if 'nosuid' not in output:\n            return True  # 'nosuid' is set\n        else:\n            print(\"/dev/shm partition does not have the 'nosuid' option set.\")\n            return False\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing /dev/shm: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding 'nosuid' to /dev/shm's mount options in /etc/fstab and remounting.\n    \"\"\"\n    # Check if a separate /dev/shm partition exists\n    if not pathlib.Path('/dev/shm').is_mount():\n        print(\"/dev/shm is not a separate partition. No remediation needed.\")\n        return\n\n    fstab_path = pathlib.Path('/etc/fstab')\n    \n    try:\n        # Read the fstab file\n        with fstab_path.open('r+') as file:\n            lines = file.readlines()\n            # Find the line for /dev/shm and modify it if necessary\n            for i, line in enumerate(lines):\n                if line.startswith('tmpfs /dev/shm'):\n                    if 'nosuid' in line:\n                        print(\"/dev/shm already has the 'nosuid' option set. No change needed.\")\n                        # Attempt to remount to ensure latest config is applied\n                        subprocess.check_call(['mount', '-o', 'remount', '/dev/shm'])\n                        print(\"Remounted /dev/shm with current options.\")\n                    else:\n                        # Modify the line to include 'nosuid'\n                        lines[i] = line.strip() + ',nosuid\\n'\n                        print(\"Added 'nosuid' to /dev/shm's mount options in /etc/fstab.\")\n                        # Write the changes back\n                        file.seek(0)\n                        file.writelines(lines)\n                        file.truncate()\n                        # Remount /dev/shm\n                        subprocess.check_call(['mount', '-o', 'remount', '/dev/shm'])\n                        print(\"Remounted /dev/shm with updated options.\")\n                    break\n            else:\n                print(\"No entry for /dev/shm found in /etc/fstab. Cannot remediate.\")\n    except Exception as e:\n        print(f\"Error remediating /dev/shm: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure noexec option set on /dev/shm partition",
    "id": "1.1.2.2.4",
    "type": "Automated",
    "start_page": 81,
    "end_page": 82,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Setting this option on a file system prevents users from executing programs from shared memory. This deters users from introducing potentially malicious software on the system.",
    "audit_details": "**- IF - a separate partition exists for /dev/shm, verify that the noexec option is set.**\n```\n# findmnt -kn /dev/shm | grep -v 'noexec'\nNothing should be returned\n``",
    "audit_code": "# findmnt -kn /dev/shm | grep -v 'noexec'",
    "remediation_details": "**- IF - a separate partition exists for /dev/shm.**\nEdit the /etc/fstab file and add noexec to the fourth field (mounting options) for the `/dev/shm partition.\n\n```\ntmpfs /dev/shm  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount /dev/shm with the configured options:\n```\n# mount -o remount /dev/shm\n```\n\n**Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications.**",
    "remediation_code": "# mount -o remount /dev/shm",
    "python_script": "\nimport subprocess\nimport fileinput\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the noexec option is set on the /dev/shm partition.\n    \n    Returns:\n    bool: True if noexec is set, False otherwise.\n    \"\"\"\n    # Check if a separate partition exists for /dev/shm and if noexec is set\n    try:\n        output = subprocess.check_output(['findmnt', '-kn', '/dev/shm']).decode('utf-8')\n        return 'noexec' in output\n    except subprocess.CalledProcessError:\n        # If the command fails, assume no separate partition or option set\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the noexec option on /dev/shm in /etc/fstab and remounting.\n    \"\"\"\n    # Check if fstab already contains the noexec option for /dev/shm to avoid duplicates\n    with open('/etc/fstab', 'r+') as file:\n        content = file.read()\n        if 'tmpfs /dev/shm' in content and 'noexec' in content:\n            print(\"Noexec option for /dev/shm already set in /etc/fstab.\")\n            # Remount if already set but focus on adding if not present\n            subprocess.run(['mount', '-o', 'remount', '/dev/shm'])\n            return\n\n    # Edit /etc/fstab to add noexec for /dev/shm\n    print(\"Adding noexec option for /dev/shm to /etc/fstab...\")\n    for line in fileinput.input('/etc/fstab', inplace=True):\n        if 'tmpfs /dev/shm' in line:\n            # Append noexec if the line already exists but lacks noexec\n            if 'noexec' not in line:\n                line = re.sub(r'(defaults,?)', r'\\1noexec,', line)\n            print(line, end='')\n        else:\n            print(line, end='')\n    # If no tmpfs /dev/shm line exists, add one (assuming other defaults are acceptable)\n    if 'tmpfs /dev/shm' not in content:\n        with open('/etc/fstab', 'a') as file:\n            print(\"Adding new entry for /dev/shm with noexec option to /etc/fstab...\")\n            file.write('tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0\\n')\n\n    # Remount /dev/shm with the updated options\n    print(\"Remounting /dev/shm with updated options...\")\n    subprocess.run(['mount', '-o', 'remount', '/dev/shm'])\n\n# Example usage\nif __name__ == \"__main__\":\n    print(\"Audit Result:\", audit_vuln())\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure nodev option set on /home partition",
    "id": "1.1.2.3.2",
    "type": "Automated",
    "start_page": 86,
    "end_page": 87,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /home filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /home.",
    "audit_details": "**- IF - a separate partition exists for /home, verify that the nodev option is set.** Run the following command to verify that the nodev mount option is set. _Example:_\n```\n# findmnt -kn /home | grep -v nodev\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /home | grep -v nodev\nNothing should be returned",
    "remediation_details": "**- IF - a separate partition exists for /home.** Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the `/home partition.`\n_Example:_\n```\n<device> /home  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /home with the configured options:\n```\n# mount -o remount /home\n```\n",
    "remediation_code": "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the `/home` partition and then run `# mount -o remount /home`.",
    "python_script": "\nimport psutil\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the vulnerability: Ensure nodev option set on /home partition\"\"\"\n    # Check if a separate partition exists for /home and if nodev option is set\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/home':\n            if 'nodev' not in partition.opts:\n                return True  # Vulnerability present\n    return False  # Either no separate partition or nodev option is set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability: Ensure nodev option set on /home partition\"\"\"\n    home_partition_found = False\n    \n    # Backup /etc/fstab before modifying\n    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.backup'])\n    print(\"Backed up /etc/fstab to /etc/fstab.backup\")\n    \n    with open('/etc/fstab', 'r+') as fstab_file:\n        lines = fstab_file.readlines()\n        fstab_file.seek(0)  # Reset file pointer to the beginning\n        for line in lines:\n            if line.startswith('#') or not line.strip():  # Skip comments and empty lines\n                fstab_file.write(line)\n                continue\n            fields = line.split()\n            if len(fields) >= 2 and fields[1] == '/home':\n                home_partition_found = True\n                if 'nodev' not in fields[3]:\n                    fields[3] += ',nodev'  # Add nodev to the options\n                    print(f\"Added nodev option to /home partition in /etc/fstab\")\n                fstab_file.write(' '.join(fields) + '\\n')\n            else:\n                fstab_file.write(line)\n        if not home_partition_found:\n            print(\"/home partition not found in /etc/fstab. Cannot remediate.\")\n            return\n        fstab_file.truncate()  # Remove remaining content\n    \n    # Remount /home with the updated options\n    subprocess.run(['mount', '-o', 'remount', '/home'])\n    print(\"Remounted /home partition with updated options\")\n"
  },
  {
    "name": "Ensure nosuid option set on /home partition",
    "id": "1.1.2.3.3",
    "type": "Automated",
    "start_page": 88,
    "end_page": 89,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /home filesystem is only intended for user file storage, set this option to ensure that users cannot create setuid files in /home.",
    "audit_details": "IF - a separate partition exists for /home, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /home | grep -v nosuid Nothing should be returned",
    "audit_code": "# findmnt -kn /home | grep -v nosuid \nNothing should be returned\n",
    "remediation_details": "IF - a separate partition exists for /home. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /home partition. Example: <device> /home  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0 Run the following command to remount /home with the configured options: # mount -o remount /home",
    "remediation_code": "<device> /home  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /home\n",
    "python_script": "\nimport psutil\nimport pathlib\nimport fileinput\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /home partition.\"\"\"\n    # Find the /home partition\n    home_partition = None\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/home':\n            home_partition = partition\n            break\n    \n    if home_partition is None:\n        print(\"No separate partition found for /home.\")\n        return True  # Assumption: No partition implies compliance in this context\n    \n    # Check if nosuid is in the mount options\n    return 'nosuid' not in home_partition.opts\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring nosuid option is set on /home partition.\"\"\"\n    # Path to fstab\n    fstab_path = pathlib.Path('/etc/fstab')\n    \n    # Backup fstab before editing (good practice)\n    fstab_backup = fstab_path.with_suffix('.fstab.bak')\n    subprocess.run(['cp', fstab_path, fstab_backup])\n    print(f\"Created backup of {fstab_path} at {fstab_backup}\")\n    \n    # Edit fstab to add nosuid if necessary\n    with fileinput.input(files=(fstab_path,), inplace=True) as file:\n        for line in file:\n            if line.startswith(('/dev/', '/home')):  # Simplified match, might need adjustment based on actual fstab content\n                opts_start = line.find('\\t', line.find('/home') + 5) + 1  # Find start of options\n                if 'nosuid' not in line:\n                    line_list = list(line)\n                    line_list.insert(opts_start, 'nosuid,')\n                    line = ''.join(line_list)\n                    print(f\"Added 'nosuid' to /home options in {fstab_path}\")\n            print(line, end='')\n    \n    # Remount /home with the updated options\n    subprocess.run(['mount', '-o', 'remount', '/home'])\n    print(\"Remounted /home with updated options.\")\n"
  },
  {
    "name": "Ensure nodev option set on /var partition",
    "id": "1.1.2.4.2",
    "type": "Automated",
    "start_page": 94,
    "end_page": 95,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var.",
    "audit_details": "**- IF - a separate partition exists for /var, verify that the nodev option is set.** Run the following command to verify that the nodev mount option is set. _Example:_\n```\n# findmnt -kn /var | grep -v nodev\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /var | grep -v nodev\nNothing should be returned",
    "remediation_details": "**- IF - a separate partition exists for /var.** Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var partition. _Example:_\n```\n<device> /var  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var with the configured options:\n```\n# mount -o remount /var\n```\n",
    "remediation_code": "Edit the /etc/fstab file to include 'nodev' in the mount options for /var and run:\n# mount -o remount /var",
    "python_script": "\nimport psutil\nimport fileinput\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if /var partition has nodev option set.\"\"\"\n    # Find mount point for /var\n    var_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/var'), None)\n    \n    if var_mount is None:\n        print(\"No separate partition found for /var.\")\n        return True  # Vulnerability present (no separate partition)\n    \n    # Check if nodev option is set\n    if 'nodev' not in var_mount.opts:\n        print(\"nodev option not found for /var partition.\")\n        return True  # Vulnerability present (nodev option missing)\n    \n    print(\"nodev option is set for /var partition.\")\n    return False  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nodev option to /var partition's mount options in /etc/fstab and remount.\"\"\"\n    var_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/var'), None)\n    \n    if var_mount is None:\n        print(\"No separate partition found for /var. Cannot remediate.\")\n        return\n    \n    # Modify /etc/fstab to include nodev option\n    fstab_path = pathlib.Path('/etc/fstab')\n    fstab_lines = fstab_path.read_text().splitlines()\n    modified = False\n    \n    for i, line in enumerate(fstab_lines):\n        if line.startswith(var_mount.device):\n            options = line.split()[3].split(',')\n            if 'nodev' not in options:\n                options.append('nodev')\n                line = '\\t'.join([line.split('\\t')[0], line.split('\\t')[1], line.split('\\t')[2], ','.join(options), *line.split('\\t')[4:]])\n                fstab_lines[i] = line\n                modified = True\n                break\n    \n    if modified:\n        fstab_path.write_text('\\n'.join(fstab_lines))\n        print(\"Added nodev option to /var partition's mount options in /etc/fstab.\")\n    else:\n        print(\"nodev option already present in /etc/fstab for /var.\")\n    \n    # Remount /var with updated options\n    subprocess.run(['mount', '-o', 'remount', '/var'])\n    print(\"Remounted /var partition with updated options.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure nosuid option set on /var partition",
    "id": "1.1.2.4.3",
    "type": "Automated",
    "start_page": 96,
    "end_page": 97,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create setuid files in /var.",
    "audit_details": "**- IF - a separate partition exists for /var, verify that the nosuid option is set.**\nRun the following command to verify that the nosuid mount option is set.\n_Example:_\n```\n# findmnt -kn /var | grep -v nosuid\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /var | grep -v nosuid\n",
    "remediation_details": "**- IF - a separate partition exists for /var.**\nEdit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var partition.\n_Example:_\n```\n<device> /var  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\n\nRun the following command to remount /var with the configured options:\n```\n# mount -o remount /var\n```\n",
    "remediation_code": "# mount -o remount /var\n",
    "python_script": "\nimport subprocess\nimport tempfile\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var partition\"\"\"\n    # Use findmnt with json output for easier parsing\n    output = subprocess.check_output([\"findmnt\", \"-J\", \"/var\"]).decode()\n    # Parse the JSON output (simplified, assuming a single entry for /var)\n    import json\n    data = json.loads(output)[\"filesystems\"][0]\n    # Check if 'nosuid' is in the mount options\n    return \"nosuid\" not in data[\"fs_options\"]\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting nosuid option on /var partition\"\"\"\n    # Edit /etc/fstab securely using tempfile\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        fstab_tmp_path = os.path.join(tmp_dir, \"fstab\")\n        with open(\"/etc/fstab\", \"r\") as fstab_orig, open(fstab_tmp_path, \"w\") as fstab_tmp:\n            for line in fstab_orig:\n                if line.startswith((\"/var \")):  # Check if line mounts /var\n                    # Add 'nosuid' to the mount options (assuming 'defaults' is present)\n                    opts_idx = line.split().index(\"defaults\") + 1\n                    line_parts = line.split()\n                    if \"nosuid\" not in line_parts[opts_idx]:\n                        line_parts[opts_idx] += \",nosuid\"\n                    line = \" \".join(line_parts) + \"\\n\"\n                    print(f\"Updated /etc/fstab: Added 'nosuid' to /var mount options\")\n                fstab_tmp.write(line)\n        # Replace original /etc/fstab with the updated version\n        os.replace(fstab_tmp_path, \"/etc/fstab\")\n    \n    # Remount /var with the new options\n    subprocess.check_call([\"mount\", \"-o\", \"remount\", \"/var\"])\n    print(\"Remounted /var with updated options\")\n"
  },
  {
    "name": "Ensure nodev option set on /var/tmp partition",
    "id": "1.1.2.5.2",
    "type": "Automated",
    "start_page": 101,
    "end_page": 102,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/tmp filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var/tmp.",
    "audit_details": "- IF - a separate partition exists for /var/tmp, verify that the nodev option is set. Run the following command to verify that the nodev mount option is set. _Example:_\n```\n# findmnt -kn /var/tmp | grep -v nodev\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/tmp | grep -v nodev",
    "remediation_details": "- IF - a separate partition exists for /var/tmp. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/tmp partition.\n\n_Example:_\n```\n<device> /var/tmp <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/tmp with the configured options:\n```\n# mount -o remount /var/tmp\n```",
    "remediation_code": "# mount -o remount /var/tmp",
    "python_script": "\nimport subprocess\nimport re\nimport sys\n\n# Constants\nVAR_TMP_MOUNTPOINT = '/var/tmp'\nFSTAB_FILE = '/etc/fstab'\nNODEV_OPTION = 'nodev'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nodev option is set on /var/tmp partition\"\"\"\n    # Get mount options for /var/tmp using findmnt (no native Python alternative for this)\n    output = subprocess.check_output(['findmnt', '-kn', VAR_TMP_MOUNTPOINT]).decode('utf-8')\n    return NODEV_OPTION in output\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nodev option to /var/tmp fstab entry and remounting\"\"\"\n    # Backup fstab file before editing\n    subprocess.run(['cp', FSTAB_FILE, FSTAB_FILE + '.backup'])\n    print(f\"Created backup of {FSTAB_FILE} as {FSTAB_FILE}.backup\")\n\n    # Read fstab file, modify the /var/tmp entry, and write back\n    with open(FSTAB_FILE, 'r+') as file:\n        lines = file.readlines()\n        file.seek(0)\n        modified = False\n        for line in lines:\n            if VAR_TMP_MOUNTPOINT in line:\n                # Assuming the mount options are in the fourth field\n                fields = line.split()\n                if len(fields) > 3:\n                    options = fields[3].split(',')\n                    if NODEV_OPTION not in options:\n                        options.append(NODEV_OPTION)\n                        fields[3] = ','.join(options)\n                        line = ' '.join(fields)\n                        modified = True\n            file.write(line)\n        if not modified:\n            print(f\"No {VAR_TMP_MOUNTPOINT} entry found in {FSTAB_FILE} to modify. Please verify the mountpoint.\")\n            return\n        file.truncate()\n\n    # Remount /var/tmp with new options\n    subprocess.run(['mount', '-o', 'remount', VAR_TMP_MOUNTPOINT])\n    print(f\"Added {NODEV_OPTION} to {VAR_TMP_MOUNTPOINT} options in {FSTAB_FILE} and remounted.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        sys.exit(0)  # Audit passed, exit cleanly\n"
  },
  {
    "name": "Ensure nosuid option set on /var/tmp partition",
    "id": "1.1.2.5.3",
    "type": "Automated",
    "start_page": 103,
    "end_page": 104,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /var/tmp.",
    "audit_details": "- IF - a separate partition exists for /var/tmp, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. Example:\n```\n# findmnt -kn /var/tmp | grep -v nosuid\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/tmp | grep -v nosuid\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /var/tmp. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/tmp partition. Example:\n```\n<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```Run the following command to remount /var/tmp with the configured options:\n```\n# mount -o remount /var/tmp\n```",
    "remediation_code": "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/tmp partition.\nExample:\n```\n<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var/tmp partition.\"\"\"\n    try:\n        # Use findmnt to check if nosuid is set; grep -v inverts the match, so if nosuid is present, this should return empty\n        output = subprocess.check_output(['findmnt', '-kn', '/var/tmp', '|', 'grep', '-v', 'nosuid'], stderr=subprocess.STDOUT, text=True)\n        # If output is empty, nosuid is set, audit passes\n        return len(output.strip()) == 0\n    except subprocess.CalledProcessError as e:\n        print(f\"Error during audit: {e.output.strip()}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nosuid to /var/tmp partition options in /etc/fstab and remounting.\"\"\"\n    fstab_path = '/etc/fstab'\n    \n    # Check if a separate partition exists for /var/tmp\n    if not subprocess.check_output(['findmnt', '-n', '/var/tmp']).decode('utf-8').strip():\n        print(\"/var/tmp is not a separate partition, skipping remediation.\")\n        return\n    \n    try:\n        # Read fstab file\n        with open(fstab_path, 'r+') as file:\n            lines = file.readlines()\n            # Find the line for /var/tmp and add nosuid if it's not already there\n            for i, line in enumerate(lines):\n                if '/var/tmp' in line:\n                    mount_options = line.split()[3]\n                    if 'nosuid' not in mount_options:\n                        new_mount_options = mount_options + ',nosuid' if mount_options else 'defaults,rw,nosuid,nodev,noexec,relatime'\n                        lines[i] = re.sub(r'(\\s+)[^ ]*', rf'\\1{new_mount_options}', line, count=1)\n                        # Go back to the beginning of the file and write the updated lines\n                        file.seek(0)\n                        file.writelines(lines)\n                        file.truncate()  # Remove any remaining characters from the previous version of the file\n                        print(f\"Added nosuid to /var/tmp mount options in {fstab_path}\")\n                        break\n            else:\n                print(\"/var/tmp entry not found in fstab. Cannot remediate.\")\n                return\n    \n        # Remount /var/tmp with the updated options\n        subprocess.check_call(['mount', '-o', 'remount', '/var/tmp'])\n        print(\"Remounted /var/tmp with updated options.\")\n    except Exception as e:\n        print(f\"Error during remediation: {e}\")\n"
  },
  {
    "name": "Ensure noexec option set on /var/tmp partition",
    "id": "1.1.2.5.4",
    "type": "Automated",
    "start_page": 105,
    "end_page": 106,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /var/tmp.",
    "audit_details": "IF - a separate partition exists for /var/tmp, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example:\n```\n# findmnt -kn /var/tmp | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "findmnt -kn /var/tmp | grep -v noexec",
    "remediation_details": "IF - a separate partition exists for /var/tmp. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/tmp partition. Example:\n```\n<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/tmp with the configured options:\n```\n# mount -o remount /var/tmp\n```",
    "remediation_code": "mount -o remount /var/tmp",
    "python_script": "\nimport psutil\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /var/tmp partition.\"\"\"\n    try:\n        # Find mount point for /var/tmp\n        var_tmp_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/var/tmp'), None)\n        \n        if var_tmp_mount:\n            # Check if noexec option is present\n            options = var_tmp_mount.opts.split(',')\n            return 'noexec' in options\n        else:\n            # No separate partition found, consider it not vulnerable in this context\n            return True\n    \n    except Exception as e:\n        print(f\"Error during audit: {e}\")\n        return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting noexec option on /var/tmp partition if separate partition exists.\"\"\"\n    try:\n        # Check for separate partition\n        var_tmp_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/var/tmp'), None)\n        \n        if var_tmp_mount:\n            # Edit /etc/fstab to add noexec\n            fstab_path = '/etc/fstab'\n            with open(fstab_path, 'r+') as file:\n                lines = file.readlines()\n                file.seek(0)\n                noexec_added = False\n                \n                for line in lines:\n                    if line.startswith(var_tmp_mount.device):\n                        # Add noexec if not already present\n                        options = line.split()[3].split(',')\n                        if 'noexec' not in options:\n                            options.append('noexec')\n                            line = re.sub(r'([^\\s]+)\\s+([^\\s]+)\\s+([^\\s]+)\\s+([^\\s,]+)', \n                                          r'\\1 \\2 \\3 ' + ','.join(options), line)\n                            noexec_added = True\n                    file.write(line)\n                \n                if noexec_added:\n                    file.truncate()  # Remove remaining empty lines if any\n                    \n            # Remount /var/tmp\n            import subprocess\n            subprocess.run(['mount', '-o', 'remount', '/var/tmp'])\n            print(\"Added noexec option to /var/tmp in /etc/fstab and remounted /var/tmp.\")\n        else:\n            print(\"/var/tmp does not have a separate partition, no remediation applied.\")\n    \n    except Exception as e:\n        print(f\"Error during remediation: {e}\")\n"
  },
  {
    "name": "Ensure nodev option set on /var/log partition",
    "id": "1.1.2.6.2",
    "type": "Automated",
    "start_page": 110,
    "end_page": 111,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/log filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var/log.",
    "audit_details": "**- IF - a separate partition exists for /var/log, verify that the nodev option is set.**\nRun the following command to verify that the nodev mount option is set.\n_Example:_\n```\n# findmnt -kn /var/log | grep -v nodev\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/log | grep -v nodev",
    "remediation_details": "**- IF - a separate partition exists for /var/log.**\nEdit the /etc/fstab file and add nodev to the fourth field (mounting options) for the\n```\n/var/log partition.\n```\n_Example:_\n```\n<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/log with the configured options:\n```\n# mount -o remount /var/log\n```",
    "remediation_code": "Edit the /etc/fstab file to include nodev in the mount options for /var/log and remount it.",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the nodev option is set on the /var/log partition.\n\n    Returns:\n        bool: True if nodev option is present, False otherwise.\n    \"\"\"\n    try:\n        output = subprocess.check_output([\"findmnt\", \"-kn\", \"/var/log\"])\n        return b\"nodev\" in output\n    except FileNotFoundError:\n        print(\"findmnt command not found. Assuming vulnerability is present.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding the nodev option to the /var/log partition in /etc/fstab and remounting.\n    \"\"\"\n    fstab_path = \"/etc/fstab\"\n    with open(fstab_path, \"r+\") as file:\n        lines = file.readlines()\n        file.seek(0)\n        updated = False\n        for line in lines:\n            if \"/var/log\" in line:\n                opts = re.search(r\"(\\w+,\\s*)*(\\w+)\\s*\", line).group(0).strip()\n                if \"nodev\" not in opts:\n                    print(f\"Appending 'nodev' to mounting options for /var/log in {fstab_path}\")\n                    line = re.sub(r\"(\\w+,\\s*)*(\\w+)\\s*\", f\"{opts},nodev \", line)\n                    updated = True\n            file.write(line)\n        if not updated:\n            print(f\"No /var/log partition found in {fstab_path} to update.\")\n    \n    print(\"Remounting /var/log with the updated options...\")\n    subprocess.run([\"mount\", \"-o\", \"remount\", \"/var/log\"])\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"Nodev option is already set for /var/log.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /var/log partition",
    "id": "1.1.2.6.3",
    "type": "Automated",
    "start_page": 112,
    "end_page": 113,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/log filesystem is only intended for log files, set this option to ensure that users cannot create setuid files in /var/log.",
    "audit_details": "- IF - a separate partition exists for /var/log, verify that the nosuid option is set.\nRun the following command to verify that the nosuid mount option is set.\n_Example:_\n```\n# findmnt -kn /var/log | grep -v nosuid\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /var/log | grep -v nosuid",
    "remediation_details": "- IF - a separate partition exists for /var/log.\nEdit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the\n```\n/var/log partition.\n```\n_Example:_\n```\n<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0\n0\n```\nRun the following command to remount /var/log with the configured options:\n```\n# mount -o remount /var/log\n```\n",
    "remediation_code": "<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0\n0\n# mount -o remount /var/log",
    "python_script": "\nimport psutil\nimport fileinput\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var/log partition\"\"\"\n    # Check if /var/log is a separate partition\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/var/log':\n            # Parse mount options for nosuid\n            if 'nosuid' in partition.opts:\n                return True\n            else:\n                return False\n    # No separate partition for /var/log, consider as not vulnerable ( nosuid not required )\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting nosuid option on /var/log partition\"\"\"\n    # Check if /var/log is a separate partition\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/var/log':\n            # Edit /etc/fstab to add nosuid to /var/log mounting options\n            for line in fileinput.input('/etc/fstab', inplace=True):\n                if partition.device in line and '/var/log' in line:\n                    if 'nosuid' not in line:\n                        # Add nosuid if not present\n                        line = line.strip() + ',nosuid\\n'\n                        print(f\"Added 'nosuid' to /var/log mount options in /etc/fstab: {line}\")\n                print(line, end='')\n            \n            # Remount /var/log with updated options\n            subprocess.run(['mount', '-o', 'remount', '/var/log'])\n            print(f\"Remounted /var/log with updated options\")\n            return\n    # No separate partition for /var/log, no remediation needed\n    print(\"/var/log is not a separate partition, no remediation required\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure noexec option set on /var/log partition",
    "id": "1.1.2.6.4",
    "type": "Automated",
    "start_page": 114,
    "end_page": 115,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/log filesystem is only intended for log files, set this option to ensure that users cannot run executable binaries from /var/log.",
    "audit_details": "- IF - a separate partition exists for /var/log, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example:\n```\n# findmnt -kn /var/log | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/log | grep -v noexec",
    "remediation_details": "- IF - a separate partition exists for /var/log. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/log partition. Example:\n```\n<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0\n0\n```\nRun the following command to remount /var/log with the configured options:\n```\n# mount -o remount /var/log\n```",
    "remediation_code": "Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/log partition.",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /var/log partition.\"\"\"\n    output = subprocess.check_output([\"findmnt\", \"-kn\", \"/var/log\"]).decode(\"utf-8\")\n    return \"noexec\" in output\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding noexec option to /var/log partition in /etc/fstab and remount.\"\"\"\n    fstab_path = \"/etc/fstab\"\n    new_fstab_content = []\n\n    # Read and modify /etc/fstab\n    with open(fstab_path, \"r+\") as fstab_file:\n        for line in fstab_file:\n            if line.startswith(\"/var/log\"):\n                # Extract and append 'noexec' to the mounting options\n                device, mountpoint, fstype, options, _ = line.split()\n                options = options.split(\",\")\n                if \"noexec\" not in options:\n                    options.append(\"noexec\")\n                    new_options = \",\".join(options)\n                    new_line = f\"{device} {mountpoint} {fstype} {new_options} 0 0\\n\"\n                    print(f\"Added 'noexec' option to /var/log partition in {fstab_path}.\")\n                else:\n                    new_line = line\n            else:\n                new_line = line\n            new_fstab_content.append(new_line)\n\n        # Rewrite /etc/fstab with the updated content\n        fstab_file.seek(0)\n        fstab_file.write(\"\".join(new_fstab_content))\n        fstab_file.truncate()\n\n    # Remount /var/log with the new options\n    subprocess.check_call([\"mount\", \"-o\", \"remount\", \"/var/log\"])\n    print(\"Remounted /var/log with updated options.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"/var/log partition already has the noexec option set.\")\n"
  },
  {
    "name": "Ensure nodev option set on /var/log/audit partition",
    "id": "1.1.2.7.2",
    "type": "Automated",
    "start_page": 119,
    "end_page": 120,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/log/audit filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var/log/audit.",
    "audit_details": "- IF - a separate partition exists for /var/log/audit, verify that the nodev option is set. Run the following command to verify that the nodev mount option is set. _Example:_ # findmnt -kn /var/log/audit | grep -v nodev Nothing should be returned",
    "audit_code": "# findmnt -kn /var/log/audit | grep -v nodev",
    "remediation_details": "- IF - a separate partition exists for /var/log/audit. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/log/audit partition. _Example:_ <device> /var/log/audit  <fstype>  defaults,rw,nosuid,nodev,noexec,relatime 0 0. Run the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit",
    "remediation_code": "# mount -o remount /var/log/audit",
    "python_script": "\nimport psutil\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nodev option is set on /var/log/audit partition\"\"\"\n    # Check if a separate partition exists for /var/log/audit\n    partitions = psutil.disk_partitions()\n    audit_partition = next((p for p in partitions if p.mountpoint == '/var/log/audit'), None)\n    if audit_partition is None:\n        print(\"No separate partition found for /var/log/audit\")\n        return True  # Assuming no partition implies compliance for this check\n\n    # Verify if the nodev mount option is set\n    if 'nodev' in audit_partition.opts:\n        print(\"nodev option is set for /var/log/audit partition\")\n        return True\n    else:\n        print(\"nodev option is NOT set for /var/log/audit partition\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nodev option to /var/log/audit partition's mounting options\"\"\"\n    # Reuse audit's partition check\n    partitions = psutil.disk_partitions()\n    audit_partition = next((p for p in partitions if p.mountpoint == '/var/log/audit'), None)\n    if audit_partition is None:\n        print(\"No separate partition found for /var/log/audit, cannot remediate\")\n        return\n\n    # Edit /etc/fstab to add nodev option\n    fstab_path = '/etc/fstab'\n    try:\n        with open(fstab_path, 'r') as file:\n            lines = file.readlines()\n    except FileNotFoundError:\n        print(f\"Error: {fstab_path} not found\")\n        return\n\n    modified = False\n    with open(fstab_path, 'w') as file:\n        for line in lines:\n            if line.startswith(audit_partition.device) and '/var/log/audit' in line:\n                parts = line.split()\n                # Add nodev to the options (fourth field)\n                if 'nodev' not in parts[3]:\n                    parts[3] += ',nodev'  # Append nodev if not already present\n                    modified = True\n                file.write(' '.join(parts) + '\\n')\n            else:\n                file.write(line)\n\n    if modified:\n        print(\"Added nodev option to /var/log/audit's mounting options in /etc/fstab\")\n    else:\n        print(\"/var/log/audit's mounting options already include nodev in /etc/fstab\")\n\n    # Remount /var/log/audit with updated options\n    try:\n        subprocess.run(['mount', '-o', 'remount', '/var/log/audit'], check=True)\n        print(\"Remounted /var/log/audit with updated options\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to remount /var/log/audit: {e}\")\n"
  },
  {
    "name": "Ensure nosuid option set on /var/log/audit partition",
    "id": "1.1.2.7.3",
    "type": "Automated",
    "start_page": 121,
    "end_page": 122,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/log/audit filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create setuid files in /var/log/audit.",
    "audit_details": "- IF - a separate partition exists for /var/log/audit, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. Example:\n```\n# findmnt -kn /var/log/audit | grep -v nosuid\nNothing should be returned\n```",
    "audit_code": "findmnt -kn /var/log/audit | grep -v nosuid",
    "remediation_details": "- IF - a separate partition exists for /var/log/audit. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/log/audit partition. Example:\n```\n<device> /var/log/audit  <fstype>  \ndefaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/log/audit with the configured options:\n```\n# mount -o remount /var/log/audit\n```",
    "remediation_code": "<device> /var/log/audit  <fstype>  \ndefaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /var/log/audit",
    "python_script": "\nimport psutil\nimport os\nimport pathlib\nfrom tempfile import TemporaryDirectory\n\ndef _has_separate_partition(path):\n    \"\"\"Check if a path has a separate partition.\"\"\"\n    return psutil.disk_usage(path).total!= psutil.disk_usage('/').total\n\ndef _edit_fstab(add_nosuid=True):\n    \"\"\"Edit /etc/fstab to add or remove nosuid option for /var/log/audit.\"\"\"\n    fstab_path = pathlib.Path('/etc/fstab')\n    temp_dir = TemporaryDirectory()\n    temp_fstab = pathlib.Path(temp_dir.name) / 'fstab'\n    \n    with open(fstab_path, 'r') as src, open(temp_fstab, 'w') as dst:\n        for line in src:\n            if line.startswith(('#', '\\n')) or '/var/log/audit' not in line:\n                dst.write(line)\n            else:\n                opts_index = line.find('\\t', line.find('/var/log/audit')) + 1\n                opts = line[opts_index:].split(',')[0].split()\n                if add_nosuid and 'nosuid' not in opts:\n                    opts.append('nosuid')\n                elif not add_nosuid and 'nosuid' in opts:\n                    opts.remove('nosuid')\n                new_opts_str = ','.join(opts)\n                new_line = line[:opts_index] + new_opts_str + ',' + line[line.find(',', opts_index + len(new_opts_str)):]\n                dst.write(new_line)\n    \n    # Overwrite original fstab with temporary one\n    temp_fstab.replace(fstab_path)\n\ndef _remount(path):\n    \"\"\"Remount a partition with its configured options.\"\"\"\n    # Assuming nosuid is already added to fstab before calling this\n    print(f\"Remounting '{path}' with updated options...\")\n    pathlib.Path(path).chmod(0o755)  # Ensure executable for remount\n    os.system(f\"mount -o remount {path}\")\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var/log/audit partition.\"\"\"\n    if not _has_separate_partition('/var/log/audit'):\n        print(\"/var/log/audit does not have a separate partition. Skipping audit.\")\n        return False\n    \n    for part in psutil.disk_partitions():\n        if part.mountpoint == '/var/log/audit':\n            return 'nosuid' in part.opts\n    \n    return False  # This should technically never happen if separate partition exists\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nosuid option to /var/log/audit partition's mount options.\"\"\"\n    if not _has_separate_partition('/var/log/audit'):\n        print(\"/var/log/audit does not have a separate partition. Skipping remediation.\")\n        return\n    \n    if not audit_vuln():  # Check current state\n        print(\"Adding 'nosuid' option to /var/log/audit's fstab entry...\")\n        _edit_fstab()\n        _remount('/var/log/audit')\n    else:\n        print(\"'nosuid' option is already set for /var/log/audit. No action required.\")\n"
  },
  {
    "name": "Ensure noexec option set on /var/log/audit partition",
    "id": "1.1.2.7.4",
    "type": "Automated",
    "start_page": 123,
    "end_page": 124,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/log/audit filesystem is only intended for audit logs, set this option to ensure that users cannot run executable binaries from /var/log/audit.",
    "audit_details": "- IF - a separate partition exists for /var/log/audit, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example:\n```bash\n# findmnt -kn /var/log/audit | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/log/audit | grep -v noexec\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /var/log/audit. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/log/audit partition. Example:\n```bash\n<device> /var/log/audit  <fstype>  \ndefaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/log/audit with the configured options:\n```bash\n# mount -o remount /var/log/audit\n```",
    "remediation_code": "# mount -o remount /var/log/audit",
    "python_script": "\nimport psutil\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /var/log/audit partition.\"\"\"\n    for disk in psutil.disk_partitions():\n        if disk.mountpoint == '/var/log/audit':\n            if 'noexec' in disk.opts:\n                print(\"Found `noexec` option set for /var/log/audit.\")\n                return True\n            else:\n                print(\"Missing `noexec` option for /var/log/audit.\")\n                return False\n    print(\"/var/log/audit is not on a separate partition.\")\n    return True  # Not applicable, so consider it not vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding noexec option to /var/log/audit in /etc/fstab and remount.\"\"\"\n    fstab_path = '/etc/fstab'\n    with open(fstab_path, 'r+') as file:\n        lines = file.readlines()\n        file.seek(0)\n        updated = False\n        for line in lines:\n            if '/var/log/audit' in line:\n                if 'noexec' not in line:\n                    # Add noexec to the options\n                    updated_line = re.sub(r'(\\w+)\\s+/var/log/audit\\s+([\\w,]+)', \n                                          lambda m: f\"{m.group(1)} /var/log/audit {m.group(2)}+noexec,\" if 'defaults' in m.group(2) else f\"{m.group(1)} /var/log/audit noexec,{m.group(2)}\", \n                                          line)\n                    print(f\"Updated fstab line for /var/log/audit to include noexec: {updated_line.strip()}\")\n                    file.write(updated_line)\n                    updated = True\n                else:\n                    print(\"noexec option already set in /etc/fstab for /var/log/audit.\")\n                    return\n            else:\n                file.write(line)\n        if not updated:\n            print(\"/var/log/audit not found in /etc/fstab or already compliant.\")\n            return\n        file.truncate()\n    \n    # Remount /var/log/audit with updated options\n    subprocess.run(['mount', '-o', 'remount', '/var/log/audit'])\n    print(\"Remounted /var/log/audit with updated options.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure AppArmor is installed",
    "id": "1.3.1.1",
    "type": "Automated",
    "start_page": 137,
    "end_page": 138,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "AppArmor provides Mandatory Access Controls.",
    "rationale": "Without a Mandatory Access Control system installed only the default Discretionary Access Control system will be available.",
    "audit_details": "Run the following command to verify that apparmor is installed:\n```\n# dpkg-query -s apparmor &>/dev/null && echo \"apparmor is installed\" \napparmor is installed\n```\nRun the following command to verify that apparmor-utils is installed:\n```\n# dpkg-query -s apparmor-utils &>/dev/null && echo \"apparmor-utils is installed\" \napparmor-utils is installed\n```,",
    "audit_code": "# dpkg-query -s apparmor &>/dev/null && echo \"apparmor is installed\" \napparmor is installed\n# dpkg-query -s apparmor-utils &>/dev/null && echo \"apparmor-utils is installed\" \napparmor-utils is installed\n",
    "remediation_details": "Install AppArmor.\n```\n# apt install apparmor apparmor-utils\n```\n",
    "remediation_code": "# apt install apparmor apparmor-utils\n",
    "python_script": "\nimport pkg_resources\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if AppArmor and AppArmor-utils are installed.\"\"\"\n    required_packages = ['apparmor', 'apparmor-utils']\n    installed_packages = pkg_resources.working_set\n    installed_package_names = [package.project_name for package in installed_packages]\n    \n    for package in required_packages:\n        if package not in installed_package_names:\n            return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by installing AppArmor and AppArmor-utils if not already installed.\"\"\"\n    if not audit_vuln():\n        install_cmd = \"apt install -y apparmor apparmor-utils\"\n        print(f\"Executing command: {install_cmd}\")\n        subprocess.run(install_cmd, shell=True, check=True)\n        print(\"Installed AppArmor and AppArmor-utils.\")\n    else:\n        print(\"AppArmor and AppArmor-utils are already installed. No action needed.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(\"Audit Result:\", audit_vuln())\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure AppArmor is enabled in the bootloader configuration",
    "id": "1.3.1.2",
    "type": "Automated",
    "start_page": 139,
    "end_page": 140,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure AppArmor to be enabled at boot time and verify that it has not been overwritten by the bootloader boot parameters.\n\n_Note: This recommendation is designed around the grub bootloader, if LILO or another bootloader is in use in your environment enact equivalent settings._",
    "rationale": "AppArmor must be enabled at boot time in your bootloader configuration to ensure that the controls it provides are not overridden.",
    "audit_details": "Run the following commands to verify that all linux lines have the apparmor=1 and \nsecurity=apparmor parameters set:\n# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"apparmor=1\"\nNothing should be returned\n# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"security=apparmor\"\nNothing should be returned",
    "audit_code": "# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"apparmor=1\"\n# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"security=apparmor\"",
    "remediation_details": "Edit /etc/default/grub and add the apparmor=1 and security=apparmor parameters to the GRUB_CMDLINE_LINUX= line\n\n```\nGRUB_CMDLINE_LINUX=\"apparmor=1 security=apparmor\"\n```\n\nRun the following command to update the grub2 configuration:\n\n```\n# update-grub\n```",
    "remediation_code": "# update-grub",
    "python_script": "\nimport pathlib\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if AppArmor is enabled in the bootloader configuration\"\"\"\n    grub_cfg_path = pathlib.Path('/boot/grub/grub.cfg')\n    if not grub_cfg_path.exists():\n        raise FileNotFoundError(\"Grub config file not found\")\n\n    with grub_cfg_path.open('r') as file:\n        linux_lines = [line.strip() for line in file if line.strip().startswith('linux')]\n\n    for line in linux_lines:\n        if not (re.search(r'apparmor=1', line) and re.search(r'security=apparmor', line)):\n            return True  # Vulnerability found\n\n    return False  # No vulnerability found\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the AppArmor bootloader configuration vulnerability\"\"\"\n    grub_defaults_path = pathlib.Path('/etc/default/grub')\n    if not grub_defaults_path.exists():\n        raise FileNotFoundError(\"Grub defaults file not found\")\n\n    new_grub_cmdline_linux = 'apparmor=1 security=apparmor'\n\n    with grub_defaults_path.open('r+') as file:\n        content = file.readlines()\n        file.seek(0)\n        updated = False\n        for line in content:\n            if line.strip().startswith('GRUB_CMDLINE_LINUX='):\n                file.write(f'GRUB_CMDLINE_LINUX=\"{new_grub_cmdline_linux}\"\\n')\n                updated = True\n            else:\n                file.write(line)\n        if not updated:\n            file.write(f'\\nGRUB_CMDLINE_LINUX=\"{new_grub_cmdline_linux}\"\\n')\n        file.truncate()\n\n    print(f\"Updated '{grub_defaults_path}' with 'apparmor=1 security=apparmor' in GRUB_CMDLINE_LINUX\")\n\n    subprocess.run(['update-grub'])\n    print(\"Ran 'update-grub' to apply changes\")\n"
  },
  {
    "name": "Ensure all AppArmor Profiles are in enforce or complain mode",
    "id": "1.3.1.3",
    "type": "Automated",
    "start_page": 141,
    "end_page": 142,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "AppArmor profiles define what resources applications are able to access.",
    "rationale": "Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.",
    "audit_details": "Run the following command and verify that profiles are loaded, and are in either enforce or complain mode:\n\n```\n# apparmor_status | grep profiles\n```\n\nReview output and ensure that profiles are loaded, and in either enforce or complain mode:\n```\n37 profiles are loaded.\n35 profiles are in enforce mode.\n2 profiles are in complain mode.\n4 processes have profiles defined.\n```\nRun the following command and verify no processes are unconfined\n\n```\n# apparmor_status | grep processes\n```\n\nReview the output and ensure no processes are unconfined:\n```\n4 processes have profiles defined.\n4 processes are in enforce mode.\n0 processes are in complain mode.\n0 processes are unconfined but have a profile defined.\n```\n",
    "audit_code": "# apparmor_status | grep profiles\n\n# apparmor_status | grep processes",
    "remediation_details": "Run the following command to set all profiles to enforce mode:\n\n```\n# aa-enforce /etc/apparmor.d/*\n```\n\n_OR_\nRun the following command to set all profiles to complain mode:\n\n```\n# aa-complain /etc/apparmor.d/*\n```\n\n_Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted_",
    "remediation_code": "# aa-enforce /etc/apparmor.d/*\n\n# aa-complain /etc/apparmor.d/*",
    "python_script": "\nimport subprocess\nimport pathlib\n\n# Constants\nAPPARMOR_STATUS_CMD = \"apparmor_status\"\nPROFILE_DIRECTORY = pathlib.Path(\"/etc/apparmor.d\")\nENFORCE_CMD = \"aa-enforce\"\nCOMPLAIN_CMD = \"aa-complain\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit AppArmor profiles and return True if vulnerable, False otherwise.\"\"\"\n    # Run apparmor_status and capture output\n    output = subprocess.check_output(APPARMOR_STATUS_CMD, text=True)\n\n    # Check if any profiles are not in enforce or complain mode\n    vulnerable = False\n    for line in output.splitlines():\n        if \"profiles are loaded\" in line:\n            loaded_profiles = int(line.split()[0])\n        elif \"profiles are in enforce mode\" in line:\n            enforce_profiles = int(line.split()[0])\n        elif \"profiles are in complain mode\" in line:\n            complain_profiles = int(line.split()[0])\n        elif \"processes are unconfined but have a profile defined\" in line:\n            unconfined_profiles = int(line.split()[0])\n    \n    if (loaded_profiles != enforce_profiles + complain_profiles) or unconfined_profiles > 0:\n        vulnerable = True\n\n    return vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate AppArmor vulnerability by setting all profiles to enforce mode.\"\"\"\n    print(f\"Setting all AppArmor profiles to enforce mode...\")\n    # Execute aa-enforce command on all profiles in the profile directory\n    for profile in PROFILE_DIRECTORY.glob(\"*.apparmor\"):\n        subprocess.run([ENFORCE_CMD, str(profile)])\n        print(f\"Enabled enforce mode for {profile.name}\")\n\n    # Verify no processes are unconfined and prompt for action if necessary\n    output = subprocess.check_output(APPARMOR_STATUS_CMD, text=True)\n    for line in output.splitlines():\n        if \"processes are unconfined but have a profile defined\" in line and int(line.split()[0]) > 0:\n            print(\"Warning: Unconfined processes detected with defined profiles. Manual intervention required to create or activate profiles and restart processes.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Proceeding with remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure bootloader password is set",
    "id": "1.4.1",
    "type": "Automated",
    "start_page": 146,
    "end_page": 148,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting the boot loader password will require that anyone rebooting the system must enter a password before being able to set command line boot parameters",
    "rationale": "Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off AppArmor at boot time).",
    "audit_details": "Run the following commands and verify output matches:\n```\n# grep \"^set superusers\" /boot/grub/grub.cfg\nset superusers=\"<username>\"\n# awk -F. '/^\\s*password/ {print $1\".\"$2\".\"$3}' /boot/grub/grub.cfg\npassword_pbkdf2 <username> grub.pbkdf2.sha512\n```\nPage 145",
    "audit_code": "# grep \"^set superusers\" /boot/grub/grub.cfg\nset superusers=\"<username>\"\n# awk -F. '/^\\s*password/ {print $1\".\"$2\".\"$3}' /boot/grub/grub.cfg\npassword_pbkdf2 <username> grub.pbkdf2.sha512",
    "remediation_details": "Create an encrypted password with grub-mkpasswd-pbkdf2:\n```\n# grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64\nEnter password: <password>\nReenter password: <password>\nPBKDF2 hash of your password is <encrypted-password>\n```\nAdd the following into a custom /etc/grub.d configuration file:\n```\ncat <<EOF\nexec tail -n +2 $0\nset superusers=\"<username>\"\npassword_pbkdf2 <username> <encrypted-password>\nEOF\n```\nThe superuser/user information and password should not be contained in the `/etc/grub.d/00_header file as this file could be overwritten in a package update.\n\nIf there is a requirement to be able to boot/reboot without entering the password, edit `/etc/grub.d/10_linux` and add --unrestricted to the line CLASS=\n\n_Example:_\n```\nCLASS=\"--class gnu-linux --class gnu --class os --unrestricted\"\n```\nRun the following command to update the grub2 configuration:\n```\n# update-grub\n```\n",
    "remediation_code": "# grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64\nEnter password: <password>\nReenter password: <password>\nPBKDF2 hash of your password is <encrypted-password>\ncat <<EOF\nexec tail -n +2 $0\nset superusers=\"<username>\"\npassword_pbkdf2 <username> <encrypted-password>\nEOF\n# update-grub",
    "python_script": "\nimport subprocess\nimport getpass\nimport os\n\ndef audit_vuln(username: str) -> bool:\n    \"\"\"Audit if bootloader password is set for the given username.\"\"\"\n    grub_cfg_path = '/boot/grub/grub.cfg'\n    with open(grub_cfg_path, 'r') as file:\n        lines = file.readlines()\n        has_superuser_line = any(f'set superusers=\"{username}\"' in line for line in lines)\n        has_password_line = any(f'password_pbkdf2 {username}' in line for line in lines)\n        return has_superuser_line and has_password_line\n\ndef remediate_vuln(username: str) -> None:\n    \"\"\"Remediate by setting a bootloader password for the given username.\"\"\"\n    # Generate encrypted password\n    password = getpass.getpass(f\"Enter password for {username}: \")\n    confirm_password = getpass.getpass(\"Reenter password: \")\n    if password!= confirm_password:\n        raise ValueError(\"Passwords do not match\")\n    encrypted_password_cmd = f\"grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64\"\n    encrypted_password_process = subprocess.Popen(encrypted_password_cmd, \n                                                  stdin=subprocess.PIPE, \n                                                  stdout=subprocess.PIPE, \n                                                  shell=True)\n    # Feed the password to the subprocess (note: this is a security consideration, but grub-mkpasswd-pbkdf2 requires interactive input)\n    encrypted_password_output, _ = encrypted_password_process.communicate(f\"{password}\\n{password}\".encode())\n    encrypted_password = encrypted_password_output.decode().splitlines()[-1].split(\" \")[-1]\n\n    # Create custom GRUB configuration file\n    custom_cfg_path = '/etc/grub.d/40_custom.cfg'\n    with open(custom_cfg_path, 'w') as custom_cfg_file:\n        custom_cfg_file.write(f\"\"\"exec tail -n +2 $0\nset superusers=\"{username}\"\npassword_pbkdf2 {username} {encrypted_password}\n\"\"\")\n    print(f\"Created custom GRUB configuration file at {custom_cfg_path}\")\n\n    # Update GRUB2 configuration\n    update_grub_cmd = \"update-grub\"\n    subprocess.run(update_grub_cmd, shell=True)\n    print(\"Updated GRUB2 configuration\")\n\n# Example usage\nif __name__ == \"__main__\":\n    username = input(\"Enter the username to audit and remediate: \")\n    if not audit_vuln(username):\n        print(f\"Vulnerability found for {username}. Remediating...\")\n        remediate_vuln(username)\n    else:\n        print(f\"No vulnerability found for {username}. Bootloader password is already set.\")\n"
  },
  {
    "name": "Ensure access to bootloader config is configured",
    "id": "1.4.2",
    "type": "Automated",
    "start_page": 149,
    "end_page": 150,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The grub configuration file contains information on boot settings and passwords for unlocking boot options.",
    "rationale": "Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.",
    "audit_details": "Run the following command and verify Uid and Gid are both 0/root and Access is 0600 or more restrictive.\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)'\n/boot/grub/grub.cfg\nAccess: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)'\n/boot/grub/grub.cfg",
    "remediation_details": "Run the following commands to set permissions on your grub configuration:\n```\n# chown root:root /boot/grub/grub.cfg\n# chmod u-x,go-rwx /boot/grub/grub.cfg\n```\n",
    "remediation_code": "# chown root:root /boot/grub/grub.cfg\n# chmod u-x,go-rwx /boot/grub/grub.cfg",
    "python_script": "\nimport os\nimport stat\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit access to bootloader config\"\"\"\n    file_path = '/boot/grub/grub.cfg'\n    try:\n        file_stat = os.stat(file_path)\n    except FileNotFoundError:\n        print(f\"File not found: {file_path}\")\n        return False\n\n    # Expected values\n    expected_uid = 0\n    expected_gid = 0\n    expected_permissions = 0o600\n\n    # Check UID and GID\n    if file_stat.st_uid != expected_uid or file_stat.st_gid != expected_gid:\n        print(f\"Ownership mismatch for {file_path}. Expected uid:root, got {file_stat.st_uid}:{file_stat.st_gid}\")\n        return False\n\n    # Check Permissions\n    if file_stat.st_mode & 0o777 != expected_permissions and (file_stat.st_mode & 0o777) > expected_permissions:\n        print(f\"Permissions for {file_path} are too permissive. Expected 0600 or more restrictive, got {stat.filemode(file_stat.st_mode)}\")\n        return False\n\n    print(f\"UID, GID, and permissions for {file_path} are correctly configured.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate access to bootloader config\"\"\"\n    file_path = '/boot/grub/grub.cfg'\n    \n    # Set ownership to root:root\n    try:\n        shutil.chown(file_path, user='root', group='root')\n        print(f\"Set ownership of {file_path} to root:root\")\n    except Exception as e:\n        print(f\"Failed to set ownership: {e}\")\n\n    # Set permissions to 0600\n    try:\n        os.chmod(file_path, 0o600)\n        print(f\"Set permissions of {file_path} to 0600\")\n    except Exception as e:\n        print(f\"Failed to set permissions: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        print(\"Re-running audit after remediation:\")\n        audit_vuln()\n"
  },
  {
    "name": "Ensure address space layout randomization is enabled",
    "id": "1.5.1",
    "type": "Automated",
    "start_page": 152,
    "end_page": 155,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.",
    "rationale": "Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n#### \u2022 kernel.randomize_va_space is set to 2\n\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(kernel.randomize_va_space=2)\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n#### \u2022 kernel.randomize_va_space = 2\n\n### Example:\n# printf \"%s\\n\" \"kernel.randomize_va_space = 2\" >> /etc/sysctl.d/60kernel_sysctl.conf\n\nRun the following command to set the active kernel parameter:\n\n```\n# sysctl -w kernel.randomize_va_space=2\n```\n\n### Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "# printf \"%s\\n\" \"kernel.randomize_va_space = 2\" >> /etc/sysctl.d/60kernel_sysctl.conf\n# sysctl -w kernel.randomize_va_space=2\n",
    "python_script": "\nimport subprocess\nimport pathlib\nimport re\n\n# Constants\nKERNEL_PARAMETER = \"kernel.randomize_va_space\"\nEXPECTED_VALUE = \"2\"\nSYSCTL_D_PATH = pathlib.Path(\"/etc/sysctl.d\")\nSYSCTL_CONF_PATH = pathlib.Path(\"/etc/sysctl.conf\")\nREMEDATION_FILE = SYSCTL_D_PATH / \"60kernel_sysctl.conf\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if kernel.randomize_va_space is set to 2\"\"\"\n    # Check running configuration\n    running_config_value = subprocess.check_output(f\"sysctl {KERNEL_PARAMETER}\", shell=True).decode().split(\"=\")[1].strip()\n    if running_config_value!= EXPECTED_VALUE:\n        print(f\"- \\\"{KERNEL_PARAMETER}\\\" is incorrectly set to \\\"{running_config_value}\\\" in the running configuration and should have a value of: \\\"{EXPECTED_VALUE}\\\"\")\n    \n    # Check durable settings\n    config_files = list(SYSCTL_D_PATH.glob(\"*.conf\")) + [SYSCTL_CONF_PATH]\n    config_files_settings = {}\n    for file in config_files:\n        content = file.read_text()\n        match = re.search(rf\"^{KERNEL_PARAMETER}\\s*=\\s*(\\S+)\", content, re.MULTILINE)\n        if match:\n            config_files_settings[file] = match.group(1).strip()\n    \n    # Assess settings\n    if config_files_settings:\n        for file, value in config_files_settings.items():\n            if value == EXPECTED_VALUE:\n                print(f\"- \\\"{KERNEL_PARAMETER}\\\" is correctly set to \\\"{value}\\\" in \\\"{file}\\\"\")\n            else:\n                print(f\"- \\\"{KERNEL_PARAMETER}\\\" is incorrectly set to \\\"{value}\\\" in \\\"{file}\\\" and should have a value of: \\\"{EXPECTED_VALUE}\\\"\")\n    else:\n        print(f\"- \\\"{KERNEL_PARAMETER}\\\" is not set in any included file **Note:** May be set in a file that's ignored by load procedure **\")\n    \n    # Return audit result\n    return running_config_value == EXPECTED_VALUE and (not config_files_settings or all(value == EXPECTED_VALUE for value in config_files_settings.values()))\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting kernel.randomize_va_space to 2\"\"\"\n    global REMEDATION_FILE\n    # Write to a suitable config file\n    if not REMEDATION_FILE.exists():\n        REMEDATION_FILE.touch()\n    with REMEDATION_FILE.open(\"a+\") as f:\n        if f.read().strip():  # If file not empty, append on a new line\n            f.write(\"\\n\")\n        f.write(f\"{KERNEL_PARAMETER} = {EXPECTED_VALUE}\")\n    print(f\"Wrote \\\"{KERNEL_PARAMETER} = {EXPECTED_VALUE}\\\" to \\\"{REMEDATION_FILE}\\\"\")\n    \n    # Apply change to running kernel configuration\n    subprocess.check_call(f\"sysctl -w {KERNEL_PARAMETER}={EXPECTED_VALUE}\", shell=True)\n    print(f\"Applied \\\"{KERNEL_PARAMETER} = {EXPECTED_VALUE}\\\" to the running kernel configuration\")\n"
  },
  {
    "name": "Ensure ptrace_scope is restricted",
    "id": "1.5.2",
    "type": "Automated",
    "start_page": 156,
    "end_page": 159,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The ptrace() system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers.",
    "rationale": "If one application is compromised, it would be possible for an attacker to attach to other running processes (e.g. Bash, Firefox, SSH sessions, GPG agent, etc) to extract additional credentials and continue to expand the scope of their attack. Enabling restricted mode will limit the ability of a compromised process to PTRACE_ATTACH on other processes running under the same user. With restricted mode, ptrace will continue to work with root user.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: kernel.yama.ptrace_scope is set to 1. Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"kernel.yama.ptrace_scope=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_file\" )\n      fi\n     fi\n   done < <( /usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+.conf\\\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_ufwscf\" )\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: kernel.yama.ptrace_scope = 1. Example: # printf \"%s\\n\" \"kernel.yama.ptrace_scope = 1\" >> /etc/sysctl.d/60kernel_sysctl.conf Run the following command to set the active kernel parameter: # sysctl -w kernel.yama.ptrace_scope=1. Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "# printf \"%s\\n\" \"kernel.yama.ptrace_scope = 1\" >> /etc/sysctl.d/60kernel_sysctl.conf\n# sysctl -w kernel.yama.ptrace_scope=1\n",
    "python_script": "\nimport subprocess\nimport os\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure kernel.yama.ptrace_scope is set to 1.\n    \n    :return: True if the vulnerability is not found, False otherwise.\n    \"\"\"\n    # Check running configuration\n    running_config = subprocess.check_output(['sysctl', 'kernel.yama.ptrace_scope']).decode('utf-8')\n    if 'kernel.yama.ptrace_scope = 1' not in running_config:\n        print(f\"- 'kernel.yama.ptrace_scope' is incorrectly set to {running_config.split('=')[1].strip()} in the running configuration. Expected value: 1\")\n        config_files_check = False\n    else:\n        print(f\"- 'kernel.yama.ptrace_scope' is correctly set to 1 in the running configuration\")\n        config_files_check = True\n\n    # Check durable settings (files), considering precedence\n    sysctl_d_path = pathlib.Path('/etc/sysctl.d')\n    etc_sysctl_path = pathlib.Path('/etc/sysctl.conf')\n    config_files = sorted(sysctl_d_path.glob('*.conf')) + [etc_sysctl_path] if etc_sysctl_path.exists() else []\n    \n    for file in config_files:\n        content = file.read_text()\n        if 'kernel.yama.ptrace_scope' in content:\n            value = [line.strip() for line in content.splitlines() if line.startswith('kernel.yama.ptrace_scope')][0].split('=')[1]\n            if value == '1':\n                print(f\"- 'kernel.yama.ptrace_scope' is correctly set to 1 in {file}\")\n                continue\n            else:\n                print(f\"- 'kernel.yama.ptrace_scope' is incorrectly set to {value} in {file}. Expected value: 1\")\n                config_files_check = False\n        # If not found in any file, but running config is correct, it might be set directly in the kernel\n        if config_files_check and 'kernel.yama.ptrace_scope' not in content and file == config_files[-1]:\n            print(\"- Note: 'kernel.yama.ptrace_scope' might be set directly in the kernel or in an ignored file.\")\n    \n    return config_files_check and ('kernel.yama.ptrace_scope = 1' in running_config)\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting kernel.yama.ptrace_scope to 1.\n    \"\"\"\n    # Set the parameter in a.conf file\n    remediation_file = pathlib.Path('/etc/sysctl.d/60kernel_sysctl.conf')\n    if not remediation_file.exists():\n        remediation_file.touch()\n    with remediation_file.open('a') as file:\n        file.write('kernel.yama.ptrace_scope = 1\\n')\n    print(f\"Added 'kernel.yama.ptrace_scope = 1' to {remediation_file}\")\n    \n    # Apply the change to the active kernel parameter\n    subprocess.run(['sysctl', '-w', 'kernel.yama.ptrace_scope=1'])\n    print(\"Applied 'kernel.yama.ptrace_scope=1' to the active kernel parameter\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure core dumps are restricted",
    "id": "1.5.3",
    "type": "Automated",
    "start_page": 160,
    "end_page": 162,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file. The system provides the ability to set a soft limit for core dumps, but this can be overridden by the user.",
    "rationale": "Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.",
    "audit_details": "Run the following command and verify output matches:\n```\n# grep -Ps -- '^\\\\h*\\\\*\\\\h+hard\\\\h+core\\\\h+0\\\\b' /etc/security/limits.conf\n/etc/security/limits.d/*\n* hard core 0\n```\nRun the following script to verify fs.suid_dumpable = 0: Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n### \u2022 fs.suid_dumpable is set to 0\n## Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that 'correct' setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"fs.suid_dumpable=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_file\" )\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_ufwscf\" )\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n```\n\n## Run the following command to check if systemd-coredump is installed:\n### Page 160\n```\n# systemctl list-unit-files | grep coredump\n```\n## if anything is returned systemd-coredump is installed",
    "audit_code": "# grep -Ps -- '^\n\thard\thard\tcore\t0\b' /etc/security/limits.conf\n/etc/security/limits.d/*\n* hard core 0\n# systemctl list-unit-files | grep coredump",
    "remediation_details": "Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:\n```\n* hard core 0\n```\n## Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in\n```.conf:\n### \u2022 fs.suid_dumpable = 0\n## Example:\n# printf \"%s\\n\" \"fs.suid_dumpable = 0\" >> /etc/sysctl.d/60-fs_sysctl.conf\n\nRun the following command to set the active kernel parameter:\n```\n# sysctl -w fs.suid_dumpable=0\n```\n## Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten -IF- systemd-coredump is installed: edit /etc/systemd/coredump.conf and add/modify the following lines:\n```\nStorage=none\nProcessSizeMax=0\n```\n\nRun the command:\n```\n# systemctl daemon-reload\n```\n",
    "remediation_code": "Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:\n```\n* hard core 0\n```\n# printf \"%s\\n\" \"fs.suid_dumpable = 0\" >> /etc/sysctl.d/60-fs_sysctl.conf\n# sysctl -w fs.suid_dumpable=0\n# systemctl daemon-reload",
    "python_script": "```python\nimport pathlib\nimport subprocess\nimport configparser\n\ndef audit_vuln() -> bool:\n    # Check limits.conf and limits.d/\n    limits_config_path = pathlib.Path('/etc/security/limits.conf')\n    limits_d_path = pathlib.Path('/etc/security/limits.d/')\n    limits_config_found = False\n    for path in [limits_config_path, *limits_d_path.glob('*.conf')]:\n        if path.is_file():\n            with open(path, 'r') as file:\n                for line in file:\n                    if line.strip() == '* hard core 0':\n                        limits_config_found = True\n                        break\n            if limits_config_found:\n                break\n\n    # Verify fs.suid_dumpable in running config and durable settings\n    running_config_chk = subprocess.run(['sysctl', 'fs.suid_dumpable'], stdout=subprocess.PIPE, text=True)\n    if running_config_chk.returncode!= 0:\n        print(\"Error checking running kernel configuration.\")\n        return False\n    if running_config_chk.stdout.strip()!= 'fs.suid_dumpable = 0':\n        print(\"fs.suid_dumpable is not set to 0 in the running configuration.\")\n        return False\n\n    sysctl_config_path = pathlib.Path('/etc/sysctl.conf')\n    sysctl_d_path = pathlib.Path('/etc/sysctl.d/')\n    sysctl_config_found = False\n    for path in [sysctl_config_path, *sysctl_d_path.glob('*.conf')]:\n        if path.is_file():\n            with open(path, 'r') as file:\n                for line in file:\n                    if line.strip() == 'fs.suid_dumpable = 0':\n                        sysctl_config_found = True\n                        break\n            if sysctl_config_found:\n                break\n\n    if not sysctl_config_found:\n        print(\"fs.suid_dumpable is not set to 0 in durable configuration files.\")\n        return False\n\n    # Check for systemd-coredump\n    systemd_coredump_chk = subprocess.run(['systemctl', 'list-unit-files', '--', 'coredump'], stdout=subprocess.PIPE, text=True)\n    if systemd_coredump_chk.returncode!= 0:\n        print(\"Error checking for systemd-coredump.\")\n        return False\n    if systemd_coredump_chk.stdout.strip():\n        print(\"systemd-coredump is installed but not audited for core dump settings.\")\n        return False\n\n    print(\"All audit checks pass.\")\n    return True\n\ndef remediate_vuln() -> None:\n    # Add * hard core 0 to limits.conf if not present\n    limits_config_path = pathlib.Path('/etc/security/limits.conf')\n    if not any(line.strip() == '* hard core 0' for line in limits_config_path.open('r') if line.strip()):\n        with limits_config_path.open('a') as file:\n            file.write('* hard core 0\\n')\n        print(\"Added '* hard core 0' to /etc/security/limits.conf.\")\n\n    # Ensure fs.suid_dumpable = 0 in durable sysctl config\n    sysctl_config_path = pathlib.Path('/etc/sysctl.d/60-fs_sysctl.conf')\n    if not sysctl_config_path.is_file():\n        sysctl_config_path.parent.mkdir(parents=True, exist_ok=True)\n        with sysctl_config_path.open('w') as file:\n            file.write('fs.suid_dumpable = 0\\n')\n        print(f\"Created {sysctl_config_path} with 'fs.suid_dumpable = 0'.\")\n\n    # Set active kernel parameter fs.suid_dumpable = 0\n    subprocess.run(['sysctl', '-w', 'fs.suid_dumpable=0'])\n    print(\"Set fs.suid_dumpable to 0 in the active kernel configuration.\")\n\n    # Check and remediate systemd-coredump if installed\n    systemd_coredump_chk = subprocess.run(['systemctl', 'list-unit-files', '--', 'coredump'], stdout=subprocess.PIPE, text=True)\n    if systemd_coredump_chk.returncode!= 0:\n        print(\"Error checking for systemd-coredump during remediation.\")\n        return\n    if systemd_coredump_chk.stdout.strip():\n        coredump_config_path = pathlib.Path('/etc/systemd/coredump.conf')\n        config = configparser.ConfigParser()\n        config.read(coredump_config_path)\n        if 'Coredump' not in config:\n            config['Coredump'] = {}\n        config['Coredump']['Storage'] = 'none'\n        config['Coredump']['ProcessSizeMax'] = '0'\n        with coredump_config_path.open('w') as config_file:\n            config.write(config_file)\n        print(\"Updated /etc/systemd/coredump.conf for systemd-coredump.\")\n        subprocess.run(['systemctl', 'daemon-reload'])\n        print(\"Reloaded systemd daemon configuration.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"No remediation necessary.\")\n    else:\n        remediate_vuln()"
  },
  {
    "name": "Ensure prelink is not installed",
    "id": "1.5.4",
    "type": "Automated",
    "start_page": 163,
    "end_page": 164,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "prelink is a program that modifies ELF shared libraries and ELF dynamically linked binaries in such a way that the time needed for the dynamic linker to perform relocations at startup significantly decreases.",
    "rationale": "The prelinking feature can interfere with the operation of AIDE, because it changes binaries. Prelinking can also increase the vulnerability of the system if a malicious user is able to compromise a common library such as libc.",
    "audit_details": "Verify prelink is not installed:\n\n# dpkg-query -s prelink &>/dev/null && echo \"prelink is installed\"\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s prelink &>/dev/null && echo \"prelink is installed\"",
    "remediation_details": "Run the following command to restore binaries to normal:\n\n# prelink -ua\n\nUninstall prelink using the appropriate package manager or manual installation:\n\n# apt purge prelink",
    "remediation_code": "# prelink -ua\n# apt purge prelink",
    "python_script": "\nimport subprocess\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if prelink is installed.\"\"\"\n    cache = apt.Cache()\n    return cache['prelink'].is_installed if 'prelink' in cache else False\n\ndef remediate_vuln() -> None:\n    \"\"\"Restore binaries and uninstall prelink.\"\"\"\n    # Restore binaries (if prelink is installed)\n    if audit_vuln():\n        subprocess.run(['prelink', '-ua'], check=True)\n        print(\"Restored binaries to normal state.\")\n\n    # Uninstall prelink using apt\n    cache = apt.Cache()\n    if 'prelink' in cache and cache['prelink'].is_installed:\n        pkg = cache['prelink']\n        pkg.mark_delete(auto_fix=False)\n        apt_pkg_manager = apt.PkgManager(cache)\n        apt_pkg_manager.commit_pending()\n        print(f\"Uninstalled `{pkg.name}` package.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Prelink is installed. Proceeding with remediation...\")\n        remediate_vuln()\n    else:\n        print(\"Prelink is not installed. No action required.\")\n"
  },
  {
    "name": "Ensure Automatic Error Reporting is not enabled",
    "id": "1.5.5",
    "type": "Automated",
    "start_page": 165,
    "end_page": 166,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Apport Error Reporting Service automatically generates crash reports for debugging",
    "rationale": "Apport collects potentially sensitive data, such as core dumps, stack traces, and log files. They can contain passwords, credit card numbers, serial numbers, and other private material.",
    "audit_details": "Run the following command to verify that the Apport Error Reporting Service is not enabled:\n```\n# dpkg-query -s apport &> /dev/null && grep -Psi -'^\n*enabled\ne*=\ne*[^0]\b' /etc/default/apport\n```\nNothing should be returned\nRun the following command to verify that the apport service is not active:\n```\n# systemctl is-active apport.service | grep '^active'\n```\nNothing should be returned",
    "audit_code": "# dpkg-query -s apport &> /dev/null && grep -Psi -'^\n*enabled\ne*=\ne*[^0]\b' /etc/default/apport\n# systemctl is-active apport.service | grep '^active'",
    "remediation_details": "Edit /etc/default/apport and add or edit the enabled parameter to equal 0:\n```\nenabled=0\n```\nRun the following commands to stop and mask the apport service\n```\n# systemctl stop apport.service\n# systemctl mask apport.service\n```\n**- OR -**\nRun the following command to remove the apport package:\n```\n# apt purge apport\n```",
    "remediation_code": "# vim /etc/default/apport (add or edit the line 'enabled=0')\n# systemctl stop apport.service\n# systemctl mask apport.service\n# apt purge apport",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for the vulnerability: Ensures Automatic Error Reporting (Apport) is not enabled.\n    \n    Returns:\n    bool: True if the vulnerability is not present, False otherwise.\n    \"\"\"\n    # Check if apport is installed\n    if not subprocess.run(['dpkg-query', '-s', 'apport'], stdout=subprocess.DEVNULL).returncode:\n        # Check if enabled parameter is set to 0 in /etc/default/apport\n        with open('/etc/default/apport', 'r') as file:\n            for line in file:\n                if line.strip().startswith('enabled') and line.strip().split('=')[1].strip()!= '0':\n                    print(f\"Apport's enabled parameter is not set to 0: {line.strip()}\")\n                    return False\n        \n        # Check if apport.service is active\n        if subprocess.run(['systemctl', 'is-active', 'apport.service']).stdout.strip().decode() == 'active':\n            print(\"Apport service is active.\")\n            return False\n    \n    # If all checks pass without returning False\n    return True\n\ndef remediate_vuln(mode: str = 'mask') -> None:\n    \"\"\"\n    Remediate the vulnerability by either masking the apport service or completely removing the apport package.\n    \n    Args:\n    mode (str): 'mask' to stop and mask the service, 'remove' to completely remove the apport package. Defaults to 'mask'.\n    \"\"\"\n    if mode not in ['mask', 'remove']:\n        print(\"Invalid mode. Using default 'mask' mode.\")\n        mode = 'mask'\n\n    # Set enabled=0 in /etc/default/apport\n    with open('/etc/default/apport', 'r+') as file:\n        content = file.readlines()\n        file.seek(0)\n        enabled_set = False\n        for line in content:\n            if line.strip().startswith('enabled'):\n                file.write('enabled=0\\n')\n                enabled_set = True\n            else:\n                file.write(line)\n        if not enabled_set:\n            file.write('enabled=0\\n')\n        file.truncate()\n\n    print(\"Set enabled parameter to 0 in /etc/default/apport.\")\n\n    if mode == 'mask':\n        # Stop the apport.service if it's running\n        if subprocess.run(['systemctl', 'is-active', 'apport.service']).stdout.strip().decode() == 'active':\n            subprocess.run(['systemctl', 'stop', 'apport.service'])\n            print(\"Stopped apport.service.\")\n        \n        # Mask the apport.service\n        subprocess.run(['systemctl', 'mask', 'apport.service'])\n        print(\"Masked apport.service.\")\n\n    elif mode == 'remove':\n        # Completely remove the apport package\n        subprocess.run(['apt', 'purge', '-y', 'apport'])\n        print(\"Removed apport package.\")\n```\n\n**Example Usage:**\n```python\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability present. Remediating...\")\n        remediate_vuln('mask')  # or 'remove'\n    else:\n        print(\"System is compliant.\")\n"
  },
  {
    "name": "Ensure message of the day is configured properly",
    "id": "1.6.1",
    "type": "Automated",
    "start_page": 168,
    "end_page": 169,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit_details": "Run the following command and verify that the contents match site policy:\n\n```\n# cat /etc/motd\n```\n\nRun the following command and verify no results are returned:\n```\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\\\"//g'))\" /etc/motd\n```",
    "audit_code": "# cat /etc/motd\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\\\"//g'))\" /etc/motd",
    "remediation_details": "Edit the /etc/motd file with the appropriate contents according to your site policy, remove any instances of \\m, \\r, \\s, \\v or references to the OS platform\n\n**- OR -**\n\n**- IF - the motd is not used, this file can be removed.**\nRun the following command to remove the motd file:\n\n```\n# rm /etc/motd\n```",
    "remediation_code": "# rm /etc/motd\n# edit /etc/motd",
    "python_script": "\nimport os\nimport re\nimport platform\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the /etc/motd file for potential vulnerabilities.\n    \n    Returns:\n        bool: True if the vulnerability is present, False otherwise.\n    \"\"\"\n    motd_path = '/etc/motd'\n    if not os.path.exists(motd_path):\n        return False  # No /etc/motd file, no vulnerability\n    \n    with open(motd_path, 'r') as motd_file:\n        motd_contents = motd_file.read()\n    \n    # Check for OS platform references (e.g., \\m, \\r, \\s, \\v, or the OS name)\n    os_platform = platform.system().lower()\n    patterns = [r'\\\\[mrsbv]', re.escape(os_platform)]\n    for pattern in patterns:\n        if re.search(pattern, motd_contents, re.IGNORECASE):\n            return True  # Vulnerability found\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the /etc/motd file vulnerability by removing the file or editing its contents.\n    \"\"\"\n    motd_path = '/etc/motd'\n    \n    # Remove the /etc/motd file (assuming this is the preferred remediation action)\n    # If editing the contents is preferred, implement the necessary logic here instead\n    if os.path.exists(motd_path):\n        os.remove(motd_path)\n        print(f\"Removed {motd_path} file.\")\n    else:\n        print(f\"{motd_path} file does not exist, no action taken.\")\n"
  },
  {
    "name": "Ensure local login warning banner is configured properly",
    "id": "1.6.2",
    "type": "Automated",
    "start_page": 170,
    "end_page": 171,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals.\n\nUnix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit_details": "Run the following command and verify that the contents match site policy:\n```\n# cat /etc/issue\n```\nRun the following command and verify no results are returned:\n```\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue\n```",
    "audit_code": "# cat /etc/issue\n\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue",
    "remediation_details": "Edit the /etc/issue file with the appropriate contents according to your site policy, remove any instances of \\m, \\r, \\s, \\v or references to the OS platform\n_Example:_\n```\n# echo \"Authorized users only. All activity may be monitored and reported.\" >/etc/issue\n```",
    "remediation_code": "# echo \"Authorized users only. All activity may be monitored and reported.\" >/etc/issue",
    "python_script": "\nimport os\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit /etc/issue for compliance with site policy\"\"\"\n    try:\n        with open('/etc/issue', 'r') as file:\n            issue_content = file.read()\n            # Check if content matches site policy (example policy used here)\n            if \"Authorized users only. All activity may be monitored and reported.\" not in issue_content:\n                print(f\"/etc/issue does not match site policy: {issue_content.strip()}\")\n                return False\n            # Check for OS-related escape sequences or platform references\n            if re.search(r'\\\\[mrvs]|' + get_os_platform(), issue_content, re.IGNORECASE):\n                print(\"/etc/issue contains non-compliant OS information\")\n                return False\n            print(\"/etc/issue audit: compliant\")\n            return True\n    except FileNotFoundError:\n        print(\"/etc/issue not found\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate /etc/issue configuration\"\"\"\n    compliant_banner = \"Authorized users only. All activity may be monitored and reported.\\n\"\n    try:\n        with open('/etc/issue', 'w') as file:\n            file.write(compliant_banner)\n            print(f\"Updated /etc/issue with compliant banner: {compliant_banner.strip()}\")\n    except PermissionError:\n        print(\"Insufficient permissions to update /etc/issue\")\n    except Exception as e:\n        print(f\"Failed to update /etc/issue: {str(e)}\")\n\ndef get_os_platform() -> str:\n    \"\"\"Retrieve OS platform (e.g., 'ubuntu')\"\"\"\n    with open('/etc/os-release', 'r') as file:\n        for line in file:\n            if line.startswith('ID='):\n                return line.split('=')[1].strip().strip('\"')\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure remote login warning banner is configured properly",
    "id": "1.6.3",
    "type": "Automated",
    "start_page": 172,
    "end_page": 173,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.\n\nUnix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture\n```\n\\r - operating system release \\s - operating system name \\v - operating system version\n```\n",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit_details": "Run the following command and verify that the contents match site policy:\n```\n# cat /etc/issue.net\n```\n\nRun the following command and verify no results are returned:\n```\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue.net\n```",
    "audit_code": "# cat /etc/issue.net\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue.net",
    "remediation_details": "Edit the /etc/issue.net file with the appropriate contents according to your site policy, remove any instances of \\m, \\r, \\s, \\v or references to the OS platform.\n_Example:_\n```\n# echo \"Authorized users only. All activity may be monitored and reported.\" > /etc/issue.net\n```",
    "remediation_code": "# echo \"Authorized users only. All activity may be monitored and reported.\" > /etc/issue.net",
    "python_script": "\nimport re\n\n# Default expected content for site policy audit simulation\nEXPECTED_CONTENT = \"Authorized users only. All activity may be monitored and reported.\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if the /etc/issue.net file is properly configured.\"\"\"\n    try:\n        with open(\"/etc/issue.net\", 'r') as file:\n            content = file.read()\n            # Simulated site policy check (adjust EXPECTED_CONTENT as needed)\n            if content.strip() != EXPECTED_CONTENT:\n                print(\"Site policy not met in /etc/issue.net.\")\n                return False\n            \n            # Check for unwanted strings\n            patterns = [r'\\\\[vrs]', re.escape(get_os_platform_id())]\n            for pattern in patterns:\n                if re.search(pattern, content, re.IGNORECASE):\n                    print(f\"Unwanted pattern '{pattern}' found in /etc/issue.net.\")\n                    return False\n            return True\n    except FileNotFoundError:\n        print(\"/etc/issue.net not found.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by writing a default warning to /etc/issue.net.\"\"\"\n    default_warning = \"Authorized users only. All activity may be monitored and reported.\"\n    with open(\"/etc/issue.net\", 'w') as file:\n        file.write(default_warning)\n    print(f\"Wrote default warning to /etc/issue.net: '{default_warning}'.\")\n\ndef get_os_platform_id() -> str:\n    \"\"\"Retrieve the OS platform ID from /etc/os-release.\"\"\"\n    try:\n        with open(\"/etc/os-release\", 'r') as file:\n            for line in file.readlines():\n                if line.startswith(\"ID=\"):\n                    return line.split(\"=\")[1].strip().strip('\"')\n    except FileNotFoundError:\n        print(\"/etc/os-release not found. Using default for OS platform ID.\")\n        return \"unknown\"\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure access to /etc/motd is configured",
    "id": "1.6.4",
    "type": "Automated",
    "start_page": 174,
    "end_page": 175,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users.",
    "rationale": "- IF - the /etc/motd file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information.",
    "audit_details": "Run the following command and verify that if /etc/motd exists, Access is 644 or more restrictive, Uid and Gid are both 0/root:\n```\n# [ -e /etc/motd ] && stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/%G)' /etc/motd\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n -- OR -Nothing is returned\n```\n",
    "audit_code": "# [ -e /etc/motd ] && stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/%G)' /etc/motd\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "Run the following commands to set mode, owner, and group on /etc/motd:\n```\n# chown root:root $(readlink -e /etc/motd)\n# chmod u-x,go-wx $(readlink -e /etc/motd)\n```\n**- OR -**\nRun the following command to remove the /etc/motd file:\n```\n# rm /etc/motd\n```\n",
    "remediation_code": "# chown root:root $(readlink -e /etc/motd)\n# chmod u-x,go-wx $(readlink -e /etc/motd)\n# rm /etc/motd",
    "python_script": "\nimport os\nimport stat\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit /etc/motd access configuration\"\"\"\n    motd_path = '/etc/motd'\n    if not os.path.exists(motd_path):\n        return True  # File does not exist, consider it compliant\n    \n    # Get file stats\n    file_stat = os.stat(motd_path)\n    \n    # Check owner and group\n    if file_stat.st_uid!= 0 or file_stat.st_gid!= 0:\n        return False\n    \n    # Check access mode (644 or more restrictive)\n    desired_mode = stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH\n    if file_stat.st_mode & ~desired_mode!= 0:\n        return False\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate /etc/motd access configuration\"\"\"\n    motd_path = '/etc/motd'\n    \n    if os.path.exists(motd_path):\n        # Attempt to correct permissions and ownership\n        try:\n            # Set owner and group to root\n            shutil.chown(motd_path, user='root', group='root')\n            print(f\"Set owner and group of '{motd_path}' to root:root.\")\n            \n            # Set access mode to 644 (more restrictive by removing exec for owner, write for group and others)\n            os.chmod(motd_path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)\n            print(f\"Set permissions of '{motd_path}' to 644.\")\n        except Exception as e:\n            print(f\"Error remediating '{motd_path}' permissions: {e}\")\n            # Fallback to removal if correction fails\n            try:\n                os.remove(motd_path)\n                print(f\"Removed '{motd_path}' due to failed permission remediation.\")\n            except Exception as e:\n                print(f\"Error removing '{motd_path}': {e}\")\n    else:\n        # If the file does not exist, consider it remediated\n        pass\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"/etc/motd access configuration is not compliant.\")\n        remediate_vuln()\n    else:\n        print(\"/etc/motd access configuration is compliant.\")\n"
  },
  {
    "name": "Ensure access to /etc/issue is configured",
    "id": "1.6.5",
    "type": "Automated",
    "start_page": 176,
    "end_page": 177,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals.",
    "rationale": "IF the /etc/issue file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information.",
    "audit_details": "Run the following command and verify Access is 644 or more restrictive and Uid and Gid are both 0/root:\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)",
    "remediation_details": "Run the following commands to set mode, owner, and group on /etc/issue:\n```\n# chown root:root $(readlink -e /etc/issue)\n# chmod u-x,go-wx $(readlink -e /etc/issue)\n```\n",
    "remediation_code": "# chown root:root $(readlink -e /etc/issue)\n# chmod u-x,go-wx $(readlink -e /etc/issue)",
    "python_script": "\nimport os\nimport stat\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits the access, owner, and group of the /etc/issue file.\"\"\"\n    issue_file = Path(\"/etc/issue\").resolve()\n    file_stat = issue_file.stat()\n    \n    # Check access (644 or more restrictive)\n    access_ok = (file_stat.st_mode & 0o777) <= 0o644\n    \n    # Check owner and group (both should be 0/root)\n    owner_ok = file_stat.st_uid == 0\n    group_ok = file_stat.st_gid == 0\n    \n    print(f\"Access: ({stat.filemode(file_stat.st_mode)}) Uid: ({file_stat.st_uid}/ {issue_file.owner()}) Gid: ({file_stat.st_gid}/ {issue_file.group()})\")\n    \n    return access_ok and owner_ok and group_ok\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the access, owner, and group of the /etc/issue file.\"\"\"\n    issue_file = Path(\"/etc/issue\").resolve()\n    \n    # Set owner and group to root:root\n    os.chown(issue_file, 0, 0)\n    print(f\"Set owner and group of {issue_file} to root:root.\")\n    \n    # Set permissions to at most 644 (u-x, go-wx)\n    new_permissions = issue_file.stat().st_mode & ~stat.S_IWOTH & ~stat.S_IXOTH & ~stat.S_IWGRP & ~stat.S_IXGRP & ~stat.S_IXUSR\n    os.chmod(issue_file, new_permissions)\n    print(f\"Set permissions of {issue_file} to {stat.filemode(new_permissions)}.\")\n"
  },
  {
    "name": "Ensure access to /etc/issue.net is configured",
    "id": "1.6.6",
    "type": "Automated",
    "start_page": 178,
    "end_page": 179,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.",
    "rationale": "IF the /etc/issue.net file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information.",
    "audit_details": "Run the following command and verify Access is 644 or more restrictive and Uid and Gid are both 0/root:\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue.net\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root)  Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue.net\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root)  Gid: ( 0/ root)",
    "remediation_details": "Run the following commands to set mode, owner, and group on /etc/issue.net:\n```\n# chown root:root $(readlink -e /etc/issue.net)\n# chmod u-x,go-wx $(readlink -e /etc/issue.net)\n```",
    "remediation_code": "# chown root:root $(readlink -e /etc/issue.net)\n# chmod u-x,go-wx $(readlink -e /etc/issue.net)",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the access configuration of /etc/issue.net.\n    \n    Returns:\n    bool: True if the access configuration is secure (644 or more restrictive, owned by root:root), False otherwise.\n    \"\"\"\n    file_path = \"/etc/issue.net\"\n    file_stat = os.stat(file_path)\n    \n    # Check ownership (UID and GID)\n    if file_stat.st_uid!= 0 or file_stat.st_gid!= 0:\n        return False\n    \n    # Check permissions (644 or more restrictive)\n    desired_permissions = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    if file_stat.st_mode & ~stat.S_IFMT!= desired_permissions:\n        return False\n    \n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the access configuration of /etc/issue.net.\n    \n    Sets the ownership to root:root and permissions to 644 (or more restrictive).\n    \"\"\"\n    file_path = \"/etc/issue.net\"\n    root_uid = pwd.getpwnam('root').pw_uid\n    root_gid = pwd.getpwnam('root').pw_gid\n    \n    # Set ownership to root:root\n    os.chown(file_path, root_uid, root_gid)\n    print(f\"Set ownership of {file_path} to root:root.\")\n    \n    # Set permissions to 644 (or more restrictive)\n    desired_permissions = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    current_permissions = os.stat(file_path).st_mode & ~stat.S_IFMT\n    if current_permissions!= desired_permissions:\n        shutil.chown(file_path, user='root', group='root')  # Ensure ownership before modifying permissions\n        os.chmod(file_path, desired_permissions)\n        print(f\"Set permissions of {file_path} to 644 (or more restrictive).\")\n"
  },
  {
    "name": "Ensure GDM login banner is configured",
    "id": "1.7.2",
    "type": "Automated",
    "start_page": 183,
    "end_page": 186,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems.",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place.",
    "audit_details": "- IF - GDM is installed: Run the following script to verify that the text banner on the login screen is enabled and set:\n\n```bash\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_gdmfile=\"$(grep -Prils '^\n*banner-message-enable\\b' /etc/dconf/db/*.d)\"\n   if [ -n \"$l_gdmfile\" ]; then\n     # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n     l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n     # Check if banner message is enabled\n     if grep -Pisq '^\n*banner-message-enable=true\\b' \"$l_gdmfile\"; then\n      l_output=\"$l_output\\n - The \\\"banner-message-enable\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option is not enabled\"\n     fi\n     l_lsbt=\"$(grep -Pios '^\n*banner-message-text=.*$' \"$l_gdmfile\")\"\n     if [ -n \"$l_lsbt\" ]; then\n      l_output=\"$l_output\\n - The \\\"banner-message-text\\\" option is set in \\\"$l_gdmfile\\\"\\n - banner-message-text is set to:\\n - \\\"$l_lsbt\\\"\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"banner-message-text\\\" option is not set\"\n     fi\n     if grep -Pq \"^\n*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n      l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist\"\n     fi\n     if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n      l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option isn't configured\"\n   fi\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n- Audit result:\\n *** PASS ***\\n\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n} \n```",
    "audit_code": "```bash\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_gdmfile=\"$(grep -Prils '^\n*banner-message-enable\\b' /etc/dconf/db/*.d)\"\n   if [ -n \"$l_gdmfile\" ]; then\n     # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n     l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n     # Check if banner message is enabled\n     if grep -Pisq '^\n*banner-message-enable=true\\b' \"$l_gdmfile\"; then\n      l_output=\"$l_output\\n - The \\\"banner-message-enable\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option is not enabled\"\n     fi\n     l_lsbt=\"$(grep -Pios '^\n*banner-message-text=.*$' \"$l_gdmfile\")\"\n     if [ -n \"$l_lsbt\" ]; then\n      l_output=\"$l_output\\n - The \\\"banner-message-text\\\" option is set in \\\"$l_gdmfile\\\"\\n - banner-message-text is set to:\\n - \\\"$l_lsbt\\\"\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"banner-message-text\\\" option is not set\"\n     fi\n     if grep -Pq \"^\n*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n      l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist\"\n     fi\n     if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n      l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option isn't configured\"\n   fi\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n - Audit result:\\n *** PASS ***\\n\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n```",
    "remediation_details": "- IF - GDM is installed: Run the following script to set and enable the text banner message on the login screen:\n\n```bash\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_gdmprofile=\"gdm\" # Set this to desired profile name IaW Local site policy\n   l_bmessage=\"'Authorized uses only. All activity may be monitored and reported'\" # Set to desired banner message\n   if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n     echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n     echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfiledb:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n   fi\n   if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n     echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\"\n     mkdir /etc/dconf/db/$l_gdmprofile.d/\n   fi\n   if ! grep -Piq '^\n*banner-message-enable\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then\n     echo \"creating gdm keyfile for machine-wide settings\"\n     if ! grep -Piq -- '^\n*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*; then\n      l_kfile=\"/etc/dconf/db/$l_gdmprofile.d/01-banner-message\"\n      echo -e \"\\n[org/gnome/login-screen]\\nbanner-message-enable=true\" >> \"$l_kfile\"\n     else\n      l_kfile=\"$(grep -Pil -- '^\n*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*)\"\n      ! grep -Pq '^\n*\\[org\\/gnome\\/login-screen\\]' \"$l_kfile\" && sed -ri '/^\\s*bannermessage-enable/ i\\[org/gnome/login-screen]' \"$l_kfile\"\n      ! grep -Pq '^\n*banner-message-enable\\h*=\\h*true\\b' \"$l_kfile\" && sed -ri 's/^\\s*(banner-message-enable\\s*=\\s*)(\\S+)(\\s*.*$)/\\1true \\3/' \"$l_kfile\"\n #      sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\\nbanner-message-enable=true' \"$l_kfile\"\n     fi\n   fi\n   if ! grep -Piq '^\\h*banner-message-text=[\\'\"]+\\S+' \"$l_kfile\"; then\n     sed -ri \"/^\\s*banner-message-enable/ a\\banner-message-text=$l_bmessage\" \"$l_kfile\"\n   fi\n   dconf update\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n - No remediation required\\n\"\n  fi\n}\n```",
    "remediation_code": "```bash\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_gdmprofile=\"gdm\" # Set this to desired profile name IaW Local site policy\n   l_bmessage=\"'Authorized uses only. All activity may be monitored and reported'\" # Set to desired banner message\n   if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n     echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n     echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfiledb:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n   fi\n   if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n     echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\"\n     mkdir /etc/dconf/db/$l_gdmprofile.d/\n   fi\n   if ! grep -Piq '^\n*banner-message-enable\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then\n     echo \"creating gdm keyfile for machine-wide settings\"\n     if ! grep -Piq -- '^\n*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*; then\n      l_kfile=\"/etc/dconf/db/$l_gdmprofile.d/01-banner-message\"\n      echo -e \"\\n[org/gnome/login-screen]\\nbanner-message-enable=true\" >> \"$l_kfile\"\n     else\n      l_kfile=\"$(grep -Pil -- '^\n*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*)\"\n      ! grep -Pq '^\n*\\[org\\/gnome\\/login-screen\\]' \"$l_kfile\" && sed -ri '/^\\s*bannermessage-enable/ i\\[org/gnome/login-screen]' \"$l_kfile\"\n      ! grep -Pq '^\n*banner-message-enable\\h*=\\h*true\\b' \"$l_kfile\" && sed -ri 's/^\\s*(banner-message-enable\\s*=\\s*)(\\S+)(\\s*.*$)/\\1true \\3/' \"$l_kfile\"\n #      sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\\nbanner-message-enable=true' \"$l_kfile\"\n     fi\n   fi\n   if ! grep -Piq '^\\h*banner-message-text=[\\'\"]+\\S+' \"$l_kfile\"; then\n     sed -ri \"/^\\s*banner-message-enable/ a\\banner-message-text=$l_bmessage\" \"$l_kfile\"\n   fi\n   dconf update\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n - No remediation required\\n\"\n  fi\n}\n```",
    "python_script": "\nimport subprocess\nimport os\n\n# Constants\nGDM_PACKAGES = [\"gdm\", \"gdm3\"]\nPROFILE_NAME = \"gdm\"\nBANNER_MESSAGE = \"'Authorized uses only. All activity may be monitored and reported'\"\nDCONF_DB_PATH = f\"/etc/dconf/db/{PROFILE_NAME}.d/\"\nPROFILE_FILE_PATH = f\"/etc/dconf/profile/{PROFILE_NAME}\"\nKEYFILE_PATH = os.path.join(DCONF_DB_PATH, \"01-banner-message\")\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if the GDM login banner is configured correctly.\"\"\"\n    # Check if GDM is installed\n    installed = any(subprocess.run(f\"dpkg -s {pkg}\", shell=True, stdout=subprocess.DEVNULL).returncode == 0 for pkg in GDM_PACKAGES)\n    if not installed:\n        print(\"GNOME Desktop Manager isn't installed. Recommendation is Not Applicable.\")\n        return True  # Not applicable is considered as not vulnerable in this context\n\n    # Check for profile and database existence\n    if not os.path.exists(PROFILE_FILE_PATH):\n        print(f\"The {PROFILE_NAME} profile doesn't exist.\")\n        return False\n    if not os.path.exists(DCONF_DB_PATH):\n        print(f\"The {PROFILE_NAME} profile doesn't exist in the dconf database.\")\n        return False\n\n    # Check banner-message-enable and banner-message-text\n    keyfile_exists = os.path.exists(KEYFILE_PATH)\n    if keyfile_exists:\n        with open(KEYFILE_PATH, 'r') as file:\n            content = file.read()\n            if \"[org/gnome/login-screen]\" not in content or \"banner-message-enable=true\" not in content or f\"banner-message-text={BANNER_MESSAGE}\" not in content:\n                print(\"The banner-message-enable or banner-message-text option is not correctly set.\")\n                return False\n    else:\n        print(\"The banner-message keyfile does not exist.\")\n        return False\n\n    print(\"The GDM login banner is configured correctly.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by configuring the GDM login banner.\"\"\"\n    # Check if GDM is installed (for completeness, though audit_vuln should precede this in practice)\n    if not any(subprocess.run(f\"dpkg -s {pkg}\", shell=True, stdout=subprocess.DEVNULL).returncode == 0 for pkg in GDM_PACKAGES):\n        print(\"GNOME Desktop Manager isn't installed. Recommendation is Not Applicable. No remediation required.\")\n        return\n\n    # Create profile if it doesn't exist\n    if not os.path.exists(PROFILE_FILE_PATH):\n        print(f\"Creating profile {PROFILE_NAME}\")\n        with open(PROFILE_FILE_PATH, 'w') as file:\n            file.write(f\"user-db:user\\nsystem-db:{PROFILE_NAME}\\nfiledb:/usr/share/{PROFILE_NAME}/greeter-dconf-defaults\")\n\n    # Create dconf database directory if it doesn't exist\n    if not os.path.exists(DCONF_DB_PATH):\n        print(f\"Creating dconf database directory {DCONF_DB_PATH}\")\n        os.makedirs(DCONF_DB_PATH)\n\n    # Configure banner settings\n    if not os.path.exists(KEYFILE_PATH):\n        print(\"Creating gdm keyfile for machine-wide settings\")\n        with open(KEYFILE_PATH, 'a') as file:\n            file.write(f\"[org/gnome/login-screen]\\nbanner-message-enable=true\\nbanner-message-text={BANNER_MESSAGE}\")\n    else:\n        # Modify existing keyfile if settings are not correct\n        with open(KEYFILE_PATH, 'r+') as file:\n            content = file.read()\n            if \"[org/gnome/login-screen]\" not in content:\n                file.write(\"[org/gnome/login-screen]\\n\")\n            if \"banner-message-enable=true\" not in content:\n                file.write(\"banner-message-enable=true\\n\")\n            if f\"banner-message-text={BANNER_MESSAGE}\" not in content:\n                file.write(f\"banner-message-text={BANNER_MESSAGE}\\n\")\n\n    # Update dconf\n    subprocess.run(\"dconf update\", shell=True, stdout=subprocess.DEVNULL)\n    print(\"GDM login banner configuration remediated successfully.\")\n"
  },
  {
    "name": "Ensure GDM disable-user-list option is enabled",
    "id": "1.7.3",
    "type": "Automated",
    "start_page": 187,
    "end_page": 190,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems. The disable-user-list option controls if a list of users is displayed on the login screen.",
    "rationale": "Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on.",
    "audit_details": "- IF - GDM is installed: Run the following script and to verify that the disable-user-list option is enabled, or GNOME isn't installed: Page 186\n-----\n```\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package:\\",
    "audit_code": "\"$l_pn\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   output=\"\" output2=\"\"\n   l_gdmfile=\"$(grep -Pril '^\nh*disable-user-list\\h*=\\h*true\\b' /etc/dconf/db)\"\n   if [ -n \"$l_gdmfile\" ]; then\n     output=\"$output\\n - The \\\"disable-user-list\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n     l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n     if grep -Pq \"^\nh*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n      output=\"$output\\n - The \\\"$l_gdmprofile\\\" exists\"\n     else\n      output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" doesn't exist\"\n     fi\n     if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n      output=\"$output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n     else\n      output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n     fi\n   else\n     output2=\"$output2\\n - The \\\"disable-user-list\\\" option is not enabled\"\n   fi\n   if [ -z \"$output2\" ]; then\n     echo -e \"$l_pkgoutput\\n- Audit result:\\n  *** PASS: ***\\n$output\\n\"\n   else\n     echo -e \"$l_pkgoutput\\n- Audit Result:\\n  *** FAIL: ***\\n$output2\\n\"\n     [ -n \"$output\" ] && echo -e \"$output\\n\"\n   fi\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n Recommendation is Not Applicable\\n- Audit result:\\n *** PASS ***\\n\"\n  fi\n}\n```\nPage 187\n-----",
    "remediation_details": "- IF - GDM is installed: Run the following script to enable the disable-user-list option: Note: the l_gdm_profile variable in the script can be changed if a different profile name is desired in accordance with local site policy.  \n```\n#!/usr/bin/env bash\n{\n  l_gdmprofile=\"gdm\"\n  if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n   echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n   echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfiledb:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n  fi\n  if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n   echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\"\n   mkdir /etc/dconf/db/$l_gdmprofile.d/\n  fi\n  if ! grep -Piq '^\nh*disable-user-list\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then\n   echo \"creating gdm keyfile for machine-wide settings\"\n   if ! grep -Piq -- '^\nh*\\[org\\/gnome\\/login-screen\\]' /etc/dconf/db/$l_gdmprofile.d/*; then\n     echo -e \"\\n[org/gnome/login-screen]\\n# Do not show the user list\\ndisable-user-list=true\" >> /etc/dconf/db/$l_gdmprofile.d/00-loginscreen\n   else\n     sed -ri '/^\\s*\\[org\\/gnome\\/login-screen\\]/ a\\# Do not show the user list\\ndisable-user-list=true' $(grep -Pil -- '^\nh*\\[org\\/gnome\\/loginscreen\\]' /etc/dconf/db/$l_gdmprofile.d/*)\n   fi\n  fi\n  dconf update\n}\n```\n Note: When the user profile is created or changed, the user will need to log out and log in again before the changes will be applied.",
    "remediation_code": "Default Value:\nfalse\n\n References:\n 1. https://help.gnome.org/admin/system-admin-guide/stable/login-userlist disable.html.en\n 2. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5\n```\nPage 188\n-----\n## Additional Information:\n If a different GUI login service is in use and required on the system, consult your documentation to disable displaying the user list\n\n MITRE ATT&CK Mappings:\n Techniques / Sub Tactics Mitigations techniques\n T1078, T1078.001,\n T1078.002, T1078.003,\n TA0007 M1028\n T1087, T1087.001,\n T1087.002\n\nPage 189\n|MITRE ATT&CK Mappings:|Col2|Col3|\n|---|---|---|\n|Techniques / Sub- techniques|Tactics|Mitigations|\n|T1078, T1078.001, T1078.002, T1078.003, T1087, T1087.001, T1087.002|TA0007|M1028|",
    "python_script": "\nimport os\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if GDM is installed and disable-user-list option is enabled\"\"\"\n    gdm_installed = pkg_resources.working_set.find('gdm') is not None\n    if not gdm_installed:\n        print(\"GNOME Desktop Manager isn't installed\")\n        return True  # Not installed, consider as not vulnerable\n\n    gdm_profile_dir = '/etc/dconf/db/gdm.d/'\n    gdm_config_file = os.path.join(gdm_profile_dir, '00-loginscreen')\n    config_exists = os.path.exists(gdm_config_file)\n    option_enabled = False\n\n    if config_exists:\n        with open(gdm_config_file, 'r') as file:\n            for line in file:\n                if line.strip() == 'disable-user-list=true':\n                    option_enabled = True\n                    break\n\n    if option_enabled:\n        print(\"The \\\"disable-user-list\\\" option is enabled in\", gdm_config_file)\n        return True\n    else:\n        print(\"The \\\"disable-user-list\\\" option is not enabled\")\n        return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by creating necessary config files and updating dconf\"\"\"\n    gdm_profile_dir = '/etc/dconf/db/gdm.d/'\n    gdm_config_file = os.path.join(gdm_profile_dir, '00-loginscreen')\n    gdm_profile_file = '/etc/dconf/profile/gdm'\n\n    # Create gdm profile file if it doesn't exist\n    if not os.path.exists(gdm_profile_file):\n        print(\"Creating profile \\\"gdm\\\"\")\n        with open(gdm_profile_file, 'w') as file:\n            file.write(\"user-db:user\\nsystem-db:gdm\\nfiledb:/usr/share/gdm/greeter-dconf-defaults\")\n\n    # Create gdm config directory if it doesn't exist\n    if not os.path.exists(gdm_profile_dir):\n        print(\"Creating dconf database directory\", gdm_profile_dir)\n        os.makedirs(gdm_profile_dir)\n\n    # Create or update gdm config file to enable disable-user-list\n    if not os.path.exists(gdm_config_file):\n        print(\"Creating gdm keyfile for machine-wide settings\")\n        with open(gdm_config_file, 'w') as file:\n            file.write(\"[org/gnome/login-screen]\\n# Do not show the user list\\ndisable-user-list=true\")\n    else:\n        with open(gdm_config_file, 'r+') as file:\n            content = file.read()\n            if '[org/gnome/login-screen]' not in content:\n                file.write(\"\\n[org/gnome/login-screen]\\n# Do not show the user list\\ndisable-user-list=true\")\n            elif 'disable-user-list=true' not in content:\n                file.write(\"\\n# Do not show the user list\\ndisable-user-list=true\")\n\n    # Update dconf\n    subprocess.run(['dconf', 'update'])\n    print(\"Updated dconf configuration\")\n"
  },
  {
    "name": "Ensure GDM screen locks when the user is idle",
    "id": "1.7.4",
    "type": "Automated",
    "start_page": 191,
    "end_page": 193,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time.",
    "rationale": "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.",
    "audit_details": "Run the following commands to verify that the screen locks when the user is idle:\n```\n# gsettings get org.gnome.desktop.screensaver lock-delay\nuint32 5\n# gsettings get org.gnome.desktop.session idle-delay\nuint32 900\n```\n**Notes:**\n  - `lock-delay=uint32 {n} - should be 5 seconds or less and follow local site policy`\n  - `idle-delay=uint32 {n} - Should be 900 seconds (15 minutes) or less, not 0` (disabled) and follow local site policy",
    "audit_code": "# gsettings get org.gnome.desktop.screensaver lock-delay\nuint32 5\n# gsettings get org.gnome.desktop.session idle-delay\nuint32 900",
    "remediation_details": "Run the following commands to enable screen locks when the user is idle:\n```\n# gsettings set org.gnome.desktop.screensaver lock-delay 5\n# gsettings set org.gnome.desktop.session idle-delay 900\n```\n**- OR-**\n1. Create or edit the user profile in the /etc/dconf/profile/ and verify it includes the following:\n```\nuser-db:user\nsystem-db:{NAME_OF_DCONF_DATABASE}\n```\n**Note:** `local is the name of a dconf database used in the examples.`\n\n2. Create the directory /etc/dconf/db/local.d/ if it doesn't already exist:\n3. Create the key file /etc/dconf/db/local.d/00-screensaver to provide information for the local database:\n\n_Example key file:_\n```\n# Specify the dconf path\n[org/gnome/desktop/session]\n# Number of seconds of inactivity before the screen goes blank\n# Set to 0 seconds if you want to deactivate the screensaver.\nidle-delay=uint32 180\n# Specify the dconf path\n[org/gnome/desktop/screensaver]\n# Number of seconds after the screen is blank before locking the screen\nlock-delay=uint32 0\n```\n**Note: You must include the uint32 along with the integer key values as shown.**\n\n4. Run the following command to update the system databases:\n```\n# dconf update\n```\n5. Users must log out and back in again before the system-wide settings take effect.\n\n**Note: Users must log out and back in again before the system-wide settings take effect.**",
    "remediation_code": "# gsettings set org.gnome.desktop.screensaver lock-delay 5\n# gsettings set org.gnome.desktop.session idle-delay 900\n\n# dconf update\n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit to ensure GDM screen locks when the user is idle.\"\"\"\n    \n    # Define policy compliance thresholds\n    max_lock_delay = 5  # seconds\n    max_idle_delay = 900  # seconds\n    \n    try:\n        # Retrieve current settings\n        lock_delay_cmd = subprocess.check_output(['gsettings', 'get', 'org.gnome.desktop.screensaver', 'lock-delay'])\n        idle_delay_cmd = subprocess.check_output(['gsettings', 'get', 'org.gnome.desktop.session', 'idle-delay'])\n        \n        # Convert outputs to integers (commands return byte strings, e.g., b'uint32 5\\n')\n        lock_delay = int(lock_delay_cmd.decode().split()[-1])\n        idle_delay = int(idle_delay_cmd.decode().split()[-1])\n        \n        # Check against policy\n        compliant = (lock_delay <= max_lock_delay) and (idle_delay <= max_idle_delay) and (idle_delay != 0)\n        \n        print(f\"Current lock-delay: {lock_delay} seconds\")\n        print(f\"Current idle-delay: {idle_delay} seconds\")\n        print(f\"Compliant with policy: {compliant}\")\n        \n        return compliant\n    \n    except Exception as e:\n        print(f\"Audit error: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate to ensure GDM screen locks when the user is idle.\"\"\"\n    \n    # Define desired settings\n    desired_lock_delay = 5  # seconds, adjust as per local site policy\n    desired_idle_delay = 900  # seconds, adjust as per local site policy\n    \n    try:\n        # Set new settings\n        subprocess.check_call(['gsettings', 'set', 'org.gnome.desktop.screensaver', 'lock-delay', str(desired_lock_delay)])\n        print(f\"Set lock-delay to {desired_lock_delay} seconds.\")\n        \n        subprocess.check_call(['gsettings', 'set', 'org.gnome.desktop.session', 'idle-delay', str(desired_idle_delay)])\n        print(f\"Set idle-delay to {desired_idle_delay} seconds.\")\n        \n    except Exception as e:\n        print(f\"Remediation error: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        print(\"Please log out and back in for the changes to take effect.\")\n        audit_vuln()  # Re-audit after remediation (Note: This won't reflect changes until the user logs out and back in)\n"
  },
  {
    "name": "Ensure GDM screen locks cannot be overridden",
    "id": "1.7.5",
    "type": "Automated",
    "start_page": 194,
    "end_page": 196,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GNOME Desktop Manager can lock down specific settings by using the lockdown mode in dconf to prevent users from changing specific settings.\n\nTo lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.",
    "rationale": "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.\n\nWithout locking down the system settings, user settings take precedence over the system settings.",
    "audit_details": "Run the following script to verify that the screen lock cannot be overridden:\n```\n#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is\nNot Applicable\n  # Determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query > /dev/null 2>&1; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm > /dev/null 2>&1; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space-separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists\n on the system\\n - checking configuration\"\n  done\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   # Check if the idle-delay is locked\n   if grep -Psrilq '^\\\\h*idle-delay\\\\h*=\\\\h*uint32\\\\h+\\\\d+\\\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"idle-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not set so it cannot be locked\"\n   fi\n   # Check if the lock-delay is locked\n   if grep -Psrilq '^\\\\h*lock-delay\\\\h*=\\\\h*uint32\\\\h+\\\\d+\\\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"lock-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not set so it cannot be locked\"\n   fi\n  else\n   l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n Recommendation is not applicable\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is\nNot Applicable\n  # Determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query > /dev/null 2>&1; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm > /dev/null 2>&1; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space-separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists\n on the system\\n - checking configuration\"\n  done\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   # Check if the idle-delay is locked\n   if grep -Psrilq '^\\\\h*idle-delay\\\\h*=\\\\h*uint32\\\\h+\\\\d+\\\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"idle-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not set so it cannot be locked\"\n   fi\n   # Check if the lock-delay is locked\n   if grep -Psrilq '^\\\\h*lock-delay\\\\h*=\\\\h*uint32\\\\h+\\\\d+\\\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"lock-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not set so it cannot be locked\"\n   fi\n  else\n   l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n Recommendation is not applicable\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "1. To prevent the user from overriding these settings, create the file\n```\n    /etc/dconf/db/local.d/locks/screensaver with the following content:\n# Lock desktop screensaver settings\n/org/gnome/desktop/session/idle-delay\n/org/gnome/desktop/screensaver/lock-delay\n\n2. Update the system databases:\n\n```\n# dconf update\n```\n\n### Note: Users must log out and back in again before the system-wide settings take effect.",
    "remediation_code": "# Lock desktop screensaver settings\n/org/gnome/desktop/session/idle-delay\n/org/gnome/desktop/screensaver/lock-delay\n\n# dconf update",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    # Check if GDM is installed\n    if not any(subprocess.run(['dpkg', '-s', pkg], stdout=subprocess.DEVNULL).returncode == 0 \n               for pkg in ['gdm', 'gdm3']):\n        print(\"GNOME Desktop Manager package is not installed on the system. Recommendation is not applicable\")\n        return True  # Not Applicable\n\n    # Check if idle-delay and lock-delay are locked\n    locks_dir = '/etc/dconf/db/*/locks'\n    idle_delay_locked = subprocess.run(['grep', '-Prilq', '/org/gnome/desktop/session/idle-delay', locks_dir], \n                                        stdout=subprocess.DEVNULL).returncode == 0\n    lock_delay_locked = subprocess.run(['grep', '-Prilq', '/org/gnome/desktop/screensaver/lock-delay', locks_dir], \n                                        stdout=subprocess.DEVNULL).returncode == 0\n\n    # Check if idle-delay and lock-delay are set\n    config_dir = '/etc/dconf/db/*/'\n    idle_delay_set = subprocess.run(['grep', '-Psrilq', '^\\\\h*idle-delay\\\\h*=\\\\h*uint32\\\\h+\\\\d+\\\\b', config_dir], \n                                     stdout=subprocess.DEVNULL).returncode == 0\n    lock_delay_set = subprocess.run(['grep', '-Psrilq', '^\\\\h*lock-delay\\\\h*=\\\\h*uint32\\\\h+\\\\d+\\\\b', config_dir], \n                                     stdout=subprocess.DEVNULL).returncode == 0\n\n    # Report results\n    if idle_delay_locked and lock_delay_locked:\n        print(\"- 'idle-delay' is locked\")\n        print(\"- 'lock-delay' is locked\")\n        return True  # PASS\n    else:\n        output = []\n        if not idle_delay_locked:\n            output.append(\"- 'idle-delay' is not locked\" if idle_delay_set else \"- 'idle-delay' is not set so it cannot be locked\")\n        if not lock_delay_locked:\n            output.append(\"- 'lock-delay' is not locked\" if lock_delay_set else \"- 'lock-delay' is not set so it cannot be locked\")\n        print(\"- Audit Result:\\n ** FAIL **\")\n        print(\"- Reason(s) for audit failure:\")\n        for line in output:\n            print(line)\n        return False  # FAIL\n\n\ndef remediate_vuln() -> None:\n    # Create the file /etc/dconf/db/local.d/locks/screensaver\n    file_path = '/etc/dconf/db/local.d/locks/screensaver'\n    os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    with open(file_path, 'w') as f:\n        f.write(\"# Lock desktop screensaver settings\\n\")\n        f.write(\"/org/gnome/desktop/session/idle-delay\\n\")\n        f.write(\"/org/gnome/desktop/screensaver/lock-delay\\n\")\n    print(f\"Created file '{file_path}' with the necessary content.\")\n\n    # Update the system databases\n    subprocess.run(['dconf', 'update'])\n    print(\"Updated system databases using 'dconf update'.\")\n    print(\"Note: Users must log out and back in again before the system-wide settings take effect.\")\n\n\nif __name__ == \"__main__\":\n    audit_result = audit_vuln()\n    if not audit_result:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure GDM autorun-never is enabled",
    "id": "1.7.8",
    "type": "Automated",
    "start_page": 206,
    "end_page": 210,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM.",
    "rationale": "Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.",
    "audit_details": "IF - GDM is installed: Run the following script to verify that autorun-never is set to true for GDM:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n  # Check if GNOME Desktop Manager is installed. If package isn't\ninstalled, recommendation is Not Applicable\\n  # determine system's package manager\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n   echo -e \"$l_pkgoutput\"\n  done\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_kfile=\"$(grep -Prils -- '^\n*autorun-never\\b' /etc/dconf/db/*.d)\"\n   # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n   if [ -f \"$l_kfile\" ]; then\n     l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<<\\n\"$l_kfile\")\"\n   fi\n   # If the profile name exist, continue checks\n   if [ -n \"$l_gpname\" ]; then\n     l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n     # Check if profile file exists\n     if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*;\nthen\n      l_output=\"$l_output\\n - dconf database profile file \\\"$(grep -Pl -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\" exists\"\n     else\n      l_output2=\"$l_output2\\n - dconf database profile isn't set\"\n     fi\n     # Check if the dconf database file exists\n     if [ -f \"/etc/dconf/db/$l_gpname\" ]; then\n      l_output=\"$l_output\\n - The dconf database \\\"$l_gpname\\\" exists\"\n     else\n      l_output2=\"$l_output2\\n - The dconf database \\\"$l_gpname\\\" doesn't exist\"\n     fi\n     # check if the dconf database directory exists\n     if [ -d \"$l_gpdir\" ]; then\n      l_output=\"$l_output\\n - The dconf directory \\\"$l_gpdir\\\" exitst\"\n     else\n      l_output2=\"$l_output2\\n - The dconf directory \\\"$l_gpdir\\\" doesn't exist\"\n     fi\n     # check autorun-never setting\n     if grep -Pqrs -- '^\n*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then\n      l_output=\"$l_output\\n - \\\"autorun-never\\\" is set to true in:\\n\\n\\\"$l_kfile\\\"\"\n     else\n      l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set correctly\"\n     fi\n   else\n     # Settings don't exist. Nothing further to check\n     l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set\"\n   fi\n  else\n   l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "IF - GDM is installed: Run the following script to set autorun-never to true for GDM users:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n  l_gpname=\"local\" # Set to desired dconf profile name (default is local)\n  # Check if GNOME Desktop Manager is installed. If package isn't\ninstalled, recommendation is Not Applicable\\n  # determine system's package manager\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  echo -e \"$l_pkgoutput\"\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_kfile=\"$(grep -Prils -- '^\n*autorun-never\\b' /etc/dconf/db/*.d)\"\n   # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n   if [ -f \"$l_kfile\" ]; then\n     l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<<\\n\"$l_kfile\")\"\n     echo \" - updating dconf profile name to \\\"$l_gpname\\\"\"\n   fi\n   [ ! -f \"$l_kfile\" ] && l_kfile=\"/etc/dconf/db/$l_gpname.d/00-mediaautorun\"\n   # Check if profile file exists\n   if grep -Pq -- \"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then\n     echo -e \"\\n - dconf database profile exists in: \\\"$(grep -Pl -\"^\\h*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\"\"\n   else\n     [ ! -f \"/etc/dconf/profile/user\" ] &&\nl_gpfile=\"/etc/dconf/profile/user\" || l_gpfile=\"/etc/dconf/profile/user2\"\n     echo -e \" - creating dconf database profile\"\n     {\n      echo -e \"\\nuser-db:user\"\n      echo \"system-db:$l_gpname\"\n     } >> \"$l_gpfile\"\n   fi\n   # create dconf directory if it doesn't exists\n   l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n   if [ -d \"$l_gpdir\" ]; then\n     echo \" - The dconf database directory \\\"$l_gpdir\\\" exists\"\n   else\n     echo \" - creating dconf database directory \\\"$l_gpdir\\\"\"\n     mkdir \"$l_gpdir\"\n   fi\n   # check autorun-never setting\n   if grep -Pqs -- '^\n*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then\n     echo \" - \\\"autorun-never\\\" is set to true in: \\\"$l_kfile\\\"\"\n   else\n     echo \" - creating or updating \\\"autorun-never\\\" entry in \\\"$l_kfile\\\"\"\n     if grep -Psq -- '^\n*autorun-never' \"$l_kfile\"; then\n      sed -ri 's/(^\\s*autorun-never\\s*=\\s*)(\\S+)(\\s.*)$/\\1true \\3/' \"$l_kfile\"\n     else\n      ! grep -Psq -- '\\^\n*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b' \"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\"\n      sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a \\nautorun-never=true' \"$l_kfile\"\n     fi\n   fi\n  else\n   echo -e \"\\n - GNOME Desktop Manager package is not installed on the\nsystem\\n - Recommendation is not applicable\"\n  fi\n  # update dconf database\ndconf update\n}",
    "python_script": "\nimport subprocess\nimport os\nfrom gi import require_version\nrequire_version('GLib', '2.0')\nrequire_version('Gio', '2.0')\nfrom gi.repository import GLib, Gio\n\ndef audit_vuln() -> bool:\n    # Check if GDM is installed\n    gdm_installed = subprocess.run(['dpkg-query', '-s', 'gdm3'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n    \n    if not gdm_installed:\n        print(\" - GNOME Desktop Manager package is not installed on the system - Recommendation is not applicable\")\n        return True  # Not applicable is considered a pass here\n    \n    # Check autorun-never setting in dconf database\n    schema = 'org.gnome.desktop.media-handling'\n    key = 'autorun-never'\n    settings = Gio.Settings.new(schema)\n    autorun_never_enabled = settings.get_boolean(key)\n    \n    if autorun_never_enabled:\n        print(f\" - \\\"{key}\\\" is set to true in schema \\\"{schema}\\\"\")\n        return True\n    else:\n        print(f\" - \\\"{key}\\\" is not set correctly in schema \\\"{schema}\\\"\")\n        return False\n\ndef remediate_vuln() -> None:\n    # Check if GDM is installed\n    gdm_installed = subprocess.run(['dpkg-query', '-s', 'gdm3'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n    \n    if not gdm_installed:\n        print(\" - GNOME Desktop Manager package is not installed on the system - Recommendation is not applicable\")\n        return\n    \n    # Set autorun-never to true\n    schema = 'org.gnome.desktop.media-handling'\n    key = 'autorun-never'\n    settings = Gio.Settings.new(schema)\n    if not settings.get_boolean(key):\n        settings.set_boolean(key, True)\n        print(f\" - Created or updated \\\"{key}\\\" entry to true in schema \\\"{schema}\\\"\")\n    \n    # Update dconf database\n    subprocess.run(['dconf', 'update'])\n    print(\" - Updated dconf database\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(\"Auditing Vulnerability...\")\n    audit_result = audit_vuln()\n    \n    if not audit_result:\n        print(\"\\nRemediation Required. Applying Fixes...\")\n        remediate_vuln()\n    else:\n        print(\"\\nNo remediation necessary.\")\n"
  },
  {
    "name": "Ensure GDM autorun-never is not overridden",
    "id": "1.7.9",
    "type": "Automated",
    "start_page": 211,
    "end_page": 213,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM. By using the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.",
    "rationale": "Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.",
    "audit_details": "Run the following script to verify that autorun-never=true cannot be overridden: \n#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't\n  installed, recommendation is Not Applicable\\n  # determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package:\\",
    "audit_code": "\"$l_pn\" exists on the system\\n - checking configuration\"\n  done\n  # Search /etc/dconf/db/ for [org/gnome/desktop/media-handling] settings)\n  l_desktop_media_handling=$(grep -Psir -- '^[\\h]*[org/gnome/desktop/mediahandling]' /etc/dconf/db/*)\n  if [[ -n \"$l_desktop_media_handling\" ]]; then\n    l_output=\"\" l_output2=\"\"\n    l_autorun_setting=$(grep -Psir -- '^[\\h]*autorun-never=true\\b' /etc/dconf/db/local.d/*)\n    # Check for auto-run setting\n    if [[ -n \"$l_autorun_setting\" ]]; then\n      l_output=\"$l_output\\n - \\\"autorun-never\\\" setting found\"\n    else\n      l_output2=\"$l_output2\\n - \\\"autorun-never\\\" setting not found\"\n    fi  \n  else\n     l_output=\"$l_output\\n - [org/gnome/desktop/media-handling] setting not found in /etc/dconf/db/*\"\n  fi     \n  # Report results. If no failures output in l_output2, we pass\n     [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "1. To prevent the user from overriding these settings, create the file /etc/dconf/db/local.d/locks/00-media-autorun with the following content: [org/gnome/desktop/media-handling] autorun-never=true\n\n2. Update the systems databases: # dconf update",
    "remediation_code": "### References:\n 1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5\n\n CIS Controls:\n\n Controls\n Control IG 1 IG 2 IG 3 Version\n\n 10.3 Disable Autorun and Autoplay for Removable\n v8 Media \u25cf \u25cf \u25cf\n\nDisable autorun and autoplay auto-execute functionality for removable media.\n\n### 8.5 Configure Devices Not To Auto-run Content v7 \u25cf \u25cf \u25cf\nConfigure devices to not auto-run content from removable media.\n\n### MITRE ATT&CK Mappings:\n\n Techniques / Sub Tactics Mitigations techniques\n\n T1091, T1091.000 TA0001, TA0008 M1028",
    "python_script": "\nimport os\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure GDM autorun-never is not overridden.\n    \n    Returns:\n    bool: True if audit passes (GDM installed, autorun-never setting found and not overrideable), False otherwise.\n    \"\"\"\n    # Check if GDM is installed using dpkg (Ubuntu 22.04 package manager)\n    gdm_installed = subprocess.run(['dpkg-query', '-s', 'gdm'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n    \n    if not gdm_installed:\n        print(\" - Package: gdm/gdm3 not found on the system. Recommendation is Not Applicable.\")\n        return True  # Consider not installed as not a failure for autorun-never check\n    \n    # Search for [org/gnome/desktop/media-handling] settings in /etc/dconf/db/\n    media_handling_setting_path = pathlib.Path('/etc/dconf/db/')\n    media_handling_files = list(media_handling_setting_path.rglob('[org/gnome/desktop/media-handling]'))\n    \n    if not media_handling_files:\n        print(\" - [org/gnome/desktop/media-handling] setting not found in /etc/dconf/db/*\")\n        return False\n    \n    # Check for autorun-never=true setting in /etc/dconf/db/local.d/ and its override status\n    autorun_setting_path = pathlib.Path('/etc/dconf/db/local.d/')\n    autorun_files = list(autorun_setting_path.rglob('autorun-never=true'))\n    override_check = pathlib.Path('/etc/dconf/db/local.d/locks/00-media-autorun').exists()\n    \n    if autorun_files and override_check:\n        print(\" - \\\"autorun-never\\\" setting found and is not overrideable\")\n        return True\n    else:\n        if not autorun_files:\n            print(\" - \\\"autorun-never\\\" setting not found\")\n        if not override_check:\n            print(\" - \\\"autorun-never\\\" setting can be overridden\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by creating a lock file to prevent overriding autorun-never=true.\n    \"\"\"\n    lock_file_path = pathlib.Path('/etc/dconf/db/local.d/locks/00-media-autorun')\n    lock_dir = lock_file_path.parent\n    \n    if not lock_dir.exists():\n        lock_dir.mkdir(parents=True, exist_ok=True)\n        print(f\"Created directory {lock_dir} for lock files.\")\n    \n    if not lock_file_path.exists():\n        with open(lock_file_path, 'w') as f:\n            f.write('[org/gnome/desktop/media-handling]\\nautorun-never=true')\n        print(f\"Created lock file {lock_file_path} with autorun-never=true setting.\")\n    \n    # Update dconf database\n    subprocess.run(['dconf', 'update'])\n    print(\"Updated dconf database.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    audit_result = audit_vuln()\n    print(f\"Audit Result: **{'PASS' if audit_result else 'FAIL'}**\")\n    \n    if not audit_result:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure XDCMP is not enabled",
    "id": "1.7.10",
    "type": "Automated",
    "start_page": 214,
    "end_page": 216,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "X Display Manager Control Protocol (XDMCP) is designed to provide authenticated access to display management services for remote displays.",
    "rationale": "XDMCP is inherently insecure.\n\n  - XDMCP is not a ciphered protocol. This may allow an attacker to capture keystrokes entered by a user\n\n  - XDMCP is vulnerable to man-in-the-middle attacks. This may allow an attacker to steal the credentials of legitimate users by impersonating the XDMCP server.",
    "audit_details": "Run the following script and verify the output:\n```\n#!/usr/bin/env bash\n{\n  while IFS= read -r l_file; do\n   awk '/\\[xdmcp\\]/{ f = 1;next } /\\[/{ f = 0 } f {if (/^\\s*Enable\\s*=\\s*true/) print \"The file: \\\"'",
    "audit_code": "#!/usr/bin/env bash\n{\n  while IFS= read -r l_file; do\n   awk '/\\[xdmcp\\]/{ f = 1;next } /\\[/{ f = 0 } f {if (/^\\s*Enable\\s*=\\s*true/) print \"The file: \\\"'",
    "remediation_details": "Edit all files returned by the audit and remove or commend out the Enable=true line in the [xdmcp] block:\n_Example file:_\n```\n# GDM configuration storage\n#\n# See /usr/share/gdm/gdm.schemas for a list of available options.\n[daemon]\n# Uncomment the line below to force the login screen to use Xorg\n#WaylandEnable=false\n# Enabling automatic login\n# AutomaticLoginEnable = true\n# AutomaticLogin = user1\n# Enabling timed login\n# TimedLoginEnable = true\n# TimedLogin = user1\n# TimedLoginDelay = 10\n[security]\n[xdmcp]\n# Enable=true <- **This line should be removed or commented out**\n[chooser]\n[debug]\n# Uncomment the line below to turn on debugging\n# More verbose logs\n# Additionally lets the X server dump core if it crashes\n#Enable=true\n```\n",
    "remediation_code": "Edit all files returned by the audit and remove or commend out the Enable=true line in the [xdmcp] block:\n_Example file:_\n```\n# GDM configuration storage\n#\n# See /usr/share/gdm/gdm.schemas for a list of available options.\n[daemon]\n# Uncomment the line below to force the login screen to use Xorg\n#WaylandEnable=false\n# Enabling automatic login\n# AutomaticLoginEnable = true\n# AutomaticLogin = user1\n# Enabling timed login\n# TimedLoginEnable = true\n# TimedLogin = user1\n# TimedLoginDelay = 10\n[security]\n[xdmcp]\n# Enable=true <- **This line should be removed or commented out**\n[chooser]\n[debug]\n# Uncomment the line below to turn on debugging\n# More verbose logs\n# Additionally lets the X server dump core if it crashes\n#Enable=true\n```",
    "python_script": "\nimport configparser\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if XDCMP is enabled in GDM configurations.\"\"\"\n    config_dir = Path('/etc/gdm/')\n    xdmcp_enabled = False\n    \n    for file in config_dir.glob('*.conf'):\n        config = configparser.ConfigParser()\n        config.read(file)\n        \n        if 'xdmcp' in config.sections():\n            for key, value in config['xdmcp'].items():\n                if key.lower() == 'enable' and value.lower() == 'true':\n                    print(f\"XDMCP is enabled in: {file}\")\n                    xdmcp_enabled = True\n                    \n    return xdmcp_enabled\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate XDCMP vulnerability by disabling it in GDM configurations.\"\"\"\n    config_dir = Path('/etc/gdm/')\n    \n    for file in config_dir.glob('*.conf'):\n        config = configparser.ConfigParser()\n        config.read(file)\n        \n        if 'xdmcp' in config.sections():\n            for key, value in list(config['xdmcp'].items()):\n                if key.lower() == 'enable' and value.lower() == 'true':\n                    config.set('xdmcp', key, f\"# {key}={value}\")  # Comment out the line\n                    with open(file, 'w') as config_file:\n                        config.write(config_file)\n                    print(f\"Disabled XDMCP in: {file}\")\n        else:\n            # If [xdmcp] section doesn't exist, we could optionally add it commented out for clarity\n            pass  # Optionally implement adding a commented out [xdmcp] section here\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"XDMCP is not enabled in any GDM configuration files.\")\n"
  },
  {
    "name": "Ensure dhcp server services are not in use",
    "id": "2.1.3",
    "type": "Automated",
    "start_page": 225,
    "end_page": 227,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Dynamic Host Configuration Protocol (DHCP) is a service that allows machines to dynamically assigned IP addresses. There are two versions of the DHCP protocol DHCPv4 and DHCPv6. At startup the server may be started for one or the other via the -4 or -6 arguments.",
    "rationale": "Unless a system is specifically set up to act as a DHCP server, it is recommended that this package be removed to reduce the potential attack surface.",
    "audit_details": "Run the following commands to verify isc-dhcp-server is not installed:\n# dpkg-query -s isc-dhcp-server &>/dev/null && echo \"isc-dhcp-server is installed\"\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify isc-dhcp-server.service and isc-dhcp-server6.service are not enabled:\n# systemctl is-enabled isc-dhcp-server.service isc-dhcp-server6.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify isc-dhcp-server.service and isc-dhcp-server6.service are not active:\n# systemctl is-active isc-dhcp-server.service isc-dhcp-server6.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s isc-dhcp-server &>/dev/null && echo \"isc-dhcp-server is installed\"\n# systemctl is-enabled isc-dhcp-server.service isc-dhcp-server6.service\n# systemctl is-active isc-dhcp-server.service isc-dhcp-server6.service",
    "remediation_details": "Run the following commands to stop isc-dhcp-server.service and isc-dhcp-server6.service and remove the isc-dhcp-server package:\n# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service\n# apt purge isc-dhcp-server\n\n- OR -\n\n- IF - the isc-dhcp-server package is required as a dependency:\nRun the following commands to stop and mask isc-dhcp-server.service and isc-dhcp-server6.service:\n# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service\n# systemctl mask isc-dhcp-server isc-dhcp-server6.service",
    "remediation_code": "# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service\n# apt purge isc-dhcp-server\n# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service\n# systemctl mask isc-dhcp-server isc-dhcp-server6.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the system for the isc-dhcp-server vulnerability.\n    \n    Returns:\n    bool: True if the vulnerability is present, False otherwise.\n    \"\"\"\n    # Check if isc-dhcp-server is installed\n    installed = subprocess.run(['dpkg-query', '-s', 'isc-dhcp-server'], \n                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    if installed.returncode == 0:\n        # If installed, check if services are enabled or active\n        enabled_services = subprocess.run(['systemctl', 'is-enabled', 'isc-dhcp-server.service', 'isc-dhcp-server6.service'], \n                                          stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)\n        active_services = subprocess.run(['systemctl', 'is-active', 'isc-dhcp-server.service', 'isc-dhcp-server6.service'], \n                                         stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)\n        if 'enabled' in enabled_services.stdout or 'active' in active_services.stdout:\n            return True  # Vulnerability present\n    \n    return False  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the isc-dhcp-server vulnerability.\n    \"\"\"\n    # Check if isc-dhcp-server is installed before attempting to stop services\n    installed = subprocess.run(['dpkg-query', '-s', 'isc-dhcp-server'], \n                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    if installed.returncode == 0:\n        # Stop isc-dhcp-server services\n        subprocess.run(['systemctl', 'stop', 'isc-dhcp-server.service', 'isc-dhcp-server6.service'])\n        print(\"Stopped isc-dhcp-server and isc-dhcp-server6 services.\")\n        \n        # Check if dependent packages are present (simplified, as we don't have package names)\n        dependent_packages_present = input(\"Are there dependent packages approved by local site policy? (y/n): \")\n        if dependent_packages_present.lower() == 'y':\n            # Mask services (assuming stopping and masking meet local site policy)\n            subprocess.run(['systemctl', 'mask', 'isc-dhcp-server', 'isc-dhcp-server6'])\n            print(\"Masked isc-dhcp-server and isc-dhcp-server6 services.\")\n        else:\n            # Purge isc-dhcp-server package\n            subprocess.run(['apt', 'purge', '-y', 'isc-dhcp-server'])\n            print(\"Purged isc-dhcp-server package.\")\n    else:\n        print(\"isc-dhcp-server package is not installed.\")\n"
  },
  {
    "name": "Ensure dns server services are not in use",
    "id": "2.1.4",
    "type": "Automated",
    "start_page": 228,
    "end_page": 229,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Domain Name System (DNS) is a hierarchical naming system that maps names to IP addresses for computers, services and other resources connected to a network.",
    "rationale": "Unless a system is specifically designated to act as a DNS server, it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify bind9 is not installed:\n\n# dpkg-query -s bind9 &>/dev/null && echo \"bind9 is installed\"\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify bind9.service is not enabled:\n# systemctl is-enabled bind9.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the bind9.service is not active:\n# systemctl is-active bind9.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n  - Ensure the dependent package is approved by local site policy\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s bind9 &>/dev/null && echo \"bind9 is installed\"\n# systemctl is-enabled bind9.service 2>/dev/null | grep 'enabled'\n# systemctl is-active bind9.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop bind9.service and remove the bind9 package:\n# systemctl stop bind9.service\n# apt purge bind9\n\n- OR -\n\n- IF - the bind9 package is required as a dependency:\nRun the following commands to stop and mask bind9.service:\n# systemctl stop bind9.service\n# systemctl mask bind9.service",
    "remediation_code": "# systemctl stop bind9.service\n# apt purge bind9\n# systemctl stop bind9.service\n# systemctl mask bind9.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if bind9 is not in use.\"\"\"\n    # Check if bind9 is installed\n    bind9_installed = subprocess.call([\"dpkg-query\", \"-s\", \"bind9\"], stdout=subprocess.DEVNULL) == 0\n    \n    if not bind9_installed:\n        print(\"bind9 is not installed. Compliant.\")\n        return True  # Compliant if not installed\n    \n    # If installed, check if bind9.service is enabled and active (for dependency cases)\n    bind9_enabled = subprocess.call([\"systemctl\", \"is-enabled\", \"bind9.service\"], stdout=subprocess.DEVNULL) == 0\n    bind9_active = subprocess.call([\"systemctl\", \"is-active\", \"bind9.service\"], stdout=subprocess.DEVNULL) == 0\n    \n    if bind9_enabled or bind9_active:\n        print(\"bind9.service is either enabled or active. Not Compliant.\")\n        return False  # Not Compliant if enabled or active\n    else:\n        print(\"bind9 is installed but bind9.service is not enabled or active. Review dependency necessity. Conditionally Compliant.\")\n        return None  # Conditionally Compliant, requires review\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by stopping and either purging or masking bind9.\"\"\"\n    # Check if bind9 is installed before attempting remediation\n    if subprocess.call([\"dpkg-query\", \"-s\", \"bind9\"], stdout=subprocess.DEVNULL) != 0:\n        print(\"bind9 is not installed. No remediation needed.\")\n        return\n    \n    # Attempt to stop bind9.service\n    try:\n        subprocess.check_call([\"systemctl\", \"stop\", \"bind9.service\"])\n        print(\"Stopped bind9.service.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to stop bind9.service: {e}\")\n        sys.exit(1)\n    \n    # Purge if not required, otherwise mask\n    purge_choice = input(\"Is bind9 required for dependencies? (y/n, default=n): \") or \"n\"\n    if purge_choice.lower() == \"n\":\n        try:\n            subprocess.check_call([\"apt\", \"purge\", \"-y\", \"bind9\"])\n            print(\"Purged bind9 package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to purge bind9: {e}\")\n            sys.exit(1)\n    else:\n        try:\n            subprocess.check_call([\"systemctl\", \"mask\", \"bind9.service\"])\n            print(\"Masked bind9.service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to mask bind9.service: {e}\")\n            sys.exit(1)\n\n# Example usage\nif __name__ == \"__main__\":\n    compliant = audit_vuln()\n    if compliant is False or (compliant is None and input(\"Proceed with remediation for conditionally compliant state? (y/n, default=n): \") or \"n\").lower() == \"y\":\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure dnsmasq services are not in use",
    "id": "2.1.5",
    "type": "Automated",
    "start_page": 230,
    "end_page": 232,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "dnsmasq is a lightweight tool that provides DNS caching, DNS forwarding and DHCP (Dynamic Host Configuration Protocol) services.",
    "rationale": "Unless a system is specifically designated to act as a DNS caching, DNS forwarding and/or DHCP server, it is recommended that the package be removed to reduce the potential attack surface.",
    "audit_details": "Run one of the following commands to verify dnsmasq is not installed:\n\n# dpkg-query -s dnsmasq &>/dev/null && echo \"dnsmasq is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify dnsmasq.service is not enabled:\n# systemctl is-enabled dnsmasq.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the dnsmasq.service is not active:\n# systemctl is-active dnsmasq.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s dnsmasq &>/dev/null && echo \"dnsmasq is installed\"\n# systemctl is-enabled dnsmasq.service 2>/dev/null | grep 'enabled'\n# systemctl is-active dnsmasq.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop dnsmasq.service and remove dnsmasq package:\n\n# systemctl stop dnsmasq.service\n# apt purge dnsmasq\n\n- OR -\n\n- IF - the dnsmasq package is required as a dependency:\nRun the following commands to stop and mask the dnsmasq.service:\n\n# systemctl stop dnsmasq.service\n# systemctl mask dnsmasq.service",
    "remediation_code": "# systemctl stop dnsmasq.service\n# apt purge dnsmasq\n# systemctl stop dnsmasq.service\n# systemctl mask dnsmasq.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if dnsmasq is not in use\"\"\"\n    # Check if dnsmasq is installed\n    installed = subprocess.run(['dpkg-query', '-s', 'dnsmasq'], \n                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    if installed.returncode == 0:\n        print(\"dnsmasq is installed\")\n        # If installed, check if the service is enabled or active\n        enabled = subprocess.run(['systemctl', 'is-enabled', 'dnsmasq.service'], \n                                 stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n        active = subprocess.run(['systemctl', 'is-active', 'dnsmasq.service'], \n                                stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n        if b'enabled' in enabled.stdout or b'active' in active.stdout:\n            return False  # Vulnerable\n    return True  # Not vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the dnsmasq vulnerability\"\"\"\n    try:\n        import apt\n    except ImportError:\n        apt = None\n\n    # Stop the dnsmasq service if it's active\n    subprocess.run(['systemctl', 'stop', 'dnsmasq.service'], \n                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    print(\"Stopped dnsmasq.service\")\n\n    # Check if dnsmasq is required as a dependency\n    dependencies = subprocess.run(['apt-mark', 'showmanual'], \n                                  stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    if b'dnsmasq' in dependencies.stdout:\n        # Mask the service (required as a dependency)\n        subprocess.run(['systemctl', 'mask', 'dnsmasq.service'], \n                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        print(\"Masked dnsmasq.service due to dependency requirement\")\n    else:\n        # Remove the dnsmasq package (not required)\n        if apt:\n            cache = apt.Cache()\n            cache['dnsmasq'].mark_delete()\n            cache.commit()\n        else:\n            subprocess.run(['apt', 'purge', 'dnsmasq'], \n                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        print(\"Removed dnsmasq package\")\n"
  },
  {
    "name": "Ensure ftp server services are not in use",
    "id": "2.1.6",
    "type": "Automated",
    "start_page": 233,
    "end_page": 235,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The File Transfer Protocol (FTP) provides networked computers with the ability to transfer files.",
    "rationale": "FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify vsftpd is not installed:\n\n```\n# dpkg-query -s vsftpd &>/dev/null && echo \"vsftpd is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify vsftpd service is not enabled:\n```\n# systemctl is-enabled vsftpd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify the vsftpd service is not active:\n```\n# systemctl is-active vsftpd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note:**\n\n - Other ftp server packages may exist. They should also be audited, if not required and authorized by local site policy\n\n - If the package is required for a dependency:\n\n`o` Ensure the dependent package is approved by local site policy\n`o` Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s vsftpd &>/dev/null && echo \"vsftpd is installed\"\n\n# systemctl is-enabled vsftpd.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active vsftpd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop vsftpd.service and remove the vsftpd package:\n```\n# systemctl stop vsftpd.service\n# apt purge vsftpd\n```\n**- OR -**\n\n**- IF - the vsftpd package is required as a dependency:**\nRun the following commands to stop and mask the vsftpd.service:\n```\n# systemctl stop vsftpd.service\n# systemctl mask vsftpd.service\n```\n**Note: Other ftp server packages may exist. If not required and authorized by local site policy, they should also be removed. If the package is required for a dependency, the service should be stopped and masked.",
    "remediation_code": "# systemctl stop vsftpd.service\n# apt purge vsftpd\n\n# systemctl stop vsftpd.service\n# systemctl mask vsftpd.service",
    "python_script": "```python\nimport apt\nimport systemd(daemon, journald)\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if vsftpd is installed, enabled, or active.\"\"\"\n    cache = apt.Cache()\n    if cache['vsftpd'].is_installed:\n        print(\"vsftpd is installed\")\n        if systemd.daemon.Systemd().is_enabled('vsftpd.service'):\n            print(\"vsftpd service is enabled\")\n        if systemd.daemon.Systemd().is_active('vsftpd.service'):\n            print(\"vsftpd service is active\")\n        return True\n    return False\n\ndef remediate_vuln(dependency_required: bool = False) -> None:\n    \"\"\"Remediate the vsftpd vulnerability.\"\"\"\n    cache = apt.Cache()\n    if cache['vsftpd'].is_installed:\n        if not dependency_required:\n            # Remove vsftpd package\n            cache['vsftpd'].mark_delete()\n            apt.PkgManager().commit()\n            print(\"Removed vsftpd package using apt\")\n        else:\n            # Stop and mask vsftpd service\n            systemd.daemon.Systemd().stop('vsftpd.service')\n            print(\"Stopped vsftpd service\")\n            systemd.daemon.Systemd().mask('vsftpd.service')\n            print(\"Masked vsftpd service\")\n\nif __name__ == \"__main__\":\n    import argparse\n    parser = argparse.ArgumentParser(description='Audit and Remediate vsftpd Vulnerability')\n    parser.add_argument('--remediate', action='store_true', help='Remediate the vulnerability')\n    parser.add_argument('--dependency_required', action='store_true', help='vsftpd is required as a dependency')\n    args = parser.parse_args()\n\n    if audit_vuln():\n        if args.remediate:\n            remediate_vuln(args.dependency_required)\n    else:\n        print(\"No vulnerability found\")\n```\n**Usage:**\n\n* Audit only: `python script_name.py`\n* Remediate (remove package if not required): `python script_name.py --remediate`\n* Remediate (stop and mask service if required as a dependency): `python script_name.py --remediate --dependency_required`"
  },
  {
    "name": "Ensure ldap server services are not in use",
    "id": "2.1.7",
    "type": "Automated",
    "start_page": 236,
    "end_page": 238,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP server, it is recommended that the software be removed to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify slapd is not installed:\n```\n# dpkg-query -s slapd &>/dev/null && echo \"slapd is installed\"\n```\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify slapd.service is not enabled:\n```\n# systemctl is-enabled slapd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify slapd.service is not active:\n```\n# systemctl is-active slapd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s slapd &>/dev/null && echo \"slapd is installed\"\n# systemctl is-enabled slapd.service 2>/dev/null | grep 'enabled'\n# systemctl is-active slapd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop slapd.service and remove the slapd package:\n```\n# systemctl stop slapd.service\n# apt purge slapd\n```\n**- OR -**\n\n**- IF - the slapd package is required as a dependency:**\nRun the following commands to stop and mask slapd.service:\n```\n# systemctl stop slapd.service\n# systemctl mask slapd.service\n```\n",
    "remediation_code": "# systemctl stop slapd.service\n# apt purge slapd\n# systemctl stop slapd.service\n# systemctl mask slapd.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if slapd (LDAP server) is installed, enabled, or active.\n    \n    Returns:\n    bool: True if vulnerable (installed, enabled, or active), False otherwise.\n    \"\"\"\n    # Check if slapd is installed\n    try:\n        pkg_resources.get_distribution('slapd')\n        print(\"slapd is installed\")\n        installed = True\n    except pkg_resources.DistributionNotFound:\n        installed = False\n    \n    # If installed, check if slapd.service is enabled or active\n    if installed:\n        enabled = subprocess.run(['systemctl', 'is-enabled', 'slapd.service'], \n                                 stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n        enabled = enabled.stdout.decode().strip() == 'enabled'\n        \n        active = subprocess.run(['systemctl', 'is-active', 'slapd.service'], \n                                stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n        active = active.stdout.decode().strip() == 'active'\n        \n        if enabled:\n            print(\"slapd.service is enabled\")\n        if active:\n            print(\"slapd.service is active\")\n        \n        return installed or enabled or active\n    else:\n        return False\n\ndef remediate_vuln(dependency_required: bool = False) -> None:\n    \"\"\"\n    Remediate slapd vulnerability based on dependency requirements.\n    \n    Parameters:\n    dependency_required (bool): Whether slapd is required as a dependency. Defaults to False.\n    \"\"\"\n    # Stop slapd.service\n    subprocess.run(['systemctl', 'stop', 'slapd.service'])\n    print(\"Stopped slapd.service\")\n    \n    if dependency_required:\n        # Mask slapd.service if it's required as a dependency\n        subprocess.run(['systemctl', 'mask', 'slapd.service'])\n        print(\"Masked slapd.service\")\n    else:\n        # Purge slapd package if not required\n        subprocess.run(['apt', 'purge', '-y', 'slapd'])\n        print(\"Purged slapd package\")\n\n# Example usage\nif __name__ == \"__main__\":\n    vulnerable = audit_vuln()\n    if vulnerable:\n        # Assuming dependency check is handled externally for this example\n        dependency_required = False  # Set based on external dependency check\n        remediate_vuln(dependency_required)\n    else:\n        print(\"System is not vulnerable to slapd being in use.\")\n"
  },
  {
    "name": "Ensure message access server services are not in use",
    "id": "2.1.8",
    "type": "Automated",
    "start_page": 239,
    "end_page": 242,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "dovecot-imapd and dovecot-pop3d are an open source IMAP and POP3 server for Linux based systems.",
    "rationale": "Unless POP3 and/or IMAP servers are to be provided by this system, it is recommended that the package be removed to reduce the potential attack surface. Note: Several IMAP/POP3 servers exist and can use other service names. These should also be audited and the packages removed if not required.",
    "audit_details": "Run the following command to verify dovecot-imapd and dovecot-pop3d are not installed: # dpkg-query -s dovecot-imapd &>/dev/null && echo \"dovecot-imapd is installed\" Nothing should be returned. # dpkg-query -s dovecot-pop3d &>/dev/null && echo \"dovecot-pop3d is installed\" Nothing should be returned. - OR - - IF - a package is installed and is required for dependencies: Run the following commands to verify dovecot.socket and dovecot.service are not enabled: # systemctl is-enabled dovecot.socket dovecot.service 2>/dev/null | grep 'enabled' Nothing should be returned Run the following command to verify dovecot.socket and dovecot.service are not active: # systemctl is-active dovecot.socket dovecot.service 2>/dev/null | grep '^active' Nothing should be returned Note: If the package is required for a dependency - Ensure the dependent package is approved by local site policy - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s dovecot-imapd &>/dev/null && echo \"dovecot-imapd is installed\"\n# dpkg-query -s dovecot-pop3d &>/dev/null && echo \"dovecot-pop3d is installed\"\n# systemctl is-enabled dovecot.socket dovecot.service 2>/dev/null | grep 'enabled'\n# systemctl is-active dovecot.socket dovecot.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run one of the following commands to remove dovecot-imapd and dovecot-pop3d: Run the following commands to stop dovecot.socket and dovecot.service, and remove the dovecot-imapd and dovecot-pop3d packages: # systemctl stop dovecot.socket dovecot.service # apt purge dovecot-imapd dovecot-pop3d - OR - - IF - a package is installed and is required for dependencies: Run the following commands to stop and mask dovecot.socket and dovecot.service: # systemctl stop dovecot.socket dovecot.service # systemctl mask dovecot.socket dovecot.service",
    "remediation_code": "# systemctl stop dovecot.socket dovecot.service\n# apt purge dovecot-imapd dovecot-pop3d\n# systemctl stop dovecot.socket dovecot.service\n# systemctl mask dovecot.socket dovecot.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if dovecot-imapd and dovecot-pop3d are installed or their services are active/enabled.\"\"\"\n    vulnerable = False\n    \n    # Check if packages are installed\n    for package in ['dovecot-imapd', 'dovecot-pop3d']:\n        output = subprocess.run(['dpkg-query', '-s', package], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if output.returncode == 0:  # Package is installed\n            print(f\"{package} is installed.\")\n            vulnerable = True\n            \n            # If installed, check if services are enabled or active\n            for service in [f'{package.replace(\"dovecot-\", \"dovecot.\")}', f'{package.replace(\"dovecot-\", \"dovecot-\")}.service']:\n                for action in ['is-enabled', 'is-active']:\n                    output = subprocess.run(['systemctl', action, service], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                    if output.returncode == 0:  # Service is enabled or active\n                        print(f\"{service} is {action.replace('is-', '')}.\")\n                        vulnerable = True\n    \n    return vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by stopping and removing/unmasking services and packages as needed.\"\"\"\n    packages = ['dovecot-imapd', 'dovecot-pop3d']\n    services = ['dovecot.socket', 'dovecot.service']\n    \n    # Stop services first\n    for service in services:\n        try:\n            subprocess.run(['systemctl', 'stop', service])\n            print(f\"Stopped {service} service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to stop {service}: {e}\")\n    \n    # Check if packages are installed to decide on removal or masking\n    for package in packages:\n        output = subprocess.run(['dpkg-query', '-s', package], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if output.returncode == 0:  # Package is installed\n            # Attempt to remove package\n            try:\n                subprocess.run(['apt', 'purge', '-y', package])\n                print(f\"Removed {package} package.\")\n            except subprocess.CalledProcessError as e:\n                print(f\"Failed to remove {package}: {e}. Considering masking services if enabled.\")\n                \n                # If removal fails (maybe due to dependencies), stop and mask services\n                for service in services:\n                    try:\n                        subprocess.run(['systemctl', 'mask', service])\n                        print(f\"Masked {service} service.\")\n                    except subprocess.CalledProcessError as e:\n                        print(f\"Failed to mask {service}: {e}\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"System is vulnerable. Proceeding with remediation...\")\n        remediate_vuln()\n    else:\n        print(\"System is not vulnerable.\")\n        sys.exit(0)\n"
  },
  {
    "name": "Ensure network file system services are not in use",
    "id": "2.1.9",
    "type": "Automated",
    "start_page": 243,
    "end_page": 245,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Network File System (NFS) is one of the first and most widely distributed file systems in the UNIX environment. It provides the ability for systems to mount file systems of other servers through the network.",
    "rationale": "If the system does not export NFS shares, it is recommended that the nfs-kernel-server package be removed to reduce the remote attack surface. Impact: There may be packages that are dependent on the nfs-kernel-server package. If the nfs-kernel-server package is removed, these dependent packages will be removed as well. Before removing the nfs-kernel-server package, review any dependent packages to determine if they are required on the system. - IF - a dependent package is required: stop and mask the nfs-server.service leaving the nfs-kernel-server package installed.",
    "audit_details": "Run the following command to verify nfs-kernel-server is not installed:\n# dpkg-query -s nfs-kernel-server &>/dev/null && echo \"nfs-kernel-server is installed\" \nNothing should be returned. - OR - - IF - package is required for dependencies: Run the following command to verify that the nfs-server.service is not enabled:\n# systemctl is-enabled nfs-server.service 2>/dev/null | grep 'enabled'\nNothing should be returned Run the following command to verify the nfs-server.service is not active:\n# systemctl is-active nfs-server.service 2>/dev/null | grep '^active'\nNothing should be returned\nNote: If the package is required for a dependency - Ensure the dependent package is approved by local site policy - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s nfs-kernel-server &>/dev/null && echo \"nfs-kernel-server is installed\"\n\n# systemctl is-enabled nfs-server.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active nfs-server.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following command to stop nfs-server.service and remove nfs-kernel-server package:\n# systemctl stop nfs-server.service\n# apt purge nfs-kernel-server\n- OR - - IF - the nfs-kernel-server package is required as a dependency: Run the following commands to stop and mask the nfs-server.service:\n# systemctl stop nfs-server.service\n# systemctl mask nfs-server.service",
    "remediation_code": "# systemctl stop nfs-server.service\n# apt purge nfs-kernel-server\n\n# systemctl stop nfs-server.service\n# systemctl mask nfs-server.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit NFS vulnerability\"\"\"\n    # Check if nfs-kernel-server is installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'nfs-kernel-server'], stderr=subprocess.DEVNULL)\n    except subprocess.CalledProcessError:\n        # Not installed, compliant\n        return True\n    \n    # If installed, check service status (assuming dependency requirement for this additional check)\n    service_enabled = subprocess.run(['systemctl', 'is-enabled', 'nfs-server.service'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    service_active = subprocess.run(['systemctl', 'is-active', 'nfs-server.service'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    \n    # Compliant if both not enabled and not active\n    return b'enabled' not in service_enabled.stdout and b'active' not in service_active.stdout\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate NFS vulnerability\"\"\"\n    # Check if nfs-kernel-server is installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'nfs-kernel-server'], stderr=subprocess.DEVNULL)\n    except subprocess.CalledProcessError:\n        print(\"nfs-kernel-server is not installed. No action required.\")\n        return\n    \n    # Attempt to stop the nfs-server.service\n    try:\n        subprocess.check_call(['systemctl', 'stop', 'nfs-server.service'])\n        print(\"Stopped nfs-server.service.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to stop nfs-server.service: {e}\")\n    \n    # Check for dependencies before deciding to purge or mask\n    dependencies = pkg_resources.working_set.find(pkg_resources.Requirement('nfs-kernel-server'))\n    if dependencies:\n        print(\"nfs-kernel-server has dependencies. Masking nfs-server.service instead of purging.\")\n        try:\n            subprocess.check_call(['systemctl', 'mask', 'nfs-server.service'])\n            print(\"Masked nfs-server.service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to mask nfs-server.service: {e}\")\n    else:\n        try:\n            subprocess.check_call(['apt', 'purge', '-y', 'nfs-kernel-server'])\n            print(\"Purged nfs-kernel-server package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to purge nfs-kernel-server: {e}\")\n\nif __name__ == \"__main__\":\n    compliant = audit_vuln()\n    print(f\"System is {'compliant' if compliant else 'NOT compliant'} with NFS vulnerability audit.\")\n    if not compliant:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure nis server services are not in use",
    "id": "2.1.10",
    "type": "Automated",
    "start_page": 246,
    "end_page": 248,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Network Information Service (NIS) (formally known as Yellow Pages) is a clientserver directory service protocol for distributing system configuration files. The NIS server is a collection of programs that allow for the distribution of configuration files. The NIS client (ypbind) was used to bind a machine to an NIS server and receive the distributed configuration files.",
    "rationale": "ypserv.service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that ypserv.service be removed and other, more secure services be used.",
    "audit_details": "Run the following command to verify ypserv is not installed:\n# dpkg-query -s ypserv &>/dev/null && echo \"ypserv is installed\"\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify ypserv.service is not enabled:\n# systemctl is-enabled ypserv.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify ypserv.service is not active:\n# systemctl is-active ypserv.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s ypserv &>/dev/null && echo \"ypserv is installed\"\n\n# systemctl is-enabled ypserv.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active ypserv.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop ypserv.service and remove ypserv package:\n# systemctl stop ypserv.service\n# apt purge ypserv\n\n- OR -\n\n- IF - the ypserv package is required as a dependency:\nRun the following commands to stop and mask ypserv.service:\n# systemctl stop ypserv.service\n# systemctl mask ypserv.service",
    "remediation_code": "# systemctl stop ypserv.service\n# apt purge ypserv\n\n# systemctl stop ypserv.service\n# systemctl mask ypserv.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if ypserv is vulnerable on the system.\"\"\"\n    # Check if ypserv is installed\n    try:\n        output = subprocess.check_output(['dpkg-query', '-s', 'ypserv'])\n        # If installed, check service status\n        if \"installed\" in str(output):\n            # Check if ypserv.service is enabled\n            enabled_output = subprocess.check_output(['systemctl', 'is-enabled', 'ypserv.service'], stderr=subprocess.DEVNULL)\n            if \"enabled\" in str(enabled_output):\n                print(\"ypserv.service is enabled.\")\n                return False\n            \n            # Check if ypserv.service is active\n            active_output = subprocess.check_output(['systemctl', 'is-active', 'ypserv.service'], stderr=subprocess.DEVNULL)\n            if \"active\" in str(active_output):\n                print(\"ypserv.service is active.\")\n                return False\n            \n            # If service is neither enabled nor active but the package is installed\n            print(\"ypserv is installed but service is not enabled or active.\")\n            return False\n    except subprocess.CalledProcessError as e:\n        # Handle errors, for instance, if dpkg-query fails for any reason\n        print(f\"Error auditing ypserv installation: {e}\")\n        return False\n    \n    # If no issues found\n    print(\"ypserv is not installed or properly configured.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate ypserv vulnerability.\"\"\"\n    # First, try to stop the service (harmless if not running or not installed)\n    try:\n        subprocess.check_call(['systemctl', 'stop', 'ypserv.service'])\n        print(\"Stopped ypserv.service.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to stop ypserv.service: {e}\")\n    \n    # Check if ypserv is installed to decide on remediation action\n    try:\n        output = subprocess.check_output(['dpkg-query', '-s', 'ypserv'])\n        if \"installed\" in str(output):\n            # Attempt to purge ypserv if not required by dependencies\n            try:\n                subprocess.check_call(['apt', 'purge', '-y', 'ypserv'])\n                print(\"Purged ypserv package.\")\n            except subprocess.CalledProcessError as e:\n                # If purge fails, likely due to dependencies, stop and mask the service\n                print(f\"Purging ypserv failed, attempting to mask: {e}\")\n                try:\n                    subprocess.check_call(['systemctl', 'mask', 'ypserv.service'])\n                    print(\"Masked ypserv.service.\")\n                except subprocess.CalledProcessError as emask:\n                    print(f\"Failed to mask ypserv.service: {emask}\")\n        else:\n            print(\"ypserv is not installed. No further action required.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error during remediation package check: {e}\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure rpcbind services are not in use",
    "id": "2.1.12",
    "type": "Automated",
    "start_page": 252,
    "end_page": 254,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The rpcbind utility maps RPC services to the ports on which they listen. RPC processes notify rpcbind when they start, registering the ports they are listening on and the RPC program numbers they expect to serve. The client system then contacts rpcbind on the server with a particular RPC program number. The rpcbind.service redirects the client to the proper port number so it can communicate with the requested service.\n\nPortmapper is an RPC service, which always listens on tcp and udp 111, and is used to map other RPC services (such as nfs, nlockmgr, quotad, mountd, etc.) to their corresponding port number on the server. When a remote host makes an RPC call to that server, it first consults with portmap to determine where the RPC server is listening.",
    "rationale": "A small request (~82 bytes via UDP) sent to the Portmapper generates a large response (7x to 28x amplification), which makes it a suitable tool for DDoS attacks. If rpcbind is not required, it is recommended to remove rpcbind package to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify rpcbind package is not installed:\n\n# dpkg-query -s rpcbind &>/dev/null && echo \"rpcbind is installed\"\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the rpcbind package is required as a dependency:**\nRun the following command to verify rpcbind.socket and rpcbind.service are not enabled:\n# systemctl is-enabled rpcbind.socket rpcbind.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify rpcbind.socket and rpcbind.service are not active:\n# systemctl is-active rpcbind.socket rpcbind.service 2>/dev/null | grep '^active'\nNothing should be returned\n\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s rpcbind &>/dev/null && echo \"rpcbind is installed\"  \n\n# systemctl is-enabled rpcbind.socket rpcbind.service 2>/dev/null | grep 'enabled'  \n\n# systemctl is-active rpcbind.socket rpcbind.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop rpcbind.socket and rpcbind.service, and remove the rpcbind package:\n\n# systemctl stop rpcbind.socket rpcbind.service\n# apt purge rpcbind\n\n**- OR -**\n\n**- IF - the rpcbind package is required as a dependency:**\nRun the following commands to stop and mask the rpcbind.socket and rpcbind.service:\n# systemctl stop rpcbind.socket rpcbind.service\n# systemctl mask rpcbind.socket rpcbind.service",
    "remediation_code": "# systemctl stop rpcbind.socket rpcbind.service  \n# apt purge rpcbind  \n\n# systemctl stop rpcbind.socket rpcbind.service  \n# systemctl mask rpcbind.socket rpcbind.service  \n",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit rpcbind vulnerability\"\"\"\n    # Check if rpcbind package is installed\n    if pkg_resources.is_installed(\"rpcbind\"):\n        print(\"rpcbind package is installed\")\n        # If installed, check if services are enabled/active\n        for service in [\"rpcbind.socket\", \"rpcbind.service\"]:\n            if subprocess.run(f\"systemctl is-enabled {service}\", shell=True, stdout=subprocess.DEVNULL).returncode == 0:\n                print(f\"{service} is enabled\")\n                return True\n            if subprocess.run(f\"systemctl is-active {service}\", shell=True, stdout=subprocess.DEVNULL).returncode == 0:\n                print(f\"{service} is active\")\n                return True\n        print(\"No rpcbind vulnerability found (package installed but services not enabled/active)\")\n    else:\n        print(\"rpcbind package is not installed\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate rpcbind vulnerability\"\"\"\n    # Check if rpcbind package is installed\n    if pkg_resources.is_installed(\"rpcbind\"):\n        # Stop services\n        for service in [\"rpcbind.socket\", \"rpcbind.service\"]:\n            subprocess.run(f\"systemctl stop {service}\", shell=True)\n            print(f\"Stopped {service} service\")\n        \n        # Check if dependent packages exist\n        dependent_packages = subprocess.check_output(\"apt-cache rdepends rpcbind\", shell=True).decode().splitlines()\n        if any(\"Depends\" in line for line in dependent_packages):\n            print(\"Dependent packages found, masking services instead of removing package\")\n            # Mask services (if dependent packages exist)\n            for service in [\"rpcbind.socket\", \"rpcbind.service\"]:\n                subprocess.run(f\"systemctl mask {service}\", shell=True)\n                print(f\"Masked {service} service\")\n        else:\n            # Remove rpcbind package (if no dependent packages)\n            subprocess.run(\"apt purge rpcbind -y\", shell=True)\n            print(\"Removed rpcbind package\")\n    else:\n        print(\"No remediation needed, rpcbind package is not installed\")\n\n# Example usage:\nif audit_vuln():\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure rsync services are not in use",
    "id": "2.1.13",
    "type": "Automated",
    "start_page": 255,
    "end_page": 257,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The rsync service can be used to synchronize files between systems over network links.",
    "rationale": "rsync.service presents a security risk as the rsync protocol is unencrypted. The rsync package should be removed to reduce the attack area of the system.",
    "audit_details": "Run the following command to verify rsync is not installed:\n\n# dpkg-query -s rsync &>/dev/null && echo \"rsync is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the rsync package is required as a dependency:\nRun the following command to verify rsync.service is not enabled:\n\n# systemctl is-enabled rsync.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify rsync.service is not active:\n\n# systemctl is-active rsync.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s rsync &>/dev/null && echo \"rsync is installed\"\n\n# systemctl is-enabled rsync.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active rsync.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop rsync.service, and remove the rsync package:\n\n# systemctl stop rsync.service\n# apt purge rsync\n\n- OR -\n\n- IF - the rsync package is required as a dependency:\nRun the following commands to stop and mask rsync.service:\n\n# systemctl stop rsync.service\n# systemctl mask rsync.service",
    "remediation_code": "# systemctl stop rsync.service\n# apt purge rsync\n\n# systemctl stop rsync.service\n# systemctl mask rsync.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for rsync vulnerability.\n    \n    Returns:\n    bool: True if system is not vulnerable, False otherwise\n    \"\"\"\n    try:\n        # Check if rsync package is installed\n        subprocess.check_output(['dpkg-query', '-s', 'rsync'])\n        \n        # If installed, check if it's a dependency\n        dependencies = pkg_resources.working_set.find(pkg_resources.Requirement('rsync'))\n        if not dependencies:  # Not a dependency, vulnerability found\n            return False\n        \n        # If a dependency, check service status\n        if subprocess.call(['systemctl', 'is-enabled', 'rsync.service']) == 0:\n            # Service is enabled, vulnerability found\n            return False\n        if subprocess.call(['systemctl', 'is-active', 'rsync.service']) == 0:\n            # Service is active, vulnerability found\n            return False\n        \n        # Installed as a dependency, but service not enabled or active\n        return True\n    \n    except subprocess.CalledProcessError:\n        # rsync package not installed\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate rsync vulnerability.\n    \"\"\"\n    try:\n        # Attempt to stop rsync.service\n        subprocess.check_call(['systemctl', 'stop', 'rsync.service'])\n        print(\"Stopped rsync.service.\")\n        \n        # Check if rsync is a dependency\n        dependencies = pkg_resources.working_set.find(pkg_resources.Requirement('rsync'))\n        if not dependencies:  \n            # Not a dependency, remove rsync package\n            subprocess.check_call(['apt', 'purge', 'rsync', '-y'])\n            print(\"Removed rsync package.\")\n        else:\n            # Dependency, mask rsync.service\n            subprocess.check_call(['systemctl', 'mask', 'rsync.service'])\n            print(\"Masked rsync.service.\")\n    \n    except subprocess.CalledProcessError as e:\n        print(f\"Remediation failed: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure samba file server services are not in use",
    "id": "2.1.14",
    "type": "Automated",
    "start_page": 258,
    "end_page": 260,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block (SMB) protocol. Windows desktop users will be able to mount these directories and file systems as letter drives on their systems.",
    "rationale": "If there is no need to mount directories and file systems to Windows systems, then this service should be deleted to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify samba is not installed:\n\n# dpkg-query -s samba &>/dev/null && echo \"samba is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify smbd.service is not enabled:\n# systemctl is-enabled smbd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the smbd.service is not active:\n# systemctl is-active smbd.service 2>/dev/null | grep '^active'\nNothing should be returned",
    "audit_code": "# dpkg-query -s samba &>/dev/null && echo \"samba is installed\"\n\n# systemctl is-enabled smbd.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active smbd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop smbd.service and remove samba package:\n# systemctl stop smbd.service\n# apt purge samba\n\n- OR -\n\n- IF - the samba package is required as a dependency:\nRun the following commands to stop and mask the smbd.service:\n# systemctl stop smbd.service\n# systemctl mask smbd.service",
    "remediation_code": "# systemctl stop smbd.service\n# apt purge samba\n\n# systemctl stop smbd.service\n# systemctl mask smbd.service",
    "python_script": "\nimport subprocess\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits the system for Samba vulnerability.\"\"\"\n    # Check if samba package is installed\n    try:\n        cache = apt.Cache()\n        if cache['samba'].is_installed:\n            print(\"Samba package is installed.\")\n            \n            # Check if smbd.service is enabled\n            result = subprocess.run(['systemctl', 'is-enabled', 'smbd.service'], \n                                    stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n            if result.stdout.decode('utf-8').strip() == 'enabled':\n                print(\"smbd.service is enabled.\")\n                \n            # Check if smbd.service is active\n            result = subprocess.run(['systemctl', 'is-active', 'smbd.service'], \n                                    stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n            if result.stdout.decode('utf-8').strip() == 'active':\n                print(\"smbd.service is active.\")\n                \n            # If any condition is not met, return False\n            return not (result.stdout.decode('utf-8').strip() == 'enabled' or \n                        result.stdout.decode('utf-8').strip() == 'active')\n        else:\n            print(\"Samba package is not installed.\")\n            return True\n    except KeyError:\n        print(\"Samba package is not installed.\")\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the Samba vulnerability.\"\"\"\n    cache = apt.Cache()\n    if cache['samba'].is_installed:\n        print(\"Stopping smbd.service...\")\n        subprocess.run(['systemctl', 'stop', 'smbd.service'], \n                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        \n        # Check dependency count to decide between purge and mask\n        if cache['samba'].inst dependencies:\n            print(\"Disabling and masking smbd.service since samba has dependencies...\")\n            subprocess.run(['systemctl', 'mask', 'smbd.service'], \n                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        else:\n            print(\"Purging samba package...\")\n            cache['samba'].remove()\n            cache.commit()\n    else:\n        print(\"Samba package is not installed. No remediation required.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure snmp services are not in use",
    "id": "2.1.15",
    "type": "Automated",
    "start_page": 261,
    "end_page": 263,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring the health and welfare of network equipment, computer equipment and devices like UPSs.\n\nNet-SNMP is a suite of applications used to implement SNMPv1 (RFC 1157), SNMPv2 (RFCs 1901-1908), and SNMPv3 (RFCs 3411-3418) using both IPv4 and IPv6.\n\nSupport for SNMPv2 classic (a.k.a. \"SNMPv2 historic\" - RFCs 1441-1452) was dropped with the 4.0 release of the UCD-snmp package.\n\nThe Simple Network Management Protocol (SNMP) server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the information and then send results back to the requesting system.",
    "rationale": "The SNMP server can communicate using SNMPv1, which transmits data in the clear and does not require authentication to execute commands. SNMPv3 replaces the simple/clear text password sharing used in SNMPv2 with more securely encoded parameters. If the the SNMP service is not required, the snmpd package should be removed to reduce the attack surface of the system.",
    "audit_details": "Run the following command to verify snmpd is not installed:\n\n# dpkg-query -s snmpd &>/dev/null && echo \"snmpd is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify the snmpd.service is not enabled:\n# systemctl is-enabled snmpd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the snmpd.service is not active:\n# systemctl is-active snmpd.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s snmpd &>/dev/null && echo \"snmpd is installed\"\n\n# systemctl is-enabled snmpd.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active snmpd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop snmpd.service and remove the snmpd package:\n\n# systemctl stop snmpd.service\n# apt purge snmpd\n\n- OR - If the package is required for dependencies:\nRun the following commands to stop and mask the snmpd.service:\n\n# systemctl stop snmpd.service\n# systemctl mask snmpd.service",
    "remediation_code": "# systemctl stop snmpd.service\n# apt purge snmpd\n\n# systemctl stop snmpd.service\n# systemctl mask snmpd.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for SNMP vulnerability\"\"\"\n    # Check if snmpd package is installed\n    installed = subprocess.run(['dpkg-query', '-s', 'snmpd'], \n                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    if installed.returncode!= 0:\n        # Package not installed, vulnerability not found\n        return False\n    \n    # Package is installed, check service status\n    enabled = subprocess.run(['systemctl', 'is-enabled', 'snmpd.service'], \n                             stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    active = subprocess.run(['systemctl', 'is-active', 'snmpd.service'], \n                            stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    \n    # If service is enabled or active, vulnerability found\n    return b'enabled' in enabled.stdout or b'active' in active.stdout\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate SNMP vulnerability\"\"\"\n    print(\"Attempting to stop snmpd.service...\")\n    subprocess.run(['systemctl', 'stop', 'snmpd.service'], \n                   stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    print(\"Stopped snmpd.service.\")\n    \n    # Check if package is required for dependencies (simplified, assumes user input for dependency check)\n    dependency_required = input(\"Is the snmpd package required for dependencies? (yes/no): \")\n    \n    if dependency_required.lower() == 'yes':\n        print(\"Masking snmpd.service to prevent accidental starts...\")\n        subprocess.run(['systemctl', 'mask', 'snmpd.service'], \n                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        print(\"Masked snmpd.service.\")\n    else:\n        print(\"Purging snmpd package...\")\n        subprocess.run(['apt', 'purge', '-y', 'snmpd'], \n                       stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        print(\"Purged snmpd package.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Proceeding with remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure tftp server services are not in use",
    "id": "2.1.16",
    "type": "Automated",
    "start_page": 264,
    "end_page": 266,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Trivial File Transfer Protocol (TFTP) is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers allow connections from a TFTP Client for sending and receiving files.",
    "rationale": "Unless there is a need to run the system as a TFTP server, it is recommended that the package be removed to reduce the potential attack surface. TFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to exploit TFTP to gain access to files.",
    "audit_details": "Run the following command to verify tftpd-hpa is not installed:\n\n```\n# dpkg-query -s tftpd-hpa &>/dev/null && echo \"tftpd-hpa is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify tftpd-hpa.service is not enabled:\n```\n# systemctl is-enabled tftpd-hpa.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify the tftpd-hpa.service is not active:\n```\n# systemctl is-active tftpd-hpa.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s tftpd-hpa &>/dev/null && echo \"tftpd-hpa is installed\"",
    "remediation_details": "Run the following commands to stop tftpd-hpa.service, and remove the tftpd-hpa package:\n```\n# systemctl stop tftpd-hpa.service\n# apt purge tftpd-hpa\n```\n**- OR -**\n\n**- IF - the tftpd-hpa package is required as a dependency:**\nRun the following commands to stop and mask tftpd-hpa.service:\n```\n# systemctl stop tftpd-hpa.service\n# systemctl mask tftpd-hpa.service\n```\n",
    "remediation_code": "# systemctl stop tftpd-hpa.service\n# apt purge tftpd-hpa\n# systemctl stop tftpd-hpa.service\n# systemctl mask tftpd-hpa.service",
    "python_script": ""
  },
  {
    "name": "Ensure web proxy server services are not in use",
    "id": "2.1.17",
    "type": "Automated",
    "start_page": 267,
    "end_page": 269,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Squid is a standard proxy server used in many distributions and environments.",
    "rationale": "Unless a system is specifically set up to act as a proxy server, it is recommended that the squid package be removed to reduce the potential attack surface. Note: Several HTTP proxy servers exist. These should be checked and removed unless required.",
    "audit_details": "Run the following command to verify squid is not installed:\n\n# dpkg-query -s squid &>/dev/null && echo \"squid is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify squid.service is not enabled:\n# systemctl is-enabled squid.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the squid.service is not active:\n# systemctl is-active squid.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s squid &>/dev/null && echo \"squid is installed\"\n\n# systemctl is-enabled squid.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active squid.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop squid.service and remove the squid package:\n\n# systemctl stop squid.service\n# apt purge squid\n\n- OR - If the squid package is required as a dependency:\nRun the following commands to stop and mask the squid.service:\n\n# systemctl stop squid.service\n# systemctl mask squid.service",
    "remediation_code": "# systemctl stop squid.service\n# apt purge squid\n\n# systemctl stop squid.service\n# systemctl mask squid.service",
    "python_script": "\nimport subprocess\nimport shutil\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for Squid presence.\n    \n    Returns:\n    bool: True if Squid is not installed or is properly configured, False otherwise.\n    \"\"\"\n    # Check if Squid is installed\n    if shutil.which('dpkg-query') is not None:\n        installed_check = subprocess.run(['dpkg-query', '-s', 'squid'], \n                                          stdout=subprocess.PIPE, \n                                          stderr=subprocess.PIPE)\n        if installed_check.returncode == 0:\n            print(\"Squid is installed\")\n            # If installed, check if the service is enabled and active\n            if (subprocess.run(['systemctl', 'is-enabled', 'squid.service'], \n                               stdout=subprocess.PIPE, \n                               stderr=subprocess.PIPE).stdout.decode().strip() == 'enabled' or\n                subprocess.run(['systemctl', 'is-active', 'squid.service'], \n                               stdout=subprocess.PIPE, \n                               stderr=subprocess.PIPE).stdout.decode().strip() == 'active'):\n                return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the Squid vulnerability by either removing the package or stopping/masking the service.\n    \"\"\"\n    try:\n        # Attempt to stop the Squid service\n        subprocess.run(['systemctl', 'stop', 'squid.service'], check=True)\n        print(\"Stopped squid.service\")\n        \n        # Check if the package is required as a dependency\n        # For simplicity, we assume the user will provide input (todo: improve this flow)\n        dependent_required = input(\"Is the Squid package required as a dependency? (y/n): \")\n        \n        if dependent_required.lower() == 'y':\n            # Mask the Squid service if the package is required\n            subprocess.run(['systemctl', 'mask', 'squid.service'], check=True)\n            print(\"Masked squid.service\")\n        else:\n            # Purge the Squid package if not required\n            subprocess.run(['apt', 'purge', 'squid', '-y'], check=True)\n            print(\"Removed Squid package via apt\")\n    \n    except subprocess.CalledProcessError as e:\n        print(f\"Error during remediation: {e}\")\n        sys.exit(1)\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"No Squid vulnerability found\")\n"
  },
  {
    "name": "Ensure web server services are not in use",
    "id": "2.1.18",
    "type": "Automated",
    "start_page": 270,
    "end_page": 273,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Web servers provide the ability to host web site content.",
    "rationale": "Unless there is a local site approved requirement to run a web server service on the system, web server packages should be removed to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify apache2 is not installed:\n\n```\n# dpkg-query -s apache2 &>/dev/null && echo \"apache2 is installed\"\n```\n\nNothing should be returned.\nRun the following command to verify nginx is not installed:\n\n```\n# dpkg-query -s nginx &>/dev/null && echo \"nginx is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following command to verify apache2.socket, apache2.service, and nginx.service are not enabled:\n\n```\n# systemctl is-enabled apache2.socket apache2.service nginx.service\n2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify apache2.socket, apache2.service, and nginx.service are not active:\n\n```\n# systemctl is-active apache2.socket apache2.service nginx.service\n2>/dev/null | grep '^active'\nNothing should be returned\n```\n\n**Note:**\n\n  - Other web server packages may exist. They should also be audited, if not required and authorized by local site policy\n\n  - If the package is required for a dependency:\n\n`o` Ensure the dependent package is approved by local site policy\n`o` Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "Run the following command to verify apache2 is not installed:\n```\n# dpkg-query -s apache2 &>/dev/null && echo \"apache2 is installed\"\n```\nNothing should be returned.\nRun the following command to verify nginx is not installed:\n```\n# dpkg-query -s nginx &>/dev/null && echo \"nginx is installed\"\n```\nNothing should be returned.",
    "remediation_details": "Run the following commands to stop httpd.socket, httpd.service, and nginx.service, and remove httpd and nginx packages:\n```\n# systemctl stop apache2.socket httpd.service nginx.service\n# apt purge apache2 nginx\n```\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following commands to stop and mask apache2.socket, apache2.service, and nginx.service:\n```\n# systemctl stop apache2.socket apache2.service nginx.service\n# systemctl mask apache2.socket apache2.service nginx.service\n```\n**Note:** Other web server packages may exist. If not required and authorized by local site policy, they should also be removed. If the package is required for a dependency, the service and socket should be stopped and masked.",
    "remediation_code": "Run the following commands to stop httpd.socket, httpd.service, and nginx.service, and remove httpd and nginx packages:\n```\n# systemctl stop apache2.socket httpd.service nginx.service\n# apt purge apache2 nginx\n```\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following commands to stop and mask apache2.socket, apache2.service, and nginx.service:\n```\n# systemctl stop apache2.socket apache2.service nginx.service\n# systemctl mask apache2.socket apache2.service nginx.service\n```",
    "python_script": "\nimport subprocess\nimport apt\nimport systemd\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure web server services are not in use.\"\"\"\n    # Check if apache2 and nginx are installed\n    cache = apt.Cache()\n    if cache['apache2'].is_installed or cache['nginx'].is_installed:\n        print(\"Package(s) apache2 or nginx are installed.\")\n        # If installed, check if services are enabled and active\n        services = ['apache2.socket', 'apache2.service', 'nginx.service']\n        for service in services:\n            if systemd.systemctl.is_enabled(service) or systemd.systemctl.is_active(service):\n                print(f\"Service {service} is enabled or active.\")\n                return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Stop and remove/unmask web server services.\"\"\"\n    cache = apt.Cache()\n    services = ['apache2.socket', 'apache2.service', 'nginx.service']\n    packages = ['apache2', 'nginx']\n\n    for package in packages:\n        if cache[package].is_installed:\n            print(f\"Package {package} is installed. Proceeding with remediation...\")\n            # Stop services\n            for service in services:\n                if systemd.systemctl.is_active(service):\n                    systemd.systemctl.stop(service)\n                    print(f\"Stopped {service} service.\")\n            \n            # If required for dependencies, mask services\n            if input(f\"Is {package} required for dependencies? (y/n): \").lower() == 'y':\n                for service in services:\n                    systemd.systemctl.mask(service)\n                    print(f\"Masked {service} service.\")\n            # Otherwise, remove packages\n            else:\n                subprocess.run(['apt', 'purge', '-y', package])\n                print(f\"Removed {package} package.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        response = input(\"Vulnerability found. Remediate? (y/n): \")\n        if response.lower() == 'y':\n            remediate_vuln()\n"
  },
  {
    "name": "Ensure xinetd services are not in use",
    "id": "2.1.19",
    "type": "Automated",
    "start_page": 274,
    "end_page": 276,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The X Window System provides a Graphical User Interface (GUI) where users can have multiple windows in which to run programs and various add on. The X Windows system is typically used on workstations where users login, but not on servers where users typically do not login.",
    "rationale": "Unless your organization specifically requires graphical login access via X Windows, remove it to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify the xinetd package is not installed:\n```\n# dpkg-query -s xinetd &>/dev/null && echo \"xinetd is installed\"\n```\nNothing should be returned.\n**-OR-**\n**-IF- the xinetd package is required as a dependency:**\nRun the following command to verify xinetd.service is not enabled:\n```\n# systemctl is-enabled xinetd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify xinetd.service is not active:\n```\n# systemctl is-active xinetd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s xinetd &>/dev/null && echo \"xinetd is installed\"\n# systemctl is-enabled xinetd.service 2>/dev/null | grep 'enabled'\n# systemctl is-active xinetd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop xinetd.service, and remove the xinetd package:\n```\n# systemctl stop xinetd.service\n# apt purge xinetd\n```\n**-OR-**\n**-IF- the xinetd package is required as a dependency:**\nRun the following commands to stop and mask the xinetd.service:\n```\n# systemctl stop xinetd.service\n# systemctl mask xinetd.service\n```\n**References:**\n1. NIST SP 800-53 Rev. 5: CM-7",
    "remediation_code": "# systemctl stop xinetd.service\n# apt purge xinetd\n# systemctl stop xinetd.service\n# systemctl mask xinetd.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for xinetd usage\"\"\"\n    # Check if xinetd is installed\n    installed = subprocess.run(['dpkg-query', '-s', 'xinetd'], stdout=subprocess.DEVNULL)\n    if installed.returncode!= 0:\n        # xinetd is not installed, audit passes\n        return True\n\n    # Check if xinetd.service is enabled\n    enabled = subprocess.run(['systemctl', 'is-enabled', 'xinetd.service'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    if b'enabled' in enabled.stdout:\n        # xinetd.service is enabled, audit fails\n        return False\n\n    # Check if xinetd.service is active\n    active = subprocess.run(['systemctl', 'is-active', 'xinetd.service'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    if b'active' in active.stdout:\n        # xinetd.service is active, audit fails\n        return False\n\n    # xinetd is installed but not enabled/active, audit passes\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate xinetd usage\"\"\"\n    # Check if xinetd is installed\n    installed = subprocess.run(['dpkg-query', '-s', 'xinetd'], stdout=subprocess.DEVNULL)\n    if installed.returncode!= 0:\n        print(\"xinetd is not installed, no remediation needed.\")\n        return\n\n    # Stop xinetd.service\n    subprocess.run(['systemctl', 'stop', 'xinetd.service'])\n    print(\"Stopped xinetd.service.\")\n\n    # Check if dependent packages are installed (simplified, may need adjustments based on site policy)\n    dependent_packages = subprocess.run(['apt-mark', 'showmanual'], stdout=subprocess.PIPE)\n    if b'xinetd' in dependent_packages.stdout:\n        # xinetd is required as a dependency, mask the service\n        subprocess.run(['systemctl', 'mask', 'xinetd.service'])\n        print(\"Masked xinetd.service (required as a dependency).\")\n    else:\n        # xinetd is not required, purge the package\n        subprocess.run(['apt', 'purge', '-y', 'xinetd'])\n        print(\"Purged xinetd package.\")\n\nif __name__ == '__main__':\n    if not audit_vuln():\n        print(\"Audit failed. Starting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"Audit passed. No remediation needed.\")\n        sys.exit(0)\n"
  },
  {
    "name": "Ensure mail transfer agent is configured for local-only mode",
    "id": "2.1.21",
    "type": "Automated",
    "start_page": 279,
    "end_page": 281,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Mail Transfer Agents (MTA), such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the MTA be configured to only process local mail.",
    "rationale": "The software for all Mail Transfer Agents is complex and most have a long history of security issues. While it is important to ensure that the system can process local mail messages, it is not necessary to have the MTA's daemon listening on a port unless the server is intended to be a mail server that receives and processes mail from other systems.",
    "audit_details": "Run the following script to verify that the MTA is not listening on any non-loopback address ( 127.0.0.1 or ::1\n```\n#!/usr/bin/env bash\n{\nl_output=\"\"\nl_output2=\"\"\na_port_list=(\"25\" \"465\" \"587\")\n# Check if inet_interfaces is not set to all\nif [ \"$(postconf -n inet_interfaces)\" != \"inet_interfaces = all\" ]; then\n  for l_port_number in \"${a_port_list[@]}\"; do\n    if ss -plntu | grep -P -- ':'\"$l_port_number\"'\\b' | grep -Pvq -'\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):'\"$l_port_number\"'\\b'; then\n      l_output2=\"$l_output2\\n - Port \"$l_port_number\" is listening on\na non-loopback network interface\"\n    else\n      l_output=\"$l_output\\n - Port \"$l_port_number\" is not listening\non a non-loopback network interface\"\n    fi\n  done\nelse\n  l_output2=\"$l_output2\\n - Postfix is bound to all interfaces\"\nfi\nunset a_port_list\n# Provide output from checks\nif [ -z \"$l_output2\" ]; then\n  echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\nelse\n  # If error output (l_output2) is not empty, we fail. Also output anything\nthat's correctly configured\necho -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit\nfailure:\\n$l_output2\\n\"\n  [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\nfi\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\nl_output=\"\"\nl_output2=\"\"\na_port_list=(\"25\" \"465\" \"587\")\n# Check if inet_interfaces is not set to all\nif [ \"$(postconf -n inet_interfaces)\" != \"inet_interfaces = all\" ]; then\n  for l_port_number in \"${a_port_list[@]}\"; do\n    if ss -plntu | grep -P -- ':'\"$l_port_number\"'\\b' | grep -Pvq -'\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):'\"$l_port_number\"'\\b'; then\n      l_output2=\"$l_output2\\n - Port \"$l_port_number\" is listening on\na non-loopback network interface\"\n    else\n      l_output=\"$l_output\\n - Port \"$l_port_number\" is not listening\non a non-loopback network interface\"\n    fi\n  done\nelse\n  l_output2=\"$l_output2\\n - Postfix is bound to all interfaces\"\nfi\nunset a_port_list\n# Provide output from checks\nif [ -z \"$l_output2\" ]; then\n  echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\nelse\n  # If error output (l_output2) is not empty, we fail. Also output anything\nthat's correctly configured\necho -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit\nfailure:\\n$l_output2\\n\"\n  [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\nfi\n}",
    "remediation_details": "Edit /etc/postfix/main.cf and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line below:\n\n```\ninet_interfaces = loopback-only\n```\n\nRun the following command to restart postfix:\n\n```\n# systemctl restart postfix\n```\n\n**Note:**\n\n - This recommendation is designed around the postfix mail server.\n - Depending on your environment you may have an alternative MTA installed such as exim4. If this is the case consult the documentation for your installed MTA to configure the recommended state.",
    "remediation_code": "Edit /etc/postfix/main.cf and add the following line to the RECEIVING MAIL section. If the line already exists, change it to look like the line below:\n\n```\ninet_interfaces = loopback-only\n```\n\nRun the following command to restart postfix:\n\n```\n# systemctl restart postfix\n```\n\n**Note:**\n\n - This recommendation is designed around the postfix mail server.\n - Depending on your environment you may have an alternative MTA installed such as exim4. If this is the case consult the documentation for your installed MTA to configure the recommended state.",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit MTA configuration for local-only mode\"\"\"\n    # Check if inet_interfaces is not set to all\n    output = subprocess.check_output(['postconf', '-n', 'inet_interfaces']).decode('utf-8')\n    if output.strip() != \"inet_interfaces = all\":\n        ports = ['25', '465', '587']\n        for port in ports:\n            # Check if port is listening on non-loopback address\n            output = subprocess.check_output(['ss', '-plntu']).decode('utf-8')\n            if re.search(rf':{port}\\b.*(?!(127\\.0\\.0\\.1|::1)):{port}\\b', output):\n                print(f\" - Port {port} is listening on a non-loopback network interface\")\n                return False\n            else:\n                print(f\" - Port {port} is not listening on a non-loopback network interface\")\n    else:\n        print(\" - Postfix is bound to all interfaces\")\n        return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate MTA configuration to local-only mode\"\"\"\n    # Edit /etc/postfix/main.cf to set inet_interfaces = loopback-only\n    with open('/etc/postfix/main.cf', 'r+') as file:\n        content = file.read()\n        if 'inet_interfaces =' not in content:\n            file.write('\\ninet_interfaces = loopback-only\\n')\n        else:\n            file.seek(0)\n            lines = file.readlines()\n            file.seek(0)\n            file.truncate()\n            for line in lines:\n                if line.strip().startswith('inet_interfaces ='):\n                    file.write('inet_interfaces = loopback-only\\n')\n                else:\n                    file.write(line)\n    print(\" - Updated /etc/postfix/main.cf to set inet_interfaces = loopback-only\")\n    \n    # Restart Postfix service\n    subprocess.check_call(['systemctl', 'restart', 'postfix'])\n    print(\" - Restarted Postfix service\")\n"
  },
  {
    "name": "Ensure NIS Client is not installed",
    "id": "2.2.1",
    "type": "Automated",
    "start_page": 286,
    "end_page": 287,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Network Information Service (NIS), formerly known as Yellow Pages, is a clientserver directory service protocol used to distribute system configuration files. The NIS client was used to bind a machine to an NIS server and receive the distributed configuration files.",
    "rationale": "The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed.",
    "audit_details": "Verify nis is not installed. Use the following command to provide the needed information:\n\n# dpkg-query -s nis &>/dev/null && echo \"nis is installed\"\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s nis &>/dev/null && echo \"nis is installed\"",
    "remediation_details": "Uninstall nis:\n\n# apt purge nis",
    "remediation_code": "# apt purge nis",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the NIS client is installed.\n    \n    Returns:\n    bool: True if NIS client is not installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to query the nis package status\n        subprocess.check_output(['dpkg-query', '-s', 'nis'], stderr=subprocess.DEVNULL)\n        # If the above command succeeds, nis is installed\n        return False\n    except subprocess.CalledProcessError:\n        # If the command fails (package not found), nis is not installed\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by uninstalling the NIS client if it's installed.\n    \"\"\"\n    if not audit_vuln():  # Check if nis is installed\n        print(\"Uninstalling NIS client...\")\n        try:\n            # Use apt to purge the nis package\n            subprocess.check_call(['apt', 'purge', '-y', 'nis'])\n            print(\"NIS client uninstalled successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to uninstall NIS client: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found: NIS client is installed.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found: NIS client is not installed.\")\n"
  },
  {
    "name": "Ensure rsh client is not installed",
    "id": "2.2.2",
    "type": "Automated",
    "start_page": 288,
    "end_page": 289,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The rsh-client package contains the client commands for the rsh services.",
    "rationale": "These legacy clients contain numerous security exposures and have been replaced with the more secure SSH package. Even if the server is removed, it is best to ensure the clients are also removed to prevent users from inadvertently attempting to use these commands and therefore exposing their credentials. Note that removing the rsh-client package removes the clients for rsh, rcp and rlogin .",
    "audit_details": "Verify rsh-client is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s rsh-client &>/dev/null && echo \"rsh-client is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s rsh-client &>/dev/null && echo \"rsh-client is installed\"",
    "remediation_details": "Uninstall rsh:\n\n```\n# apt purge rsh-client\n```\n",
    "remediation_code": "# apt purge rsh-client",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if rsh-client is installed.\n    \n    Returns:\n    bool: True if rsh-client is installed, False otherwise.\n    \"\"\"\n    try:\n        # Use dpkg-query to check if rsh-client is installed\n        subprocess.check_output([\"dpkg-query\", \"-s\", \"rsh-client\"])\n        return True\n    except subprocess.CalledProcessError:\n        # If the package is not installed, dpkg-query will exit with a non-zero status\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by uninstalling rsh-client.\n    \"\"\"\n    if audit_vuln():\n        # Use apt to purge rsh-client\n        subprocess.check_call([\"apt\", \"purge\", \"-y\", \"rsh-client\"])\n        print(\"Uninstalled rsh-client package.\")\n    else:\n        print(\"rsh-client is already uninstalled. No action taken.\")\n```\n**Example Usage:**\n```python\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure talk client is not installed",
    "id": "2.2.3",
    "type": "Automated",
    "start_page": 290,
    "end_page": 291,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The talk software makes it possible for users to send and receive messages across systems through a terminal session. The talk client, which allows initialization of talk sessions, is installed by default.",
    "rationale": "The software presents a security risk as it uses unencrypted protocols for communication.",
    "audit_details": "Verify talk is not installed. The following command may provide the needed information:\n\n```\n# dpkg-query -s talk &>/dev/null && echo \"talk is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s talk &>/dev/null && echo \"talk is installed\"",
    "remediation_details": "Uninstall talk:\n\n```\n# apt purge talk\n```\n",
    "remediation_code": "# apt purge talk",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the 'talk' client is not installed.\n    \n    Returns:\n    bool: True if 'talk' is not installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to query the package, if it's installed, this will exit with code 0\n        subprocess.check_output(['dpkg-query', '-s', 'talk'])\n        # If the above doesn't raise an exception, 'talk' is installed\n        return False\n    except subprocess.CalledProcessError:\n        # If dpkg-query exits with a non-zero code, 'talk' is not installed\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Uninstall the 'talk' client if it's installed.\n    \"\"\"\n    if not audit_vuln():  # Check if 'talk' is installed\n        # Use APT to purge the 'talk' package\n        subprocess.run(['apt', 'purge', '-y', 'talk'])  # -y to assume yes on prompts\n        print(\"Uninstalled and removed talk client.\")\n    else:\n        print(\"talk client is not installed, no action needed.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(\"Vulnerability Status:\", \"Not Vulnerable\" if audit_vuln() else \"Vulnerable\")\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure telnet client is not installed",
    "id": "2.2.4",
    "type": "Automated",
    "start_page": 292,
    "end_page": 293,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The telnet package contains the telnet client, which allows users to start connections to other systems via the telnet protocol.",
    "rationale": "The telnet protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow an unauthorized user to steal credentials. The ssh package provides an encrypted session and stronger security and is included in most Linux distributions.",
    "audit_details": "Verify telnet is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s telnet &>/dev/null && echo \"telnet is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s telnet &>/dev/null && echo \"telnet is installed\"",
    "remediation_details": "Uninstall telnet:\n\n```\n# apt purge telnet\n```",
    "remediation_code": "# apt purge telnet",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if telnet package is installed.\n    \n    Returns:\n    bool: True if telnet is not installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to list the telnet package. If it's not installed, this will raise a FileNotFoundError.\n        subprocess.check_output(['dpkg', '-s', 'telnet'], stderr=subprocess.DEVNULL)\n        # If no exception was raised, the package is installed.\n        print(\"Telnet package is installed.\")\n        return False\n    except FileNotFoundError:\n        # Package not found, system is not vulnerable.\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by uninstalling the telnet package.\n    \"\"\"\n    try:\n        # Attempt to purge the telnet package\n        subprocess.check_call(['apt', 'purge', '-y', 'telnet'])\n        print(\"Successfully uninstalled telnet package.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error uninstalling telnet package: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"System is vulnerable. Attempting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"System is not vulnerable. No action required.\")\n    sys.exit(0)\n"
  },
  {
    "name": "Ensure ldap client is not installed",
    "id": "2.2.5",
    "type": "Automated",
    "start_page": 294,
    "end_page": 295,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP client, it is recommended that the software be removed to reduce the potential attack surface.",
    "audit_details": "Verify that ldap-utils is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s ldap-utils &>/dev/null && echo \"ldap-utils is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s ldap-utils &>/dev/null && echo \"ldap-utils is installed\"",
    "remediation_details": "Uninstall ldap-utils:\n\n```\n# apt purge ldap-utils\n```\n",
    "remediation_code": "# apt purge ldap-utils",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if ldap-utils is installed on the system.\n    \n    Returns:\n    bool: True if ldap-utils is NOT installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to query the package status, suppressing output\n        subprocess.check_output(['dpkg-query', '-s', 'ldap-utils'], stderr=subprocess.DEVNULL)\n        # If no exception occurred, the package is installed\n        return False\n    except subprocess.CalledProcessError:\n        # Package not found, or query failed, considering it not installed for this context\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Uninstalls ldap-utils if it's installed on the system.\n    \"\"\"\n    if not audit_vuln():  # Check if installed before attempting to uninstall\n        # Use apt to purge ldap-utils, assuming Ubuntu's apt package manager\n        subprocess.run(['apt', 'purge', '-y', 'ldap-utils'])  # '-y' for non-interactive yes\n        print(\"Successfully uninstalled ldap-utils.\")\n\nif __name__ == \"__main__\":\n    print(\"Vulnerable:\", not audit_vuln())  # Invert bool for human readability (True = Vulnerable)\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure ftp client is not installed",
    "id": "2.2.6",
    "type": "Automated",
    "start_page": 296,
    "end_page": 297,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network, especially where no authentication is necessary (permits anonymous users to connect to a server).",
    "rationale": "FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be removed to reduce the potential attack surface.",
    "audit_details": "Verify ftp is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s ftp &>/dev/null && echo \"ftp is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s ftp &>/dev/null && echo \"ftp is installed\"",
    "remediation_details": "Run the following command to uninstall ftp:\n\n```\n# apt purge ftp\n```\n",
    "remediation_code": "# apt purge ftp",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if ftp client is not installed\"\"\"\n    try:\n        # Use subprocess to run dpkg-query, if ftp is installed, the command will exit with code 0\n        subprocess.check_output(['dpkg-query', '-s', 'ftp'])\n        # If no exception was raised, ftp is installed, return False\n        print(\"ftp is installed\")\n        return False\n    except subprocess.CalledProcessError:\n        # If an exception was raised, ftp is not installed, return True\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Uninstall ftp client if it's installed\"\"\"\n    if audit_vuln() is False:\n        # Use subprocess to run apt purge, and capture output\n        subprocess.run(['apt', 'purge', '-y', 'ftp'], check=True, stdout=sys.stdout, stderr=sys.stderr)\n        print(\"Uninstalled ftp client.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure a single time synchronization daemon is in use",
    "id": "2.3.1.1",
    "type": "Automated",
    "start_page": 300,
    "end_page": 303,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them. On virtual systems where host based time synchronization is available consult your virtualization software documentation and verify that host based synchronization is in use and follows local site policy. In this scenario, this section should be skipped. Only one time synchronization method should be in use on the system. Configuring multiple time synchronization methods could lead to unexpected or unreliable results.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and ensures log files have consistent time records across the enterprise, which aids in forensic investigations.",
    "audit_details": "On physical systems, and virtual systems where host based time synchronization is not available. One of the two time synchronization daemons should be available; chrony or systemd-timesyncd. Run the following script to verify that a single time synchronization daemon is available on the system:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  service_not_enabled_chk()\n  {\n    l_out2=\"\"\n    if systemctl is-enabled \"$l_service_name\" 2>/dev/null | grep -q 'enabled'; then\n      l_out2=\"$l_out2\\n - Daemon: \"$l_service_name\" is enabled on the system\"\n    fi\n    if systemctl is-active \"$l_service_name\" 2>/dev/null | grep -q '^active'; then\n      l_out2=\"$l_out2\\n - Daemon: \"$l_service_name\" is active on the system\"\n    fi\n  }  \n  l_service_name=\"systemd-timesyncd.service\" # Check systemd-timesyncd daemon\n  service_not_enabled_chk\n  if [ -n \"$l_out2\" ]; then\n    l_timesyncd=\"y\"\n    l_out_tsd=\"$l_out2\"\n  else\n    l_timesyncd=\"n\"\n    l_out_tsd=\"\\n - Daemon: \"$l_service_name\" is not enabled and not active on the system\"\n  fi\n  l_service_name=\"chrony.service\" # Check chrony\n  service_not_enabled_chk\n  if [ -n \"$l_out2\" ]; then\n    l_chrony=\"y\"\n    l_out_chrony=\"$l_out2\"\n  else\n    l_chrony=\"n\"\n    l_out_chrony=\"\\n - Daemon: \"$l_service_name\" is not enabled and not active on the system\"\n  fi\n  l_status=\"$l_timesyncd$l_chrony\"\n  case \"$l_status\" in\n    yy)\n      l_output2=\" - More than one time sync daemon is in use on the system$l_out_tsd$l_out_chrony\"\n      ;;\n    nn)\n      l_output2=\" - No time sync daemon is in use on the system$l_out_tsd$l_out_chrony\"\n      ;;\n    yn|ny)\n      l_output=\" - Only one time sync daemon is in use on the system$l_out_tsd$l_out_chrony\"\n      ;;\n    *)\n      l_output2=\" - Unable to determine time sync daemon(s) status\"\n      ;;\n  esac\n  if [ -z \"$l_output2\" ]; then\n    echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n    echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure *\\n$l_output2\\n\"\n  fi\n}\n",
    "remediation_details": "On physical systems, and virtual systems where host based time synchronization is not available. Select one of the two time synchronization daemons; chrony (1) or systemd-timesyncd (2) and following the remediation procedure for the selected daemon. Note: enabling more than one synchronization daemon could lead to unexpected or unreliable results: 1. chrony Run the following command to install chrony: # apt install chrony Run the following commands to stop and mask the systemd-timesyncd daemon: # systemctl stop systemd-timesyncd.service # systemctl mask systemd-timesyncd.service Note: Subsection: Configure chrony should be followed. Subsection: Configure systemd-timesyncd should be skipped. 2. systemd-timesyncd Run the following command to remove the chrony package: # apt purge chrony # apt autoremove chrony Note: Subsection: Configure systemd-timesyncd should be followed. Subsection: Configure chrony should be skipped.",
    "remediation_code": "1. chrony\n\nRun the following command to install chrony:\n# apt install chrony \n\nRun the following commands to stop and mask the systemd-timesyncd daemon:\n# systemctl stop systemd-timesyncd.service\n# systemctl mask systemd-timesyncd.service\n\nNote:\n  - Subsection: Configure chrony should be followed\n  - Subsection: Configure systemd-timesyncd should be skipped\n\n2. systemd-timesyncd\n\nRun the following command to remove the chrony package:\n# apt purge chrony\n# apt autoremove chrony\n\nNote:\n  - Subsection: Configure systemd-timesyncd should be followed\n  - Subsection: Configure chrony should be skipped\n  \nReferences:\n1. NIST SP 800-53 Rev. 5: AU-3, AU-12\n\nCIS Controls:\nControls\nControl   IG 1    IG 2  IG 3\nVersion\n8.4 Standardize Time Synchronization v8 Standardize time synchronization. Configure at least two synchronized time  -   sources across enterprise assets, where supported.\n6.1 Utilize Three Synchronized Time Sources v7 Use at least three synchronized time sources from which all servers and   -   network devices retrieve time information on a regular basis so that timestamps in logs are consistent.\n\nMITRE ATT&CK Mappings:\nTechniques / Sub- Tactics  Mitigations\ntechniques\nT1070, T1070.002, T1562, TA0005\nT1562.001\n\n|Controls Version|Control|IG 1|IG 2|IG 3|\n|---|---|---|---|---|\n|v8|8.4 Standardize Time Synchronization Standardize time synchronization. Configure at least two synchronized time sources across enterprise assets, where supported.||\u25cf|\u25cf|\n|v7|6.1 Utilize Three Synchronized Time Sources Use at least three synchronized time sources from which all servers and network devices retrieve time information on a regular basis so that timestamps in logs are consistent.||\u25cf|\u25cf|\n\n|MITRE ATT&CK Mappings:|Col2|Col3|\n|---|---|---|\n|Techniques / Sub- techniques|Tactics|Mitigations|\n|T1070, T1070.002, T1562, T1562.001|TA0005||",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if only one time synchronization daemon is in use.\"\"\"\n    daemons = ['systemd-timesyncd', 'chrony']\n    active_daemons = []\n\n    for daemon in daemons:\n        try:\n            # Check if enabled\n            subprocess.check_output(f'systemctl is-enabled {daemon}.service', shell=True).decode().strip() == 'enabled'\n            # Check if active\n            subprocess.check_output(f'systemctl is-active {daemon}.service', shell=True).decode().strip() == 'active'\n            active_daemons.append(daemon)\n        except subprocess.CalledProcessError:\n            pass  # Daemon not enabled or active, expected\n\n    # Audit result: Only one daemon should be active\n    return len(active_daemons) == 1\n\ndef remediate_vuln(target_daemon: str = 'systemd-timesyncd') -> None:\n    \"\"\"Remediate by ensuring only the target time synchronization daemon is in use.\"\"\"\n    daemons = ['systemd-timesyncd', 'chrony']\n    daemons.remove(target_daemon)  # Daemon to keep\n    daemon_to_remove = daemons[0]  # Daemon to disable/remove\n\n    # Stop target daemon (in case it's already running), then enable/start it\n    for action in ['stop', 'enable', 'start']:\n        try:\n            subprocess.check_call(f'systemctl {action} {target_daemon}.service', shell=True)\n            print(f\"{action.capitalize()}ed `{target_daemon}` systemd service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error {action}ing `{target_daemon}`: {e}\")\n\n    # Remove the other daemon\n    if daemon_to_remove == 'chrony':\n        try:\n            subprocess.check_call('apt purge chrony -y', shell=True)\n            subprocess.check_call('apt autoremove -y', shell=True)\n            print(f\"Removed `{daemon_to_remove}` package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error removing `{daemon_to_remove}`: {e}\")\n    else:  # systemd-timesyncd was chosen to remove (unlikely, but handled)\n        try:\n            subprocess.check_call(f'systemctl stop {daemon_to_remove}.service', shell=True)\n            subprocess.check_call(f'systemctl mask {daemon_to_remove}.service', shell=True)\n            print(f\"Stopped and masked `{daemon_to_remove}` systemd service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error stopping/masking `{daemon_to_remove}`: {e}\")\n\nif __name__ == '__main__':\n    if not audit_vuln():\n        print(\"Audit failed. Initiating remediation...\")\n        remediate_vuln()  # Default to systemd-timesyncd\n    else:\n        print(\"Audit passed. No remediation necessary.\")\n"
  },
  {
    "name": "Ensure systemd-timesyncd configured with authorized timeserver",
    "id": "2.3.2.1",
    "type": "Automated",
    "start_page": 306,
    "end_page": 309,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "NTP=\n\n#### \u2022 A space-separated list of NTP server host names or IP addresses. During\n### runtime this list is combined with any per-interface NTP servers acquired from systemd-networkd.service(8). systemd-timesyncd will contact all configured system or per-interface servers in turn, until one responds. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. This setting defaults to an empty list.\nFallbackNTP=\n\n#### \u2022 A space-separated list of NTP server host names or IP addresses to be used as\n### the fallback NTP servers. Any per-interface NTP servers obtained from systemd- networkd.service(8) take precedence over this setting, as do any servers set via NTP= above. This setting is hence only relevant if no other NTP server information is known. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. If this option is not given, a compiled-in list of NTP servers is used.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit_details": "Run the following command to verify the NTP and/or FallbackNTP option is set to local site approved authoritative time server(s):\n```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"NTP=[^#\\n\\r]+\" \"FallbackNTP=[^#\\n\\r]+\")\n  l_systemd_config_file=\"/etc/systemd/timesyncd.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\",
    "audit_code": "Run the following command to verify the NTP and/or FallbackNTP option is set to local site approved authoritative time server(s): \n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"NTP=[^#\\n\\r]+\" \"FallbackNTP=[^#\\n\\r]+\")\n  l_systemd_config_file=\"/etc/systemd/timesyncd.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\",
    "remediation_details": "Set NTP and/or FallbackNPT parameters to local site approved authoritative time server(s) in /etc/systemd/timesyncd.conf or a file in /etc/systemd/timesyncd.conf.d/ ending in .conf in the [Time] section: Example file:\n[Time]\nNTP=time.nist.gov # Uses the generic name for NIST's time servers \nFallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov # Space separated list of NIST time servers\n\n Example script to create systemd drop-in file:\n#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/timesyncd.conf.d/ ] && mkdir /etc/systemd/timesyncd.conf.d/\n  printf '%s\\n' \"[Time]\" \"NTP=time.nist.gov\" \"FallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov\" >> /etc/systemd/timesyncd.conf.d/60timesyncd.conf\n}\n\n Note: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n```bash\n# systemctl reload-or-restart systemd-journald\n```",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/timesyncd.conf.d/ ] && mkdir /etc/systemd/timesyncd.conf.d/\n  printf '%s\\n' \"[Time]\" \"NTP=time.nist.gov\" \"FallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov\" >> /etc/systemd/timesyncd.conf.d/60timesyncd.conf\n}",
    "python_script": "\nimport os\nimport configparser\n\n# Approved time servers (assuming these are provided for demonstration)\nAPPROVED_NTP = \"time.nist.gov\"\nAPPROVED_FALLBACK_NTP = [\"time-a-g.nist.gov\", \"time-b-g.nist.gov\", \"time-c-g.nist.gov\"]\n\ndef audit_vuln(approved_ntp=APPROVED_NTP, approved_fallback_ntp=APPROVED_FALLBACK_NTP) -> bool:\n    \"\"\"Audit if NTP and FallbackNTP are set to approved time servers.\"\"\"\n    config_files = [\"/etc/systemd/timesyncd.conf\"]\n    config_files.extend([f for f in os.listdir(\"/etc/systemd/timesyncd.conf.d/\") if f.endswith(\".conf\")])\n\n    for file in config_files:\n        if file.startswith(\"/etc/systemd/timesyncd.conf.d/\"):\n            file = os.path.join(\"/etc/systemd/timesyncd.conf.d/\", file)\n        \n        config = configparser.ConfigParser()\n        config.read(file)\n\n        if \"Time\" in config.sections():\n            ntp_set = config.get(\"Time\", \"NTP\", fallback=None)\n            fallback_ntp_set = config.get(\"Time\", \"FallbackNTP\", fallback=None)\n\n            if ntp_set!= approved_ntp or set(fallback_ntp_set.split())!= set(approved_fallback_ntp):\n                print(f\"Unauthorized time server configured in {file}: NTP={ntp_set}, FallbackNTP={fallback_ntp_set}\")\n                return False\n\n    print(\"Configured time servers are authorized.\")\n    return True\n\ndef remediate_vuln(ntp=APPROVED_NTP, fallback_ntp=APPROVED_FALLBACK_NTP) -> None:\n    \"\"\"Remediate by setting approved NTP and FallbackNTP in a drop-in config file.\"\"\"\n    config_dir = \"/etc/systemd/timesyncd.conf.d/\"\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)\n        print(f\"Created directory {config_dir}\")\n\n    config_file = os.path.join(config_dir, \"60timesyncd.conf\")\n    \n    with open(config_file, \"w\") as f:\n        f.write(\"[Time]\\n\")\n        f.write(f\"NTP={ntp}\\n\")\n        f.write(f\"FallbackNTP={' '.join(fallback_ntp)}\\n\")\n    \n    print(f\"Wrote approved time servers to {config_file}\")\n    \n    # Reload systemd configuration\n    import subprocess\n    subprocess.run([\"systemctl\", \"reload-or-restart\", \"systemd-timesyncd\"])\n    print(\"Reloaded systemd-timesyncd service\")\n\n# Example usage\nif __name__ == \"__main__\":\n    audit_vuln()\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure chrony is running as user _chrony",
    "id": "2.3.3.2",
    "type": "Automated",
    "start_page": 317,
    "end_page": 318,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The chrony package is installed with a dedicated user account _chrony. This account is granted the access required by the chronyd service",
    "rationale": "The chronyd service should run with only the required privlidges",
    "audit_details": "**- IF -** `chrony is in use on the system, run the following command to verify the chronyd` service is being run as the _chrony user:\n\n```\n# ps -ef | awk '(/[c]hronyd/ && $1!=\"_chrony\") { print $1 }'\n```\n\nNothing should be returned",
    "audit_code": "# ps -ef | awk '(/[c]hronyd/ && $1!=\"_chrony\") { print $1 }'",
    "remediation_details": "Add or edit the user line to /etc/chrony/chrony.conf or a file ending in .conf in\n```\n/etc/chrony/conf.d/:\n```\n```\nuser _chrony\n```\n\n**- OR -** If another time synchronization service is in use on the system, run the following command to remove chrony from the system:\n```\n# apt purge chrony\n# apt autoremove chrony\n``",
    "remediation_code": "# apt purge chrony\n# apt autoremove chrony",
    "python_script": "\nimport psutil\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if chronyd is running as _chrony user.\"\"\"\n    for proc in psutil.process_iter(['pid', 'name', 'username']):\n        if proc.info['name'] == 'chronyd' and proc.info['username']!= '_chrony':\n            return False  # Vulnerability found\n    return True  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability.\"\"\"\n    # Check if another time sync service is in use (simplified, might need adjustment based on specific services)\n    ntp_running = any('ntp' in p.info['name'] for p in psutil.process_iter(['name']) if p.info)\n    \n    if ntp_running:\n        print(\"Removing chrony as another time synchronization service is in use...\")\n        subprocess.run(['apt', 'purge', '-y', 'chrony'])\n        subprocess.run(['apt', 'autoremove', '-y', 'chrony'])\n    else:\n        config_files = ['/etc/chrony/chrony.conf'] + [f for f in os.listdir('/etc/chrony/conf.d/') if f.endswith('.conf')]\n        config_files = [f'/etc/chrony/conf.d/{f}' if f!= '/etc/chrony/chrony.conf' else f for f in config_files]\n        \n        for file in config_files:\n            if os.path.exists(file):\n                print(f\"Editing {file} to set user to _chrony...\")\n                with open(file, 'a+') as f:\n                    if 'user _chrony' not in f.read():\n                        f.write('user _chrony\\n')\n                break  # Assuming we stop at the first file we can modify\n        else:\n            print(\"No writable config file found. Please manually add 'user _chrony' to one of the config files.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    vulnerable = not audit_vuln()\n    print(f\"Vulnerable: {vulnerable}\")\n    if vulnerable:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure chrony is enabled and running",
    "id": "2.3.3.3",
    "type": "Automated",
    "start_page": 319,
    "end_page": 320,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "chrony is a daemon for synchronizing the system clock across the network",
    "rationale": "chrony needs to be enabled and running in order to synchronize the system to a timeserver. Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit_details": "IF - chrony is in use on the system, run the following commands: Run the following command to verify that the chrony service is enabled:\n```\n# systemctl is-enabled chrony.service\nenabled\n```\nRun the following command to verify that the chrony service is active:\n```\n# systemctl is-active chrony.service\nactive\n```",
    "audit_code": "# systemctl is-enabled chrony.service\n# systemctl is-active chrony.service",
    "remediation_details": "IF - chrony is in use on the system, run the following commands: Run the following command to unmask chrony.service:\n```\n# systemctl unmask chrony.service\n```\nRun the following command to enable and start chrony.service:\n```\n# systemctl --now enable chrony.service\n```\n\nOR - If another time synchronization service is in use on the system, run the following command to remove chrony:\n```\n# apt purge chrony\n# apt autoremove chrony\n```",
    "remediation_code": "# systemctl unmask chrony.service\n# systemctl --now enable chrony.service\n# apt purge chrony\n# apt autoremove chrony",
    "python_script": "\nimport subprocess\nimport pkgutil\n\ndef is_chrony_in_use() -> bool:\n    \"\"\"Check if chrony is installed\"\"\"\n    return pkgutil.find_loader(\"chrony\") is not None\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if chrony is enabled and running\"\"\"\n    if not is_chrony_in_use():\n        print(\"Chrony is not installed. Assuming alternative time synchronization is in use.\")\n        return True  # or raise an exception, depending on your policy\n\n    try:\n        subprocess.check_output([\"systemctl\", \"is-enabled\", \"chrony.service\"]).decode().strip() == \"enabled\"\n        subprocess.check_output([\"systemctl\", \"is-active\", \"chrony.service\"]).decode().strip() == \"active\"\n        return True\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by enabling and starting chrony, or prompt for alternative\"\"\"\n    if not is_chrony_in_use():\n        print(\"Chrony is not installed. Please install it if you want to use it for time synchronization.\")\n        return\n\n    print(\"Attempting to remediate using chrony...\")\n    \n    # Try to unmask (if masked), enable, and start chrony\n    try:\n        subprocess.check_call([\"systemctl\", \"unmask\", \"chrony.service\"])\n        print(\"Unmasked chrony.service.\")\n    except subprocess.CalledProcessError as e:\n        if e.returncode!= 1:  # 1 indicates the service was already unmasked\n            raise\n        print(\"Chrony.service was already unmasked.\")\n    \n    try:\n        subprocess.check_call([\"systemctl\", \"--now\", \"enable\", \"chrony.service\"])\n        print(\"Enabled and started chrony.service.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to enable and start chrony.service: {e}\")\n    \n    # Inform user of the alternative option\n    print(\"\\n--- IMPORTANT NOTICE ---\")\n    print(\"If you intend to use another time synchronization service,\")\n    print(\"you will need to manually uninstall chrony using:\")\n    print(\"# apt purge chrony\")\n    print(\"# apt autoremove chrony\")\n    print(\"after ensuring your alternative service is configured and running properly.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability detected. Attempting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure cron daemon is enabled and active",
    "id": "2.4.1.1",
    "type": "Automated",
    "start_page": 323,
    "end_page": 324,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The cron daemon is used to execute batch jobs on the system.",
    "rationale": "While there may not be user jobs that need to be run on the system, the system does have maintenance jobs that may include security monitoring that have to run, and cron is used to execute them.",
    "audit_details": "IF cron is installed on the system: Run the following command to verify cron is enabled: \n```\n# systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $2}'\nenabled\n```\nRun the following command to verify that cron is active:\n```\n# systemctl list-units | awk '$1~/^crond?\\.service/{print $3}'\nactive\n```",
    "audit_code": "# systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $2}'\nenabled\n# systemctl list-units | awk '$1~/^crond?\\.service/{print $3}'\nactive\n",
    "remediation_details": "IF cron is installed on the system: Run the following commands to unmask, enable, and start cron:\n```\n# systemctl unmask \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n# systemctl --now enable \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n```",
    "remediation_code": "# systemctl unmask \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n# systemctl --now enable \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"",
    "python_script": "\nimport subprocess\nimport systemd\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the cron daemon is enabled and active.\n    \n    Returns:\n        bool: True if the vulnerability is present (cron is not enabled or active), False otherwise.\n    \"\"\"\n    # Check if cron is installed (assuming at least one of cron.service or crond.service exists)\n    service_names = ['cron.service', 'crond.service']\n    for service_name in service_names:\n        try:\n            service = systemd.manager.Manager().get_unit(service_name)\n            if service:\n                break\n        except Exception as e:\n            # Handle exception, e.g., if systemd-python is not properly configured\n            print(f\"Error checking service {service_name}: {e}\")\n            return True  # Assume vulnerability present if we can't check\n    else:\n        # Neither cron.service nor crond.service found, assume vulnerability present\n        return True\n\n    # Check if the service is enabled and active\n    return not (service.LoadState == 'loaded' and service.ActiveState == 'active')\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by enabling and activating the cron daemon.\n    \"\"\"\n    service_names = ['cron.service', 'crond.service']\n    for service_name in service_names:\n        try:\n            service = systemd.manager.Manager().get_unit(service_name)\n            if service:\n                if service.LoadState == 'masked':\n                    print(f\"Unmasking {service_name}...\")\n                    subprocess.run(['systemctl', 'unmask', service_name])\n                if service.LoadState != 'loaded' or service.ActiveState != 'active':\n                    print(f\"Enabling and starting {service_name}...\")\n                    subprocess.run(['systemctl', '--now', 'enable', service_name])\n                break\n        except Exception as e:\n            print(f\"Error remediating {service_name}: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/crontab are configured",
    "id": "2.4.1.2",
    "type": "Automated",
    "start_page": 325,
    "end_page": 326,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/crontab file is used by cron to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that only the owner can access the file.",
    "rationale": "This file contains information on what system jobs are run by cron. Write access to these files could provide unprivileged users with the ability to elevate their privileges. Read access to these files could provide users with the ability to gain insight on system jobs that run on the system and could provide them a way to gain unauthorized privileged access.",
    "audit_details": "**- IF - cron is installed on the system:**\nRun the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other :\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/crontab\nAccess: (600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/crontab",
    "remediation_details": "**- IF - cron is installed on the system:**\nRun the following commands to set ownership and permissions on /etc/crontab:\n```\n# chown root:root /etc/crontab\n# chmod og-rwx /etc/crontab\n```\n",
    "remediation_code": "# chown root:root /etc/crontab\n# chmod og-rwx /etc/crontab",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit permissions and ownership of /etc/crontab.\n    \n    Returns:\n    bool: True if the file has correct ownership (root:root) and permissions (600), False otherwise.\n    \"\"\"\n    file_path = '/etc/crontab'\n    if not os.path.exists(file_path):\n        # If the file does not exist, assume cron is not installed, audit passes\n        return True\n    \n    file_stat = os.stat(file_path)\n    correct_owner = file_stat.st_uid == 0 and file_stat.st_gid == 0\n    correct_permissions = stat.filemode(file_stat.st_mode) == '-rw-------'\n    return correct_owner and correct_permissions\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate permissions and ownership of /etc/crontab if necessary.\n    \"\"\"\n    file_path = '/etc/crontab'\n    if not os.path.exists(file_path):\n        # If the file does not exist, assume cron is not installed, nothing to remediate\n        return\n    \n    # Set ownership to root:root\n    if os.stat(file_path).st_uid!= 0 or os.stat(file_path).st_gid!= 0:\n        os.chown(file_path, 0, 0)\n        print(f\"Set ownership of '{file_path}' to root:root.\")\n    \n    # Set permissions to 600 (-rw-------)\n    if stat.filemode(os.stat(file_path).st_mode)!= '-rw-------':\n        os.chmod(file_path, 0o600)\n        print(f\"Set permissions of '{file_path}' to 600 (-rw-------).\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Audit failed. Remediation required.\")\n        remediate_vuln()\n    else:\n        print(\"Audit passed. No remediation needed.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.hourly are configured",
    "id": "2.4.1.3",
    "type": "Automated",
    "start_page": 327,
    "end_page": 328,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This directory contains system cron jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "- IF - cron is installed on the system:\nRun the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other:\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.hourly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n\n```",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.hourly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "- IF - cron is installed on the system:\nRun the following commands to set ownership and permissions on the /etc/cron.hourly directory:\n```\n# chown root:root /etc/cron.hourly/\n# chmod og-rwx /etc/cron.hourly/\n\n```",
    "remediation_code": "# chown root:root /etc/cron.hourly/\n# chmod og-rwx /etc/cron.hourly/",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions on /etc/cron.hourly\"\"\"\n    cron_hourly_path = '/etc/cron.hourly'\n    if not os.path.exists(cron_hourly_path):\n        print(f\"Directory {cron_hourly_path} does not exist. Assuming not vulnerable.\")\n        return False\n\n    stat_info = os.stat(cron_hourly_path)\n    uid = stat_info.st_uid\n    gid = stat_info.st_gid\n    permissions = stat_info.st_mode\n\n    # Check ownership\n    if (uid, gid)!= (0, 0) or pwd.getpwuid(uid).pw_name!= 'root' or grp.getgrgid(gid).gr_name!= 'root':\n        print(f\"Ownership of {cron_hourly_path} is not set to root:root. Current: {pwd.getpwuid(uid).pw_name}:{grp.getgrgid(gid).gr_name}\")\n        return False\n\n    # Check permissions\n    if not (permissions & 0o700) == 0o700:\n        print(f\"Permissions of {cron_hourly_path} are not set to 700 (drwx------). Current: {stat.filemode(permissions)}\")\n        return False\n\n    print(f\"Permissions and ownership of {cron_hourly_path} are correctly set.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions on /etc/cron.hourly\"\"\"\n    cron_hourly_path = '/etc/cron.hourly'\n    if not os.path.exists(cron_hourly_path):\n        print(f\"Directory {cron_hourly_path} does not exist. Skipping remediation.\")\n        return\n\n    # Set ownership to root:root\n    try:\n        os.chown(cron_hourly_path, 0, 0)\n        print(f\"Set ownership of {cron_hourly_path} to root:root.\")\n    except OSError as e:\n        print(f\"Failed to set ownership of {cron_hourly_path}: {e}\")\n\n    # Set permissions to 700 (drwx------)\n    try:\n        os.chmod(cron_hourly_path, 0o700)\n        print(f\"Set permissions of {cron_hourly_path} to 700 (drwx------).\")\n    except OSError as e:\n        print(f\"Failed to set permissions of {cron_hourly_path}: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        # Optionally, re-audit after remediation\n        # audit_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.daily are configured",
    "id": "2.4.1.4",
    "type": "Automated",
    "start_page": 329,
    "end_page": 330,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.daily directory contains system cron jobs that need to run on a daily basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "- IF - cron is installed on the system:\nRun the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other:\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.daily/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.daily/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "- IF - cron is installed on the system:\nRun the following commands to set ownership and permissions on the /etc/cron.daily directory:\n```\n# chown root:root /etc/cron.daily/\n# chmod og-rwx /etc/cron.daily/\n```\n",
    "remediation_code": "# chown root:root /etc/cron.daily/\n# chmod og-rwx /etc/cron.daily/",
    "python_script": "\nimport pathlib\nimport pwd\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the permissions on /etc/cron.daily.\n    \n    Returns:\n        bool: True if the vulnerability is present, False otherwise.\n    \"\"\"\n    cron_daily_dir = pathlib.Path(\"/etc/cron.daily\")\n    stat = cron_daily_dir.stat()\n    \n    # Check ownership (Uid and Gid should be 0/root)\n    if stat.st_uid!= 0 or stat.st_gid!= 0:\n        return True\n    \n    # Check permissions (should be 700/drwx------)\n    if stat.st_mode & 0o777!= 0o700:\n        return True\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the permissions on /etc/cron.daily.\n    \"\"\"\n    cron_daily_dir = pathlib.Path(\"/etc/cron.daily\")\n    \n    # Set ownership to root:root\n    try:\n        cron_daily_dir.chown(0, 0)  # 0 is the uid and gid for root\n        print(f\"Set ownership of {cron_daily_dir} to root:root\")\n    except OSError as e:\n        print(f\"Error setting ownership: {e}\")\n    \n    # Set permissions to 700 (drwx------)\n    try:\n        cron_daily_dir.chmod(0o700)\n        print(f\"Set permissions of {cron_daily_dir} to 700 (drwx------)\")\n    except OSError as e:\n        print(f\"Error setting permissions: {e}\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.weekly are configured",
    "id": "2.4.1.5",
    "type": "Automated",
    "start_page": 331,
    "end_page": 332,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.weekly directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "- IF - cron is installed on the system:\nRun the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other:\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.weekly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.weekly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "- IF - cron is installed on the system:\nRun the following commands to set ownership and permissions on the\n/etc/cron.weekly directory:\n# chown root:root /etc/cron.weekly/\n# chmod og-rwx /etc/cron.weekly/",
    "remediation_code": "# chown root:root /etc/cron.weekly/\n# chmod og-rwx /etc/cron.weekly/",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit permissions on /etc/cron.weekly.\n    \n    Returns:\n        bool: True if vulnerability is present, False otherwise.\n    \"\"\"\n    dir_path = '/etc/cron.weekly'\n    dir_stat = os.stat(dir_path)\n    \n    # Check ownership (Uid and Gid should be 0/root)\n    if dir_stat.st_uid!= 0 or dir_stat.st_gid!= 0:\n        return True\n    \n    # Check permissions (Access should not grant permissions to group or other)\n    if (dir_stat.st_mode & stat.S_IRWXG)!= 0 or (dir_stat.st_mode & stat.S_IRWXO)!= 0:\n        return True\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate permissions on /etc/cron.weekly.\n    \"\"\"\n    dir_path = '/etc/cron.weekly'\n    \n    # Set ownership to root:root\n    root_uid = pwd.getpwnam('root').pw_uid\n    root_gid = grp.getgrnam('root').gr_gid\n    os.chown(dir_path, root_uid, root_gid)\n    print(f\"Set ownership of '{dir_path}' to root:root.\")\n    \n    # Set permissions to 700 (drwx------)\n    new_perms = stat.S_IRWXU  # 700 in octal\n    os.chmod(dir_path, new_perms)\n    print(f\"Set permissions of '{dir_path}' to 700 (drwx------).\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.monthly are configured",
    "id": "2.4.1.6",
    "type": "Automated",
    "start_page": 333,
    "end_page": 334,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.monthly directory contains system cron jobs that need to run on a monthly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "- IF - cron is installed on the system:\nRun the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other:\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.monthly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.monthly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "- IF - cron is installed on the system:\nRun the following commands to set ownership and permissions on the /etc/cron.monthly directory:\n# chown root:root /etc/cron.monthly/\n# chmod og-rwx /etc/cron.monthly/",
    "remediation_code": "# chown root:root /etc/cron.monthly/\n# chmod og-rwx /etc/cron.monthly/",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions and ownership of /etc/cron.monthly\"\"\"\n    cron_monthly_path = '/etc/cron.monthly'\n    \n    # Check if cron is installed by verifying the directory exists\n    if not os.path.exists(cron_monthly_path):\n        print(f\"SKIPPED: {cron_monthly_path} does not exist, assuming cron not installed.\")\n        return True  # Or raise a custom SkipAudit exception if you prefer\n    \n    # Get current stats\n    stats = os.stat(cron_monthly_path)\n    \n    # Expected values\n    expected_uid = pwd.getpwnam('root').pw_uid\n    expected_gid = grp.getgrnam('root').gr_gid\n    expected_permissions = stat.S_IRWXU  # 700 in octal, only owner has rwx permissions\n    \n    # Audit\n    if (stats.st_uid!= expected_uid or \n        stats.st_gid!= expected_gid or \n        stats.st_mode & 0o777!= expected_permissions):\n        return False\n    else:\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions and ownership of /etc/cron.monthly\"\"\"\n    cron_monthly_path = '/etc/cron.monthly'\n    \n    # Check if cron is installed by verifying the directory exists\n    if not os.path.exists(cron_monthly_path):\n        print(f\"SKIPPED: Remediation for {cron_monthly_path} as it does not exist.\")\n        return\n    \n    # Set ownership to root:root\n    try:\n        os.chown(cron_monthly_path, pwd.getpwnam('root').pw_uid, grp.getgrnam('root').gr_gid)\n        print(f\"Set ownership of {cron_monthly_path} to root:root.\")\n    except Exception as e:\n        print(f\"Failed to set ownership: {e}\")\n    \n    # Set permissions to 700 (drwx------)\n    try:\n        os.chmod(cron_monthly_path, stat.S_IRWXU)  # 700 in octal\n        print(f\"Set permissions of {cron_monthly_path} to 700 (drwx------).\")\n    except Exception as e:\n        print(f\"Failed to set permissions: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"Audit passed. No remediation needed.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.d are configured",
    "id": "2.4.1.7",
    "type": "Automated",
    "start_page": 335,
    "end_page": 336,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.d directory contains system cron jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from /etc/crontab, but require more granular control as to when they run. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other:\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.d/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.d/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following commands to set ownership and permissions on the /etc/cron.d directory:\n```\n# chown root:root /etc/cron.d/\n# chmod og-rwx /etc/cron.d/\n```\n",
    "remediation_code": "# chown root:root /etc/cron.d/\n# chmod og-rwx /etc/cron.d/",
    "python_script": "\nimport os\nimport stat\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions on /etc/cron.d\"\"\"\n    # Check if cron is installed (assuming its presence can be inferred from the directory existence for simplicity)\n    if not os.path.exists('/etc/cron.d/'):\n        print(\"/etc/cron.d/ not found, assuming cron is not installed. Skipping audit.\")\n        return True  # or raise an exception based on your preference\n\n    # Get stats of /etc/cron.d/\n    stat_result = os.stat('/etc/cron.d/')\n\n    # Expected values for a secure setup\n    expected_uid = 0\n    expected_gid = 0\n    expected_permissions = 0o700  # drwx------ in octal\n\n    # Audit ownership\n    if stat_result.st_uid != expected_uid or stat_result.st_gid != expected_gid:\n        print(f\"Ownership of /etc/cron.d/ is not set to root:root. Current: uid={stat_result.st_uid}, gid={stat_result.st_gid}\")\n        return False\n\n    # Audit permissions\n    if stat_result.st_mode != expected_permissions:\n        print(f\"Permissions of /etc/cron.d/ are not correctly set. Current: {stat.filemode(stat_result.st_mode)} (Expected: drwx------)\")\n        return False\n\n    print(\"/etc/cron.d/ has correct ownership and permissions.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability by setting correct permissions on /etc/cron.d/\"\"\"\n    if not os.path.exists('/etc/cron.d/'):\n        print(\"/etc/cron.d/ does not exist. Cannot remediate non-existent directory.\")\n        return\n\n    # Set ownership to root:root\n    subprocess.run(['chown', 'root:root', '/etc/cron.d/'])\n    print(\"Set ownership of /etc/cron.d/ to root:root.\")\n\n    # Set permissions to drwx------ (700 in octal)\n    # Using python's os.chmod for consistency with the rest of the script\n    os.chmod('/etc/cron.d/', 0o700)\n    print(\"Set permissions of /etc/cron.d/ to drwx------ (700).\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure crontab is restricted to authorized users",
    "id": "2.4.1.8",
    "type": "Automated",
    "start_page": 337,
    "end_page": 340,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "crontab is the program used to install, deinstall, or list the tables used to drive the cron daemon. Each user can have their own crontab, and though these are files in /var/spool/cron/crontabs, they are not intended to be edited directly. If the /etc/cron.allow file exists, then you must be listed (one user per line) therein in order to be allowed to use this command. If the /etc/cron.allow file does not exist but the /etc/cron.deny file does exist, then you must not be listed in the /etc/cron.deny file in order to use this command. If neither of these files exists, then depending on site-dependent configuration parameters, only the super user will be allowed to use this command, or all users will be able to use this command. If both files exist then /etc/cron.allow takes precedence. Which means that /etc/cron.deny is not considered and your user must be listed in /etc/cron.allow in order to be able to use the crontab. Regardless of the existence of any of these files, the root administrative user is always allowed to setup a crontab. The files /etc/cron.allow and /etc/cron.deny, if they exist, must be either worldreadable, or readable by group crontab. If they are not, then cron will deny access to all users until the permissions are fixed. There is one file for each user's crontab under the /var/spool/cron/crontabs directory. Users are not allowed to edit the files under that directory directly to ensure that only users allowed by the system to run periodic tasks can add them, and only syntactically correct crontabs will be written there. This is enforced by having the directory writable only by the crontab group and configuring crontab command with the setgid bid set for that specific group. Note: Even though a given user is not listed in cron.allow, cron jobs can still be run as that user. The files /etc/cron.allow and /etc/cron.deny, if they exist, only controls administrative access to the crontab command for scheduling and modifying cron jobs.",
    "rationale": "On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit_details": "IF - cron is installed on the system: Run the following command to verify /etc/cron.allow: - Exists - Is mode 0640 or more restrictive - Is owned by the user root - Is group owned by the group root # stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.allow Access: (640/-rw-r-----) Owner: (root) Group: (root) Run the following command to verify either cron.deny doesn't exist or is: - Mode 0640 or more restrictive - Owned by the user root - Group owned by the group root # [ -e \"/etc/cron.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.deny else Verify either nothing is returned or returned value is: Access: (640/-rw-r-----) Owner: (root) Group: (root)",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.allow\nAccess: (640/-rw-r-----) Owner: (root) Group: (root)",
    "remediation_details": "IF - cron is installed on the system: Run the following script to: - Create /etc/cron.allow if it doesn't exist - Change owner or user root - Change group owner to group root - Change mode to 640 or more restrictive #!/usr/bin/env bash { [ ! -e \"/etc/cron.allow\" ] && touch /etc/cron.allow chown root:root /etc/cron.allow chmod u-x,g-wx,o-rwx /etc/cron.allow } IF - /etc/cron.deny exists, run the following commands to: - Change owner or user root - Change group owner to group root - Change mode to 640 or more restrictive. # [ -e \"/etc/cron.deny\" ] && chown root:root /etc/cron.deny # [ -e \"/etc/cron.deny\" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -e \"/etc/cron.allow\" ] && touch /etc/cron.allow\n  chown root:root /etc/cron.allow\n  chmod u-x,g-wx,o-rwx /etc/cron.allow\n}\n\n# [ -e \"/etc/cron.deny\" ] && chown root:root /etc/cron.deny\n# [ -e \"/etc/cron.deny\" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit cron allow/deny file configurations.\"\"\"\n    cron_allow_path = \"/etc/cron.allow\"\n    cron_deny_path = \"/etc/cron.deny\"\n    root_uid = pwd.getpwnam(\"root\").pw_uid\n    root_gid = grp.getgrnam(\"root\").gr_gid\n    mode_640 = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n\n    if not os.path.exists(cron_allow_path):\n        print(f\"/etc/cron.allow does not exist.\")\n        return False\n\n    allow_stat = os.stat(cron_allow_path)\n    if (allow_stat.st_uid, allow_stat.st_gid)!= (root_uid, root_gid):\n        print(f\"Ownership of {cron_allow_path} is not root:root.\")\n        return False\n    if allow_stat.st_mode & 0o777!= mode_640:\n        print(f\"Mode of {cron_allow_path} is not 0640 or more restrictive.\")\n        return False\n\n    if os.path.exists(cron_deny_path):\n        deny_stat = os.stat(cron_deny_path)\n        if (deny_stat.st_uid, deny_stat.st_gid)!= (root_uid, root_gid):\n            print(f\"Ownership of {cron_deny_path} is not root:root.\")\n            return False\n        if deny_stat.st_mode & 0o777!= mode_640:\n            print(f\"Mode of {cron_deny_path} is not 0640 or more restrictive.\")\n            return False\n\n    print(f\"All configurations for {cron_allow_path} (and {cron_deny_path} if present) are secure.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate cron allow/deny file configurations.\"\"\"\n    cron_allow_path = \"/etc/cron.allow\"\n    cron_deny_path = \"/etc/cron.deny\"\n    root_uid = pwd.getpwnam(\"root\").pw_uid\n    root_gid = grp.getgrnam(\"root\").gr_gid\n    mode_640 = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n\n    if not os.path.exists(cron_allow_path):\n        open(cron_allow_path, 'w').close()  # Create the file\n        print(f\"Created {cron_allow_path}.\")\n\n    os.chown(cron_allow_path, root_uid, root_gid)\n    print(f\"Set ownership of {cron_allow_path} to root:root.\")\n    os.chmod(cron_allow_path, mode_640)\n    print(f\"Set mode of {cron_allow_path} to 0640.\")\n\n    if os.path.exists(cron_deny_path):\n        os.chown(cron_deny_path, root_uid, root_gid)\n        print(f\"Set ownership of {cron_deny_path} to root:root.\")\n        os.chmod(cron_deny_path, mode_640)\n        print(f\"Set mode of {cron_deny_path} to 0640.\")\n"
  },
  {
    "name": "Ensure at is restricted to authorized users",
    "id": "2.4.2.1",
    "type": "Automated",
    "start_page": 342,
    "end_page": 345,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "at allows fairly complex time specifications, extending the POSIX.2 standard. It accepts times of the form HH:MM to run a job at a specific time of day. (If that time is already past, the next day is assumed.) You may also specify midnight, noon, or teatime (4pm) and you can have a time-of-day suffixed with AM or PM for running in the morning or the evening. You can also say what day the job will be run, by giving a date in the form month-name day with an optional year, or giving a date of the form MMDD[CC]YY, MM/DD/[CC]YY, DD.MM.[CC]YY or [CC]YY-MM-DD. The specification of a date must follow the specification of the time of day. You can also give times like now + count time-units, where the time-units can be minutes, hours, days, or weeks and you can tell at to run the job today by suffixing the time with today and to run the job tomorrow by suffixing the time with tomorrow.\n\nThe /etc/at.allow and /etc/at.deny files determine which user can submit commands for later execution via at or batch. The format of the files is a list of usernames, one on each line. Whitespace is not permitted. If the file /etc/at.allow exists, only usernames mentioned in it are allowed to use at. If /etc/at.allow does not exist, /etc/at.deny is checked, every username not mentioned in it is then allowed to use at. An empty /etc/at.deny means that every user may use at. If neither file exists, only the superuser is allowed to use at.",
    "rationale": "On many systems, only the system administrator is authorized to schedule at jobs. Using the at.allow file to control who can run at jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit_details": "**-IF- at is installed on the system:**\nRun the following command to verify /etc/at.allow:\n\n  - Exists\n\n  - Is mode 0640 or more restrictive\n\n  - Is owned by the user root\n\n  - Is group owned by the group daemon or group root\n```\n# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.allow\nAccess: (640/-rw-r-----) Owner: (root) Group: (daemon)\n-ORAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n```\nVerify mode is 640 or more restrictive, owner is root, and group is daemon or root\nRun the following command to verify at.deny doesn't exist, -OR- is:\n\n  - Mode 0640 or more restrictive\n\n  - Owned by the user root\n\n  - Group owned by the group daemon or group root\n```\n# [ -e \"/etc/at.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.deny\nAccess: (640/-rw-r-----) Owner: (root) Group: (daemon)\n-ORAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n-ORNothing is returned\n```\nIf a value is returned, Verify mode is 640 or more restrictive, owner is root, and group is daemon or root",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.allow\n# [ -e \"/etc/at.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.deny",
    "remediation_details": "**-IF- at is installed on the system:**\nRun the following script to:\n\n  - `/etc/at.allow:`\n`o` Create the file if it doesn't exist\n`o` Change owner or user root\n`o` If group daemon exists, change to group daemon, else change group to root\n`o` Change mode to 640 or more restrictive\n\n  - **-IF-** `/etc/at.deny exists:`\n`o` Change owner or user root\n`o` If group daemon exists, change to group daemon, else change group to root\n`o` Change mode to 640 or more restrictive\n```\n#!/usr/bin/env bash\n{\n  grep -Pq -- '^daemon\\b' /etc/group && l_group=\"daemon\" || l_group=\"root\"\n  [ ! -e \"/etc/at.allow\" ] && touch /etc/at.allow\n  chown root:\"$l_group\" /etc/at.allow\n  chmod u-x,g-wx,o-rwx /etc/at.allow\n  [ -e \"/etc/at.deny\" ] && chown root:\"$l_group\" /etc/at.deny\n  [ -e \"/etc/at.deny\" ] && chmod u-x,g-wx,o-rwx /etc/at.deny\n}\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  grep -Pq -- '^daemon\\b' /etc/group && l_group=\"daemon\" || l_group=\"root\"\n  [ ! -e \"/etc/at.allow\" ] && touch /etc/at.allow\n  chown root:\"$l_group\" /etc/at.allow\n  chmod u-x,g-wx,o-rwx /etc/at.allow\n  [ -e \"/etc/at.deny\" ] && chown root:\"$l_group\" /etc/at.deny\n  [ -e \"/etc/at.deny\" ] && chmod u-x,g-wx,o-rwx /etc/at.deny\n}",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit at vulnerability\"\"\"\n    at_installed = os.path.exists('/etc/at.allow') or os.path.exists('/etc/at.deny')\n\n    if not at_installed:\n        print(\"At is not installed, assuming compliant.\")\n        return True\n\n    allow_file = '/etc/at.allow'\n    deny_file = '/etc/at.deny'\n\n    # Check /etc/at.allow\n    if not os.path.exists(allow_file):\n        print(f\"{allow_file} does not exist. Expected to exist.\")\n        return False\n\n    allow_stats = os.stat(allow_file)\n    if allow_stats.st_uid != pwd.getpwnam('root').pw_uid:\n        print(f\"{allow_file} owner is not root. Expected root.\")\n        return False\n\n    expected_groups = ['daemon', 'root']\n    allow_group_name = grp.getgrgid(allow_stats.st_gid).gr_name\n    if allow_group_name not in expected_groups:\n        print(f\"{allow_file} group is not in {expected_groups}. Expected one of these groups.\")\n        return False\n\n    if allow_stats.st_mode & 0o777 != 0o640:\n        print(f\"{allow_file} permissions are not 640 or more restrictive. Expected 640 or more restrictive.\")\n        return False\n\n    # Check /etc/at.deny (if exists)\n    if os.path.exists(deny_file):\n        deny_stats = os.stat(deny_file)\n        if deny_stats.st_uid != pwd.getpwnam('root').pw_uid:\n            print(f\"{deny_file} owner is not root. Expected root.\")\n            return False\n\n        if grp.getgrgid(deny_stats.st_gid).gr_name not in expected_groups:\n            print(f\"{deny_file} group is not in {expected_groups}. Expected one of these groups.\")\n            return False\n\n        if deny_stats.st_mode & 0o777 != 0o640:\n            print(f\"{deny_file} permissions are not 640 or more restrictive. Expected 640 or more restrictive.\")\n            return False\n\n    print(\"Audit passed.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate at vulnerability\"\"\"\n    allow_file = '/etc/at.allow'\n    deny_file = '/etc/at.deny'\n\n    # Determine the appropriate group\n    try:\n        grp.getgrnam('daemon')\n        target_group = 'daemon'\n    except KeyError:\n        target_group = 'root'\n\n    # Remediate /etc/at.allow\n    if not os.path.exists(allow_file):\n        open(allow_file, 'w').close()  # Create the file\n        print(f\"Created {allow_file}.\")\n\n    os.chown(allow_file, pwd.getpwnam('root').pw_uid, grp.getgrnam(target_group).gr_gid)\n    print(f\"Set {allow_file} owner to root:{target_group}.\")\n\n    os.chmod(allow_file, 0o640)\n    print(f\"Set {allow_file} permissions to 640.\")\n\n    # Remediate /etc/at.deny (if exists)\n    if os.path.exists(deny_file):\n        os.chown(deny_file, pwd.getpwnam('root').pw_uid, grp.getgrnam(target_group).gr_gid)\n        print(f\"Set {deny_file} owner to root:{target_group}.\")\n\n        os.chmod(deny_file, 0o640)\n        print(f\"Set {deny_file} permissions to 640.\")\n"
  },
  {
    "name": "Ensure ip forwarding is disabled",
    "id": "3.3.1",
    "type": "Automated",
    "start_page": 380,
    "end_page": 383,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The net.ipv4.ip_forward and net.ipv6.conf.all.forwarding flags are used to tell the system whether it can forward packets or not.",
    "rationale": "Setting net.ipv4.ip_forward and net.ipv6.conf.all.forwarding to 0 ensures that a system with multiple interfaces (for example, a hard proxy), will never be able to forward packets, and therefore, never serve as a router.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: \n\n \u2022 net.ipv4.ip_forward is set to 0\n \u2022 net.ipv6.conf.all.forwarding is set to 0\n\n Note:\n \u2022 kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that 'correct' setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n \u2022 IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.ip_forward=0\" \"net.ipv6.conf.all.forwarding=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  {\n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \"$l_kpname\" is correctly set to \"$l_krp\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \"$l_kpname\" is incorrectly set to \"$l_krp\" in the running configuration and should have a value of: \"$l_kpvalue\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=(\"[\\\"$l_kpar\\\"]=\\\"$l_file\\\"\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=(\"[\\\"$l_kpar\\\"]=\\\"$l_ufwscf\\\"\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \"$l_kpname\" is correctly set to \"$l_fkpvalue\" in \"$(printf '%s' \"${A_out[@]}\")\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \"$l_kpname\" is incorrectly set to \"$l_fkpvalue\" in \"$(printf '%s' \"${A_out[@]}\")\" and should have a value of: \"$l_kpvalue\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \"$l_kpname\" is not set in an included file\\n  ** Note: \"$l_kpname\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \"$l_kpname\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n \u2022 net.ipv4.ip_forward = 0\n\n Example:\n# printf '%s\\n' \"net.ipv4.ip_forward = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\n Run the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.ip_forward=0\n  sysctl -w net.ipv4.route.flush=1\n} \n\n - IF - IPv6 is enabled on the system: Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n \u2022 net.ipv6.conf.all.forwarding = 0\n\n Example:\n# printf '%s\\n' \"net.ipv6.conf.all.forwarding = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n\n Run the following script to set the active kernel parameters:\n#!/usr/bin/env bash \n{\n  sysctl -w net.ipv6.conf.all.forwarding=0\n  sysctl -w net.ipv6.route.flush=1\n} \n\n Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\n\n Default Value:\n\n net.ipv4.ip_forward = 0\n\n net.ipv6.conf.all.forwarding = 0\n\n References:\n\n 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5\n",
    "python_script": "\nimport sysctl\nimport os\nimport pathlib\n\n# Define the kernel parameters and their desired values\nKERNEL_PARAMETERS = {\n    'net.ipv4.ip_forward': '0',\n    'net.ipv6.conf.all.forwarding': '0'\n}\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the system to ensure IP forwarding is disabled.\"\"\"\n    audit_result = True\n    for param, value in KERNEL_PARAMETERS.items():\n        # Check running configuration\n        current_value = sysctl.get_param(param)\n        if current_value!= value:\n            print(f\"- {param} is incorrectly set to {current_value} in the running configuration and should have a value of: {value}\")\n            audit_result = False\n        \n        # Verify durable settings in kernel parameter configuration files\n        config_files = list(pathlib.Path('/etc/sysctl.d').glob('*.conf')) + [pathlib.Path('/etc/sysctl.conf')]\n        param_found = False\n        for file in config_files:\n            with open(file, 'r') as f:\n                for line in f:\n                    if line.strip().startswith(param + '='):\n                        param_found = True\n                        if line.strip().split('=')[1]!= value:\n                            print(f\"- {param} is incorrectly set to {line.strip().split('=')[1]} in {file} and should have a value of: {value}\")\n                            audit_result = False\n                        break\n            if param_found:\n                break\n        if not param_found:\n            print(f\"- {param} is not set in any included file ** Note: {param} May be set in a file that's ignored by load procedure **\")\n            audit_result = False\n\n        # Check if IPv6 is enabled before auditing IPv6-related parameters\n        if param.startswith('net.ipv6') and not os.path.exists('/sys/module/ipv6/parameters/disable'):\n            print(f\"- IPv6 is disabled on the system, {param} is not applicable\")\n            return audit_result  # Skip further auditing for IPv6 parameters\n\n    return audit_result\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the system to ensure IP forwarding is disabled.\"\"\"\n    config_file = pathlib.Path('/etc/sysctl.d/60ip_forwarding_sysctl.conf')\n    \n    # Create the config file if it doesn't exist\n    if not config_file.exists():\n        config_file.touch()\n        print(f\"Created {config_file} configuration file.\")\n    \n    # Set the kernel parameters in the config file\n    with open(config_file, 'w') as f:\n        for param, value in KERNEL_PARAMETERS.items():\n            # Check if IPv6 is enabled before remediating IPv6-related parameters\n            if param.startswith('net.ipv6') and not os.path.exists('/sys/module/ipv6/parameters/disable'):\n                continue\n            f.write(f\"{param} = {value}\\n\")\n            print(f\"Set {param} to {value} in {config_file}.\")\n    \n    # Apply the changes using sysctl\n    for param, value in KERNEL_PARAMETERS.items():\n        if param.startswith('net.ipv6') and not os.path.exists('/sys/module/ipv6/parameters/disable'):\n            continue\n        sysctl.set_param(param, value)\n        if param == 'net.ipv4.ip_forward':\n            sysctl.set_param('net.ipv4.route.flush', '1')\n        elif param == 'net.ipv6.conf.all.forwarding':\n            sysctl.set_param('net.ipv6.route.flush', '1')\n        print(f\"Applied {param} setting using sysctl.\")\n"
  },
  {
    "name": "Ensure packet redirect sending is disabled",
    "id": "3.3.2",
    "type": "Automated",
    "start_page": 384,
    "end_page": 387,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.",
    "rationale": "An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n\u2022 net.ipv4.conf.all.send_redirects is set to 0\n\u2022 net.ipv4.conf.default.send_redirects is set to 0\n\nNote: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that 'correct' setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.send_redirects=0\" \"net.ipv4.conf.default.send_redirects=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\\\s*IPT_SYSCTL=/ {print $2} /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=(['$l_kpar']=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=(['$l_kpar']=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n\u2022 net.ipv4.conf.all.send_redirects = 0\n\u2022 net.ipv4.conf.default.send_redirects = 0\n\nExample:\n# printf '%s\\n' \"net.ipv4.conf.all.send_redirects = 0\"\n\"net.ipv4.conf.default.send_redirects = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.send_redirects=0\n  sysctl -w net.ipv4.conf.default.send_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten.",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.send_redirects=0\n  sysctl -w net.ipv4.conf.default.send_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}\n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if net.ipv4.conf.all/send_redirects and net.ipv4.conf.default/send_redirects are set to 0.\"\"\"\n    params = [\"net.ipv4.conf.all.send_redirects\", \"net.ipv4.conf.default.send_redirects\"]\n    all_pass = True\n    \n    for param in params:\n        try:\n            output = subprocess.check_output([\"sysctl\", param]).decode(\"utf-8\").strip()\n            value = output.split(\"=\")[1].strip()\n            if value!= \"0\":\n                print(f\"- '{param}' is incorrectly set to '{value}' in the running configuration and should have a value of: '0'\")\n                all_pass = False\n        except subprocess.CalledProcessError as e:\n            print(f\"Error checking {param}: {e}\")\n            all_pass = False\n    \n    # Check durable settings (files) - Simplified, as thoroughly parsing all sysctl.d can be complex\n    # This example assumes checking /etc/sysctl.conf for simplicity\n    try:\n        with open(\"/etc/sysctl.conf\", \"r\") as file:\n            for line in file.readlines():\n                line = line.strip()\n                for param in params:\n                    if line.startswith(param + \"=\"):\n                        value = line.split(\"=\")[1].strip()\n                        if value!= \"0\":\n                            print(f\"- '{param}' is incorrectly set to '{value}' in /etc/sysctl.conf and should have a value of: '0'\")\n                            all_pass = False\n    except FileNotFoundError:\n        print(\"- /etc/sysctl.conf not found.\")\n    except Exception as e:\n        print(f\"Error reading /etc/sysctl.conf: {e}\")\n        all_pass = False\n    \n    return all_pass\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting net.ipv4.conf.all/send_redirects and net.ipv4.conf.default/send_redirects to 0.\"\"\"\n    params = [\"net.ipv4.conf.all.send_redirects\", \"net.ipv4.conf.default.send_redirects\"]\n    \n    # Set active kernel parameters\n    for param in params:\n        try:\n            subprocess.check_output([\"sysctl\", \"-w\", f\"{param}=0\"])\n            print(f\"Successfully set '{param}' to 0 in the running configuration.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error setting {param}: {e}\")\n    \n    # Append to /etc/sysctl.d/99-local.conf for persistence (assuming this file as an example)\n    persistent_conf = \"/etc/sysctl.d/99-local.conf\"\n    try:\n        with open(persistent_conf, \"a+\") as file:\n            for param in params:\n                line = f\"{param} = 0\\n\"\n                if line not in file.readlines():\n                    file.write(line)\n                    print(f\"Appended '{param}'=0 to {persistent_conf} for persistence.\")\n    except Exception as e:\n        print(f\"Error appending to {persistent_conf}: {e}\")\n    \n    # Flush routes (for immediate effect, though this isn't strictly necessary for the settings change to be effective at next boot or sysctl reload)\n    try:\n        subprocess.check_output([\"sysctl\", \"-w\", \"net.ipv4.route.flush=1\"])\n        print(\"Flushed IPv4 routes.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error flushing IPv4 routes: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure bogus icmp responses are ignored",
    "id": "3.3.3",
    "type": "Automated",
    "start_page": 388,
    "end_page": 391,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting net.ipv4.icmp_ignore_bogus_error_responses to 1 prevents the kernel from logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping file systems from filling up with useless log messages.",
    "rationale": "Some routers (and some attackers) will send responses that violate RFC-1122 and attempt to fill up a log file system with many useless error messages.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n \n#### \u2022 net.ipv4.icmp_ignore_bogus_error_responses is set to 1\n \n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.icmp_ignore_bogus_error_responses=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([",
    "remediation_details": "",
    "remediation_code": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in \n```\n.conf:\n#### \u2022 net.ipv4.icmp_ignore_bogus_error_responses = 1\n \n### Example:\n# printf '%s\n' \"net.ipv4.icmp_ignore_bogus_error_responses = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n \nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1\n  sysctl -w net.ipv4.route.flush=1\n}\n \nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\n \nDefault Value:\n \nnet.ipv4.icmp_ignore_bogus_error_responses = 1\n \nReferences:\n \n1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5\n \nAdditional Information:\nOn systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf\n#### \u2022 The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf\n \n\u2022 This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw\nPage 389\n```\n\n### CIS Controls:\nControls\nControl IG 1 IG 2 IG 3 Version\n \n4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software\n v8 Uninstall or disable unnecessary services on enterprise assets and software, \u25cf \u25cf\n##### such as an unused file sharing service, web application module, or service function.\n \n### 9.2 Ensure Only Approved Ports, Protocols and Services\n v7 Are Running \u25cf \u25cf\n##### Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.\n \n### MITRE ATT&CK Mappings:\nTechniques / Sub Tactics Mitigations techniques\n \nT1562, T1562.006 TA0040 M1053\n#### Page 390\n|Controls Version|Control|IG 1|IG 2|IG 3|\n|---|---|---|---|---|\n|v8|4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software Uninstall or disable unnecessary services on enterprise assets and software, such as an unused file sharing service, web application module, or service function.||\u25cf|\u25cf|\n|v7|9.2 Ensure Only Approved Ports, Protocols and Services Are Running Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.||\u25cf|\u25cf|\n\n|MITRE ATT&CK Mappings:|Col2|Col3|\n|---|---|---|\n|Techniques / Sub- techniques|Tactics|Mitigations|\n|T1562, T1562.006|TA0040|M1053|",
    "python_script": "\nimport sysctl\nimport os\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    # Check running configuration\n    current_value = sysctl.get('net.ipv4.icmp_ignore_bogus_error_responses')\n    if current_value!= '1':\n        print(f\"Kernel parameter 'net.ipv4.icmp_ignore_bogus_error_responses' is incorrectly set to {current_value} in the running configuration.\")\n        return False\n\n    # Check durable configuration files for correctness and potential overrides\n    config_files = sorted(Path('/etc/sysctl.d').glob('*.conf')) + [Path('/etc/sysctl.conf')]\n    parameter_set_correctly = False\n    for file in config_files:\n        with open(file, 'r') as f:\n            for line in f.readlines():\n                if line.strip().startswith('net.ipv4.icmp_ignore_bogus_error_responses'):\n                    if line.strip().endswith('=1'):\n                        parameter_set_correctly = True\n                    else:\n                        print(f\"Kernel parameter 'net.ipv4.icmp_ignore_bogus_error_responses' is incorrectly set in {file}.\")\n                        return False\n                    break\n            if parameter_set_correctly:\n                break\n    else:\n        print(\"Kernel parameter 'net.ipv4.icmp_ignore_bogus_error_responses' not found in configuration files.\")\n        return False\n\n    print(\"Kernel parameter 'net.ipv4.icmp_ignore_bogus_error_responses' is correctly set in both running and durable configurations.\")\n    return True\n\ndef remediate_vuln() -> None:\n    # Set in durable configuration\n    config_file = Path('/etc/sysctl.d/60-netipv4_sysctl.conf')\n    if not config_file.exists():\n        config_file.parent.mkdir(parents=True, exist_ok=True, mode=0o755)\n        with open(config_file, 'w') as f:\n            f.write('# Added by remediation script\\n')\n    with open(config_file, 'a') as f:\n        f.write('net.ipv4.icmp_ignore_bogus_error_responses = 1\\n')\n    print(f\"Added 'net.ipv4.icmp_ignore_bogus_error_responses = 1' to '{config_file}'.\")\n\n    # Apply to running configuration\n    try:\n        sysctl.set('net.ipv4.icmp_ignore_bogus_error_responses', '1')\n        sysctl.set('net.ipv4.route.flush', '1')\n        print(\"Successfully applied new kernel parameter settings to the running configuration.\")\n    except Exception as e:\n        print(f\"Failed to apply new kernel parameter settings: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        # Optional: Re-run audit after remediation for verification\n        # if not audit_vuln():\n        #     print(\"Remediation was unsuccessful.\")\n        #     sys.exit(1)\n"
  },
  {
    "name": "Ensure broadcast icmp requests are ignored",
    "id": "3.3.4",
    "type": "Automated",
    "start_page": 392,
    "end_page": 395,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting net.ipv4.icmp_echo_ignore_broadcasts to 1 will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses.",
    "rationale": "Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for your network could be used to trick your host into starting (or participating) in a Smurf attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast messages with a spoofed source address. All hosts receiving this message and responding would send echo-reply messages back to the spoofed address, which is probably not routable. If many hosts respond to the packets, the amount of traffic on the network could be significantly multiplied.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n#### \u2022 net.ipv4.icmp_echo_ignore_broadcasts is set to 1\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.icmp_echo_ignore_broadcasts=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \"$l_kpname\" is correctly set to \"$l_krp\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \"$l_kpname\" is incorrectly set to \"$l_krp\" in the running configuration and should have a value of: \"$l_kpvalue\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_file\" )\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_ufwscf\" )\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \"$l_kpname\" is correctly set to \"$l_fkpvalue\" in \"$(printf '%s' \"${A_out[@]}\")\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \"$l_kpname\" is incorrectly set to \"$l_fkpvalue\" in \"$(printf '%s' \"${A_out[@]}\")\" and should have a value of: \"$l_kpvalue\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \"$l_kpname\" is not set in an included file\\n  ** Note: \"$l_kpname\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \"$l_kpname\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n#### \u2022 net.ipv4.icmp_echo_ignore_broadcasts = 1\n### Example:\n# printf '%s\\n' \"net.ipv4.icmp_echo_ignore_broadcasts = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure net.ipv4.icmp_echo_ignore_broadcasts is set to 1.\n    \n    :return: True if the setting is correct, False otherwise.\n    \"\"\"\n    # Check running configuration\n    output = subprocess.check_output(['sysctl', 'net.ipv4.icmp_echo_ignore_broadcasts']).decode('utf-8')\n    if 'net.ipv4.icmp_echo_ignore_broadcasts = 1' in output:\n        print(\" - net.ipv4.icmp_echo_ignore_broadcasts is correctly set to 1 in the running configuration\")\n    else:\n        print(f\" - net.ipv4.icmp_echo_ignore_broadcasts is incorrectly set to {output.split('=')[1].strip()} in the running configuration and should have a value of: 1\")\n        # Check durable settings (files), simplify the logic for demonstration\n        sysctl_files = ['/etc/sysctl.conf'] + [f for f in os.listdir('/etc/sysctl.d/') if f.endswith('.conf')]\n        for file in sysctl_files:\n            if file.startswith('/etc/sysctl.d/'):\n                file = os.path.join('/etc/sysctl.d/', file)\n            try:\n                with open(file, 'r') as f:\n                    for line in f.readlines():\n                        if line.strip().startswith('net.ipv4.icmp_echo_ignore_broadcasts'):\n                            if line.strip().endswith('= 1'):\n                                print(f\" - net.ipv4.icmp_echo_ignore_broadcasts is correctly set to 1 in {file}\")\n                            else:\n                                print(f\" - net.ipv4.icmp_echo_ignore_broadcasts is incorrectly set to {line.split('=')[1].strip()} in {file} and should have a value of: 1\")\n            except Exception as e:\n                print(f\"Error checking {file}: {e}\")\n        return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting net.ipv4.icmp_echo_ignore_broadcasts to 1.\n    \"\"\"\n    # Set the parameter in the running configuration\n    subprocess.call(['sysctl', '-w', 'net.ipv4.icmp_echo_ignore_broadcasts=1'])\n    print(\"Set net.ipv4.icmp_echo_ignore_broadcasts to 1 in the running configuration.\")\n    \n    # Flush the routing cache\n    subprocess.call(['sysctl', '-w', 'net.ipv4.route.flush=1'])\n    print(\"Flushed the routing cache.\")\n    \n    # Append the setting to /etc/sysctl.d/60-netipv4_sysctl.conf for persistence\n    with open('/etc/sysctl.d/60-netipv4_sysctl.conf', 'a+') as f:\n        f.seek(0)\n        if 'net.ipv4.icmp_echo_ignore_broadcasts' not in f.read():\n            f.seek(0, os.SEEK_END)\n            f.write('net.ipv4.icmp_echo_ignore_broadcasts = 1\\n')\n            print(\"Appended 'net.ipv4.icmp_echo_ignore_broadcasts = 1' to /etc/sysctl.d/60-netipv4_sysctl.conf.\")\n\n# Example usage\nif not audit_vuln():\n    remediate_vuln()\n    print(\"Re-auditing after remediation...\")\n    audit_vuln()\n"
  },
  {
    "name": "Ensure icmp redirects are not accepted",
    "id": "3.3.5",
    "type": "Automated",
    "start_page": 396,
    "end_page": 399,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables.",
    "rationale": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects, net.ipv4.conf.default.accept_redirects, net.ipv6.conf.all.accept_redirects, and net.ipv6.conf.default.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n#### \u2022 net.ipv4.conf.all.accept_redirects is set to 0\n \u2022 net.ipv4.conf.default.accept_redirects is set to 0\n \u2022 net.ipv6.conf.all.accept_redirects is set to 0\n \u2022 net.ipv6.conf.default.accept_redirects is set to 0\n### Note:\n#### \u2022 kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n#### \u2022 IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.accept_redirects=0\" \"net.ipv4.conf.default.accept_redirects=0\"\n\"net.ipv6.conf.all.accept_redirects=0\" \"net.ipv6.conf.default.accept_redirects=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n#### \u2022 net.ipv4.conf.all.accept_redirects = 0\n \u2022 net.ipv4.conf.default.accept_redirects = 0\n### Example:\n# printf '%s\\n' \"net.ipv4.conf.all.accept_redirects = 0\"\n\"net.ipv4.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_redirects=0\n  sysctl -w net.ipv4.conf.default.accept_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n- IF - IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n#### \u2022 net.ipv6.conf.all.accept_redirects = 0\n \u2022 net.ipv6.conf.default.accept_redirects = 0\n### Example:\n# printf '%s\\n' \"net.ipv6.conf.all.accept_redirects = 0\"\n\"net.ipv6.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_redirects=0\n  sysctl -w net.ipv6.conf.default.accept_redirects=0\n  sysctl -w net.ipv6.route.flush=1\n}\n\nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_redirects=0\n  sysctl -w net.ipv4.conf.default.accept_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n- IF - IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n#### \u2022 net.ipv6.conf.all.accept_redirects = 0\n \u2022 net.ipv6.conf.default.accept_redirects = 0\n### Example:\n# printf '%s\\n' \"net.ipv6.conf.all.accept_redirects = 0\"\n\"net.ipv6.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_redirects=0\n  sysctl -w net.ipv6.conf.default.accept_redirects=0\n  sysctl -w net.ipv6.route.flush=1\n} \n\nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "python_script": "\nimport sysctl\nimport os\nimport subprocess\n\n# Constants for kernel parameters\nKERNEL_PARAMS = {\n    \"net.ipv4.conf.all.accept_redirects\": 0,\n    \"net.ipv4.conf.default.accept_redirects\": 0,\n    # Only apply IPv6 settings if IPv6 is enabled\n    \"net.ipv6.conf.all.accept_redirects\": 0,\n    \"net.ipv6.conf.default.accept_redirects\": 0,\n}\n\n# Function to check the current state of the system\ndef audit_vuln() -> bool:\n    for param, value in KERNEL_PARAMS.items():\n        current_value = sysctl.sysctl[param]\n        if current_value!= value:\n            print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{current_value}\\\" in the running configuration and should have a value of: \\\"{value}\\\"\")\n            return False\n        else:\n            print(f\"- \\\"{param}\\\" is correctly set to \\\"{current_value}\\\" in the running configuration\")\n    return True\n\n# Function to remediate the vulnerability\ndef remediate_vuln() -> None:\n    config_file = \"/etc/sysctl.d/60net_sysctl.conf\"\n    \n    # Check if IPv6 is enabled before adding its settings\n    if os.path.exists(\"/proc/net/if_inet6\"):\n        ipv6_params = [\"net.ipv6.conf.all.accept_redirects = 0\", \"net.ipv6.conf.default.accept_redirects = 0\"]\n    else:\n        ipv6_params = []\n    \n    # Combine all params to write to the config file\n    all_params = [f\"{k} = {v}\" for k, v in KERNEL_PARAMS.items() if not k.startswith(\"net.ipv6\")] + ipv6_params\n    \n    # Write params to config file\n    with open(config_file, \"a+\") as file:\n        for param in all_params:\n            if param + \"\\n\" not in file.readlines():\n                file.write(param + \"\\n\")\n                print(f\"Added \\\"{param}\\\" to {config_file}\")\n    \n    # Apply changes to the running system\n    for param, value in KERNEL_PARAMS.items():\n        if not param.startswith(\"net.ipv6\") or os.path.exists(\"/proc/net/if_inet6\"):\n            subprocess.run(f\"sysctl -w {param}={value}\", shell=True, check=True)\n            print(f\"Set \\\"{param}\\\" to {value} in the running system configuration\")\n            # Flush routes for the changes to take effect immediately\n            if \"ipv4\" in param:\n                subprocess.run(\"sysctl -w net.ipv4.route.flush=1\", shell=True, check=True)\n                print(\"Flushed IPv4 routes\")\n            elif \"ipv6\" in param and os.path.exists(\"/proc/net/if_inet6\"):\n                subprocess.run(\"sysctl -w net.ipv6.route.flush=1\", shell=True, check=True)\n                print(\"Flushed IPv6 routes\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"audit\":\n        sys.exit(0 if audit_vuln() else 1)\n    elif len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        print(\"Usage: python script_name.py [audit|remediate]\")\n"
  },
  {
    "name": "Ensure secure icmp redirects are not accepted",
    "id": "3.3.6",
    "type": "Automated",
    "start_page": 400,
    "end_page": 403,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.",
    "rationale": "It is still possible for even known gateways to be compromised. Setting\nnet.ipv4.conf.all.secure_redirects and net.ipv4.conf.default.secure_redirects to 0 protects the system from routing table updates by possibly compromised known gateways.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n#### \u2022 net.ipv4.conf.all.secure_redirects is set to 0\n \u2022 net.ipv4.conf.default.secure_redirects is set to 0\n\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.secure_redirects=0\" \"net.ipv4.conf.default.secure_redirects=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n#### \u2022 net.ipv4.conf.all.secure_redirects = 0\n \u2022 net.ipv4.conf.default.secure_redirects = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv4.conf.all.secure_redirects = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\n Run the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.secure_redirects=0\n  sysctl -w net.ipv4.conf.default.secure_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\n\n Default Value:\n\n net.ipv4.conf.all.secure_redirects = 1\n\n net.ipv4.conf.default.secure_redirects = 1\n\n References:\n 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5\n\n Additional Information:\n On systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf\n\n#### \u2022 The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf\n \u2022 This behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.secure_redirects=0\n  sysctl -w net.ipv4.conf.default.secure_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport os\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if secure ICMP redirects are not accepted\"\"\"\n    params = {\n        \"net.ipv4.conf.all.secure_redirects\": \"0\",\n        \"net.ipv4.conf.default.secure_redirects\": \"0\"\n    }\n    \n    audit_passed = True\n    \n    # Check running configuration\n    for param, desired_value in params.items():\n        output = subprocess.check_output([\"sysctl\", param]).decode(\"utf-8\").split(\"=\")[1].strip()\n        if output!= desired_value:\n            print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{output}\\\" in the running configuration and should have a value of: \\\"{desired_value}\\\"\")\n            audit_passed = False\n    \n    # Check durable setting (files), simplifying the precedence handling\n    # by focusing on the most direct locations for remediation as per the specs\n    config_files = [\"/etc/sysctl.conf\"] + [os.path.join(\"/etc/sysctl.d/\", f) for f in os.listdir(\"/etc/sysctl.d/\") if f.endswith(\".conf\")]\n    \n    for file in config_files:\n        try:\n            with open(file, \"r\") as f:\n                for line in f.readlines():\n                    line = line.strip()\n                    if line.startswith(tuple(params.keys())):\n                        param, value = line.split(\"=\")\n                        param = param.strip()\n                        value = value.strip()\n                        if value!= params[param]:\n                            print(f\"- File '{file}' sets \\\"{param}\\\" to \\\"{value}\\\", but should be set to \\\"{params[param]}\\\"\")\n                            audit_passed = False\n        except FileNotFoundError:\n            pass  # Ignore if file does not exist\n    \n    return audit_passed\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by setting the required kernel parameters\"\"\"\n    params = {\n        \"net.ipv4.conf.all.secure_redirects\": \"0\",\n        \"net.ipv4.conf.default.secure_redirects\": \"0\"\n    }\n    \n    # Set parameters in /etc/sysctl.d/ (creating a new file for clarity)\n    config_file = \"/etc/sysctl.d/90secure_icmp_redirects.conf\"\n    with open(config_file, \"w\") as f:\n        for param, value in params.items():\n            f.write(f\"{param} = {value}\\n\")\n            print(f\"Added \\\"{param} = {value}\\\" to {config_file}\")\n    \n    # Apply changes to the active kernel parameters\n    for param, value in params.items():\n        subprocess.run([\"sysctl\", \"-w\", f\"{param}={value}\"])\n        print(f\"Set \\\"{param}\\\" to \\\"{value}\\\" in the running kernel configuration\")\n    \n    # Flush routing table\n    subprocess.run([\"sysctl\", \"-w\", \"net.ipv4.route.flush=1\"])\n    print(\"Flushed the routing table\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        if audit_vuln():\n            print(\"Audit passed: Secure ICMP redirects are not accepted.\")\n        else:\n            print(\"Audit failed. Consider running the script with 'remediate' as an argument to fix the issue.\")\n"
  },
  {
    "name": "Ensure reverse path filtering is enabled",
    "id": "3.3.7",
    "type": "Automated",
    "start_page": 404,
    "end_page": 407,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).",
    "rationale": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n\u2022 net.ipv4.conf.all.rp_filter is set to 1\n\u2022 net.ipv4.conf.default.rp_filter is set to 1\n\nNote: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.rp_filter=1\" \"net.ipv4.conf.default.rp_filter=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2} /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in \".conf:\n\n\u2022 net.ipv4.conf.all.rp_filter = 1\n\u2022 net.ipv4.conf.default.rp_filter = 1\n\nExample:\n# printf '%s\\n' \"net.ipv4.conf.all.rp_filter = 1\" \"net.ipv4.conf.default.rp_filter = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.rp_filter=1\n  sysctl -w net.ipv4.conf.default.rp_filter=1\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter are set to 1.\"\"\"\n    parameters = {\n        \"net.ipv4.conf.all.rp_filter\": \"1\",\n        \"net.ipv4.conf.default.rp_filter\": \"1\"\n    }\n    \n    all_set_correctly = True\n    \n    # Check running configuration\n    for parameter, value in parameters.items():\n        output = subprocess.check_output([\"sysctl\", parameter]).decode(\"utf-8\").split(\"=\")[1].strip()\n        if output!= value:\n            print(f\"- `{parameter}` is incorrectly set to `{output}` in the running configuration and should have a value of: `{value}`\")\n            all_set_correctly = False\n    \n    # Check durable settings in /etc/sysctl.conf and /etc/sysctl.d/\n    config_files = [\"/etc/sysctl.conf\"] + [os.path.join(\"/etc/sysctl.d/\", f) for f in os.listdir(\"/etc/sysctl.d/\") if f.endswith(\".conf\")]\n    for file in config_files:\n        try:\n            with open(file, \"r\") as f:\n                for line in f.readlines():\n                    line = line.strip()\n                    if line.startswith(tuple(parameters.keys())):\n                        param, val = line.split(\"=\")\n                        param = param.strip()\n                        val = val.strip()\n                        if val!= parameters[param]:\n                            print(f\"- `{param}` is incorrectly set to `{val}` in `{file}` and should have a value of: `{parameters[param]}`\")\n                            all_set_correctly = False\n        except FileNotFoundError:\n            continue\n    \n    return all_set_correctly\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1.\"\"\"\n    parameters = {\n        \"net.ipv4.conf.all.rp_filter\": \"1\",\n        \"net.ipv4.conf.default.rp_filter\": \"1\"\n    }\n    \n    # Set in running configuration\n    for parameter, value in parameters.items():\n        subprocess.call([\"sysctl\", \"-w\", f\"{parameter}={value}\"])\n        print(f\"Enabled `{parameter}` in running configuration.\")\n    \n    # Set in durable configuration\n    config_file = \"/etc/sysctl.d/99-reverse_path_filtering.conf\"\n    with open(config_file, \"w\") as f:\n        for parameter, value in parameters.items():\n            f.write(f\"{parameter} = {value}\\n\")\n            print(f\"Enabled `{parameter}` in `{config_file}`.\")\n    \n    # Apply changes\n    subprocess.call([\"sysctl\", \"-p\", config_file])\n    print(f\"Applied changes from `{config_file}` to running configuration.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure source routed packets are not accepted",
    "id": "3.3.8",
    "type": "Automated",
    "start_page": 408,
    "end_page": 412,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.",
    "rationale": "Setting net.ipv4.conf.all.accept_source_route,\nnet.ipv4.conf.default.accept_source_route,\nnet.ipv6.conf.all.accept_source_route and\nnet.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n  - `net.ipv4.conf.all.accept_source_route is set to 0`\n\n  - `net.ipv4.conf.default.accept_source_route is set to 0`\n\n  - `net.ipv6.conf.all.accept_source_route is set to 0`\n\n  - `net.ipv6.conf.default.accept_source_route is set to 0`\n\n**Note:**\n\n  - kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n  - IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.accept_source_route=0\"\n\"net.ipv4.conf.default.accept_source_route=0\" \"net.ipv6.conf.all.accept_source_route=0\"\n\"net.ipv6.conf.default.accept_source_route=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n  - `net.ipv4.conf.all.accept_source_route = 0`\n\n  - `net.ipv4.conf.default.accept_source_route = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.accept_source_route = 0\"\n\"net.ipv4.conf.default.accept_source_route = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n```\nRun the following script to set the active kernel parameters:\n```\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_source_route=0\n  sysctl -w net.ipv4.conf.default.accept_source_route=0\n  sysctl -w net.ipv4.route.flush=1\n}\n```\n**- IF - IPv6 is enabled on the system:**\nSet the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n  - `net.ipv6.conf.all.accept_source_route = 0`\n\n  - `net.ipv6.conf.default.accept_source_route = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv6.conf.all.accept_source_route = 0\"\n\"net.ipv6.conf.default.accept_source_route = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n```\nRun the following command to set the active kernel parameters:\n```\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_source_route=0\n  sysctl -w net.ipv6.conf.default.accept_source_route=0\n  sysctl -w net.ipv6.route.flush=1\n}\n```\n**Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_source_route=0\n  sysctl -w net.ipv4.conf.default.accept_source_route=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_source_route=0\n  sysctl -w net.ipv6.conf.default.accept_source_route=0\n  sysctl -w net.ipv6.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport os\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure source routed packets are not accepted.\"\"\"\n    \n    # Define the kernel parameters to check\n    kernel_params = {\n        \"net.ipv4.conf.all.accept_source_route\": \"0\",\n        \"net.ipv4.conf.default.accept_source_route\": \"0\",\n    }\n    \n    # Conditionally add IPv6 parameters if IPv6 is enabled\n    if not subprocess.run(['grep', '-Pqs', '^\\\\h*0\\\\b', '/sys/module/ipv6/parameters/disable']).returncode:\n        kernel_params[\"net.ipv6.conf.all.accept_source_route\"] = \"0\"\n        kernel_params[\"net.ipv6.conf.default.accept_source_route\"] = \"0\"\n    \n    audit_pass = True\n    for param, value in kernel_params.items():\n        # Check running configuration\n        output = subprocess.run(['sysctl', param], capture_output=True, text=True)\n        if output.stdout.strip().split('=')[1]!= value:\n            print(f\"- '{param}' is incorrectly set to {output.stdout.strip().split('=')[1]} in the running configuration and should have a value of: {value}\")\n            audit_pass = False\n        \n        # Check durable settings (files)\n        files = subprocess.run(['/usr/lib/systemd/systemd-sysctl', '--cat-config'], capture_output=True, text=True).stdout.splitlines()\n        file_found = False\n        for file in files:\n            if file.strip().startswith(param):\n                file_found = True\n                with open(file.strip(), 'r') as f:\n                    for line in f.readlines():\n                        if line.strip().startswith(param) and line.strip().split('=')[1]!= value:\n                            print(f\"- '{param}' is incorrectly set to {line.strip().split('=')[1]} in '{file.strip()}' and should have a value of: {value}\")\n                            audit_pass = False\n        if not file_found:\n            print(f\"- '{param}' is not set in an included file **Note: '{param}' May be set in a file that's ignored by load procedure **\")\n            audit_pass = False\n    \n    if audit_pass:\n        print(\"- Audit Result: **PASS**\")\n    else:\n        print(\"- Audit Result: **FAIL**\")\n    \n    return audit_pass\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure source routed packets are not accepted.\"\"\"\n    \n    # Define the kernel parameters to set\n    kernel_params = {\n        \"net.ipv4.conf.all.accept_source_route\": \"0\",\n        \"net.ipv4.conf.default.accept_source_route\": \"0\",\n    }\n    \n    # Conditionally add IPv6 parameters if IPv6 is enabled\n    if not subprocess.run(['grep', '-Pqs', '^\\\\h*0\\\\b', '/sys/module/ipv6/parameters/disable']).returncode:\n        kernel_params[\"net.ipv6.conf.all.accept_source_route\"] = \"0\"\n        kernel_params[\"net.ipv6.conf.default.accept_source_route\"] = \"0\"\n    \n    # Set parameters in /etc/sysctl.d/\n    config_file = \"/etc/sysctl.d/60 getSourceRouteRemediation.conf\"\n    with open(config_file, 'w') as f:\n        for param, value in kernel_params.items():\n            f.write(f\"{param} = {value}\\n\")\n            print(f\"Added '{param} = {value}' to '{config_file}'\")\n    \n    # Apply changes to the running configuration\n    for param, value in kernel_params.items():\n        subprocess.run(['sysctl', '-w', f\"{param}={value}\"])\n        print(f\"Set '{param}' to '{value}' in the running configuration\")\n    \n    # Flush routes\n    if \"net.ipv4\" in kernel_params:\n        subprocess.run(['sysctl', '-w', \"net.ipv4.route.flush=1\"])\n        print(\"Flushed IPv4 routes\")\n    if \"net.ipv6\" in kernel_params:\n        subprocess.run(['sysctl', '-w', \"net.ipv6.route.flush=1\"])\n        print(\"Flushed IPv6 routes\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        if audit_vuln():\n            sys.exit(0)\n        else:\n            sys.exit(1)\n"
  },
  {
    "name": "Ensure suspicious packets are logged",
    "id": "3.3.9",
    "type": "Automated",
    "start_page": 413,
    "end_page": 416,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "When enabled, this feature logs packets with un-routable source addresses to the kernel log.",
    "rationale": "Setting net.ipv4.conf.all.log_martians and net.ipv4.conf.default.log_martians to 1 enables this feature. Logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: \u2022 net.ipv4.conf.all.log_martians is set to 1 \u2022 net.ipv4.conf.default.log_martians is set to 1 Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.log_martians=1\" \"net.ipv4.conf.default.log_martians=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  {\n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"\\$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"\\$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\/\\.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"\\$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"\\$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"\\$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"\\$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: \u2022 net.ipv4.conf.all.log_martians = 1 \u2022 net.ipv4.conf.default.log_martians = 1 Example: # printf '%s\\n' \"net.ipv4.conf.all.log_martians = 1\" \"net.ipv4.conf.default.log_martians = 1\" >> /etc/sysctl.d/60netipv4_sysctl.conf Run the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.log_martians=1\n  sysctl -w net.ipv4.conf.default.log_martians=1\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport os\nimport re\n\ndef audit_vuln() -> bool:\n    # Expected values\n    params = {\n        \"net.ipv4.conf.all.log_martians\": \"1\",\n        \"net.ipv4.conf.default.log_martians\": \"1\"\n    }\n    \n    # Check running configuration\n    for param, value in params.items():\n        output = subprocess.check_output([\"sysctl\", param]).decode('utf-8')\n        if not re.match(fr\"^{param}\\s*=\\s*{value}$\", output):\n            print(f\"- \\\"{param}\\\" is incorrectly set to {output.split('=')[1].strip()} in the running configuration and should have a value of: \\\"{value}\\\"\")\n            return False\n    \n    # Check durable settings (files)\n    config_files = [\"/etc/sysctl.conf\"] + [f for f in os.listdir(\"/etc/sysctl.d/\") if f.endswith(\".conf\")]\n    for file in config_files:\n        file_path = f\"/etc/sysctl.d/{file}\" if file!= \"/etc/sysctl.conf\" else file\n        with open(file_path, 'r') as f:\n            for line in f.readlines():\n                line = line.strip()\n                if line.startswith(tuple(params.keys())):\n                    param, file_value = line.split(\"=\")\n                    param = param.strip()\n                    file_value = file_value.strip()\n                    if file_value!= params[param]:\n                        print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{file_value}\\\" in \\\"{file_path}\\\" and should have a value of: \\\"{params[param]}\\\"\")\n                        return False\n    \n    # IPv6 status check (if applicable)\n    ipv6_status = subprocess.check_output([\"grep\", \"^0\", \"/sys/module/ipv6/parameters/disable\"]).decode('utf-8').strip()\n    if ipv6_status == \"0\" and any(param.startswith(\"net.ipv6\") for param in params):\n        print(\"- IPv6 is disabled on the system, affected parameters are not applicable\")\n        return True  # or False based on your requirement when IPv6 is disabled\n    \n    print(\"- Audit Result: **PASS**\")\n    return True\n\ndef remediate_vuln() -> None:\n    # Set parameters in configuration file\n    config_file = \"/etc/sysctl.d/60netipv4_sysctl.conf\"\n    if not os.path.exists(config_file):\n        with open(config_file, 'w') as f:\n            pass  # Create the file if it doesn't exist\n    with open(config_file, 'a+') as f:\n        f.seek(0)\n        content = f.read()\n        params = {\n            \"net.ipv4.conf.all.log_martians\": \"1\",\n            \"net.ipv4.conf.default.log_martians\": \"1\"\n        }\n        for param, value in params.items():\n            if f\"{param}={value}\\n\" not in content:\n                f.seek(0, os.SEEK_END)\n                f.write(f\"{param}={value}\\n\")\n                print(f\"Added \\\"{param}={value}\\\" to {config_file}\")\n    \n    # Apply changes to running kernel\n    for param, value in params.items():\n        subprocess.run([\"sysctl\", \"-w\", f\"{param}={value}\"])\n        print(f\"Set \\\"{param}\\\" to \\\"{value}\\\" in the running kernel configuration\")\n    \n    # Flush routing cache\n    subprocess.run([\"sysctl\", \"-w\", \"net.ipv4.route.flush=1\"])\n    print(\"Flushed routing cache\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure tcp syn cookies is enabled",
    "id": "3.3.10",
    "type": "Automated",
    "start_page": 417,
    "end_page": 420,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "When tcp_syncookies is set, the kernel will handle TCP SYN packets normally until the half-open connection queue is full, at which time, the SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply replies to the SYN with a SYN|ACK, but will include a specially crafted TCP sequence number that encodes the source and destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the queue.",
    "rationale": "Attackers use SYN flood attacks to perform a denial of service attacked on a system by sending many SYN packets without completing the three way handshake. This will quickly use up slots in the kernel's half-open connection queue and prevent legitimate connections from succeeding. Setting net.ipv4.tcp_syncookies to 1 enables SYN cookies, allowing the system to keep accepting valid connections, even if under a denial of service attack.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n  - `net.ipv4.tcp_syncookies is set to 1`\n\n**Note: kernel parameters are loaded by file and parameter order precedence. The**\nfollowing script observes this precedence as part of the auditing procedure. The\nparameters being checked may be set correctly in a file. If that file is superseded, the\nparameter is overridden by an incorrect setting later in that file, or in a canonically later\nfile, that \"correct\" setting will be ignored both by the script and by the system during a\nnormal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.tcp_syncookies=1\")\n  l_ufwscf=\"$( [ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n  - `net.ipv4.tcp_syncookies = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.tcp_syncookies = 1\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n```\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.tcp_syncookies=1\n  sysctl -w net.ipv4.route.flush=1\n}\n**Note: If these settings appear in a canonically later file, or later in the same file, these**\nsettings will be overwritten\n**Default Value:**\n\nnet.ipv4.tcp_syncookies = 1\n**References:**\n1. NIST SP 800-53 Rev. 5: CM-1,CM-2, CM-6, CM-7, IA-5\n**Additional Information:**\n\nOn systems with Uncomplicated Firewall, additional settings may be configured in\n```\n/etc/ufw/sysctl.conf\n```\n  - The settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf\n  - This behavior can be changed by updating the IPT_SYSCTL parameter in\n```\n    /etc/default/ufw\n```\n**CIS Controls:**\n**Controls**\n**Control** **IG 1 IG 2 IG 3**\n**Version**\n\n4.8 Uninstall or Disable Unnecessary Services on\nEnterprise Assets and Software\n\nv8 Uninstall or disable unnecessary services on enterprise assets and software,    -    \nsuch as an unused file sharing service, web application module, or service\nfunction.\n\n9.2 Ensure Only Approved Ports, Protocols and Services\n\nv7 Are Running    -    \nEnsure that only network ports, protocols, and services listening on a system\nwith validated business needs, are running on each system.\n**MITRE ATT&CK Mappings:**\n**Techniques / Sub-**\n**Tactics** **Mitigations**\n**techniques**\n\nT1499, T1499.001 TA0040 M1037",
    "python_script": "\nimport sysctl\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if net.ipv4.tcp_syncookies is set to 1\"\"\"\n    # Check running configuration\n    current_value = sysctl.sysctl('net.ipv4.tcp_syncookies')\n    if current_value!= '1':\n        print(f\"- 'net.ipv4.tcp_syncookies' is incorrectly set to {current_value} in the running configuration and should have a value of: '1'\")\n        return False\n\n    # Check durable setting (files), considering file and parameter order precedence\n    config_files = [\"/etc/sysctl.conf\"] + [f for f in os.listdir(\"/etc/sysctl.d/\") if f.endswith(\".conf\")]\n    for file in config_files:\n        file_path = os.path.join(\"/etc/sysctl.d/\", file) if file!= \"/etc/sysctl.conf\" else file\n        with open(file_path, 'r') as f:\n            for line in f.readlines():\n                if line.strip().startswith(\"net.ipv4.tcp_syncookies\"):\n                    file_value = line.split(\"=\")[1].strip()\n                    if file_value!= '1':\n                        print(f\"- 'net.ipv4.tcp_syncookies' is incorrectly set to {file_value} in '{file_path}' and should have a value of: '1'\")\n                        return False\n                    else:\n                        print(f\"- 'net.ipv4.tcp_syncookies' is correctly set to {file_value} in '{file_path}'\")\n    \n    print(\"- All configurations for 'net.ipv4.tcp_syncookies' are correct.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting net.ipv4.tcp_syncookies to 1\"\"\"\n    # Set in /etc/sysctl.d/60netipv4_sysctl.conf (creating if doesn't exist)\n    file_path = \"/etc/sysctl.d/60netipv4_sysctl.conf\"\n    with open(file_path, 'a+' if os.path.exists(file_path) else 'w+') as f:\n        if not any(line.strip().startswith(\"net.ipv4.tcp_syncookies\") for line in f.readlines()):\n            f.write(\"net.ipv4.tcp_syncookies = 1\\n\")\n            print(f\"Added 'net.ipv4.tcp_syncookies = 1' to '{file_path}'\")\n        else:\n            print(f\"'net.ipv4.tcp_syncookies' already set in '{file_path}'\")\n    \n    # Apply changes to the active kernel parameters\n    sysctl.sysctl('net.ipv4.tcp_syncookies=1')\n    sysctl.sysctl('net.ipv4.route.flush=1')\n    print(\"Applied changes to active kernel parameters\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        audit_result = audit_vuln()\n        if not audit_result and input(\"Audit failed. Remediate? (y/n): \").lower() == 'y':\n            remediate_vuln()\n"
  },
  {
    "name": "Ensure ipv6 router advertisements are not accepted",
    "id": "3.3.11",
    "type": "Automated",
    "start_page": 421,
    "end_page": 424,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This setting disables the system's ability to accept IPv6 router advertisements.",
    "rationale": "It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes. Setting net.ipv6.conf.all.accept_ra and net.ipv6.conf.default.accept_ra to 0 disables the system's ability to accept IPv6 router advertisements.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: \u2022 net.ipv6.conf.all.accept_ra is set to 0 \u2022 net.ipv6.conf.default.accept_ra is set to 0",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv6.conf.all.accept_ra=0\" \"net.ipv6.conf.default.accept_ra=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <( /usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "IF - IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: \u2022 net.ipv6.conf.all.accept_ra = 0 \u2022 net.ipv6.conf.default.accept_ra = 0",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_ra=0\n  sysctl -w net.ipv6.conf.default.accept_ra=0\n  sysctl -w net.ipv6.route.flush=1\n}",
    "python_script": "\nimport sysctl\nimport os\n\n# Function to audit the vulnerability\ndef audit_vuln() -> bool:\n    params = {\n        \"net.ipv6.conf.all.accept_ra\": \"0\",\n        \"net.ipv6.conf.default.accept_ra\": \"0\"\n    }\n    \n    audit_pass = True\n    for param, value in params.items():\n        # Check running configuration\n        running_config_value = sysctl.get_param(param)\n        if running_config_value!= value:\n            print(f\" - '{param}' is incorrectly set to '{running_config_value}' in the running configuration and should have a value of: '{value}'\")\n            audit_pass = False\n        \n        # Check kernel parameter configuration files\n        config_files = [\"/etc/sysctl.conf\"] + [f\"/etc/sysctl.d/{file}\" for file in os.listdir(\"/etc/sysctl.d/\") if file.endswith(\".conf\")]\n        param_found = False\n        for file in config_files:\n            with open(file, \"r\") as f:\n                for line in f.readlines():\n                    if line.strip().startswith(param + \"=\"):\n                        param_found = True\n                        if line.strip().split(\"=\")[1]!= value:\n                            print(f\" - '{param}' is incorrectly set to '{line.strip().split('=')[1]}' in '{file}' and should have a value of: '{value}'\")\n                            audit_pass = False\n                        break\n            if param_found:\n                break\n        if not param_found:\n            print(f\" - '{param}' is not set in any included file ** Note: '{param}' May be set in a file that's ignored by load procedure **\")\n            audit_pass = False\n    \n    if audit_pass:\n        print(\"- Audit Result: ** PASS **\")\n    else:\n        print(\"- Audit Result: ** FAIL **\")\n    \n    return audit_pass\n\n# Function to remediate the vulnerability\ndef remediate_vuln() -> None:\n    params = {\n        \"net.ipv6.conf.all.accept_ra\": \"0\",\n        \"net.ipv6.conf.default.accept_ra\": \"0\"\n    }\n    \n    # Check if IPv6 is enabled\n    if sysctl.get_param(\"net.ipv6.conf.all.disable_ipv6\") == \"0\":\n        # Set parameters in /etc/sysctl.conf\n        with open(\"/etc/sysctl.conf\", \"a+\") as f:\n            for param, value in params.items():\n                if f\"{param}={value}\\n\" not in f.readlines():\n                    f.write(f\"{param}={value}\\n\")\n                    print(f\"Added '{param}={value}' to /etc/sysctl.conf\")\n        \n        # Apply changes\n        sysctl.load(\"/etc/sysctl.conf\")\n        print(\"Applied changes using sysctl\")\n        \n        # Flush IPv6 routes\n        sysctl.set_param(\"net.ipv6.route.flush\", \"1\")\n        print(\"Flushed IPv6 routes\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"No remediation needed.\")\n    else:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ufw is installed",
    "id": "4.1.1",
    "type": "Automated",
    "start_page": 427,
    "end_page": 428,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Uncomplicated Firewall (ufw) is a frontend for iptables and is particularly well-suited for host-based firewalls. ufw provides a framework for managing Netfilter, as well as a command-line interface for manipulating the firewall",
    "rationale": "A firewall utility is required to configure the Linux kernel's Netfilter framework via the iptables or nftables back-end.\n\nThe Linux kernel's Netfilter framework host-based firewall can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host.\n\n**Note: Only one firewall utility should be installed and configured. UFW is dependent on** the iptables package.",
    "audit_details": "Run the following command to verify that Uncomplicated Firewall (UFW) is installed:\n```\n# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\nufw is installed\n```\n",
    "audit_code": "# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"",
    "remediation_details": "Run the following command to install Uncomplicated Firewall (UFW):\n```\napt install ufw\n```\n",
    "remediation_code": "apt install ufw",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if Uncomplicated Firewall (ufw) is installed.\n    \n    Returns:\n    bool: True if ufw is installed, False otherwise.\n    \"\"\"\n    try:\n        # Using dpkg to check if ufw is installed\n        subprocess.check_output(['dpkg', '-s', 'ufw'])\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by installing Uncomplicated Firewall (ufw) if not already installed.\n    \"\"\"\n    if not audit_vuln():\n        print(\"Installing Uncomplicated Firewall (ufw)...\")\n        try:\n            # Using apt to install ufw\n            subprocess.check_call(['apt', 'install', '-y', 'ufw'])\n            print(\"Uncomplicated Firewall (ufw) installed successfully.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install ufw: {e}\")\n\n# Example Usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"ufw is installed.\")\n    else:\n        print(\"ufw is not installed. Remediation required.\")\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure iptables-persistent is not installed with ufw",
    "id": "4.1.2",
    "type": "Automated",
    "start_page": 429,
    "end_page": 430,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The iptables-persistent is a boot-time loader for Netfilter rules, iptables plugin",
    "rationale": "Running both ufw and the services included in the iptables-persistent package may lead to conflict",
    "audit_details": "Run the following command to verify that the iptables-persistent package is not installed:\n```\ndpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"\n```\nNothing should be returned",
    "audit_code": "dpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"",
    "remediation_details": "Run the following command to remove the iptables-persistent package:\n```\n# apt purge iptables-persistent\n```",
    "remediation_code": "# apt purge iptables-persistent",
    "python_script": "\nimport subprocess\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if iptables-persistent is installed.\"\"\"\n    # Run dpkg-query and check its return code\n    result = subprocess.run(['dpkg-query', '-s', 'iptables-persistent'], \n                            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    # Return False (not vulnerable) if the package is not installed (return code 1), \n    # True (vulnerable) otherwise\n    return result.returncode == 0\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by removing iptables-persistent.\"\"\"\n    # Initialize the apt cache\n    cache = apt.Cache()\n    # Check if the package is installed before attempting removal\n    if cache['iptables-persistent'].is_installed:\n        # Mark the package for purge and commit the changes\n        cache['iptables-persistent'].mark_delete(purge=True)\n        cache.commit()\n        print(\"Purged iptables-persistent package and its configuration.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerable: iptables-persistent is installed.\")\n        remediate_vuln()\n    else:\n        print(\"Not Vulnerable: iptables-persistent is not installed.\")\n"
  },
  {
    "name": "Ensure ufw service is enabled",
    "id": "4.1.3",
    "type": "Automated",
    "start_page": 431,
    "end_page": 433,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "UncomplicatedFirewall (ufw) is a frontend for iptables. ufw provides a framework for managing Netfilter, as well as a command-line and available graphical user interface for manipulating the firewall.\n\n**Note:**\n\n  - When running ufw enable or starting ufw via its initscript, ufw will flush its chains. This is required so ufw can maintain a consistent state, but it may drop existing connections (eg ssh). ufw does support adding rules before enabling the firewall.\n\n  - Run the following command before running ufw enable.\n\n```\n# ufw allow proto tcp from any to any port 22\n```\n\n  - The rules will still be flushed, but the ssh port will be open after enabling the firewall. Please note that once ufw is 'enabled', ufw will not flush the chains when adding or removing rules (but will when modifying a rule or changing the default policy)\n\n  - By default, ufw will prompt when enabling the firewall while running under ssh. This can be disabled by using ufw --force enable",
    "rationale": "The ufw service must be enabled and running in order for ufw to protect the system",
    "audit_details": "Run the following command to verify that the ufw daemon is enabled:\n```\n# systemctl is-enabled ufw.service\nenabled\n```\nRun the following command to verify that the ufw daemon is active:\n```\n# systemctl is-active ufw\nactive\n```\nRun the following command to verify ufw is active\n```\n# ufw status\nStatus: active\n```, ",
    "audit_code": "# systemctl is-enabled ufw.service\n# systemctl is-active ufw\n# ufw status",
    "remediation_details": "Run the following command to unmask the ufw daemon:\n```\n# systemctl unmask ufw.service\n```\nRun the following command to enable and start the ufw daemon:\n```\n# systemctl --now enable ufw.service\nactive\n```\nRun the following command to enable ufw:\n```\n# ufw enable\n```",
    "remediation_code": "# systemctl unmask ufw.service\n# systemctl --now enable ufw.service\n# ufw enable",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the ufw service is enabled and active.\n    \n    Returns:\n    bool: True if ufw is enabled and active, False otherwise.\n    \"\"\"\n    # Check if ufw.service is enabled\n    enabled = subprocess.run(['systemctl', 'is-enabled', 'ufw.service'], \n                             stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)\n    enabled = enabled.stdout.strip() == 'enabled'\n    \n    # Check if ufw is active via systemctl\n    active_systemctl = subprocess.run(['systemctl', 'is-active', 'ufw'], \n                                      stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)\n    active_systemctl = active_systemctl.stdout.strip() == 'active'\n    \n    # Check if ufw is active via ufw command\n    active_ufw = subprocess.run(['ufw', 'status'], \n                                stdout=subprocess.PIPE, stderr=subprocess.DEVNULL, text=True)\n    active_ufw = 'Status: active' in active_ufw.stdout\n    \n    return enabled and active_systemctl and active_ufw\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by enabling the ufw service if it's not already.\n    \"\"\"\n    # Unmask ufw.service if necessary\n    try:\n        subprocess.run(['systemctl', 'unmask', 'ufw.service'], check=True)\n        print(\"Unmasked ufw.service.\")\n    except subprocess.CalledProcessError as e:\n        if e.returncode!= 1:  # 1 indicates the unit was already unmasked\n            print(f\"Failed to unmask ufw.service: {e}\", file=sys.stderr)\n    \n    # Enable and start ufw.service in one step\n    subprocess.run(['systemctl', '--now', 'enable', 'ufw.service'], check=True)\n    print(\"Enabled and started ufw.service.\")\n    \n    # Enable ufw to activate its firewall rules\n    subprocess.run(['ufw', 'enable', '--force'], check=True)  # --force to suppress the prompt\n    print(\"Enabled ufw firewall rules.\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Audit failed. Starting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"Audit passed. No remediation necessary.\")\n"
  },
  {
    "name": "Ensure ufw loopback traffic is configured",
    "id": "4.1.4",
    "type": "Automated",
    "start_page": 434,
    "end_page": 435,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6).",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands and verify output includes the listed rules in order:\n```\n# ufw status verbose\nTo             Action   From\n--             ------   ---Anywhere on lo       ALLOW IN  Anywhere          \nAnywhere          DENY IN   127.0.0.0/8        \nAnywhere (v6) on lo    ALLOW IN  Anywhere (v6)       \nAnywhere (v6)       DENY IN   ::1            \nAnywhere          ALLOW OUT  Anywhere on lo      \nAnywhere (v6)       ALLOW OUT  Anywhere (v6) on lo\n\n```",
    "audit_code": "# ufw status verbose",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# ufw allow in on lo\n# ufw allow out on lo\n# ufw deny in from 127.0.0.0/8\n# ufw deny in from ::1\n\n```",
    "remediation_code": "# ufw allow in on lo\n# ufw allow out on lo\n# ufw deny in from 127.0.0.0/8\n# ufw deny in from ::1",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit loopback traffic UFW rules.\"\"\"\n    expected_rules = [\n        \"Anywhere on lo       ALLOW IN  Anywhere\",\n        \"Anywhere          DENY IN   127.0.0.0/8\",\n        \"Anywhere (v6) on lo    ALLOW IN  Anywhere (v6)\",\n        \"Anywhere (v6)       DENY IN   ::1\",\n        \"Anywhere          ALLOW OUT  Anywhere on lo\",\n        \"Anywhere (v6)       ALLOW OUT  Anywhere (v6) on lo\"\n    ]\n    \n    # Fetch and parse UFW rules\n    try:\n        output = subprocess.check_output([\"ufw\", \"status\", \"verbose\"]).decode(\"utf-8\")\n        rules = [line.strip() for line in output.split(\"\\n\") if line.strip()]\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to retrieve UFW rules: {e}\")\n        return False\n    \n    # Check if all expected rules are present in the correct order\n    index = 0\n    for rule in rules:\n        if index < len(expected_rules) and rule == expected_rules[index]:\n            index += 1\n        elif rule in expected_rules:\n            # Rule is present but out of order, consider it a failure\n            return False\n    return index == len(expected_rules)\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate loopback traffic UFW rules if not configured.\"\"\"\n    if audit_vuln():  # Already compliant\n        return\n    \n    rules_to_apply = {\n        \"allow in on lo\": \"ALLOW IN on lo (IPv4 and IPv6)\",\n        \"allow out on lo\": \"ALLOW OUT on lo (IPv4 and IPv6)\",\n        \"deny in from 127.0.0.0/8\": \"DENY IN from 127.0.0.0/8 (IPv4)\",\n        \"deny in from ::1\": \"DENY IN from ::1 (IPv6)\"\n    }\n    \n    for command, description in rules_to_apply.items():\n        try:\n            subprocess.check_call([\"ufw\"] + command.split())\n            print(f\"Applied UFW rule: {description}\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to apply UFW rule '{description}': {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Loopback traffic UFW rules are correctly configured.\")\n    else:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ufw firewall rules exist for all open ports",
    "id": "4.1.6",
    "type": "Automated",
    "start_page": 438,
    "end_page": 440,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Services and ports can be accepted or explicitly rejected. Note: - Changing firewall settings while connected over network can result in being locked out of the system - The remediation command opens up the port to traffic from all sources. Consult ufw documentation and set any restrictions in compliance with site policy",
    "rationale": "To reduce the attack surface of a system, all services and ports should be blocked unless required. - Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic. - Without a firewall rule configured for open ports, the default firewall policy will drop all packets to these ports. - Required ports should have a firewall rule created to allow approved connections in accordance with local site policy. - Unapproved ports should have an explicit deny rule created.",
    "audit_details": "Run the following script to verify a firewall rule exists for all open ports:\n```\n#!/usr/bin/env bash\n{\n  unset a_ufwout;unset a_openports\n  while read -r l_ufwport; do\n   [ -n \"$l_ufwport\" ] && a_ufwout+=(\"$l_ufwport\")\n  done < <(ufw status verbose | grep -Po '^\\\\h*\\d+\\b' | sort -u)\n  while read -r l_openport; do\n   [ -n \"$l_openport\" ] && a_openports+=(\"$l_openport\")\n  done < <(ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ &&$5!~/\\[?::1\\]?:/) {split($5, a, \":\"); print a[2]}') | sort -u)\n  a_diff=(\"$(printf '%s\\n' \"${a_openports[@]}\" \"${a_ufwout[@]}\" \"${a_ufwout[@]}\" | sort | uniq -u)\")\n  if [[ -n \"${a_diff[*]}\" ]]; then\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n- The following port(s) don't have a rule in UFW: $(printf '%s\\n' \\n\"${a_diff[*]}\")\\n- End List\"\n  else\n   echo -e \"\\n - Audit Passed -\\n- All open ports have a rule in UFW\\n\"\n  fi\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  unset a_ufwout;unset a_openports\n  while read -r l_ufwport; do\n   [ -n \"$l_ufwport\" ] && a_ufwout+=(\"$l_ufwport\")\n  done < <(ufw status verbose | grep -Po '^\\\\h*\\d+\\b' | sort -u)\n  while read -r l_openport; do\n   [ -n \"$l_openport\" ] && a_openports+=(\"$l_openport\")\n  done < <(ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ &&$5!~/\\[?::1\\]?:/) {split($5, a, \":\"); print a[2]}') | sort -u)\n  a_diff=(\"$(printf '%s\\n' \"${a_openports[@]}\" \"${a_ufwout[@]}\" \"${a_ufwout[@]}\" | sort | uniq -u)\")\n  if [[ -n \"${a_diff[*]}\" ]]; then\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n- The following port(s) don't have a rule in UFW: $(printf '%s\\n' \\n\"${a_diff[*]}\")\\n- End List\"\n  else\n   echo -e \"\\n - Audit Passed -\\n- All open ports have a rule in UFW\\n\"\n  fi\n}",
    "remediation_details": "For each port identified in the audit which does not have a firewall rule, evaluate the service listening on the port and add a rule for accepting or denying inbound connections in accordance with local site policy:\n_Examples:_\n```\n# ufw allow in <port>/<tcp or udp protocol>\n# ufw deny in <port>/<tcp or udp protocol>\n```\nNote: Examples create rules for from any, to any. More specific rules should be considered when allowing inbound traffic e.g only traffic from this network.\n_Example to allow traffic on port 443 using the tcp protocol from the 192.168.1.0 network:_\n```\nufw allow from 192.168.1.0/24 to any proto tcp port 443\n```",
    "remediation_code": "# ufw allow in <port>/<tcp or udp protocol>\n# ufw deny in <port>/<tcp or udp protocol>\nufw allow from 192.168.1.0/24 to any proto tcp port 443\n",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if all open ports have a UFW rule.\n    \n    Returns:\n    bool: True if all open ports have a UFW rule, False otherwise.\n    \"\"\"\n    # Get UFW allowed ports\n    ufw_output = subprocess.check_output(['ufw', 'status', 'verbose']).decode('utf-8')\n    ufw_ports = re.findall(r'^\\s*\\d+', ufw_output, re.MULTILINE)\n    ufw_ports = [port.strip() for port in ufw_ports]\n    \n    # Get all open ports (excluding loopback and link-local)\n    ss_output = subprocess.check_output(['ss', '-tuln']).decode('utf-8')\n    open_ports = re.findall(r':(\\d+)(?=[^\\d]|$)', ss_output)\n    open_ports = [port for port in open_ports if port not in ['25']]  # Example exclusion, adjust as needed\n    \n    # Identify ports without UFW rules\n    ports_without_rules = set(open_ports) - set(ufw_ports)\n    \n    if ports_without_rules:\n        print(f\"\\n- Audit Result:\\n ** FAIL **\\n- The following port(s) don't have a rule in UFW: {', '.join(ports_without_rules)}\\n- End List\")\n        return False\n    else:\n        print(\"\\n - Audit Passed -\\n- All open ports have a rule in UFW\\n\")\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by adding UFW allow rules for open ports without existing rules.\n    Defaults to allowing TCP traffic from any source. Adjust according to your security policy.\n    \"\"\"\n    # Reuse audit logic to identify vulnerable ports\n    ufw_output = subprocess.check_output(['ufw', 'status', 'verbose']).decode('utf-8')\n    ufw_ports = re.findall(r'^\\s*\\d+', ufw_output, re.MULTILINE)\n    ufw_ports = [port.strip() for port in ufw_ports]\n    \n    ss_output = subprocess.check_output(['ss', '-tuln']).decode('utf-8')\n    open_ports = re.findall(r':(\\d+)(?=[^\\d]|$)', ss_output)\n    open_ports = [port for port in open_ports if port not in ['25']]  # Example exclusion, adjust as needed\n    \n    ports_without_rules = set(open_ports) - set(ufw_ports)\n    \n    for port in ports_without_rules:\n        # Default remediation: Allow TCP from any\n        # **ADJUST THIS LINE ACCORDING TO YOUR SECURITY POLICY**\n        remediation_cmd = f\"ufw allow in {port}/tcp\"\n        subprocess.check_call(remediation_cmd, shell=True)\n        print(f\"Allowed inbound TCP traffic on port {port} from any source.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        response = input(\"Vulnerable ports found. Remediate? (yes/no): \")\n        if response.lower() == \"yes\":\n            remediate_vuln()\n        else:\n            print(\"Remediation skipped.\")\n    else:\n        print(\"No vulnerable ports found. Exiting.\")\n"
  },
  {
    "name": "Ensure ufw default deny firewall policy",
    "id": "4.1.7",
    "type": "Automated",
    "start_page": 441,
    "end_page": 442,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A default deny policy on connections ensures that any unconfigured network usage will be rejected.\n\n**Note: Any port or protocol without a explicit allow before the default deny will be** blocked",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit_details": "Run the following command and verify that the default policy for incoming, outgoing, and routed directions is deny, reject, or disabled:\n\n```\n# ufw status verbose | grep Default:\n```\n\n_Example output:_\n\n```\nDefault: deny (incoming), deny (outgoing), disabled (routed)\n```\n\n",
    "audit_code": "# ufw status verbose | grep Default:",
    "remediation_details": "Run the following commands to implement a default deny policy:\n```\n# ufw default deny incoming\n# ufw default deny outgoing\n# ufw default deny routed\n```\n",
    "remediation_code": "# ufw default deny incoming\n# ufw default deny outgoing\n# ufw default deny routed",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit ufw default deny firewall policy\"\"\"\n    output = subprocess.check_output([\"ufw\", \"status\", \"verbose\"]).decode(\"utf-8\")\n    for line in output.splitlines():\n        if line.startswith(\"Default:\"):\n            policies = line.split(\":\")[1].split(\", \")\n            for policy in policies:\n                direction, action = policy.split(\")\")[0].split(\" (\")\n                if action not in [\"deny\", \"reject\", \"disabled\"]:\n                    return True  # Vulnerability present\n            return False  # All policies are deny, reject, or disabled\n    return True  # No \"Default:\" line found (unexpected output)\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate ufw default deny firewall policy\"\"\"\n    for direction in [\"incoming\", \"outgoing\", \"routed\"]:\n        subprocess.check_call([\"ufw\", \"default\", \"deny\", direction])\n        print(f\"Set ufw default policy to 'deny' for {direction} traffic.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure nftables is installed",
    "id": "4.2.1",
    "type": "Automated",
    "start_page": 446,
    "end_page": 447,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "nftables provides a new in-kernel packet classification framework that is based on a network-specific Virtual Machine (VM) and a new nft userspace command line tool. nftables reuses the existing Netfilter subsystems such as the existing hook infrastructure, the connection tracking system, NAT, userspace queuing and logging subsystem. Notes: - nftables is available in Linux kernel 3.13 and newer - Only one firewall utility should be installed and configured - Changing firewall settings while connected over the network can result in being locked out of the system",
    "rationale": "nftables is a subsystem of the Linux kernel that can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host.",
    "audit_details": "Run the following command to verify that nftables is installed:\n```\n# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"\nnftables is installed\n```\n",
    "audit_code": "# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"\nnftables is installed",
    "remediation_details": "Run the following command to install nftables:\n```\n# apt install nftables\n```\n",
    "remediation_code": "# apt install nftables",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if nftables is installed.\n    \n    Returns:\n    bool: True if nftables is installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to query the package status\n        subprocess.check_output(['dpkg-query', '-s', 'nftables'])\n        # If no exception was raised, the package is installed\n        print(\"nftables is installed\")\n        return True\n    except subprocess.CalledProcessError:\n        # If a CalledProcessError occurs, the package is not installed\n        print(\"nftables is not installed\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by installing nftables.\n    \"\"\"\n    try:\n        # Attempt to install nftables\n        subprocess.check_call(['apt', 'install', '-y', 'nftables'])\n        print(\"Successfully installed nftables\")\n    except subprocess.CalledProcessError as e:\n        # Handle installation failures\n        print(f\"Failed to install nftables: {e}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ufw is uninstalled or disabled with nftables",
    "id": "4.2.2",
    "type": "Automated",
    "start_page": 448,
    "end_page": 449,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Uncomplicated Firewall (UFW) is a program for managing a Netfilter firewall designed to be easy to use.",
    "rationale": "Running both the nftables service and ufw may lead to conflict and unexpected results.",
    "audit_details": "Run the following commands to verify that ufw is either not installed or inactive. Only one of the following needs to pass. Run the following command to verify that ufw is not installed: \n\n```\n# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n```\n\nNothing should be returned\n**-OR-**\nRun the following commands to verify ufw is disabled and ufw.service is not enabled:\n```\n# ufw status\nStatus: inactive\n# systemctl is-enabled ufw.service\nmasked\n```\n",
    "audit_code": "# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n\n# ufw status\nStatus: inactive\n# systemctl is-enabled ufw.service\nmasked\n",
    "remediation_details": "Run one of the following to either remove ufw **or disable ufw and mask ufw.service:** Run the following command to remove ufw:\n\n```\n# apt purge ufw\n```\n\n**-OR-**\nRun the following commands to disable ufw and mask ufw.service:\n```\n# ufw disable\n# systemctl stop ufw.service\n# systemctl mask ufw.service\n```\n**Note:** `ufw disable needs to be run before systemctl mask ufw.service in order to` correctly disable UFW",
    "remediation_code": "# apt purge ufw\n\n# ufw disable\n# systemctl stop ufw.service\n# systemctl mask ufw.service\n",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit whether UFW is installed or active.\"\"\"\n    # Check if UFW is not installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'ufw'], stderr=subprocess.DEVNULL)\n        # If no exception, UFW is installed; check if it's inactive and masked\n        output = subprocess.check_output(['ufw', 'status']).decode('utf-8')\n        if 'inactive' not in output:\n            return True  # UFW is active\n        # Check if ufw.service is masked\n        output = subprocess.check_output(['systemctl', 'is-enabled', 'ufw.service']).decode('utf-8')\n        if output.strip()!= 'masked':\n            return True  # ufw.service is not masked\n    except subprocess.CalledProcessError:\n        # UFW is not installed\n        pass\n    return False  # Either UFW is not installed or is inactive and masked\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate UFW vulnerability by either uninstalling UFW or disabling it with nftables.\"\"\"\n    try:\n        # Attempt to uninstall UFW first\n        subprocess.check_output(['apt', 'purge', '-y', 'ufw'])\n        print(\"Uninstalled UFW package.\")\n    except subprocess.CalledProcessError:\n        # If uninstallation fails or is not preferred, disable UFW and mask its service\n        subprocess.check_call(['ufw', 'disable'])\n        print(\"Disabled UFW.\")\n        subprocess.check_call(['systemctl', 'stop', 'ufw.service'])\n        print(\"Stopped ufw.service.\")\n        subprocess.check_call(['systemctl', 'mask', 'ufw.service'])\n        print(\"Masked ufw.service.\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == 'remediate':\n        remediate_vuln()\n    else:\n        audit_result = audit_vuln()\n        print(f\"Vulnerability found: {audit_result}\")\n        sys.exit(1 if audit_result else 0)\n"
  },
  {
    "name": "Ensure a nftables table exists",
    "id": "4.2.4",
    "type": "Automated",
    "start_page": 452,
    "end_page": 453,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Tables hold chains. Each table only has one address family and only applies to packets of this family. Tables can have one of five families.",
    "rationale": "nftables doesn't have any default tables. Without a table being build, nftables will not filter network traffic.",
    "audit_details": "Run the following command to verify that a nftables table exists:\n\n```\n# nft list tables\n```\nReturn should include a list of nftables:\n_Example:_\n```\ntable inet filter\n```\n",
    "audit_code": "# nft list tables",
    "remediation_details": "Run the following command to create a table in nftables\n```\n# nft create table inet <table name>\n```\n_Example:_\n```\n# nft create table inet filter\n```\n",
    "remediation_code": "# nft create table inet <table name>",
    "python_script": "\nimport subprocess\n\n# Default table name and family\nDEFAULT_TABLE_NAME = 'filter'\nTABLE_FAMILY = 'inet'\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Check if at least one nftables table exists.\n    \n    Returns:\n        bool: True if no tables exist (vulnerable), False otherwise.\n    \"\"\"\n    try:\n        output = subprocess.check_output(['nft', 'list', 'tables']).decode('utf-8')\n        return not any(line.startswith(f'table {TABLE_FAMILY}') for line in output.splitlines())\n    except FileNotFoundError:\n        # `nft` command not found, assume vulnerable for this audit's purpose\n        return True\n\ndef remediate_vuln(table_name: str = DEFAULT_TABLE_NAME) -> None:\n    \"\"\"\n    Create a default nftables table with the inet address family.\n    \n    Args:\n        table_name (str, optional): Custom table name. Defaults to 'filter'.\n    \"\"\"\n    create_cmd = ['nft', 'create', 'table', TABLE_FAMILY, table_name]\n    try:\n        subprocess.check_call(create_cmd)\n        print(f\"Created nftables table '{table_name}' with '{TABLE_FAMILY}' address family.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to create table: {e}\")\n"
  },
  {
    "name": "Ensure nftables base chains exist",
    "id": "4.2.5",
    "type": "Automated",
    "start_page": 454,
    "end_page": 455,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.",
    "rationale": "If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.",
    "audit_details": "Run the following commands and verify that base chains exist for INPUT.\n```\n# nft list ruleset | grep 'hook input'\ntype filter hook input priority 0;\n```\nRun the following commands and verify that base chains exist for FORWARD.\n```\n# nft list ruleset | grep 'hook forward'\ntype filter hook forward priority 0;\n```\nRun the following commands and verify that base chains exist for OUTPUT.\n```\n# nft list ruleset | grep 'hook output'\ntype filter hook output priority 0;\n```\nPage 453",
    "audit_code": "# nft list ruleset | grep 'hook input'\n# nft list ruleset | grep 'hook forward'\n# nft list ruleset | grep 'hook output'",
    "remediation_details": "Run the following command to create the base chains:\n```\n# nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 \\; }\n```\n_Example:_\n```\n# nft create chain inet filter input { type filter hook input priority 0 \\; }\n# nft create chain inet filter forward { type filter hook forward priority 0 \\; }\n# nft create chain inet filter output { type filter hook output priority 0 \\; }\n```\n",
    "remediation_code": "# nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 \\; } \n# nft create chain inet filter input { type filter hook input priority 0 \\; } \n# nft create chain inet filter forward { type filter hook forward priority 0 \\; } \n# nft create chain inet filter output { type filter hook output priority 0 \\; }",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Check if nftables base chains exist for INPUT, FORWARD, and OUTPUT.\n    \n    Returns:\n    bool: True if any base chain is missing, False otherwise\n    \"\"\"\n    hooks = ['input', 'forward', 'output']\n    table_name = 'filter'  # default table name, as per remediation example\n    for hook in hooks:\n        cmd = f\"nft list ruleset | grep 'hook {hook}'\"\n        output = subprocess.getoutput(cmd)\n        if f\"type filter hook {hook} priority 0;\" not in output:\n            print(f\"Missing base chain for {hook.upper()}\")\n            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Create missing nftables base chains for INPUT, FORWARD, and OUTPUT.\n    \"\"\"\n    hooks = ['input', 'forward', 'output']\n    table_name = 'filter'  # default table name, as per remediation example\n    for hook in hooks:\n        cmd = f\"nft list ruleset | grep 'hook {hook}'\"\n        output = subprocess.getoutput(cmd)\n        if f\"type filter hook {hook} priority 0;\" not in output:\n            chain_cmd = f\"nft create chain inet {table_name} {hook} {{ type filter hook {hook} priority 0 \\\\; }}\"\n            subprocess.run(chain_cmd, shell=True, check=True)\n            print(f\"Created base chain for {hook.upper()}\")\n        else:\n            print(f\"Base chain for {hook.upper()} already exists\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found, remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found\")\n"
  },
  {
    "name": "Ensure nftables loopback traffic is configured",
    "id": "4.2.6",
    "type": "Automated",
    "start_page": 456,
    "end_page": 457,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands to verify that the loopback interface is configured:\nRun the following command to verify the loopback interface is configured to accept network traffic:\n\n```\n# nft list ruleset | awk '/hook input/,/}/' | grep 'iif \"lo\" accept'\n```\n\n_Example output:_\n```\niif \"lo\" accept\n```\n\nRun the following command to verify network traffic from an iPv4 loopback interface is configured to drop:\n```\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip saddr'\n```\n\n_Example output:_\n```\nip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop\n```\n\n**-IF- IPv6 is enabled on the system:**\nRun the following command to verify network traffic from an iPv6 loopback interface is configured to drop:\n```\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip6 saddr'\n```\n\n_Example output:_\n```\nip6 saddr ::1 counter packets 0 bytes 0 drop\n```\n",
    "audit_code": "# nft list ruleset | awk '/hook input/,/}/' | grep 'iif \"lo\" accept'\n\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip saddr'\n\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip6 saddr'",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# nft add rule inet filter input iif lo accept\n# nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop\n```\n**-IF- IPv6 is enabled on the system:**\nRun the following command to implement the IPv6 loopback rule:\n```\n# nft add rule inet filter input ip6 saddr ::1 counter drop\n```\n",
    "remediation_code": "# nft add rule inet filter input iif lo accept\n# nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop\n\n# nft add rule inet filter input ip6 saddr ::1 counter drop",
    "python_script": "\nimport subprocess\nimport netifaces as ni\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit nftables loopback traffic configuration\"\"\"\n    loopback_accept = subprocess.run(['nft', 'list', 'ruleset'], \n                                     stdout=subprocess.PIPE, \n                                     stderr=subprocess.DEVNULL, \n                                     text=True)\n    \n    if 'iif \"lo\" accept' in loopback_accept.stdout:\n        print(\"Loopback interface accepts traffic\")\n    else:\n        print(\"Loopback interface does NOT accept traffic\")\n        return False\n    \n    ipv4_drop = subprocess.run(['nft', 'list', 'ruleset'], \n                               stdout=subprocess.PIPE, \n                               stderr=subprocess.DEVNULL, \n                               text=True)\n    \n    if 'ip saddr 127.0.0.0/8 counter packets' in ipv4_drop.stdout and 'drop' in ipv4_drop.stdout:\n        print(\"IPv4 loopback traffic is set to drop\")\n    else:\n        print(\"IPv4 loopback traffic is NOT set to drop\")\n        return False\n    \n    if ipv6_enabled():\n        ipv6_drop = subprocess.run(['nft', 'list', 'ruleset'], \n                                   stdout=subprocess.PIPE, \n                                   stderr=subprocess.DEVNULL, \n                                   text=True)\n        \n        if 'ip6 saddr ::1 counter packets' in ipv6_drop.stdout and 'drop' in ipv6_drop.stdout:\n            print(\"IPv6 loopback traffic is set to drop\")\n        else:\n            print(\"IPv6 loopback traffic is NOT set to drop\")\n            return False\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate nftables loopback traffic configuration\"\"\"\n    # Accept loopback traffic on lo interface\n    subprocess.run(['nft', 'add', 'rule', 'inet', 'filter', 'input', 'iif', 'lo', 'accept'])\n    print(\"Enabled loopback traffic on lo interface\")\n    \n    # Drop IPv4 loopback traffic\n    subprocess.run(['nft', 'add', 'rule', 'inet', 'filter', 'input', 'ip', 'saddr', '127.0.0.0/8', 'counter', 'drop'])\n    print(\"Configured to drop IPv4 loopback traffic\")\n    \n    if ipv6_enabled():\n        # Drop IPv6 loopback traffic\n        subprocess.run(['nft', 'add', 'rule', 'inet', 'filter', 'input', 'ip6', 'saddr', '::1', 'counter', 'drop'])\n        print(\"Configured to drop IPv6 loopback traffic\")\n\ndef ipv6_enabled() -> bool:\n    \"\"\"Check if IPv6 is enabled on any interface\"\"\"\n    for interface in ni.interfaces():\n        if ni.AF_INET6 in ni.ifaddresses(interface):\n            return True\n    return False\n\n# Example usage\nif not audit_vuln():\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure nftables default deny firewall policy",
    "id": "4.2.8",
    "type": "Automated",
    "start_page": 461,
    "end_page": 463,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.",
    "rationale": "There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack. It is easier to white list acceptable usage than to black list unacceptable usage. _Note: Changing firewall settings while connected over network can result in being_ _locked out of the system._",
    "audit_details": "Run the following commands and verify that base chains contain a policy of DROP.\n```\n# nft list ruleset | grep 'hook input'\ntype filter hook input priority 0; policy drop;\n# nft list ruleset | grep 'hook forward'\ntype filter hook forward priority 0; policy drop;\n# nft list ruleset | grep 'hook output'\ntype filter hook output priority 0; policy drop;\n```\nPage 460",
    "audit_code": "# nft list ruleset | grep 'hook input'\n# nft list ruleset | grep 'hook forward'\n# nft list ruleset | grep 'hook output'",
    "remediation_details": "Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:\n```\n# nft chain <table family> <table name> <chain name> { policy drop \\; }\n```\n_Example:_\n```\n# nft chain inet filter input { policy drop \\; }\n# nft chain inet filter forward { policy drop \\; }\n# nft chain inet filter output { policy drop \\; }\n```\n",
    "remediation_code": "# nft chain <table family> <table name> <chain name> { policy drop \\; } \n# nft chain inet filter input { policy drop \\; }\n# nft chain inet filter forward { policy drop \\; }\n# nft chain inet filter output { policy drop \\; } \n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit nftables default deny firewall policy\"\"\"\n    chains = ['input', 'forward', 'output']\n    for chain in chains:\n        cmd = f\"nft list ruleset | grep 'hook {chain}'\"\n        output = subprocess.check_output(cmd, shell=True).decode('utf-8')\n        if 'policy drop' not in output:\n            print(f\"Base chain '{chain}' does not have a default DROP policy.\")\n            return False\n    print(\"All base chains have a default DROP policy.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate nftables default deny firewall policy\"\"\"\n    table_family = 'inet'\n    table_name = 'filter'\n    chains = ['input', 'forward', 'output']\n    for chain in chains:\n        cmd = f\"nft chain {table_family} {table_name} {chain} {{ policy drop ; }}\"\n        subprocess.check_call(cmd, shell=True)\n        print(f\"Set default DROP policy for base chain '{chain}'.\")\n\n# Example usage:\nif not audit_vuln():\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure nftables service is enabled",
    "id": "4.2.9",
    "type": "Automated",
    "start_page": 464,
    "end_page": 465,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nftables service allows for the loading of nftables rulesets during boot, or starting on the nftables service",
    "rationale": "The nftables service restores the nftables rules from the rules files referenced in the /etc/nftables.conf file during boot or the starting of the nftables service",
    "audit_details": "Run the following command and verify that the nftables service is enabled:\n# systemctl is-enabled nftables\nenabled",
    "audit_code": "# systemctl is-enabled nftables",
    "remediation_details": "Run the following command to enable the nftables service:\n# systemctl enable nftables",
    "remediation_code": "# systemctl enable nftables",
    "python_script": "\nimport systemd\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if the nftables service is enabled.\"\"\"\n    manager = systemd.bus.SystemdBus()\n    service_manager = manager.get_proxy('org.freedesktop.systemd1', '/org/freedesktop/systemd1')\n    service_enabled = service_manager.GetUnitProperty('nftables.service', 'EnableState') == b'enabled'\n    return not service_enabled\n\ndef remediate_vuln() -> None:\n    \"\"\"Enable the nftables service.\"\"\"\n    import subprocess\n    # Unfortunately, python-systemd doesn't support enabling units directly.\n    # We'll use a subprocess for this specific action, as it's a straightforward, well-defined operation.\n    subprocess.run(['systemctl', 'enable', 'nftables'], check=True)\n    print(\"Enabled nftables systemd service.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found:\")\n        remediate_vuln()\n    else:\n        print(\"nftables service is already enabled.\")\n"
  },
  {
    "name": "Ensure nftables rules are permanent",
    "id": "4.2.10",
    "type": "Automated",
    "start_page": 466,
    "end_page": 468,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames.\n\nThe nftables service reads the /etc/nftables.conf file for a nftables file or files to include in the nftables ruleset.\n\nA nftables ruleset containing the input, forward, and output base chains allow network traffic to be filtered.",
    "rationale": "Changes made to nftables ruleset only affect the live system, you will also need to configure the nftables ruleset to apply on boot.",
    "audit_details": "Run the following commands to verify that input, forward, and output base chains are configured to be applied to a nftables ruleset on boot: Run the following command to verify the input base chain:\n```\n# [ -n \"$(grep -E '^\\\\s*include' /etc/nftables.conf)\" ] && awk '/hook input/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\"\\\"\", \"\", $2);print $2 }' /etc/nftables.conf)\n```\n\nOutput should be similar to:\n```\n        type filter hook input priority 0; policy drop;\n        # Ensure loopback traffic is configured\n        iif \"lo\" accept\n        ip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop\n        ip6 saddr ::1 counter packets 0 bytes 0 drop\n        # Ensure established connections are configured\n        ip protocol tcp ct state established accept\n        ip protocol udp ct state established accept\n        ip protocol icmp ct state established accept\n        # Accept port 22(SSH) traffic from anywhere\n        tcp dport ssh accept\n        # Accept ICMP and IGMP from anywhere\n        icmpv6 type { destination-unreachable, packet-too-big, timeexceeded, parameter-problem, mld-listener-query, mld-listener-report, mldlistener-done, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, ndneighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listenerreport } accept\n```\n\n### Review the input base chain to ensure that it follows local site policy\n\nRun the following command to verify the forward base chain:\n```\n# [ -n \"$(grep -E '^\\\\s*include' /etc/nftables.conf)\" ] && awk '/hook forward/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\"\\\"\", \"\", $2);print $2 }' /etc/nftables.conf)\n```\n\nOutput should be similar to:\n```\n    # Base chain for hook forward named forward (Filters forwarded network packets)\n    chain forward {\n        type filter hook forward priority 0; policy drop;\n    }\n```\n\nReview the forward base chain to ensure that it follows local site policy. Run the following command to verify the output base chain:\n```\n# [ -n \"$(grep -E '^\\\\s*include' /etc/nftables.conf)\" ] && awk '/hook output/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\"\\\"\", \"\", $2);print $2 }' /etc/nftables.conf)\n```\n\nOutput should be similar to:\n```\n    # Base chain for hook output named output (Filters outbound network packets)\n    chain output {\n        type filter hook output priority 0; policy drop;\n        # Ensure outbound and established connections are configured\n        ip protocol tcp ct state established,related,new accept\n        ip protocol tcp ct state established,related,new accept\n        ip protocol udp ct state established,related,new accept\n        ip protocol icmp ct state established,related,new accept\n    }\n```\n\nReview the output base chain to ensure that it follows local site policy.",
    "audit_code": "# [ -n \"$(grep -E '^\\",
    "remediation_details": "Edit the /etc/nftables.conf file and un-comment or add a line with include <Absolute path to nftables rules file> for each nftables file you want included in the nftables ruleset on boot Example:\n```\n# vi /etc/nftables.conf\n```\n\n### Add the line:\n```\ninclude \"/etc/nftables.rules\"\n```",
    "remediation_code": "# vi /etc/nftables.conf\n# Add the line:\ninclude \"/etc/nftables.rules\"",
    "python_script": "\nimport os\nimport re\n\n# Define the path to nftables.conf and the rules file to include\nnftables_conf_path = '/etc/nftables.conf'\nrules_file_path = '/etc/nftables.rules'\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Verifies if input, forward, and output base chains are configured in included files.\n    Returns True if all chains are found, False otherwise.\n    \"\"\"\n    included_files = []\n    with open(nftables_conf_path, 'r') as conf_file:\n        for line in conf_file:\n            if line.startswith('include'):\n                # Extract the file path from the include statement\n                file_path = line.split('\"')[1]\n                included_files.append(file_path)\n\n    chains_found = {'input': False, 'forward': False, 'output': False}\n    for file_path in included_files:\n        if os.path.exists(file_path):\n            with open(file_path, 'r') as rules_file:\n                content = rules_file.read()\n                if re.search(r'hook input', content):\n                    chains_found['input'] = True\n                if re.search(r'hook forward', content):\n                    chains_found['forward'] = True\n                if re.search(r'hook output', content):\n                    chains_found['output'] = True\n\n    # All chains must be found\n    return all(chains_found.values())\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Ensures the specified nftables rules file is included in /etc/nftables.conf.\n    \"\"\"\n    include_statement = f'include \"{rules_file_path}\"\\n'\n    \n    # Check if the include statement already exists\n    with open(nftables_conf_path, 'r+') as conf_file:\n        content = conf_file.readlines()\n        if include_statement in content:\n            print(f\"{rules_file_path} is already included in {nftables_conf_path}.\")\n            return\n        \n        # Append the include statement if not found\n        conf_file.write(include_statement)\n        print(f\"Added 'include \\\"{rules_file_path}\\\"' to {nftables_conf_path}.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure iptables packages are installed",
    "id": "4.3.1.1",
    "type": "Automated",
    "start_page": 471,
    "end_page": 472,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "iptables is a utility program that allows a system administrator to configure the tables provided by the Linux kernel firewall, implemented as different Netfilter modules, and the chains and rules it stores. Different kernel modules and programs are used for different protocols; iptables applies to IPv4, ip6tables to IPv6, arptables to ARP, and ebtables to Ethernet frames.",
    "rationale": "A method of configuring and maintaining firewall rules is necessary to configure a Host Based Firewall.",
    "audit_details": "Run the following command to verify that iptables is installed:\n\n# dpkg-query -s iptables &>/dev/null && echo \"iptables is installed\"\niptables is installed\n\nRun the following command to verify that iptables-persistent is installed:\n\n# dpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"\niptables-persistent is installed\n",
    "audit_code": "# dpkg-query -s iptables &>/dev/null && echo \"iptables is installed\"\n# dpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"",
    "remediation_details": "Run the following command to install iptables and iptables-persistent\n\n# apt install iptables iptables-persistent",
    "remediation_code": "# apt install iptables iptables-persistent",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if iptables and iptables-persistent are installed\"\"\"\n    packages = ['iptables', 'iptables-persistent']\n    for package in packages:\n        try:\n            # Attempt to use pkg_resources for a Pythonic approach\n            pkg_resources.require(package)\n        except pkg_resources.ResolutionError:\n            # Fall back to subprocess if pkg_resources fails\n            result = subprocess.run(['dpkg-query', '-s', package], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if result.returncode!= 0:\n                print(f\"{package} is not installed\")\n                return False\n            else:\n                print(f\"{package} is installed\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by installing iptables and iptables-persistent\"\"\"\n    packages = ['iptables', 'iptables-persistent']\n    install_cmd = ['apt', 'install', '-y'] + packages\n    result = subprocess.run(install_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if result.returncode == 0:\n        for package in packages:\n            print(f\"Installed {package} via apt\")\n    else:\n        print(f\"Failed to install {', '.join(packages)}: {result.stderr.decode('utf-8')}\")\n\n# Example usage\nif not audit_vuln():\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure nftables is not installed with iptables",
    "id": "4.3.1.2",
    "type": "Automated",
    "start_page": 473,
    "end_page": 474,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames and is the successor to iptables.",
    "rationale": "Running both iptables and nftables may lead to conflict.",
    "audit_details": "Run the following commend to verify that nftables is not installed:\n# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"\nnftables is installed",
    "audit_code": "# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"",
    "remediation_details": "Run the following command to remove nftables:\n# apt purge nftables",
    "remediation_code": "# apt purge nftables",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Check if nftables is installed.\n    \n    Returns:\n    bool: True if nftables is installed, False otherwise.\n    \"\"\"\n    try:\n        # Check if nftables is installed by running dpkg-query with the -s flag\n        # A return code of 0 indicates the package is installed\n        subprocess.check_output(['dpkg-query', '-s', 'nftables'], stderr=subprocess.DEVNULL)\n        return True\n    except subprocess.CalledProcessError:\n        # If the command returns a non-zero exit code, nftables is not installed\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remove nftables if it's installed.\n    \"\"\"\n    if audit_vuln():\n        # Attempt to purge nftables using apt\n        try:\n            subprocess.check_call(['apt', 'purge', '-y', 'nftables'])\n            print(\"Successfully removed nftables package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to remove nftables: {e}\")\n    else:\n        print(\"nftables is not installed, no action needed.\")\n\n# Example usage (if you want to run these functions directly from this script)\nif __name__ == \"__main__\":\n    print(\"Audit Result:\", audit_vuln())\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure ufw is uninstalled or disabled with iptables",
    "id": "4.3.1.3",
    "type": "Automated",
    "start_page": 475,
    "end_page": 476,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Uncomplicated Firewall (UFW) is a program for managing a Netfilter firewall designed to be easy to use.\n\n  - Uses a command-line interface consisting of a small number of simple commands\n\n  - Uses iptables for configuration",
    "rationale": "Running iptables.persistent with ufw enabled may lead to conflict and unexpected results.",
    "audit_details": "Run the following commands to verify that ufw is either not installed or disabled. Only one of the following needs to pass. Run the following command to verify that ufw is not installed:\n\n```\n# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\nRun the following command to verify ufw is disabled:\n```\n# ufw status\nStatus: inactive\n```\nRun the following commands to verify that the ufw service is masked:\n```\n# systemctl is-enabled ufw\nmasked\n```\nPage 474",
    "audit_code": "# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n# ufw status\n# systemctl is-enabled ufw",
    "remediation_details": "Run one of the following commands to either remove ufw or stop and mask ufw Run the following command to remove ufw:\n\n```\n# apt purge ufw\n```\n\n\n**- OR -**\nRun the following commands to disable ufw:\n```\n# ufw disable\n# systemctl stop ufw\n# systemctl mask ufw\n```\n**Note:** `ufw disable needs to be run before systemctl mask ufw in order to correctly` disable UFW",
    "remediation_code": "# apt purge ufw\n# ufw disable\n# systemctl stop ufw\n# systemctl mask ufw",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if ufw is either not installed or disabled with its service masked.\"\"\"\n    \n    # Check if ufw is not installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'ufw'], stderr=subprocess.DEVNULL)\n        installed = True\n    except subprocess.CalledProcessError:\n        installed = False\n    \n    if not installed:\n        print(\"UFW is not installed.\")\n        return True\n    \n    # If installed, check if ufw is disabled\n    try:\n        output = subprocess.check_output(['ufw', 'status']).decode('utf-8')\n        if 'inactive' in output:\n            print(\"UFW is disabled.\")\n            # Check if the ufw service is masked\n            try:\n                output = subprocess.check_output(['systemctl', 'is-enabled', 'ufw']).decode('utf-8')\n                if 'masked' in output:\n                    print(\"UFW service is masked.\")\n                    return True\n            except subprocess.CalledProcessError as e:\n                print(f\"Failed to check ufw service status: {e}\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to check ufw status: {e}\")\n    \n    return False\n\ndef remediate_vuln(uninstall: bool = False) -> None:\n    \"\"\"Remediate the vulnerability by either uninstalling ufw or disabling and masking its service.\n    \n    Args:\n    - uninstall (bool): If True, uninstall ufw. Otherwise, disable and mask its service. Defaults to False.\n    \"\"\"\n    \n    if uninstall:\n        # Attempt to uninstall ufw\n        try:\n            subprocess.check_call(['apt', 'purge', '-y', 'ufw'])\n            print(\"Uninstalled ufw.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to uninstall ufw: {e}\")\n    else:\n        # Disable ufw\n        try:\n            subprocess.check_call(['ufw', 'disable'])\n            print(\"Disabled ufw.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to disable ufw: {e}\")\n            return\n        \n        # Stop the ufw service\n        try:\n            subprocess.check_call(['systemctl', 'stop', 'ufw'])\n            print(\"Stopped ufw service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to stop ufw service: {e}\")\n            return\n        \n        # Mask the ufw service\n        try:\n            subprocess.check_call(['systemctl', 'mask', 'ufw'])\n            print(\"Masked ufw service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to mask ufw service: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        # Choose your remediation strategy here (uninstall or disable/mask)\n        remediate_vuln(uninstall=True)  # Set to False for disable/mask approach\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure iptables default deny firewall policy",
    "id": "4.3.2.1",
    "type": "Automated",
    "start_page": 478,
    "end_page": 479,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A default deny all policy on connections ensures that any unconfigured network usage will be rejected.\n\n_Notes:_\n\n  - _Changing firewall settings while connected over network can result in being_\n_locked out of the system_\n\n  - _Remediation will only affect the active system firewall, be sure to configure the_\n_default policy in your firewall management to apply on boot as well_",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit_details": "Run the following command and verify that the policy for the INPUT, OUTPUT, and FORWARD chains is DROP or REJECT :\n# iptables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)",
    "audit_code": "# iptables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)",
    "remediation_details": "Run the following commands to implement a default DROP policy:",
    "remediation_code": "# iptables -P INPUT DROP\n# iptables -P OUTPUT DROP\n# iptables -P FORWARD DROP",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure iptables default deny firewall policy.\n    \n    Returns:\n    bool: True if all chains have a default policy of DROP or REJECT, False otherwise.\n    \"\"\"\n    chains = [\"INPUT\", \"OUTPUT\", \"FORWARD\"]\n    default_policies = {}\n    \n    # Run iptables command and capture output\n    output = subprocess.check_output([\"iptables\", \"-L\"]).decode(\"utf-8\").splitlines()\n    \n    # Parse output to extract default policies for each chain\n    for line in output:\n        if \"Chain\" in line:\n            chain = line.split()[1]\n            if chain in chains:\n                default_policies[chain] = None\n        elif \"policy\" in line and default_policies[chain] is None:\n            policy = line.split()[1]\n            default_policies[chain] = policy\n    \n    # Check if all chains have a default policy of DROP or REJECT\n    return all(policy in [\"DROP\", \"REJECT\"] for policy in default_policies.values())\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the default iptables policy to DROP for all chains.\n    \"\"\"\n    chains = [\"INPUT\", \"OUTPUT\", \"FORWARD\"]\n    for chain in chains:\n        # Set default policy to DROP\n        subprocess.check_call([\"iptables\", \"-P\", chain, \"DROP\"])\n        print(f\"Set default policy for {chain} chain to DROP.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found. Default policies are already set to DROP or REJECT.\")\n"
  },
  {
    "name": "Ensure iptables loopback traffic is configured",
    "id": "4.3.2.2",
    "type": "Automated",
    "start_page": 480,
    "end_page": 481,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8).",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands and verify output includes the listed rules in order (packet and byte counts may differ):\n```\n# iptables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       \ndestination\n  0   0 ACCEPT   all -- lo   *    0.0.0.0/0      0.0.0.0/0\n  0   0 DROP    all -- *   *    127.0.0.0/8     0.0.0.0/0\n # iptables -L OUTPUT -v -n\nChain OUTPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       \ndestination\n  0   0 ACCEPT   all -- *   lo   0.0.0.0/0      0.0.0.0/0\n```\nPage 479\n",
    "audit_code": "# iptables -L INPUT -v -n\n# iptables -L OUTPUT -v -n",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# iptables -A INPUT -i lo -j ACCEPT\n# iptables -A OUTPUT -o lo -j ACCEPT\n# iptables -A INPUT -s 127.0.0.0/8 -j DROP\n```",
    "remediation_code": "# iptables -A INPUT -i lo -j ACCEPT\n# iptables -A OUTPUT -o lo -j ACCEPT\n# iptables -A INPUT -s 127.0.0.0/8 -j DROP\n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit loopback traffic configuration using iptables rules.\n    \n    Returns:\n        bool: True if configured correctly, False otherwise.\n    \"\"\"\n    input_rules_cmd = \"iptables -L INPUT -v -n\"\n    output_rules_cmd = \"iptables -L OUTPUT -v -n\"\n    \n    input_rules_output = subprocess.check_output(input_rules_cmd, shell=True).decode('utf-8')\n    output_rules_output = subprocess.check_output(output_rules_cmd, shell=True).decode('utf-8')\n    \n    # Check for specific rules in output (simplified, might need adjustment for exact matching)\n    input_lo_accept = any(\"ACCEPT   all -- lo\" in line for line in input_rules_output.splitlines())\n    input_loopback_drop = any(\"DROP   all -- *    127.0.0.0/8\" in line for line in input_rules_output.splitlines())\n    output_lo_accept = any(\"ACCEPT   all -- *   lo\" in line for line in output_rules_output.splitlines())\n    \n    return all([input_lo_accept, input_loopback_drop, output_lo_accept])\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate loopback traffic configuration by adding necessary iptables rules.\n    \"\"\"\n    rules_to_add = [\n        \"iptables -A INPUT -i lo -j ACCEPT\",\n        \"iptables -A OUTPUT -o lo -j ACCEPT\",\n        \"iptables -A INPUT -s 127.0.0.0/8 -j DROP\"\n    ]\n    \n    for rule in rules_to_add:\n        subprocess.check_call(rule, shell=True)\n        print(f\"Added rule: {rule}\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"Loopback traffic configuration is secure.\")\n"
  },
  {
    "name": "Ensure iptables firewall rules exist for all open ports",
    "id": "4.3.2.4",
    "type": "Automated",
    "start_page": 484,
    "end_page": 486,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.",
    "rationale": "Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.",
    "audit_details": "Run the following command to determine open ports:\n```\n# ss -4tuln\nNetid State   Recv-Q Send-Q  Local Address:Port          Peer\nAddress:Port\nudp  UNCONN   0   0           *:68                *:*\nudp  UNCONN   0   0           *:123               *:*\ntcp  LISTEN   0   128          *:22                *:*\n```\nRun the following command to determine firewall rules:\n```\n# iptables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all -- lo   *    0.0.0.0/0      0.0.0.0/0\n  0   0 DROP    all -- *   *    127.0.0.0/8     0.0.0.0/0\n  0   0 ACCEPT   tcp -- *   *    0.0.0.0/0      0.0.0.0/0      tcp dpt:22 state NEW\n```\nVerify all open ports listening on non-localhost addresses have at least one firewall rule.\n_The last line identified by the \"tcp dpt:22 state NEW\" identifies it as a firewall rule for_new connections on tcp port 22._",
    "audit_code": "# ss -4tuln\n# iptables -L INPUT -v -n",
    "remediation_details": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:\n```\n# iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT\n```\n",
    "remediation_code": "# iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT",
    "python_script": "\nimport subprocess\nimport json\nimport psutil\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the vulnerability: Ensure iptables firewall rules exist for all open ports\"\"\"\n    \n    # Get open ports on non-loopback addresses using ss command (equivalent to `ss -4tuln`)\n    open_ports_cmd = [\"ss\", \"-4tuln\"]\n    open_ports_output = subprocess.check_output(open_ports_cmd).decode(\"utf-8\")\n    open_ports = []\n    for line in open_ports_output.splitlines()[1:]:  # Skip header\n        cols = line.split()\n        if cols[3]!= \"127.0.0.1:\":  # Non-loopback address\n            port = cols[3].split(\":\")[1]\n            protocol = \"tcp\" if cols[0] == \"tcp\" else \"udp\"\n            open_ports.append((protocol, port))\n    \n    # Get current firewall rules using iptables command (equivalent to `iptables -L INPUT -v -n`)\n    firewall_rules_cmd = [\"iptables\", \"-L\", \"INPUT\", \"-v\", \"-n\", \"--json\"]\n    try:\n        firewall_rules_output = subprocess.check_output(firewall_rules_cmd).decode(\"utf-8\")\n        firewall_rules = json.loads(firewall_rules_output)\n    except subprocess.CalledProcessError:  # --json option not supported, fall back to parsing text output\n        firewall_rules_cmd = [\"iptables\", \"-L\", \"INPUT\", \"-v\", \"-n\"]\n        firewall_rules_output = subprocess.check_output(firewall_rules_cmd).decode(\"utf-8\")\n        firewall_rules = []\n        for line in firewall_rules_output.splitlines()[2:]:  # Skip header\n            cols = line.split()\n            if len(cols) > 7 and cols[0] == \"ACCEPT\" and cols[2] in [\"tcp\", \"udp\"]:\n                protocol = cols[2]\n                port = cols[5].split(\":\")[-1]\n                firewall_rules.append((protocol, port))\n    \n    # Compare open ports with firewall rules\n    vuln_present = False\n    for protocol, port in open_ports:\n        if (protocol, port) not in firewall_rules:\n            print(f\"Open {protocol} port {port} lacks a corresponding firewall rule.\")\n            vuln_present = True\n    \n    return vuln_present\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability: Establish firewall rules for open ports without rules\"\"\"\n    \n    # Re-run the audit to identify open ports without rules\n    if not audit_vuln():\n        print(\"No open ports without firewall rules found.\")\n        return\n    \n    # Remediate (note: this re-runs the audit, so we'll reuse the open_ports variable)\n    for protocol, port in open_ports:\n        # Create a new firewall rule using the iptables command\n        remediation_cmd = [\"iptables\", \"-A\", \"INPUT\", \"-p\", protocol, \"--dport\", port, \"-m\", \"state\", \"--state\", \"NEW\", \"-j\", \"ACCEPT\"]\n        subprocess.check_call(remediation_cmd)\n        print(f\"Established firewall rule for {protocol} port {port}.\")\n    \n    # To improve this remediation, we could parse the output of the 'ss' command directly in Python\n    # using the `psutil` library, which provides a more Pythonic approach:\n    # for conn in psutil.net_connections(kind='inet'):\n    #     if conn.status == psutil.CONN_LISTEN and conn.laddr.ip!= '127.0.0.1':\n    #         protocol = \"tcp\" if conn.type == socket.SOCK_STREAM else \"udp\"\n    #         port = conn.laddr.port\n    #         #... (rest of the remediation logic)\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ip6tables default deny firewall policy",
    "id": "4.3.3.1",
    "type": "Automated",
    "start_page": 488,
    "end_page": 490,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A default deny all policy on connections ensures that any unconfigured network usage will be rejected. Note:  - Changing firewall settings while connected over network can result in being locked out of the system  - Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit_details": "Run the following command and verify that the policy for the INPUT, OUTPUT, and FORWARD chains is DROP or REJECT:\n\n# ip6tables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)\n\n**-OR-**\nVerify IPv6 is disabled:\nRun the following script. Output will confirm if IPv6 is enabled on the system.\n\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n}",
    "audit_code": "# ip6tables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)\n\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n}",
    "remediation_details": "**IF IPv6 is enabled on your system:**\nRun the following commands to implement a default DROP policy:\n\n# ip6tables -P INPUT DROP\n# ip6tables -P OUTPUT DROP\n# ip6tables -P FORWARD DROP",
    "remediation_code": "# ip6tables -P INPUT DROP\n# ip6tables -P OUTPUT DROP\n# ip6tables -P FORWARD DROP",
    "python_script": "import subprocess\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the default ip6tables policy\"\"\"\n    # Check if IPv6 is disabled\n    ipv6_disabled_path = pathlib.Path(\"/sys/module/ipv6/parameters/disable\")\n    if ipv6_disabled_path.exists():\n        with ipv6_disabled_path.open() as f:\n            if f.read().strip() == \"0\":\n                print(\" - IPv6 is not enabled on the system (audit passed due to IPv6 being disabled)\")\n                return True\n\n    # Check ip6tables policies\n    chains = [\"INPUT\", \"OUTPUT\", \"FORWARD\"]\n    for chain in chains:\n        output = subprocess.check_output([\"ip6tables\", \"-L\", chain, \"-n\"]).decode()\n        if \"policy DROP\" not in output and \"policy REJECT\" not in output:\n            print(f\" - {chain} chain policy is not set to DROP or REJECT\")\n            return False\n    print(\" - All chains (INPUT, OUTPUT, FORWARD) have a policy of DROP or REJECT\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the default ip6tables policy\"\"\"\n    # Check if IPv6 is enabled before attempting remediation\n    ipv6_disabled_path = pathlib.Path(\"/sys/module/ipv6/parameters/disable\")\n    if ipv6_disabled_path.exists():\n        with ipv6_disabled_path.open() as f:\n            if f.read().strip()!= \"0\":\n                print(\" - IPv6 is not enabled on the system (no remediation needed)\")\n                return\n\n    # Set default policies to DROP\n    chains = [\"INPUT\", \"OUTPUT\", \"FORWARD\"]\n    for chain in chains:\n        subprocess.run([\"ip6tables\", \"-P\", chain, \"DROP\"])\n        print(f\"Set {chain} chain policy to DROP\")"
  },
  {
    "name": "Ensure ip6tables loopback traffic is configured",
    "id": "4.3.3.2",
    "type": "Automated",
    "start_page": 491,
    "end_page": 493,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (::1).\n\nNote:  \n- Changing firewall settings while connected over network can result in being locked out of the system\n- Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (::1) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands and verify output includes the listed rules in order (packet and byte counts may differ):\n```\n# ip6tables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\npkts bytes target   prot opt in   out   source       \ndestination\n  0   0 ACCEPT   all   lo   *    ::/0         ::/0    \n  0   0 DROP    all   *   *    ::1         ::/0    \n# ip6tables -L OUTPUT -v -n\nChain OUTPUT (policy DROP 0 packets, 0 bytes)\npkts bytes target   prot opt in   out   source       \ndestination\n  0   0 ACCEPT   all   *   lo   ::/0         ::/0    \n\n```\n**-OR-**\nVerify IPv6 is disabled:\nRun the following script. Output will confirm if IPv6 is enabled on the system.\n```\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\\\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n} \n\n``",
    "audit_code": "# ip6tables -L INPUT -v -n\n# ip6tables -L OUTPUT -v -n",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# ip6tables -A INPUT -i lo -j ACCEPT\n# ip6tables -A OUTPUT -o lo -j ACCEPT\n# ip6tables -A INPUT -s ::1 -j DROP\n``",
    "remediation_code": "# ip6tables -A INPUT -i lo -j ACCEPT\n# ip6tables -A OUTPUT -o lo -j ACCEPT\n# ip6tables -A INPUT -s ::1 -j DROP\n",
    "python_script": "```python\nimport iptc\nimport os\n\ndef audit_vuln() -> bool:\n    # Check if IPv6 is enabled\n    ipv6_enabled = not os.path.exists('/sys/module/ipv6/parameters/disable') or \\\n                   '0' not in open('/sys/module/ipv6/parameters/disable').read()\n\n    if not ipv6_enabled:\n        print(\" - IPv6 is not enabled on the system\")\n        return True  # Compliance is implied if IPv6 is disabled\n\n    # Verify ip6tables rules\n    input_chain = iptc.Chain(iptc.Table(iptc.Table.IP6).auto_refresh, 'INPUT')\n    output_chain = iptc.Chain(iptc.Table(iptc.Table.IP6).auto_refresh, 'OUTPUT')\n\n    input_accept_lo = any(rule.in_interface == 'lo' and rule.target.name == 'ACCEPT' for rule in input_chain.rules)\n    output_accept_lo = any(rule.out_interface == 'lo' and rule.target.name == 'ACCEPT' for rule in output_chain.rules)\n    input_drop_from_loopback = any(rule.src == '::1' and rule.target.name == 'DROP' for rule in input_chain.rules)\n\n    if input_accept_lo and output_accept_lo and input_drop_from_loopback:\n        return True\n    else:\n        return False\n\ndef remediate_vuln() -> None:\n    table = iptc.Table(iptc.Table.IP6)\n\n    # Add INPUT rule to accept from loopback\n    input_chain = iptc.Chain(table, 'INPUT')\n    if not any(rule.in_interface == 'lo' and rule.target.name == 'ACCEPT' for rule in input_chain.rules):\n        rule = iptc.Rule()\n        rule.in_interface = 'lo'\n        rule.target = iptc.Target(rule, 'ACCEPT')\n        input_chain.append_rule(rule)\n        print(\"Added INPUT rule to accept traffic from loopback interface.\")\n\n    # Add OUTPUT rule to accept to loopback\n    output_chain = iptc.Chain(table, 'OUTPUT')\n    if not any(rule.out_interface == 'lo' and rule.target.name == 'ACCEPT' for rule in output_chain.rules):\n        rule = iptc.Rule()\n        rule.out_interface = 'lo'\n        rule.target = iptc.Target(rule, 'ACCEPT')\n        output_chain.append_rule(rule)\n        print(\"Added OUTPUT rule to accept traffic to loopback interface.\")\n\n    # Add INPUT rule to drop from ::1\n    if not any(rule.src == '::1' and rule.target.name == 'DROP' for rule in input_chain.rules):\n        rule = iptc.Rule()\n        rule.src = '::1'\n        rule.target = iptc.Target(rule, 'DROP')\n        input_chain.append_rule(rule)\n        print(\"Added INPUT rule to drop traffic from ::1.\")\n```\n**Note**: To use this script, you'll need to install the `python-iptables` library if it's not already installed. You can do this by running `pip install python-iptables`. Ensure you run the script with sufficient privileges to modify `ip6tables` rules. Also, remember the caution about potentially being locked out if changing firewall settings over a network connection."
  },
  {
    "name": "Ensure ip6tables firewall rules exist for all open ports",
    "id": "4.3.3.4",
    "type": "Automated",
    "start_page": 496,
    "end_page": 498,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic. Note: - Changing firewall settings while connected over network can result in being locked out of the system - Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well - The remediation command opens up the port to traffic from all sources. Consult iptables documentation and set any restrictions in compliance with site policy",
    "rationale": "Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.",
    "audit_details": "Run the following command to determine open ports: # ss -6tuln Netid State   Recv-Q Send-Q  Local Address:Port          Peer Address:Port udp  UNCONN   0   0          ::1:123               :::* udp  UNCONN   0   0          :::123               :::* tcp  LISTEN   0   128         :::22               :::* tcp  LISTEN   0   20         ::1:25               :::* Run the following command to determine firewall rules: # ip6tables -L INPUT -v -n Chain INPUT (policy DROP 0 packets, 0 bytes) pkts bytes target   prot opt in   out   source       destination  0   0 ACCEPT   all   lo   *    ::/0         ::/0    0   0 DROP    all   *   *    ::1         ::/0    0   0 ACCEPT   tcp   *   *    ::/0         ::/0        tcp dpt:22 state NEW Verify all open ports listening on non-localhost addresses have at least one firewall rule. The last line identified by the \"tcp dpt:22 state NEW\" identifies it as a firewall rule for new connections on tcp port 22. OR verify IPv6 is disabled: Run the following script. Output will confirm if IPv6 is disabled on the system. #!/usr/bin/bash output=\"\" grubfile=\"$(find -L /boot -name 'grub.cfg' -type f)\" [ -f \"$grubfile\" ] && ! grep \"^\\s*linux\" \"$grubfile\" | grep -vq ipv6.disable=1 && output=\"ipv6 disabled in grub config\" grep -Eqs \"^\\s*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\s*=\\s*1\\b\" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf && grep -Eqs \"^\\s*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\s*=\\s*1\\b\" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf && sysctl net.ipv6.conf.all.disable_ipv6 | grep -Eq \"^\\s*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\s*=\\s*1\\b\" && sysctl net.ipv6.conf.default.disable_ipv6 | grep -Eq \"^\\s*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\s*=\\s*1\\b\" && output=\"ipv6 disabled in sysctl config\" [ -n \"$output\" ] && echo -e \"\\n$output\" || echo -e \"\\n*** IPv6 is enabled on the system ***\"",
    "audit_code": "# ss -6tuln\n# ip6tables -L INPUT -v -n\n",
    "remediation_details": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections: # ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT",
    "remediation_code": "# ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure ip6tables firewall rules exist for all open ports\"\"\"\n    # Get open ports on non-loopback addresses\n    open_ports_output = subprocess.check_output(['ss', '-6tuln']).decode('utf-8')\n    open_ports = []\n    for line in open_ports_output.split('\\n')[1:]:  # Skip header\n        match = re.match(r'(udp|tcp)\\s+.*\\b::([0-9]+)\\b', line)\n        if match:\n            protocol, port = match.groups()\n            if port != '123' and port != '22' and port != '25':  # Ignore common services for demo\n                open_ports.append((protocol, int(port)))\n\n    # Retrieve current IPv6 firewall rules\n    firewall_rules_output = subprocess.check_output(['ip6tables', '-L', 'INPUT', '-v', '-n']).decode('utf-8')\n    existing_rules = {}\n    for line in firewall_rules_output.split('\\n'):\n        match = re.search(r'dpt:(\\d+) *(tcp|udp)', line)\n        if match:\n            port, protocol = int(match.group(1)), match.group(2)\n            existing_rules[(protocol, port)] = True\n\n    # Verify each open non-localhost port has a corresponding firewall rule\n    vuln_exists = False\n    for protocol, port in open_ports:\n        if (protocol, port) not in existing_rules:\n            print(f\"Missing firewall rule for {protocol.upper()} port {port}\")\n            vuln_exists = True\n\n    return vuln_exists\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Add ip6tables rules for open ports without rules\"\"\"\n    open_ports_output = subprocess.check_output(['ss', '-6tuln']).decode('utf-8')\n    open_ports = []\n    for line in open_ports_output.split('\\n')[1:]:  # Skip header\n        match = re.match(r'(udp|tcp)\\s+.*\\b::([0-9]+)\\b', line)\n        if match:\n            protocol, port = match.groups()\n            if port != '123' and port != '22' and port != '25':  # Ignore common services for demo\n                open_ports.append((protocol, int(port)))\n\n    firewall_rules_output = subprocess.check_output(['ip6tables', '-L', 'INPUT', '-v', '-n']).decode('utf-8')\n    existing_rules = {}\n    for line in firewall_rules_output.split('\\n'):\n        match = re.search(r'dpt:(\\d+) *(tcp|udp)', line)\n        if match:\n            port, protocol = int(match.group(1)), match.group(2)\n            existing_rules[(protocol, port)] = True\n\n    for protocol, port in open_ports:\n        if (protocol, port) not in existing_rules:\n            command = f\"ip6tables -A INPUT -p {protocol} --dport {port} -m state --state NEW -j ACCEPT\"\n            subprocess.check_call(command, shell=True)\n            print(f\"Added firewall rule for {protocol.upper()} port {port} with command: {command}\")\n"
  },
  {
    "name": "Ensure permissions on /etc/ssh/sshd_config are configured",
    "id": "5.1.1",
    "type": "Automated",
    "start_page": 502,
    "end_page": 504,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The file /etc/ssh/sshd_config, and files ending in .conf in the /etc/ssh/sshd_config.d directory, contain configuration specifications for sshd.",
    "rationale": "Configuration specifications for sshd need to be protected from unauthorized changes by non-privileged users.",
    "audit_details": "Run the following script and verify /etc/ssh/sshd_config and files ending in .conf in the /etc/ssh/sshd_config.d directory are:\n\n - Mode 0600 or more restrictive\n - Owned by the root user\n - Group owned by the group root.\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  perm_mask='0177' && maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n  SSHD_FILES_CHK()\n  {\n   while IFS=: read -r l_mode l_user l_group; do\n     l_out2=\"\"\n     [ $(( $l_mode & $perm_mask )) -gt 0 ] && l_out2=\"$l_out2\\n - Is mode: \\\"$l_mode\\\" should be: \\\"$maxperm\\\" or more restrictive\"\n     [ \"$l_user\" != \"root\" ] && l_out2=\"$l_out2\\n - Is owned by \\\"$l_user\\\" should be owned by \\\"root\\\"\"\n     [ \"$l_group\" != \"root\" ] && l_out2=\"$l_out2\\n - Is group owned by \\\"$l_user\\\" should be group owned by \\\"root\\\"\"\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\":$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\":\\n - Correct: mode ($l_mode), owner ($l_user), and group owner ($l_group) configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  [ -e \"/etc/ssh/sshd_config\" ] && l_file=\"/etc/ssh/sshd_config\" && SSHD_FILES_CHK\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \"$l_file\" ] && SSHD_FILES_CHK\n  done < <(find -L /etc/ssh/sshd_config.d -type f \\( -perm /077 -o ! -user root -o ! -group root \\) -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\"\n  fi\n}",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  perm_mask='0177' && maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n  SSHD_FILES_CHK()\n  {\n   while IFS=: read -r l_mode l_user l_group; do\n     l_out2=\"\"\n     [ $(( $l_mode & $perm_mask )) -gt 0 ] && l_out2=\"$l_out2\\n - Is mode: \\\"$l_mode\\\" should be: \\\"$maxperm\\\" or more restrictive\"\n     [ \"$l_user\" != \"root\" ] && l_out2=\"$l_out2\\n - Is owned by \\\"$l_user\\\" should be owned by \\\"root\\\"\"\n     [ \"$l_group\" != \"root\" ] && l_out2=\"$l_out2\\n - Is group owned by \\\"$l_user\\\" should be group owned by \\\"root\\\"\"\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\":$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\":\\n - Correct: mode ($l_mode), owner ($l_user), and group owner ($l_group) configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  [ -e \"/etc/ssh/sshd_config\" ] && l_file=\"/etc/ssh/sshd_config\" && SSHD_FILES_CHK\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \"$l_file\" ] && SSHD_FILES_CHK\n  done < <(find -L /etc/ssh/sshd_config.d -type f \\( -perm /077 -o ! -user root -o ! -group root \\) -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to set ownership and permissions on /etc/ssh/sshd_config and files ending in .conf in the /etc/ssh/sshd_config.d directory:\n#!/usr/bin/env bash\n{\n  chmod u-x,og-rwx /etc/ssh/sshd_config\n  chown root:root /etc/ssh/sshd_config\n  while IFS= read -r -d $'\\0' l_file; do\n   if [ -e \"$l_file\" ]; then\n     chmod u-x,og-rwx \"$l_file\"\n     chown root:root \"$l_file\"\n   fi\n  done < <(find /etc/ssh/sshd_config.d -type f -print0 2>/dev/null)\n}",
    "remediation_code": "#!/usr/bin/env bash\n{\n  chmod u-x,og-rwx /etc/ssh/sshd_config\n  chown root:root /etc/ssh/sshd_config\n  while IFS= read -r -d $'\\0' l_file; do\n   if [ -e \"$l_file\" ]; then\n     chmod u-x,og-rwx \"$l_file\"\n     chown root:root \"$l_file\"\n   fi\n  done < <(find /etc/ssh/sshd_config.d -type f -print0 2>/dev/null)\n}",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    # Define the target files and directories\n    sshd_config = \"/etc/ssh/sshd_config\"\n    sshd_config_d = \"/etc/ssh/sshd_config.d/\"\n    \n    # Function to check a single file\n    def check_file(filename):\n        try:\n            # Get the file stats\n            file_stat = os.stat(filename)\n            # Check mode\n            if file_stat.st_mode & 0o177 != 0:\n                print(f\"Insecure mode ({oct(file_stat.st_mode)[2:]}) for file: {filename}. Should be 0600 or more restrictive.\")\n                return False\n            # Check owner and group\n            if file_stat.st_uid != pwd.getpwnam(\"root\").pw_uid or file_stat.st_gid != grp.getgrnam(\"root\").gr_gid:\n                print(f\"Incorrect ownership for file: {filename}. Should be owned by root:root.\")\n                return False\n            # If all checks pass\n            print(f\"File: {filename}: Correct: mode ({oct(file_stat.st_mode)[2:]}), owner ({pwd.getpwuid(file_stat.st_uid).pw_name}), and group owner ({grp.getgrgid(file_stat.st_gid).gr_name}) configured\")\n            return True\n        except FileNotFoundError:\n            print(f\"File not found: {filename}\")\n            return False\n    \n    # Check sshd_config\n    if not check_file(sshd_config):\n        return False\n    \n    # Check .conf files in sshd_config.d\n    for filename in [f for f in os.listdir(sshd_config_d) if f.endswith(\".conf\")]:\n        filepath = os.path.join(sshd_config_d, filename)\n        if not os.path.isfile(filepath):  # Ensure it's a file\n            continue\n        if not check_file(filepath):\n            return False\n    \n    # If all checks pass\n    return True\n\ndef remediate_vuln() -> None:\n    # Define the target files and directories\n    sshd_config = \"/etc/ssh/sshd_config\"\n    sshd_config_d = \"/etc/ssh/sshd_config.d/\"\n    \n    # Function to remediate a single file\n    def remediate_file(filename):\n        try:\n            # Set mode to 0600\n            os.chmod(filename, 0o600)\n            print(f\"Set mode to 0600 for: {filename}\")\n            # Set ownership to root:root\n            os.chown(filename, pwd.getpwnam(\"root\").pw_uid, grp.getgrnam(\"root\").gr_gid)\n            print(f\"Set ownership to root:root for: {filename}\")\n        except FileNotFoundError:\n            print(f\"File not found during remediation: {filename}\")\n    \n    # Remediate sshd_config\n    remediate_file(sshd_config)\n    \n    # Remediate .conf files in sshd_config.d\n    for filename in [f for f in os.listdir(sshd_config_d) if f.endswith(\".conf\")]:\n        filepath = os.path.join(sshd_config_d, filename)\n        if not os.path.isfile(filepath):  # Ensure it's a file\n            continue\n        remediate_file(filepath)\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"\\n- Audit Result:\\n *** PASS ***\")\n    else:\n        print(\"\\n- Audit Result:\\n ** FAIL **\")\n        response = input(\"Remediate? (y/n): \")\n        if response.lower() == 'y':\n            remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on SSH private host key files are configured",
    "id": "5.1.2",
    "type": "Automated",
    "start_page": 505,
    "end_page": 508,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "An SSH private key is one of two files used in SSH public key authentication. In this authentication method, the possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.",
    "rationale": "If an unauthorized user obtains the private SSH host key file, the host could be impersonated",
    "audit_details": "Run the following script to verify SSH private host key files are owned by the root user and either:\n\n- owned by the group root and mode 0600 or more restrictive\n\n### - OR  \n- owned by the group designated to own openSSH private keys and mode 0640 or more restrictive",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_ssh_group_name=\"$(awk -F: '($1 ~ /^(ssh_keys|_?ssh)$/) {print $1} /etc/group)\"\n  FILE_CHK()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     [ \"l_file_group\" = \"$l_ssh_group_name\" ] && l_pmask=\"0137\" || l_pmask=\"0177\"\n     l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n     fi\n     if [ \"$l_file_owner\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\"\n     fi\n     if [[ ! \"$l_file_group\" =~ ($l_ssh_group_name|root) ]]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"$l_ssh_group_name\\\" or \\\"root\\\"\"\n     fi\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?private\\h+key\\b' && FILE_CHK\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH private keys found\"\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured *:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to set mode, ownership, and group on the private SSH host key files:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_ssh_group_name=\"$(awk -F: '($1 ~ /^(ssh_keys|_?ssh)$/) {print $1} /etc/group)\"\n  FILE_ACCESS_FIX()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     echo \"File: \\\"$l_file\\\" mode: \\\"$l_file_mode\\\" owner \\\"$l_file_own\\\" group \\\"$l_file_group\\\"\"\n     l_out2=\"\"\n     [ \"l_file_group\" = \"$l_ssh_group_name\" ] && l_pmask=\"0137\" || l_pmask=\"0177\"\n     l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\\n  - updating to mode: \\:\"$l_maxperm\\\"\"\n      [ \"l_file_group\" = \"$l_ssh_group_name\" ] && chmod u-x,g-wx,o-rwx \"$l_file\" || chmod u-x,go-rwx\n     fi\n     if [ \"$l_file_owner\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\\n  - Changing ownership to \\\"root\\\"\"\n      chown root \"$l_file\"\n     fi\n     if [[ ! \"$l_file_group\" =~ ($l_ssh_group_name|root) ]]; then\n      [ -n \"$l_ssh_group_name\" ] && l_new_group=\"$l_ssh_group_name\" || l_new_group=\"root\"\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"$l_ssh_group_name\\\" or \\\"root\\\"\\n  - Changing group ownership to \\\"$l_new_group\\\"\"\n      chgrp \"$l_new_group\" \"$l_file\"\n     fi\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?private\\h+key\\b' && FILE_ACCESS_FIX\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- No access changes required\\n\"\n  else\n   echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n  fi\n}",
    "python_script": "\nimport os\nimport stat\nimport grp\nimport pwd\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit SSH private host key file permissions, ownership, and group ownership.\"\"\"\n    ssh_group_name = next((g.gr_name for g in grp.getgrall() if g.gr_name in ['ssh_keys', 'ssh']), None)\n    audit_passed = True\n    \n    for root, dirs, files in os.walk('/etc/ssh'):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if os.access(file_path, os.R_OK) and 'openssh' in file and 'private' in file:\n                file_stat = os.stat(file_path)\n                owner = pwd.getpwuid(file_stat.st_uid).pw_name\n                group = grp.getgrgid(file_stat.st_gid).gr_name\n                permissions = stat.filemode(file_stat.st_mode)\n                \n                if owner!= 'root':\n                    print(f\"File: \\\"{file_path}\\\" - Owned by: \\\"{owner}\\\" should be owned by \\\"root\\\"\")\n                    audit_passed = False\n                \n                if group not in [ssh_group_name, 'root'] if ssh_group_name else [None, 'root']:\n                    print(f\"File: \\\"{file_path}\\\" - Owned by group \\\"{group}\\\" should be group owned by: \\\"{ssh_group_name}\\\" or \\\"root\\\"\")\n                    audit_passed = False\n                \n                if (group == ssh_group_name and permissions not in ['rw-r-----', 'rw-------']) or (group!= ssh_group_name and permissions not in ['rw-------']):\n                    print(f\"File: \\\"{file_path}\\\" - Mode: \\\"{permissions}\\\" should be more restrictive (e.g., 'rw-r-----' for {ssh_group_name} group or 'rw-------' for root group)\")\n                    audit_passed = False\n                \n                if audit_passed:\n                    print(f\"File: \\\"{file_path}\\\" - Correct: mode: \\\"{permissions}\\\", owner: \\\"{owner}\\\", and group owner: \\\"{group}\\\" configured\")\n    \n    return audit_passed\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate SSH private host key file permissions, ownership, and group ownership issues.\"\"\"\n    ssh_group_name = next((g.gr_name for g in grp.getgrall() if g.gr_name in ['ssh_keys', 'ssh']), None)\n    root_uid = pwd.getpwnam('root').pw_uid\n    root_gid = grp.getgrnam('root').gr_gid\n    ssh_gid = grp.getgrnam(ssh_group_name).gr_gid if ssh_group_name else root_gid\n    \n    for root, dirs, files in os.walk('/etc/ssh'):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if os.access(file_path, os.R_OK) and 'openssh' in file and 'private' in file:\n                file_stat = os.stat(file_path)\n                owner = pwd.getpwuid(file_stat.st_uid).pw_name\n                group = grp.getgrgid(file_stat.st_gid).gr_name\n                \n                if owner!= 'root':\n                    os.chown(file_path, root_uid, -1)\n                    print(f\"Changed ownership of \\\"{file_path}\\\" to \\\"root\\\"\")\n                \n                if (group not in [ssh_group_name, 'root'] if ssh_group_name else [None, 'root']):\n                    os.chown(file_path, -1, ssh_gid if ssh_group_name else root_gid)\n                    print(f\"Changed group ownership of \\\"{file_path}\\\" to \\\"{ssh_group_name}\\\"\" if ssh_group_name else \"root\")\n                \n                if (group == ssh_group_name and oct(file_stat.st_mode & 0o777) not in ['0o640', '0o600']) or (group!= ssh_group_name and oct(file_stat.st_mode & 0o777)!= '0o600'):\n                    os.chmod(file_path, 0o640 if group == ssh_group_name else 0o600)\n                    print(f\"Updated permissions of \\\"{file_path}\\\" to {'rw-r-----' if group == ssh_group_name else 'rw-------'}\")\n"
  },
  {
    "name": "Ensure permissions on SSH public host key files are configured",
    "id": "5.1.3",
    "type": "Automated",
    "start_page": 509,
    "end_page": 512,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key that corresponds to a private key will be able to authenticate successfully.",
    "rationale": "If a public host key file is modified by an unauthorized user, the SSH service may be compromised.",
    "audit_details": "Run the following command and verify Access does not grant write or execute permissions to group or other for all returned files: Run the following script to verify SSH public host key files are mode 0644 or more restrictive, owned by the root user, and owned by the root group:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  FILE_CHK()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode:\n\\\"$l_maxperm\\\" or more restrictive\"\n     fi\n     if [ \"$l_file_owner\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned\nby \\\"root\\\"\"\n     fi\n     if [ \"$l_file_group\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be\ngroup owned by group: \\\"root\\\"\"\n     fi\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode:\n\\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner:\n\\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_CHK\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH public keys found\"\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured *:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to set mode, ownership, and group on the public SSH host key files:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  FILE_ACCESS_FIX()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode:\n\\\"$l_maxperm\\\" or more restrictive\\n  - updating to mode: \\:$l_maxperm\\\"\"\n      chmod u-x,go-wx\n     fi\n     if [ \"$l_file_owner\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned\nby \\\"root\\\"\\n  - Changing ownership to \\\"root\\\"\"\n      chown root \"$l_file\"\n     fi\n     if [ \"$l_file_group\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be\ngroup owned by: \\\"root\\\"\\n  - Changing group ownership to \\\"root\\\"\"\n      chgrp root \"$l_file\"\n     fi\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode:\n\\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner:\n\\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_ACCESS_FIX\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- No access changes required\\n\"\n  else\n   echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n  fi\n} Default Value:\n\n 644 0/root 0/root\n",
    "python_script": ""
  },
  {
    "name": "Ensure sshd access is configured",
    "id": "5.1.4",
    "type": "Automated",
    "start_page": 513,
    "end_page": 515,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are several options available to limit which users and group can access the system via SSH. It is recommended that at least one of the following options be leveraged:\n\n  - `AllowUsers:`\n\n`o` The AllowUsers variable gives the system administrator the option of allowing specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in from a particular host, the entry can be specified in the form of user@host.\n\n  - `AllowGroups:`\n\n`o` The AllowGroups variable gives the system administrator the option of allowing specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.\n\n  - `DenyUsers:`\n\n`o` The DenyUsers variable gives the system administrator the option of denying specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by specifically denying a user's access from a particular host, the entry can be specified in the form of user@host.\n\n  - `DenyGroups:`\n\n`o` The DenyGroups variable gives the system administrator the option of denying specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.",
    "rationale": "Restricting which users can remotely access the system via SSH will help ensure that only authorized users access the system.",
    "audit_details": "Run the following command and verify the output:\n\n```\n# sshd -T | grep -Pi -- '^\n\th*(allow|deny)(users|groups)\n\th+\n\th+'\n```\n\nVerify that the output matches at least one of the following lines:\n```\nallowusers <userlist>\n-ORallowgroups <grouplist>\n-ORdenyusers <userlist>\n-ORdenygroups <grouplist>\n```\nReview the list(s) to ensure included users and/or groups follow local site policy\n\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep -Pi -'^\n\th*(allow|deny)(users|groups)\n\th+\n\th+'\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain).",
    "audit_code": "# sshd -T | grep -Pi -- '^\n\\h*(allow|deny)(users|groups)\\h+\\H+'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set one or more of the parameters above any\n```\nInclude and Match set statements as follows:\nAllowUsers <userlist>\n - AND/OR AllowGroups <grouplist>\n```\n**Note: **\n  - First occurrence of a option takes precedence, Match set statements withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a .conf file in a\n```\n    Include directory.\n```\n  - It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user or group and forget to add it to the deny list.",
    "remediation_code": "Edit the /etc/ssh/sshd_config file to set AllowUsers <userlist> AND/OR AllowGroups <grouplist> as needed.",
    "python_script": "\nimport subprocess\nimport configparser\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit sshd access configuration\"\"\"\n    try:\n        output = subprocess.check_output(['sshd', '-T'])\n        output_lines = output.decode('utf-8').splitlines()\n        directives = [line.strip() for line in output_lines if line.startswith(('AllowUsers', 'AllowGroups', 'DenyUsers', 'DenyGroups'))]\n        for directive in directives:\n            parts = directive.split()\n            if len(parts) > 1 and parts[1]:  # Check if list is not empty\n                return True\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running sshd -T: {e}\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate sshd access configuration by adding AllowUsers and AllowGroups\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    backup_file = f'{config_file}.backup'\n    os.replace(config_file, backup_file)  # Create a backup by renaming the original file\n\n    config = configparser.ConfigParser()\n    config.read(backup_file)\n\n    # Add AllowUsers and AllowGroups if not present\n    if not config.has_section('sshd_config'):\n        config.add_section('sshd_config')\n    config.set('sshd_config', 'AllowUsers', 'authorized_user1 authorized_user2')  # Update with your authorized users\n    config.set('sshd_config', 'AllowGroups', 'authorized_group1 authorized_group2')  # Update with your authorized groups\n\n    with open(config_file, 'w') as new_config_file:\n        config.write(new_config_file)\n    print(f\"Updated {config_file} with AllowUsers and AllowGroups directives.\")\n    print(f\"Original file backed up to {backup_file}\")\n"
  },
  {
    "name": "Ensure sshd Banner is configured",
    "id": "5.1.5",
    "type": "Automated",
    "start_page": 516,
    "end_page": 517,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Banner parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed.",
    "rationale": "Banners are used to warn connecting users of the particular site's policy regarding connection. Presenting a warning message prior to the normal user login may assist the prosecution of trespassers on the computer system.",
    "audit_details": "Run the following command to verify Banner is set:\n\n```\n# sshd -T | grep -Pi -- '^banner\\h+/\\H+'\n```\n\n_Example:_\n```\nbanner /etc/issue.net\n```\n\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block _Example additional audit needed for a match block for the user sshuser:_\n\n```\n# sshd -T -C user=sshuser | grep -Pi -- '^banner\\h+/\\H+'\n```\n\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address),\n```\nlport (local port number), and rdomain (routing domain).\n``",
    "audit_code": "# sshd -T | grep -Pi -- '^banner\\h+/\\H+'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the Banner parameter above any Include and Match entries as follows:\n\n```\nBanner /etc/issue.net\n```\n\n**Note: First occurrence of a option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Banner /etc/issue.net",
    "python_script": "\nimport subprocess\nimport pathlib\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the SSHD banner is configured.\n    \n    Returns:\n        bool: True if the banner is set, False otherwise.\n    \"\"\"\n    try:\n        # Run the sshd command with extended test mode and grep for the banner setting\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        return bool(re.search(r'^banner\\s+\\S+', output, re.MULTILINE))\n    except subprocess.CalledProcessError as e:\n        print(f\"Audit command failed with return code {e.returncode}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the SSHD banner in the configuration file.\n    \"\"\"\n    config_file = pathlib.Path('/etc/ssh/sshd_config')\n    banner_line = 'Banner /etc/issue.net\\n'\n    include_match_found = False\n\n    # Read the file to check for Include or Match entries\n    lines = config_file.read_text(encoding='utf-8').splitlines(True)\n\n    # Insert the banner line above the first Include or Match entry, or at the beginning if none are found\n    for i, line in enumerate(lines):\n        if not include_match_found and (line.lstrip().startswith('Include') or line.lstrip().startswith('Match')):\n            include_match_found = True\n            lines.insert(i, banner_line)\n            break\n    if not include_match_found:\n        lines.insert(0, banner_line)\n\n    # Write the updated lines back to the file\n    config_file.write_text(''.join(lines), encoding='utf-8')\n    print(f\"Added 'Banner /etc/issue.net' to {config_file}\")\n```\n**Usage Example:**\n```python\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        print(\"Re-auditing after remediation...\")\n        if audit_vuln():\n            print(\"Vulnerability successfully remediated.\")\n        else:\n            print(\"Remediation unsuccessful.\")\n    else:\n        print(\"SSHD banner is already configured.\")\n"
  },
  {
    "name": "Ensure sshd Ciphers are configured",
    "id": "5.1.6",
    "type": "Automated",
    "start_page": 518,
    "end_page": 520,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This variable limits the ciphers that SSH can use during communication.\n\nNotes:\n\n  - Some organizations may have stricter requirements for approved ciphers.\n\n  - Ensure that ciphers used are in compliance with site policy.\n\n  - The only \"strong\" ciphers currently FIPS 140 compliant are:\n\n`o` [aes256-gcm@openssh.com](mailto:aes256-gcm@openssh.com)\n`o` [aes128-gcm@openssh.com](mailto:aes128-gcm@openssh.com)\n`o` aes256-ctr\n`o` aes192-ctr\n`o` aes128-ctr",
    "rationale": "Weak ciphers that are used for authentication to the cryptographic module cannot be relied upon to provide confidentiality or integrity, and system data may be compromised.\n\n  - The Triple DES ciphers, as used in SSH, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain clear text data via a birthday attack against a long-duration encrypted session, aka a \"Sweet32\" attack.\n\n  - Error handling in the SSH protocol; Client and Server, when using a block cipher algorithm in Cipher Block Chaining (CBC) mode, makes it easier for remote attackers to recover certain plain text data from an arbitrary block of cipher text in an SSH session via unknown vectors.",
    "audit_details": "Run the following command to verify none of the \"weak\" ciphers are being used:\n```\n# sshd -T | grep -Pi -'^ciphers\\h+\"?([^#\\n\\r]+,)?((3des|blowfish|cast128|aes(128|192|256))cbc|arcfour(128|256)?|rijndael-cbc@lysator\\.liu\\.se|chacha20poly1305@openssh\\.com)\\b'\n```\n**- IF - a line is returned, review the list of ciphers. If the line includes chacha20-**\n```\npoly1305@openssh.com, review CVE-2023-48795 and verify the system has been patched.\n```\nNo ciphers in the list below should be returned as they're considered \"weak\":\n```\n3des-cbc\naes128-cbc\naes192-cbc\naes256-cbc\n```\n",
    "audit_code": "# sshd -T | grep -Pi -'^ciphers\\h+\"?([^#\\n\\r]+,)?((3des|blowfish|cast128|aes(128|192|256))cbc|arcfour(128|256)?|rijndael-cbc@lysator\\.liu\\.se|chacha20poly1305@openssh\\.com)\\b'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file and add/modify the Ciphers line to contain a comma separated list of the site unapproved (weak) Ciphers preceded with a - above any\n```\nInclude entries:\n```\n_Example:_\n```\nCiphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,chacha20poly1305@openssh.com\n```\n**- IF -** `CVE-2023-48795 has been addressed, and it meets local site policy, chacha20-`\n```\npoly1305@openssh.com may be removed from the list of excluded ciphers.\n```\n**Note: First occurrence of an option takes precedence. If Include locations are enabled,**\nused, and order of precedence is understood in your environment, the entry may be\ncreated in a file in Include location.",
    "remediation_code": "# vim /etc/ssh/sshd_config\nCiphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,chacha20poly1305@openssh.com\n",
    "python_script": "\nimport pathlib\nimport re\n\n# Constants\nSSHD_CONFIG_FILE = pathlib.Path(\"/etc/ssh/sshd_config\")\nWEAK_CIPHERS = [\"3des-cbc\", \"aes128-cbc\", \"aes192-cbc\", \"aes256-cbc\", \"chacha20poly1305@openssh.com\"]\nRECOMMENDED_CIPHERS = \"-\".join([\"-\" + cipher for cipher in WEAK_CIPHERS])\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if weak SSH ciphers are configured\"\"\"\n    config_content = SSHD_CONFIG_FILE.read_text()\n    ciphers_line = re.search(r\"^Ciphers\\s+[^#]+\", config_content, re.MULTILINE)\n    if ciphers_line:\n        ciphers = ciphers_line.group().split()[1].split(\",\")\n        for weak_cipher in WEAK_CIPHERS:\n            if weak_cipher not in ciphers and f\"-{weak_cipher}\" not in ciphers:\n                # Weak cipher not explicitly excluded\n                return True\n    else:\n        # No Ciphers line found, assuming default config with weak ciphers\n        return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate weak SSH ciphers configuration\"\"\"\n    config_content = SSHD_CONFIG_FILE.read_text()\n    new_content = []\n    ciphers_line_found = False\n    \n    for line in config_content.splitlines():\n        if line.startswith(\"Ciphers\"):\n            new_content.append(f\"Ciphers {RECOMMENDED_CIPHERS}\")\n            ciphers_line_found = True\n            print(f\"Updated Ciphers line in {SSHD_CONFIG_FILE} to exclude weak ciphers.\")\n        else:\n            new_content.append(line)\n    \n    if not ciphers_line_found:\n        new_content.append(f\"Ciphers {RECOMMENDED_CIPHERS}\")\n        print(f\"Added Ciphers line to {SSHD_CONFIG_FILE} to exclude weak ciphers.\")\n    \n    SSHD_CONFIG_FILE.write_text(\"\\n\".join(new_content))\n    print(f\"Reloaded sshd service to apply changes.\")\n    # Using subprocess for the service reload, as it's not easily done with Python's stdlib\n    import subprocess\n    subprocess.run([\"systemctl\", \"reload\", \"sshd\"])\n"
  },
  {
    "name": "Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured",
    "id": "5.1.7",
    "type": "Automated",
    "start_page": 521,
    "end_page": 523,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "**Note: To clarify, the two settings described below are only meant for idle connections** from a protocol perspective and are not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never had, intentionally, the capability to drop idle users. In SSH versions before 8.2p1 there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users. This bug has been resolved in 8.2p1 and thus it can no longer be abused disconnect idle users.\n\nThe two options ClientAliveInterval and ClientAliveCountMax control the timeout of SSH sessions. Taken directly from man 5 sshd_config:\n\n  - `ClientAliveInterval Sets a timeout interval in seconds after which if no data` has been received from the client, sshd(8) will send a message through the encrypted channel to request a response from the client. The default is 0, indicating that these messages will not be sent to the client.\n\n  - `ClientAliveCountMax Sets the number of client alive messages which may be` sent without sshd(8) receiving any messages back from the client. If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating the session. It is important to note that the use of client alive messages is very different from TCPKeepAlive. The client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option enabled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on knowing when a connection has become unresponsive. The default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax disables connection termination.",
    "rationale": "In order to prevent resource exhaustion, appropriate values should be set for both `ClientAliveInterval and ClientAliveCountMax`. Specifically, looking at the source code, ClientAliveCountMax must be greater than zero in order to utilize the ability of SSH to drop idle connections. If connections are allowed to stay open indefinitely, this can potentially be used as a DDOS attack or simple resource exhaustion could occur over unreliable networks. The example set here is a 45 second timeout. Consult your site policy for network timeouts and apply as appropriate.",
    "audit_details": "Run the following command and verify ClientAliveInterval and ClientAliveCountMax are greater than zero:\n\n```\n# sshd -T | grep -Pi -- '(clientaliveinterval|clientalivecountmax)'\n```\n\n_Example Output:_\n```\nclientaliveinterval 15\nclientalivecountmax 3\n```\n**- IF -** `Match set statements are used in your environment, specify the connection parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep -Pi -'(clientaliveinterval|clientalivecountmax)'\n```\n**Note: If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain).",
    "audit_code": "sshd -T | grep -Pi -- '(clientaliveinterval|clientalivecountmax)'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the ClientAliveInterval and ClientAliveCountMax parameters above any Include and Match entries according to site policy.\n_Example:_\n```\nClientAliveInterval 15\nClientAliveCountMax 3\n```\n**Note: First occurrence of a option takes precedence, Match set statements notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "ClientAliveInterval 15\nClientAliveCountMax 3",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit sshd config for ClientAliveInterval and ClientAliveCountMax\"\"\"\n    try:\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        pattern = r'(clientaliveinterval|clientalivecountmax)\\s+(\\d+)'\n        matches = re.findall(pattern, output, re.IGNORECASE)\n        if len(matches) != 2:\n            return False\n        interval, count_max = [int(match[1]) for match in matches]\n        return interval > 0 and count_max > 0\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running sshd -T: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate sshd config by setting ClientAliveInterval and ClientAliveCountMax\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    temp_file = '/etc/ssh/sshd_config.tmp'\n    settings_added = False\n\n    try:\n        with open(config_file, 'r') as file:\n            lines = file.readlines()\n\n        # Insert settings above any Include or Match entries\n        insert_index = next((i for i, line in enumerate(lines) if line.lstrip().startswith(('Include', 'Match'))), len(lines))\n        lines.insert(insert_index, 'ClientAliveInterval 15\\n')\n        lines.insert(insert_index + 1, 'ClientAliveCountMax 3\\n')\n        settings_added = True\n\n        with open(temp_file, 'w') as temp:\n            temp.writelines(lines)\n\n        # Replace original file with temporary file\n        os.replace(temp_file, config_file)\n        print(\"Updated /etc/ssh/sshd_config with ClientAliveInterval and ClientAliveCountMax settings.\")\n    except OSError as e:\n        print(f\"Error modifying {config_file}: {e}\")\n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n        if settings_added:\n            print(\"Reverting changes...\")\n            # Revert changes if an error occurred after modifying the file\n            with open(temp_file, 'w') as temp, open(config_file, 'r') as original:\n                temp.writelines(original.readlines())\n            os.replace(temp_file, config_file)\n"
  },
  {
    "name": "Ensure sshd DisableForwarding is enabled",
    "id": "5.1.8",
    "type": "Automated",
    "start_page": 524,
    "end_page": 526,
    "profiles": [
      "level-1-workstation",
      "level-2-server"
    ],
    "description": "The DisableForwarding parameter disables all forwarding features, including X11, sshagent(1), TCP and StreamLocal. This option overrides all other forwarding-related options and may simplify restricted configurations.\n\n  - X11Forwarding provides the ability to tunnel X11 traffic through the connection to enable remote graphic connections.\n\n  - ssh-agent is a program to hold private keys used for public key authentication. Through use of environment variables the agent can be located and automatically used for authentication when logging in to other machines using ssh.\n\n  - SSH port forwarding is a mechanism in SSH for tunneling application ports from the client to the server, or servers to clients. It can be used for adding encryption to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening backdoors into the internal network from their home machines.",
    "rationale": "Disable X11 forwarding unless there is an operational requirement to use X11 applications directly. There is a small risk that the remote X11 servers of users who are logged in via SSH with X11 forwarding could be compromised by other users on the X11 server. Note that even if X11 forwarding is disabled, users can always install their own forwarders.\n\nanyone with root privilege on the the intermediate server can make free use of ssh-agent to authenticate them to other servers\n\nLeaving port forwarding enabled can expose the organization to security risks and backdoors. SSH connections are protected with strong encryption. This makes their contents invisible to most deployed network monitoring and traffic filtering solutions. This invisibility carries considerable risk potential if it is used for malicious purposes such as data exfiltration. Cybercriminals or malware could exploit SSH to hide their unauthorized communications, or to exfiltrate stolen data from the target network.",
    "audit_details": "Run the following command to verify DisableForwarding is set to yes: \n```\n# sshd -T | grep -i disableforwarding\ndisableforwarding yes\n```\n",
    "audit_code": "sshd -T | grep -i disableforwarding",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the DisableForwarding parameter to yes above any Include entry as follows:\n```\nDisableForwarding yes\n```\n**Note: First occurrence of a option takes precedence. If Include locations are enabled,** used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Edit /etc/ssh/sshd_config to include: DisableForwarding yes",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if DisableForwarding is enabled in sshd config.\"\"\"\n    # Run sshd with the test flag and capture output\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    # Search for the DisableForwarding parameter\n    match = re.search(r'disableforwarding\\s+(yes|no)', output, re.IGNORECASE)\n    return match and match.group(1).lower() == 'yes'\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting DisableForwarding to yes in sshd_config.\"\"\"\n    config_path = '/etc/ssh/sshd_config'\n    # Read the file to check for existing Include entries\n    with open(config_path, 'r+') as file:\n        content = file.readlines()\n        # Find the first Include entry or the end of the file\n        include_index = next((i for i, line in enumerate(content) if line.startswith('Include')), len(content))\n        # Insert the DisableForwarding directive before the first Include entry or at the end\n        content.insert(include_index, 'DisableForwarding yes\\n')\n        # Seek back to the beginning of the file and write the updated content\n        file.seek(0)\n        file.writelines(content)\n        file.truncate()  # Remove any trailing content\n    print(f\"Added 'DisableForwarding yes' to {config_path}.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediation needed.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found. System is compliant.\")\n"
  },
  {
    "name": "Ensure sshd GSSAPIAuthentication is disabled",
    "id": "5.1.9",
    "type": "Automated",
    "start_page": 527,
    "end_page": 528,
    "profiles": [
      "level-1-workstation",
      "level-2-server"
    ],
    "description": "The GSSAPIAuthentication parameter specifies whether user authentication based on GSSAPI is allowed.",
    "rationale": "Allowing GSSAPI authentication through SSH exposes the system's GSSAPI to remote hosts, and should be disabled to reduce the attack surface of the system.",
    "audit_details": "Run the following command to verify GSSAPIAuthentication is set to no:\n```\n# sshd -T | grep gssapiauthentication\ngssapiauthentication no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep gssapiauthentication\n```\n**Note: If provided, any Match directives in the configuration file that would apply are**\napplied before the configuration is written to standard output. The connection\nparameters are supplied as keyword=value pairs and may be supplied in any order,\neither with multiple -C options or as a comma-separated list. The keywords are addr\n(source address), user (user), host (resolved source host name), laddr (local address),\nlport (local port number), and rdomain (routing domain)\n```\n",
    "audit_code": "# sshd -T | grep gssapiauthentication\ngssapiauthentication no\n# sshd -T -C user=sshuser | grep gssapiauthentication",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the GSSAPIAuthentication parameter to no above any Include and Match entries as follows:\n```\nGSSAPIAuthentication no\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "GSSAPIAuthentication no",
    "python_script": "\nimport subprocess\nimport configparser\nfrom pathlib import Path\n\ndef audit_vuln(match_blocks: dict = {}) -> bool:\n    \"\"\"Audit if GSSAPIAuthentication is disabled in SSHD config.\"\"\"\n    cmd = [\"sshd\", \"-T\"]\n    for match, value in match_blocks.items():\n        cmd.extend([f\"-C\", f\"{match}={value}\"])\n    cmd.append(\"|\")\n    cmd.extend([\"grep\", \"gssapiauthentication\"])\n    \n    result = subprocess.run(cmd, text=True, capture_output=True)\n    return \"gssapiauthentication no\" in result.stdout\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring GSSAPIAuthentication is set to no in SSHD config.\"\"\"\n    sshd_config = Path(\"/etc/ssh/sshd_config\")\n    config = configparser.ConfigParser()\n    config.optionxform = str  # Preserve case for options\n    \n    # Read the existing config, inserting our change at the top if not present\n    config.read(sshd_config)\n    if not config.has_section(\"\"):\n        config.add_section(\"\")\n    \n    # Ensure GSSAPIAuthentication is set to no above any Include and Match entries\n    config.set(\"\", \"GSSAPIAuthentication\", \"no\")\n    with sshd_config.open(\"w\") as config_file:\n        config.write(config_file, space_around_delimiters=False)\n    print(f\"Set GSSAPIAuthentication to no in {sshd_config}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    match_blocks = {\"user\": \"sshuser\"}  # Specify match blocks as needed\n    if not audit_vuln(match_blocks):\n        print(\"GSSAPIAuthentication is not disabled, remediating...\")\n        remediate_vuln()\n    else:\n        print(\"GSSAPIAuthentication is already disabled.\")\n"
  },
  {
    "name": "Ensure sshd HostbasedAuthentication is disabled",
    "id": "5.1.10",
    "type": "Automated",
    "start_page": 529,
    "end_page": 530,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The HostbasedAuthentication parameter specifies if authentication is allowed through trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with successful public key client host authentication.",
    "rationale": "Even though the .rhosts files are ineffective if support is disabled in /etc/pam.conf, disabling the ability to use .rhosts files in SSH provides an additional layer of protection.",
    "audit_details": "Run the following command to verify HostbasedAuthentication is set to no:\n```\n# sshd -T | grep hostbasedauthentication\nhostbasedauthentication no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep hostbasedauthentication\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), `lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep hostbasedauthentication\n# sshd -T -C user=sshuser | grep hostbasedauthentication",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the HostbasedAuthentication parameter to no above any Include and Match entries as follows:\n```\nHostbasedAuthentication no\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "# vi /etc/ssh/sshd_config\nHostbasedAuthentication no\n",
    "python_script": "\nimport configparser\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if HostbasedAuthentication is disabled in sshd config.\n    \n    Returns:\n        bool: True if HostbasedAuthentication is set to \"no\", False otherwise.\n    \"\"\"\n    config_path = '/etc/ssh/sshd_config'\n    try:\n        with open(config_path, 'r') as file:\n            for line in file:\n                if line.strip().lower().startswith('hostbasedauthentication'):\n                    return line.strip().split()[-1].lower() == 'no'\n    except FileNotFoundError:\n        print(f\"Error: {config_path} not found.\")\n        return False\n    # If not found explicitly set to 'no', assume it's enabled by default (for OpenSSH)\n    print(f\"HostbasedAuthentication is enabled (default) in {config_path}.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by ensuring HostbasedAuthentication is disabled in sshd config.\n    \"\"\"\n    config_path = '/etc/ssh/sshd_config'\n    config_content = []\n    insert_position = None\n    \n    try:\n        with open(config_path, 'r') as file:\n            for num, line in enumerate(file, 1):\n                config_content.append(line)\n                if not insert_position and (line.strip().lower().startswith('include') or line.strip().lower().startswith('match')):\n                    insert_position = num - 1\n                elif line.strip().lower().startswith('hostbasedauthentication'):\n                    if line.strip().split()[-1].lower()!= 'no':\n                        config_content[num-1] = 'HostbasedAuthentication no\\n'\n                    return  # Already set, exit early\n            if insert_position is None:\n                insert_position = len(config_content)\n        \n        # Set to 'no' if not explicitly configured\n        config_content.insert(insert_position, 'HostbasedAuthentication no\\n')\n        \n        with open(config_path, 'w') as file:\n            file.writelines(config_content)\n        print(f\"Set HostbasedAuthentication to 'no' in {config_path}.\")\n        \n        # Reload sshd service to apply changes\n        subprocess.run(['systemctl', 'reload', 'sshd'], check=True)\n        print(\"Reloaded sshd service to apply configuration changes.\")\n        \n    except Exception as e:\n        print(f\"Error remediating: {e}\")\n"
  },
  {
    "name": "Ensure sshd IgnoreRhosts is enabled",
    "id": "5.1.11",
    "type": "Automated",
    "start_page": 531,
    "end_page": 532,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.",
    "rationale": "Setting this parameter forces users to enter a password when authenticating with SSH.",
    "audit_details": "Run the following command to verify IgnoreRhosts is set to yes:\n```\n# sshd -T | grep ignorerhosts\nignorerhosts yes\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep ignorerhosts\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep ignorerhosts\n# sshd -T -C user=sshuser | grep ignorerhosts",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the IgnoreRhosts parameter to yes above any Include and Match entries as follows:\n```\nIgnoreRhosts yes\n```\n**Note: First occurrence of a option takes precedence, Match set statements** withstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Edit /etc/ssh/sshd_config and add:\nIgnoreRhosts yes",
    "python_script": "\nimport re\n\n# Configuration file path\nSSHD_CONFIG_FILE = '/etc/ssh/sshd_config'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if sshd IgnoreRhosts is enabled\"\"\"\n    try:\n        with open(SSHD_CONFIG_FILE, 'r') as file:\n            config_content = file.readlines()\n    except FileNotFoundError:\n        print(f\"Error: {SSHD_CONFIG_FILE} not found.\")\n        return False  # or raise, depending on your preference\n\n    # Check for Match directives ( warn if found, as we can't cover all scenarios)\n    if any(line.lstrip().startswith('Match') for line in config_content):\n        print(\"Warning: Match directives found. This audit might not be comprehensive.\")\n\n    # Check if IgnoreRhosts is set to yes before any Match or Include directives\n    ignore_rhosts_set = False\n    for line in config_content:\n        if line.lstrip().startswith('Match') or line.lstrip().startswith('Include'):\n            break\n        if line.lstrip().startswith('IgnoreRhosts') and 'yes' in line:\n            ignore_rhosts_set = True\n            break\n\n    return not ignore_rhosts_set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate sshd IgnoreRhosts vulnerability\"\"\"\n    try:\n        with open(SSHD_CONFIG_FILE, 'r+') as file:\n            content = file.readlines()\n            file.seek(0)\n            # Insert IgnoreRhosts yes at the top, skipping blank lines/comments\n            inserted = False\n            for line in content:\n                if line.lstrip() and not line.startswith('#'):\n                    if not inserted:\n                        file.write('IgnoreRhosts yes\\n')\n                        inserted = True\n                file.write(line)\n            if not inserted:  # If file was empty or only had comments/blanks\n                file.write('IgnoreRhosts yes\\n')\n            file.truncate()\n        print(f\"Added 'IgnoreRhosts yes' to the top of {SSHD_CONFIG_FILE}.\")\n    except Exception as e:\n        print(f\"Error remediating vulnerability: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure sshd KexAlgorithms is configured",
    "id": "5.1.12",
    "type": "Automated",
    "start_page": 533,
    "end_page": 535,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received.\n\nNotes:\n  - Kex algorithms have a higher preference the earlier they appear in the list\n  - Some organizations may have stricter requirements for approved Key exchange algorithms\n  - Ensure that Key exchange algorithms used are in compliance with site policy\n  - The only Key Exchange Algorithms currently FIPS 140 approved are:\n`o` ecdh-sha2-nistp256\n`o` ecdh-sha2-nistp384\n`o` ecdh-sha2-nistp521\n`o` diffie-hellman-group-exchange-sha256\n`o` diffie-hellman-group16-sha512\n`o` diffie-hellman-group18-sha512\n`o` diffie-hellman-group14-sha256",
    "rationale": "Key exchange methods that are considered weak should be removed. A key exchange method may be weak because too few bits are used, or the hashing algorithm is considered too weak. Using weak algorithms could expose connections to man-in-the-middle attacks.",
    "audit_details": "Run the following command to verify none of the \"weak\" Key Exchange algorithms are being used:\n```\n# sshd -T | grep -Pi -- 'kexalgorithms\\h+([^#\\n\\r]+,)?(diffie-hellman-group1sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\\b'\nNothing should be returned\n```\nThe following are considered \"weak\" Key Exchange Algorithms, and should not be used:\n```\ndiffie-hellman-group1-sha1\ndiffie-hellman-group14-sha1\ndiffie-hellman-group-exchange-sha1\n``",
    "audit_code": "# sshd -T | grep -Pi -- 'kexalgorithms\\h+([^#\\n\\r]+,)?(diffie-hellman-group1sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\\b'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file and add/modify the KexAlgorithms line to contain a comma separated list of the site unapproved (weak) KexAlgorithms preceded with a minus sign above any Include entries:\n_Example:_\n```\nKexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1\n```\n**Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.**",
    "remediation_code": "KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1",
    "python_script": "\nimport subprocess\nimport pathlib\nimport fileinput\n\n# Weak KexAlgorithms to disable\nWEAK_KEX_ALGS = [\"diffie-hellman-group1-sha1\", \"diffie-hellman-group14-sha1\", \"diffie-hellman-group-exchange-sha1\"]\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if any weak KexAlgorithms are enabled\"\"\"\n    # Run sshd in test mode and capture output\n    output = subprocess.check_output([\"sshd\", \"-T\"]).decode(\"utf-8\").splitlines()\n    \n    # Iterate over output lines and check for weak KexAlgorithms\n    for line in output:\n        if line.startswith(\"kexalgorithms\"):\n            algs = line.split()[1].split(\",\")\n            for alg in WEAK_KEX_ALGS:\n                if alg in algs:\n                    print(f\"Weak KexAlgorithm '{alg}' is enabled.\")\n                    return False\n    print(\"No weak KexAlgorithms found.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Disable weak KexAlgorithms in /etc/ssh/sshd_config\"\"\"\n    config_file = pathlib.Path(\"/etc/ssh/sshd_config\")\n    \n    # Create a backup of the original file\n    config_file_backup = config_file.with_suffix(\".orig\")\n    config_file.replace(config_file_backup)\n    print(f\"Created backup of original file: {config_file_backup}\")\n    \n    # Modify the configuration file\n    with fileinput.input(config_file, inplace=True) as file:\n        kex_algs_line_found = False\n        for line in file:\n            if line.strip().lower().startswith(\"kexalgorithms\"):\n                kex_algs_line_found = True\n                # Prepend weak KexAlgorithms with a minus sign\n                weak_algs_str = \",\".join(f\"-{alg}\" for alg in WEAK_KEX_ALGS)\n                if line.strip().endswith(\"\\n\"):\n                    line = f\"{weak_algs_str}\\n{line}\"\n                else:\n                    line = f\"{weak_algs_str}\\n{line}\\n\"\n            print(line, end=\"\")\n    \n    # If no KexAlgorithms line was found, add a new one at the top\n    if not kex_algs_line_found:\n        with config_file.open(\"r+\") as file:\n            content = file.read()\n            file.seek(0)\n            weak_algs_str = \",\".join(f\"-{alg}\" for alg in WEAK_KEX_ALGS)\n            file.write(f\"KexAlgorithms {weak_algs_str}\\n\" + content)\n    print(f\"Disabled weak KexAlgorithms in {config_file}\")\n"
  },
  {
    "name": "Ensure sshd LoginGraceTime is configured",
    "id": "5.1.13",
    "type": "Automated",
    "start_page": 536,
    "end_page": 537,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.",
    "rationale": "Setting the LoginGraceTime parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy.",
    "audit_details": "Run the following command and verify that output LoginGraceTime is between 1 and 60 seconds:\n\n```\n# sshd -T | grep logingracetime\nlogingracetime 60\n```\n",
    "audit_code": "sshd -T | grep logingracetime",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the LoginGraceTime parameter to 60 seconds or less above any Include entry as follows:\n\n```\nLoginGraceTime 60\n```\n\n**Note: First occurrence of a option takes precedence. If Include locations are enabled,** used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "sed -i 's/#LoginGraceTime.*/LoginGraceTime 60/' /etc/ssh/sshd_config",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit SSHD LoginGraceTime configuration\"\"\"\n    try:\n        # Run sshd in test mode to parse configuration\n        sshd_output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        \n        # Regular expression to find LoginGraceTime value\n        pattern = r'logingracetime\\s+(\\d+)'\n        match = re.search(pattern, sshd_output, re.IGNORECASE)\n        \n        if match:\n            logingracetime = int(match.group(1))\n            # Verify if LoginGraceTime is within the recommended range (1-60 seconds)\n            return 1 <= logingracetime <= 60\n        else:\n            print(\"LoginGraceTime not found in sshd configuration. Assuming vulnerable.\")\n            return False\n    \n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing SSHD configuration: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate SSHD LoginGraceTime configuration to 60 seconds or less\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    temp_file = '/etc/ssh/sshd_config.tmp'\n    desired_setting = 'LoginGraceTime 60\\n'\n    \n    try:\n        # Check if file exists\n        if not os.path.isfile(config_file):\n            print(f\"{config_file} not found. Cannot remediate.\")\n            return\n        \n        # Read the original file\n        with open(config_file, 'r') as original:\n            lines = original.readlines()\n        \n        # Prepend the desired setting to ensure precedence\n        lines.insert(0, desired_setting)\n        \n        # Write to a temporary file\n        with open(temp_file, 'w') as temp:\n            temp.writelines(lines)\n        \n        # Replace the original file with the updated one\n        os.replace(temp_file, config_file)\n        print(f\"Updated {config_file} with 'LoginGraceTime 60' at the beginning.\")\n    \n    except PermissionError:\n        print(f\"Permission denied to modify {config_file}. Remediation failed.\")\n    except Exception as e:\n        print(f\"Unexpected error during remediation: {e}\")\n"
  },
  {
    "name": "Ensure sshd LogLevel is configured",
    "id": "5.1.14",
    "type": "Automated",
    "start_page": 538,
    "end_page": 539,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "SSH provides several logging levels with varying amounts of verbosity. The DEBUG options are specifically not recommended other than strictly for debugging SSH communications. These levels provide so much data that it is difficult to identify important security information, and may violate the privacy of users.",
    "rationale": "The INFO level is the basic level that only records login activity of SSH users. In many situations, such as Incident Response, it is important to determine when a particular user was active on a system. The logout record can eliminate those users who disconnected, which helps narrow the field. The VERBOSE level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be logged. This information is important for SSH key management, especially in legacy environments.",
    "audit_details": "Run the following command and verify that output matches loglevel VERBOSE or loglevel INFO:\n# sshd -T | grep loglevel\nloglevel VERBOSE\n  - OR loglevel INFO\n\n- IF - Match set statements are used in your environment, specify the connection parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\nExample additional audit needed for a match block for the user sshuser:\n\n# sshd -T -C user=sshuser | grep loglevel\n\nNote: If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep loglevel\nloglevel VERBOSE\n  - OR loglevel INFO\n\n# sshd -T -C user=sshuser | grep loglevel",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the LogLevel parameter to VERBOSE or INFO above any Include and Match entries as follows:\nLogLevel VERBOSE\n  - OR LogLevel INFO\n\nNote: First occurrence of an option takes precedence, Match set statements notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "LogLevel VERBOSE\n  - OR LogLevel INFO\n",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln(match_directive=None) -> bool:\n    \"\"\"Audits the SSHD log level.\"\"\"\n    command = ['sshd', '-T']\n    if match_directive:\n        command.extend(['-C', match_directive])\n    \n    try:\n        output = subprocess.check_output(command).decode('utf-8')\n        return bool(re.search(r'loglevel (VERBOSE|INFO)', output))\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing vulnerability: {e}\")\n        return False\n\ndef remediate_vuln(log_level='VERBOSE') -> None:\n    \"\"\"Remediates the SSHD log level vulnerability.\"\"\"\n    if log_level not in ['VERBOSE', 'INFO']:\n        print(\"Invalid log level. Defaulting to VERBOSE.\")\n        log_level = 'VERBOSE'\n    \n    ssh_config_path = '/etc/ssh/sshd_config'\n    temp_config_path = ssh_config_path + '.tmp'\n    \n    try:\n        with open(ssh_config_path, 'r') as original, open(temp_config_path, 'w') as modified:\n            log_level_set = False\n            for line in original:\n                if line.startswith('LogLevel') and not log_level_set:\n                    modified.write(f'LogLevel {log_level}\\n')\n                    log_level_set = True\n                modified.write(line)\n                if not log_level_set and (line.startswith('Include') or line.startswith('Match')):\n                    modified.write(f'LogLevel {log_level}\\n')\n                    log_level_set = True\n            if not log_level_set:\n                modified.write(f'LogLevel {log_level}\\n')\n        \n        os.replace(temp_config_path, ssh_config_path)\n        print(f\"Set LogLevel to {log_level} in {ssh_config_path}.\")\n    except Exception as e:\n        print(f\"Error remediating vulnerability: {e}\")\n        if os.path.exists(temp_config_path):\n            os.remove(temp_config_path)\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    # For environments with Match directives, specify as needed:\n    # if not audit_vuln(match_directive=\"user=sshuser\"):\n    #     remediate_vuln()\n"
  },
  {
    "name": "Ensure sshd MACs are configured",
    "id": "5.1.15",
    "type": "Automated",
    "start_page": 540,
    "end_page": 542,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This variable limits the types of MAC algorithms that SSH can use during communication.",
    "rationale": "MD5 and 96-bit MAC algorithms are considered weak and have been shown to increase exploitability in SSH downgrade attacks. Weak algorithms continue to have a great deal of attention as a weak spot that can be exploited with expanded computing power. An attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the SSH tunnel and capture credentials and information.",
    "audit_details": "Run the following command to verify none of the \"weak\" MACs are being used:\n```\n# sshd -T | grep -Pi -- 'macs\\h+([^#\\n\\r]+,)?(hmac-md5|hmac-md5-96|hmacripemd160|hmac-sha1-96|umac-64@openssh\\.com|hmac-md5-etm@openssh\\.com|hmacmd5-96-etm@openssh\\.com|hmac-ripemd160-etm@openssh\\.com|hmac-sha1-96etm@openssh\\.com|umac-64-etm@openssh\\.com|umac-128-etm@openssh\\.com)\\b'\nNothing should be returned\n```\n**Note: Review CVE-2023-48795 and verify the system has been patched. If the system has not been patched, review the use of the Encrypt Then Mac (etm) MACs. The following are considered \"weak\" MACs, and should not be used:\n```\nhmac-md5\nhmac-md5-96\nhmac-ripemd160\nhmac-sha1-96\numac-64@openssh.com\nhmac-md5-etm@openssh.com\nhmac-md5-96-etm@openssh.com\nhmac-ripemd160-etm@openssh.com\nhmac-sha1-96-etm@openssh.com\numac-64-etm@openssh.com\numac-128-etm@openssh.com\n``",
    "audit_code": "# sshd -T | grep -Pi -- 'macs\\h+([^#\\n\\r]+,)?(hmac-md5|hmac-md5-96|hmacripemd160|hmac-sha1-96|umac-64@openssh\\.com|hmac-md5-etm@openssh\\.com|hmacmd5-96-etm@openssh\\.com|hmac-ripemd160-etm@openssh\\.com|hmac-sha1-96etm@openssh\\.com|umac-64-etm@openssh\\.com|umac-128-etm@openssh\\.com)\\b'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file and add/modify the MACs line to contain a comma separated list of the site unapproved (weak) MACs preceded with a - above any\n\nInclude entries:\n```\n_Example:_\n\nMACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmacripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64etm@openssh.com,umac-128-etm@openssh.com\n```\n**- IF -** `CVE-2023-48795 has not been reviewed and addressed, the following etm MACs` [should be added to the exclude list: hmac-sha1-etm@openssh.com,hmac-sha2-256-](mailto:hmac-sha1-etm@openssh.com) [etm@openssh.com,hmac-sha2-512-etm@openssh.com](mailto:hmac-sha2-256-etm@openssh.com) **Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "MACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac-64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmac-ripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64-etm@openssh.com,umac-128-etm@openssh.com",
    "python_script": "\nimport subprocess\nimport re\n\n# Define the weak MACs to exclude\nWEAK_MACS = [\n    \"hmac-md5\",\n    \"hmac-md5-96\",\n    \"hmac-ripemd160\",\n    \"hmac-sha1-96\",\n    \"umac-64@openssh.com\",\n    \"hmac-md5-etm@openssh.com\",\n    \"hmac-md5-96-etm@openssh.com\",\n    \"hmac-ripemd160-etm@openssh.com\",\n    \"hmac-sha1-96-etm@openssh.com\",\n    \"umac-64-etm@openssh.com\",\n    \"umac-128-etm@openssh.com\"\n]\n\n# Additional MACs to exclude if CVE-2023-48795 has not been addressed\nADDITIONAL_MACS_IF_UNPATCHED = [\n    \"hmac-sha1-etm@openssh.com\",\n    \"hmac-sha2-256-etm@openssh.com\",\n    \"hmac-sha2-512-etm@openssh.com\"\n]\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit SSH configuration for weak MACs.\"\"\"\n    try:\n        output = subprocess.check_output([\"sshd\", \"-T\"]).decode(\"utf-8\")\n        for line in output.splitlines():\n            if line.startswith(\"macs\"):\n                used_macs = line.split()[1].split(\",\")\n                for weak_mac in WEAK_MACS:\n                    if weak_mac in used_macs:\n                        print(f\"Detected weak MAC: {weak_mac}\")\n                        return False\n        return True\n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing 'sshd -T': {e}\")\n        return False\n\ndef remediate_vuln(unpatched_cve_2023_48795: bool = False) -> None:\n    \"\"\"Remediate weak MACs in SSH configuration.\"\"\"\n    macs_to_exclude = WEAK_MACS[:]\n    if unpatched_cve_2023_48795:\n        macs_to_exclude.extend(ADDITIONAL_MACS_IF_UNPATCHED)\n    \n    config_file = \"/etc/ssh/sshd_config\"\n    try:\n        with open(config_file, \"r+\") as file:\n            lines = file.readlines()\n            updated = False\n            for i, line in enumerate(lines):\n                if line.lstrip().startswith(\"MACs\"):\n                    lines[i] = f\"MACs {'-'.join(macs_to_exclude)}\\n\"\n                    updated = True\n                    break\n            if not updated:\n                lines.append(f\"MACs {'-'.join(macs_to_exclude)}\\n\")\n            file.seek(0)\n            file.writelines(lines)\n            file.truncate()\n        print(f\"Updated {config_file} to exclude weak MACs.\")\n    except IOError as e:\n        print(f\"Error updating {config_file}: {e}\")\n"
  },
  {
    "name": "Ensure sshd MaxAuthTries is configured",
    "id": "5.1.16",
    "type": "Automated",
    "start_page": 543,
    "end_page": 544,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.",
    "rationale": "Setting the MaxAuthTries parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. While the recommended setting is 4, set the number based on site policy.",
    "audit_details": "Run the following command and verify that MaxAuthTries is 4 or less:\n\n```\n# sshd -T | grep maxauthtries\nmaxauthtries 4\n```\n\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n\n```\n# sshd -T -C user=sshuser | grep maxauthtries\n```\n\n**Note: If provided, any Match directives in the configuration file that would apply are**\napplied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr\n(source address), user (user), host (resolved source host name), laddr (local address),\nlport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep maxauthtries\nmaxauthtries 4",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the MaxAuthTries parameter to 4 or less above any Include and Match entries as follows:\n\n```\nMaxAuthTries 4\n```\n\n**Note: First occurrence of an option takes precedence, Match set statements**\nwithstanding. If Include locations are enabled, used, and order of precedence is\nunderstood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "MaxAuthTries 4",
    "python_script": "\nimport subprocess\nimport configparser\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit MaxAuthTries configuration in sshd.\"\"\"\n    try:\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        for line in output.splitlines():\n            if line.startswith('maxauthtries'):\n                value = int(line.split()[-1])\n                return value <= 4\n    except Exception as e:\n        print(f\"Audit error: {e}\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate MaxAuthTries configuration in sshd_config.\"\"\"\n    sshd_config_path = '/etc/ssh/sshd_config'\n    \n    # Backup original file\n    if os.path.exists(sshd_config_path):\n        os.rename(sshd_config_path, f\"{sshd_config_path}.original\")\n        print(f\"Backed up {sshd_config_path} to {sshd_config_path}.original\")\n    \n    # Create a new sshd_config with the desired MaxAuthTries setting\n    with open(sshd_config_path, 'w') as new_file:\n        new_file.write(\"MaxAuthTries 4\\n\")\n        \n        # Append the original content, if any\n        if os.path.exists(f\"{sshd_config_path}.original\"):\n            with open(f\"{sshd_config_path}.original\", 'r') as original_file:\n                new_file.write(original_file.read())\n            print(f\"Inserted MaxAuthTries 4 at the top of {sshd_config_path}\")\n        else:\n            print(f\"Created {sshd_config_path} with MaxAuthTries 4\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure sshd MaxSessions is configured",
    "id": "5.1.17",
    "type": "Automated",
    "start_page": 545,
    "end_page": 546,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The MaxSessions parameter specifies the maximum number of open sessions permitted from a given connection.",
    "rationale": "To protect a system from denial of service due to a large number of concurrent sessions, use the rate limiting function of MaxSessions to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit_details": "Run the following command and verify that MaxSessions is 10 or less:\n```\n# sshd -T | grep -i maxsessions\nmaxsessions 10\n```\nRun the following command and verify the output:\n```\ngrep -Psi -- '^\\\\h*MaxSessions\\\n\\h+\"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf\nNothing should be returned\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep maxsessions\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep -i maxsessions\n# sshd -T -C user=sshuser | grep maxsessions",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the MaxSessions parameter to 10 or less above any Include and Match entries as follows:\n```\nMaxSessions 10\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "MaxSessions 10",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    # Check global sshd config for MaxSessions <= 10\n    global_config_output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    if not re.search(r'maxsessions\\s+(10|[0-9])\\b', global_config_output, re.IGNORECASE):\n        print(\"Global MaxSessions not set to 10 or less.\")\n        return False\n\n    # Verify no higher value is set in config files\n    config_files = ['/etc/ssh/sshd_config'] + [f for f in subprocess.check_output(['glob', '/etc/ssh/sshd_config.d/*.conf']).decode('utf-8').split()]\n    for file in config_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            if re.search(r'^\\s*MaxSessions\\s+(11|[2-9][0-9]|[1-9][0-9][0-9]+)\\b', content, re.MULTILINE):\n                print(f\"Higher MaxSessions value found in {file}.\")\n                return False\n\n    # Optional: Handling Match set statements (example with 'sshuser')\n    # For actual implementation, specific user handles should be dynamically checked or passed as args\n    # match_user_output = subprocess.check_output(['sshd', '-T', '-C', 'user=sshuser']).decode('utf-8')\n    # if not re.search(r'maxsessions\\s+(10|[0-9])\\b', match_user_output, re.IGNORECASE):\n    #     print(\"MaxSessions not set to 10 or less for match user 'sshuser'.\")\n    #     return False\n\n    print(\"MaxSessions configuration is secure.\")\n    return True\n\ndef remediate_vuln() -> None:\n    config_file = '/etc/ssh/sshd_config'\n    print(f\"Editing {config_file} to set MaxSessions to 10...\")\n\n    # Create a backup of the original file\n    backup_file = f\"{config_file}.backup\"\n    subprocess.run(['cp', config_file, backup_file])\n    print(f\"Created backup at {backup_file}.\")\n\n    # Insert MaxSessions 10 at the beginning of the file, above any Include or Match entries\n    with open(config_file, 'r+') as f:\n        content = f.readlines()\n        f.seek(0)\n        f.write(\"MaxSessions 10\\n\")  # Adding the required line at the top\n        for line in content:\n            if line.strip().lower().startswith((\"include\", \"match\")):\n                break\n            f.write(line)\n        f.truncate()  # Remove any remaining content after the insertion point\n        f.write(''.join(content[content.index(next((l for l in content if l.strip().lower().startswith((\"include\", \"match\"))), None)):]))\n\n    print(f\"Successfully set MaxSessions to 10 in {config_file}.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure sshd MaxStartups is configured",
    "id": "5.1.18",
    "type": "Automated",
    "start_page": 547,
    "end_page": 548,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.",
    "rationale": "To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit_details": "Run the following command to verify MaxStartups is 10:30:60 or more restrictive:\n```\n# sshd -T | awk '$1 ~ /^\\s*maxstartups/{split($2, a, \":\");{if(a[1] > 10 ||\na[2] > 30 || a[3] > 60) print $0}}'\n```\nNothing should be returned",
    "audit_code": "# sshd -T | awk '$1 ~ /^\\s*maxstartups/{split($2, a, \":\");{if(a[1] > 10 ||\na[2] > 30 || a[3] > 60) print $0}}'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the MaxStartups parameter to 10:30:60 or more restrictive above any Include entries as follows:\n```\nMaxStartups 10:30:60\n```",
    "remediation_code": "MaxStartups 10:30:60",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if MaxStartups is configured to 10:30:60 or more restrictive in sshd.\n    \n    Returns:\n    bool: True if configured correctly, False otherwise.\n    \"\"\"\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    maxstartups_match = re.search(r'^\\s*maxstartups\\s+([0-9]+):([0-9]+):([0-9]+)', output, re.MULTILINE)\n    if maxstartups_match:\n        min, rate, max = map(int, maxstartups_match.groups())\n        return (min, rate, max) <= (10, 30, 60)\n    return False  # If no match, consider it unconfigured\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate vulnerability by setting MaxStartups to 10:30:60 in /etc/ssh/sshd_config.\n    \"\"\"\n    config_path = '/etc/ssh/sshd_config'\n    temp_config_path = config_path + '.tmp'\n    \n    # Create a temporary file to write the new config\n    with open(config_path, 'r') as original, open(temp_config_path, 'w') as new_config:\n        maxstartups_set = False\n        for line in original:\n            if line.lstrip().startswith('MaxStartups') and not line.lstrip().startswith('#'):\n                new_config.write('MaxStartups 10:30:60\\n')  # Overwrite any existing setting\n                maxstartups_set = True\n            else:\n                new_config.write(line)\n        if not maxstartups_set:  # If no MaxStartups line found, append it\n            new_config.write('\\nMaxStartups 10:30:60\\n')\n    \n    # Replace the original config with the new one\n    os.replace(temp_config_path, config_path)\n    print(f\"Set MaxStartups to 10:30:60 in {config_path}\")\n    # Reload sshd service to apply changes (assuming systemd on Ubuntu 22.04)\n    subprocess.run(['systemctl', 'reload', 'ssh'])\n    print(\"Reloaded sshd service to apply configuration changes.\")\n"
  },
  {
    "name": "Ensure sshd PermitEmptyPasswords is disabled",
    "id": "5.1.19",
    "type": "Automated",
    "start_page": 549,
    "end_page": 550,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PermitEmptyPasswords parameter specifies if the SSH server allows login to accounts with empty password strings.",
    "rationale": "Disallowing remote shell access to accounts that have an empty password reduces the probability of unauthorized access to the system.",
    "audit_details": "Run the following command to verify PermitEmptyPasswords is set to no:\n```\n# sshd -T | grep permitemptypasswords\npermitemptypasswords no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep permitemptypasswords\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep permitemptypasswords\n# sshd -T -C user=sshuser | grep permitemptypasswords",
    "remediation_details": "Edit /etc/ssh/sshd_config and set the PermitEmptyPasswords parameter to no above any Include and Match entries as follows:\n```\nPermitEmptyPasswords no\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "PermitEmptyPasswords no",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if PermitEmptyPasswords is set to 'no' in sshd configuration.\n    \n    Returns:\n    bool: True if vulnerability is present (PermitEmptyPasswords is not 'no'), False otherwise.\n    \"\"\"\n    # Run sshd in test mode and capture output\n    sshd_output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    \n    # Check global PermitEmptyPasswords setting\n    global_setting = re.search(r'permitemptypasswords\\s+(.*)', sshd_output, re.IGNORECASE)\n    if global_setting and global_setting.group(1).strip().lower() != 'no':\n        return True\n    \n    # If Match blocks are used, this script doesn't automatically detect and test them.\n    # However, we inform the user to manually check as per the original audit_details.\n    print(\"**NOTE:** If your environment uses Match blocks, manually verify PermitEmptyPasswords for each using 'sshd -T -C <connection_params> | grep permitemptypasswords'\")\n    \n    # Assuming no Match blocks or they are manually verified, if we reach here, the global setting is secure.\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting PermitEmptyPasswords to 'no' in sshd_config.\n    \"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    new_config_content = ''\n    config_modified = False\n    \n    try:\n        with open(config_file, 'r') as file:\n            lines = file.readlines()\n            permit_empty_passwords_set = False\n            \n            for line in lines:\n                if line.strip().lower().startswith('permitemptypasswords'):\n                    permit_empty_passwords_set = True\n                    if line.strip().split()[1].lower() != 'no':\n                        new_config_content += 'PermitEmptyPasswords no\\n'\n                        config_modified = True\n                    else:\n                        new_config_content += line\n                elif not permit_empty_passwords_set and (line.strip().lower().startswith('include') or line.strip().lower().startswith('match')):\n                    new_config_content += 'PermitEmptyPasswords no\\n'  # Insert before the first Include or Match\n                    config_modified = True\n                    new_config_content += line\n                else:\n                    new_config_content += line\n                    \n            # If PermitEmptyPasswords is not found at all, add it at the end\n            if not permit_empty_passwords_set and not config_modified:\n                new_config_content += '\\nPermitEmptyPasswords no\\n'\n                config_modified = True\n                \n        if config_modified:\n            with open(config_file, 'w') as file:\n                file.write(new_config_content)\n            print(f\"Set 'PermitEmptyPasswords no' in {config_file}\")\n            \n            # Reload sshd service to apply changes (Ubuntu uses systemd by default)\n            subprocess.run(['systemctl', 'reload', 'ssh'])\n            print(\"Reloaded sshd service to apply configuration changes.\")\n            \n    except Exception as e:\n        print(f\"Remediation failed: {e}\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure sshd PermitRootLogin is disabled",
    "id": "5.1.20",
    "type": "Automated",
    "start_page": 551,
    "end_page": 552,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PermitRootLogin parameter specifies if the root user can log in using SSH. The default is prohibit-password.",
    "rationale": "Disallowing root logins over SSH requires system admins to authenticate using their own individual account, then escalating to root. This limits opportunity for nonrepudiation and provides a clear audit trail in the event of a security incident.",
    "audit_details": "Run the following command to verify PermitRootLogin is set to no:\n```\n# sshd -T | grep permitrootlogin\npermitrootlogin no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block _Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep permitrootlogin\n```\n\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), `lport (local port number), and rdomain (routing domain)``",
    "audit_code": "# sshd -T | grep permitrootlogin\n# sshd -T -C user=sshuser | grep permitrootlogin",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the PermitRootLogin parameter to no above any Include and Match entries as follows:\n```\nPermitRootLogin no\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "PermitRootLogin no",
    "python_script": "\nimport subprocess\nimport re\nfrom pathlib import Path\n\n# Constants\nSSHD_CONFIG_FILE = '/etc/ssh/sshd_config'\nPERMIT_ROOT_LOGIN_SETTING = 'PermitRootLogin no'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if PermitRootLogin is disabled\"\"\"\n    # Run sshd -T and capture output\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    \n    # Extract permitrootlogin value using regex\n    match = re.search(r'permitrootlogin\\s+(\\w+)', output)\n    \n    if match:\n        return match.group(1)!= 'no'\n    else:\n        # If permitrootlogin is not found, assume it's not explicitly set to no\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting PermitRootLogin to no in sshd_config\"\"\"\n    config_file = Path(SSHD_CONFIG_FILE)\n    \n    # Read existing config\n    lines = config_file.read_text().splitlines()\n    \n    # Find insertion point (above first Include or Match, or at the beginning)\n    insert_index = 0\n    for i, line in enumerate(lines):\n        if line.lstrip().startswith(('Include', 'Match')):\n            insert_index = i\n            break\n    \n    # Insert PermitRootLogin no at the determined position\n    lines.insert(insert_index, PERMIT_ROOT_LOGIN_SETTING)\n    \n    # Write updated config\n    config_file.write_text('\\n'.join(lines))\n    \n    print(f\"Set 'PermitRootLogin no' in {SSHD_CONFIG_FILE}\")\n"
  },
  {
    "name": "Ensure sshd PermitUserEnvironment is disabled",
    "id": "5.1.21",
    "type": "Automated",
    "start_page": 553,
    "end_page": 554,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PermitUserEnvironment option allows users to present environment options to the SSH daemon.",
    "rationale": "Permitting users the ability to set environment variables through the SSH daemon could potentially allow users to bypass security controls (e.g. setting an execution path that has SSH executing trojan'd programs)",
    "audit_details": "Run the following command to verify PermitUserEnviroment is set to no:\n```\n# sshd -T | grep permituserenvironment\npermituserenvironment no\n```\n",
    "audit_code": "sshd -T | grep permituserenvironment",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the PermitUserEnvironment parameter to no above any Include entries as follows:\n```\nPermitUserEnvironment no\n```\n**Note: First occurrence of an option takes precedence. If Include locations are enabled,** used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Edit the /etc/ssh/sshd_config file to set PermitUserEnvironment to no",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if PermitUserEnvironment is disabled in SSHD config.\"\"\"\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    match = re.search(r'permituserenvironment\\s+(.*)', output)\n    if match and match.group(1).strip().lower() == 'no':\n        return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring PermitUserEnvironment is set to no in /etc/ssh/sshd_config.\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    temp_file = '/etc/ssh/sshd_config.tmp'\n\n    with open(config_file, 'r') as file:\n        lines = file.readlines()\n\n    # Insert or modify PermitUserEnvironment before any Include entries\n    include_encountered = False\n    modified = False\n    with open(temp_file, 'w') as temp:\n        for line in lines:\n            if line.strip().lower().startswith('include'):\n                include_encountered = True\n            if not include_encountered and not modified:\n                temp.write('PermitUserEnvironment no\\n')\n                modified = True\n            temp.write(line)\n\n    if not modified:  # If we didn't insert it before Includes, append it\n        with open(temp_file, 'a') as temp:\n            temp.write('\\nPermitUserEnvironment no\\n')\n\n    print(f\"Updated PermitUserEnvironment to 'no' in {config_file}.\")\n    subprocess.check_call(['mv', temp_file, config_file])\n    subprocess.check_call(['service', 'ssh', 'reload'])  # Reload SSH service to apply changes\n    print(\"Reloaded SSH service to apply configuration changes.\")\n"
  },
  {
    "name": "Ensure sshd UsePAM is enabled",
    "id": "5.1.22",
    "type": "Automated",
    "start_page": 555,
    "end_page": 556,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The UsePAM directive enables the Pluggable Authentication Module (PAM) interface. If set to yes this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication directives in addition to PAM account and session module processing for all authentication types.",
    "rationale": "When usePAM is set to yes, PAM runs through account and session types properly. This is important if you want to restrict access to services based off of IP, time or other factors of the account. Additionally, you can make sure users inherit certain environment variables on login or disallow access to the server",
    "audit_details": "Run the following command to verify UsePAM is set to yes:\n```\n# sshd -T | grep -i usepam\nusepam yes\n``",
    "audit_code": "sshd -T | grep -i usepam",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the UsePAM parameter to yes above any\n```\nInclude entries as follows:\n```\nUsePAM yes\n``",
    "remediation_code": "Edit /etc/ssh/sshd_config",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if UsePAM is enabled in sshd config.\"\"\"\n    # Pythonic approach: Read and parse the sshd config file\n    config_file = '/etc/ssh/sshd_config'\n    try:\n        with open(config_file, 'r') as file:\n            for line in file:\n                if line.strip().lower().startswith('usepam'):\n                    return line.strip().split()[-1].lower()!= 'yes'\n    except FileNotFoundError:\n        print(f\"Error: {config_file} not found.\")\n        return True  # or raise an exception, depending on your preference\n\n    # If 'UsePAM' directive is not found, assume it's not enabled\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring UsePAM is set to yes in sshd config.\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    temp_file = config_file + '.tmp'\n\n    try:\n        with open(config_file, 'r') as original, open(temp_file, 'w') as modified:\n            usepam_set = False\n            for line in original:\n                if line.strip().lower().startswith('usepam'):\n                    modified.write('UsePAM yes\\n')\n                    usepam_set = True\n                elif not usepam_set and line.strip().lower().startswith('include'):\n                    modified.write('UsePAM yes\\n')\n                    usepam_set = True\n                modified.write(line)\n            if not usepam_set:\n                modified.write('UsePAM yes\\n')\n\n        os.replace(temp_file, config_file)\n        print(f\"Set UsePAM to yes in {config_file}.\")\n    except Exception as e:\n        if os.path.exists(temp_file):\n            os.remove(temp_file)\n        print(f\"Remediation failed: {e}\")\n"
  },
  {
    "name": "Ensure sudo is installed",
    "id": "5.2.1",
    "type": "Automated",
    "start_page": 558,
    "end_page": 559,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy.",
    "rationale": "sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. The security policy determines what privileges, if any, a user has to run sudo. The policy may require that users authenticate themselves with a password or another authentication mechanism. If authentication is required, sudo will exit if the user's password is not entered within a configurable time limit. This limit is policy-specific.",
    "audit_details": "Run the following command to verify that either sudo is installed:\n\n```bash\n# dpkg-query -s sudo &>/dev/null && echo \"sudo is installed\"\nsudo is installed\n```\n\n**- OR -**\n\nRun the following command to verify that either sudo-ldap is installed:\n\n```bash\n# dpkg-query -s sudo-ldap &>/dev/null && echo \"sudo-ldap is installed\"\nsudo-ldap is installed\n```",
    "audit_code": "# dpkg-query -s sudo &>/dev/null && echo \"sudo is installed\"\n# dpkg-query -s sudo-ldap &>/dev/null && echo \"sudo-ldap is installed\"",
    "remediation_details": "First determine if LDAP functionality is required. If so, then install sudo-ldap, else install sudo.\n\n_Example:_\n\n```bash\n# apt install sudo\n```",
    "remediation_code": "# apt install sudo",
    "python_script": "\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Check if sudo or sudo-ldap is installed.\n    \n    Returns:\n        bool: True if vulnerability is present (neither sudo nor sudo-ldap is installed), False otherwise.\n    \"\"\"\n    try:\n        # Check if either sudo or sudo-ldap is installed\n        subprocess.check_output(['dpkg-query', '-s', 'sudo'])\n        return False\n    except subprocess.CalledProcessError:\n        try:\n            subprocess.check_output(['dpkg-query', '-s', 'sudo-ldap'])\n            return False\n        except subprocess.CalledProcessError:\n            return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Install sudo or sudo-ldap based on the requirement.\n    \"\"\"\n    install_ldap = False\n    \n    # Check if LDAP functionality is already partially installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'sudo-ldap'])\n        install_ldap = True\n    except subprocess.CalledProcessError:\n        pass\n    \n    # Check if environment variable is set to install sudo-ldap\n    if os.getenv('INSTALL_SUDO_LDAP') == 'true':\n        install_ldap = True\n    \n    if install_ldap:\n        # Install sudo-ldap\n        try:\n            subprocess.check_call(['apt', 'install', '-y', 'sudo-ldap'])\n            print(\"Installed sudo-ldap package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install sudo-ldap: {e}\")\n    else:\n        # Install sudo\n        try:\n            subprocess.check_call(['apt', 'install', '-y', 'sudo'])\n            print(\"Installed sudo package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to install sudo: {e}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure sudo commands use pty",
    "id": "5.2.2",
    "type": "Automated",
    "start_page": 560,
    "end_page": 562,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo can be configured to run only from a pseudo terminal (pseudo-pty).",
    "rationale": "Attackers can run a malicious program using sudo which would fork a background process that remains even when the main program has finished executing. **Impact:** **WARNING: Editing the sudo configuration incorrectly can cause sudo to stop** functioning. Always use visudo to modify sudo configuration files.",
    "audit_details": "Verify that sudo can only run other commands from a pseudo terminal. Run the following command to verify Defaults use_pty is set:\n```\n# grep -rPi -- '^\n*Defaults\nh+([^#\\n\\r]+,)?use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*\n```\nVerify the output matches:\n```\n/etc/sudoers:Defaults use_pty\n```\nRun the follow command to to verify Defaults !use_pty is not set:\n```\n# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?!use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*\n```\nNothing should be returned",
    "audit_code": "# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*\n\n# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?!use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*",
    "remediation_details": "Edit the file /etc/sudoers with visudo or a file in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and add the following line:\n```\nDefaults use_pty\n```\nEdit the file /etc/sudoers with visudo and any files in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and remove any occurrence of !use_pty\n**Note:** \n - sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files.\n - Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second.\n - Be aware that because the sorting is lexical, not numeric, \n```\n/etc/sudoers.d/1_whoops would be loaded after /etc/sudoers.d/10_second.\n```\n - Using a consistent number of leading zeroes in the file names can be used to avoid such problems.",
    "remediation_code": "Edit the file /etc/sudoers with visudo and any files in /etc/sudoers.d/ with visudo -f \n<PATH TO FILE> and remove any occurrence of !use_pty\n**Note:** \n - sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files.\n - Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second.",
    "python_script": "\nimport subprocess\nimport glob\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if sudo commands use pty.\"\"\"\n    sudoers_files = glob.glob(\"/etc/sudoers*\")\n    use_pty_set = False\n    bang_use_pty_set = False\n\n    for file in sudoers_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            if re.search(r'^Defaults\\s+(?:[^#\\n\\r]+,)*use_pty(?:,\\s*[^#\\n\\r]+)*\\s*(#.*)?$', content, re.MULTILINE):\n                use_pty_set = True\n            if re.search(r'^Defaults\\s+(?:[^#\\n\\r]+,)*!use_pty(?:,\\s*[^#\\n\\r]+)*\\s*(#.*)?$', content, re.MULTILINE):\n                bang_use_pty_set = True\n\n    # Vulnerability is present if use_pty is not set or!use_pty is set\n    return not (use_pty_set and not bang_use_pty_set)\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by ensuring Defaults use_pty is set and Defaults!use_pty is removed.\"\"\"\n    sudoers_files = glob.glob(\"/etc/sudoers*\")\n\n    # Backup files before modification (Good practice, not requested but added for safety)\n    for file in sudoers_files:\n        subprocess.run(f\"cp {file} {file}.backup\", shell=True, check=True)\n        print(f\"Backed up {file}\")\n\n    # Add Defaults use_pty if not present and remove Defaults!use_pty\n    for file in sudoers_files:\n        subprocess.run(f\"EDITOR=echo visudo -f {file} -c 'Defaults use_pty'\", shell=True, check=True)\n        print(f\"Added 'Defaults use_pty' to {file} if necessary\")\n        \n        # Remove any lines containing Defaults!use_pty\n        # Using visudo with a command to delete the line is tricky without interactive input,\n        # so we directly manipulate the file content with Python, ensuring to keep a backup.\n        with open(file, 'r+') as f:\n            content = f.read()\n            modified_content = re.sub(r'^Defaults\\s+(?:[^#\\n\\r]+,)*!use_pty(?:,\\s*[^#\\n\\r]+)*\\s*(#.*)?$\\n?', '', content, flags=re.MULTILINE)\n            f.seek(0)\n            f.write(modified_content)\n            f.truncate()\n        print(f\"Removed any 'Defaults!use_pty' from {file}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure sudo log file exists",
    "id": "5.2.3",
    "type": "Automated",
    "start_page": 563,
    "end_page": 564,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo can use a custom log file",
    "rationale": "A sudo log file simplifies auditing of sudo commands",
    "audit_details": "Run the following command to verify that sudo has a custom log file configured:\n```\n# grep -rPsi \"^\\h*Defaults\\h+([^#]+,\\h*)?logfile\\h*=\\h*(\\\"|\\')?\\H+(\\\"|\\')?(,\\h*\\H+\\h*)*\\h*\\n(#.*)?$\" /etc/sudoers*\n```\nVerify the output matches:\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```\n",
    "audit_code": "# grep -rPsi \"^\\h*Defaults\\h+([^#]+,\\h*)?logfile\\h*=\\h*(\\\"|\\')?\\H+(\\\"|\\')?(,\\h*\\H+\\h*)*\\h*\\n(#.*)?$\" /etc/sudoers*",
    "remediation_details": "Edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo or visudo -f <PATH TO FILE> and add the following line:\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```\n**Note:** \n - sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files.\n - Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second.\n - Be aware that because the sorting is lexical, not numeric, `/etc/sudoers.d/1_whoops` would be loaded after `/etc/sudoers.d/10_second`.\n - Using a consistent number of leading zeroes in the file names can be used to avoid such problems.",
    "remediation_code": "visudo -f <PATH TO FILE>\n\nDefaults logfile=\"/var/log/sudo.log\"",
    "python_script": "\nimport glob\nimport re\nimport tempfile\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if a custom sudo log file is configured\"\"\"\n    pattern = r\"^Defaults\\s+logfile\\s*=\\s*\\\"/var/log/sudo.log\\\"\"\n    for file in glob.glob(\"/etc/sudoers*\"):\n        with open(file, 'r') as f:\n            contents = f.read()\n            if re.search(pattern, contents):\n                return False  # Log file setting found, vulnerability does not exist\n    return True  # No matching log file setting found, vulnerability exists\n\ndef remediate_vuln() -> None:\n    \"\"\"Add a custom sudo log file setting if it doesn't exist\"\"\"\n    if not audit_vuln():  # If the vuln doesn't exist, there's nothing to remediate\n        return\n\n    # Choose a file in /etc/sudoers.d/ to edit, or create a new one if none exist\n    sudoers_d_files = glob.glob(\"/etc/sudoers.d/*\")\n    if sudoers_d_files:\n        file_to_edit = max(sudoers_d_files)  # Edit the last one in lexical order\n    else:\n        file_to_edit = \"/etc/sudoers.d/00_custom_logfile\"\n\n    # Safely edit the file using tempfile and subprocess\n    with tempfile.NamedTemporaryFile(mode='w') as tmp:\n        tmp.write(\"Defaults logfile=\\\"/var/log/sudo.log\\\"\\n\")\n        tmp.flush()\n        subprocess.run([\"visudo\", \"-cf\", tmp.name])  # Validate the temporary file\n        if os.path.exists(file_to_edit):\n            subprocess.run([\"sudo\", \"cp\", tmp.name, file_to_edit])\n            print(f\"Updated existing file `{file_to_edit}` with sudo log file setting.\")\n        else:\n            subprocess.run([\"sudo\", \"cp\", tmp.name, file_to_edit])\n            subprocess.run([\"sudo\", \"chmod\", \"440\", file_to_edit])  # Match typical sudoers permissions\n            print(f\"Created new file `{file_to_edit}` with sudo log file setting.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability exists. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure re-authentication for privilege escalation is not disabled globally",
    "id": "5.2.5",
    "type": "Automated",
    "start_page": 567,
    "end_page": 568,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The operating system must be configured so that users must re-authenticate for privilege escalation.",
    "rationale": "Without re-authentication, users may access resources or perform tasks for which they do not have authorization. When operating systems provide the capability to escalate a functional capability, it is critical the user re-authenticate.",
    "audit_details": "Verify the operating system requires users to re-authenticate for privilege escalation. Check the configuration of the /etc/sudoers and /etc/sudoers.d/* files with the following command:\n\n```\n# grep -r \"^[^#].*!authenticate\" /etc/sudoers*\n```\n\nIf any line is found with a !authenticate tag, refer to the remediation procedure below.",
    "audit_code": "# grep -r \"^[^#].*!authenticate\" /etc/sudoers*",
    "remediation_details": "Configure the operating system to require users to reauthenticate for privilege escalation. Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the relevant sudoers file. Remove any occurrences of !authenticate tags in the file(s).",
    "remediation_code": "visudo -f <PATH TO FILE>",
    "python_script": "\nimport subprocess\nimport pathlib\nimport tempfile\nimport shutil\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if re-authentication for privilege escalation is disabled globally.\n    \n    Returns:\n    bool: True if vulnerability found, False otherwise.\n    \"\"\"\n    sudoers_path = pathlib.Path('/etc/sudoers')\n    sudoers_d_path = pathlib.Path('/etc/sudoers.d')\n    \n    # Check main sudoers file\n    with open(sudoers_path, 'r') as file:\n        if any(re.match(r'^[^#]*\\!authenticate', line) for line in file):\n            return True\n    \n    # Check sudoers.d files\n    for file in sudoers_d_path.glob('*'):\n        if not file.is_file():\n            continue\n        with open(file, 'r') as f:\n            if any(re.match(r'^[^#]*\\!authenticate', line) for line in f):\n                return True\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate vulnerability by removing !authenticate tags from sudoers files.\n    \"\"\"\n    sudoers_path = pathlib.Path('/etc/sudoers')\n    sudoers_d_path = pathlib.Path('/etc/sudoers.d')\n    \n    def _remove_authenticate_tags(file_path):\n        with open(file_path, 'r+') as file:\n            content = file.readlines()\n            file.seek(0)\n            file.writelines(line for line in content if not re.match(r'^[^#]*\\!authenticate', line))\n            file.truncate()\n        print(f\"Removed !authenticate tags from {file_path}\")\n    \n    # Remediate main sudoers file\n    _remove_authenticate_tags(sudoers_path)\n    \n    # Remediate sudoers.d files\n    for file in sudoers_d_path.glob('*'):\n        if not file.is_file():\n            continue\n        _remove_authenticate_tags(file)\n        # Safety measure to ensure file permissions are preserved\n        # (not strictly necessary here but good practice for file modifications)\n        orig_permissions = file.stat().st_mode\n        with tempfile.NamedTemporaryFile(mode='w', delete=False, dir='/etc/sudoers.d') as tmp:\n            shutil.copystat(file, tmp.name)\n            _remove_authenticate_tags(pathlib.Path(tmp.name))\n        shutil.move(tmp.name, file)\n        # Restore permissions (if changed during edit)\n        file.chmod(orig_permissions)\n"
  },
  {
    "name": "Ensure sudo authentication timeout is configured correctly",
    "id": "5.2.6",
    "type": "Automated",
    "start_page": 569,
    "end_page": 570,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo caches used credentials for a default of 15 minutes. This is for ease of use when there are multiple administrative tasks to perform. The timeout can be modified to suit local security policies. This default is distribution specific. See audit section for further information.",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized privileged access to another user.",
    "audit_details": "Ensure that the caching timeout is no more than 15 minutes. Example:\n\n# grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers*\n\nIf there is no timestamp_timeout configured in /etc/sudoers* then the default is 15 minutes. This default can be checked with:\n\n# sudo -V | grep \"Authentication timestamp timeout:\"\n\nNOTE: A value of -1 means that the timeout is disabled. Depending on the configuration of the timestamp_type, this could mean for all terminals / processes of that user and not just that one single terminal session.",
    "audit_code": "# grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers*\n# sudo -V | grep \"Authentication timestamp timeout:\"",
    "remediation_details": "If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with visudo -f <PATH TO FILE> and modify the entry timestamp_timeout= to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on it's own, or on the same line as env_reset. See the following two examples:\n\nDefaults  env_reset, timestamp_timeout=15\nDefaults  timestamp_timeout=15\nDefaults  env_reset",
    "remediation_code": "visudo -f <PATH TO FILE>",
    "python_script": "\nimport glob\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit sudo authentication timeout configuration.\"\"\"\n    # Check configured timeout in /etc/sudoers*\n    for file in glob.glob(\"/etc/sudoers*\"):\n        with open(file, 'r') as f:\n            content = f.read()\n            match = re.search(r\"timestamp_timeout=([0-9]+)\", content)\n            if match and int(match.group(1)) > 15:\n                return False\n            \n    # If not configured, check default value\n    output = subprocess.check_output(['sudo', '-V']).decode('utf-8')\n    default_timeout_match = re.search(r\"Authentication timestamp timeout: ([0-9]+)\", output)\n    if default_timeout_match and int(default_timeout_match.group(1)) > 15:\n        return False\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate sudo authentication timeout configuration if necessary.\"\"\"\n    excessive_timeout_file = None\n    target_timeout = 15  # Can be adjusted as per site policy (must be \u2264 15 for compliance)\n    \n    # Identify file with excessive timeout\n    for file in glob.glob(\"/etc/sudoers*\"):\n        with open(file, 'r') as f:\n            content = f.read()\n            match = re.search(r\"timestamp_timeout=([0-9]+)\", content)\n            if match and int(match.group(1)) > target_timeout:\n                excessive_timeout_file = file\n                break\n            \n    if excessive_timeout_file:\n        print(f\"Modify `{excessive_timeout_file}` to set `timestamp_timeout={target_timeout}`.\")\n        \n        # Backup original file\n        with open(excessive_timeout_file, 'r') as original, open(f\"{excessive_timeout_file}.bak\", 'w') as backup:\n            backup.write(original.read())\n        print(f\"Created backup: `{excessive_timeout_file}.bak`\")\n        \n        # Modify the file using visudo for safety\n        with open(excessive_timeout_file, 'r') as f:\n            content = f.read()\n        # Use regex to replace the existing timeout value, or add it if not present\n        modified_content = re.sub(r\"(Defaults.*?)(, )?timestamp_timeout=[0-9]+\",\n                                  rf\"\\g<1>{', ' if 'Defaults ' in content and content[content.index('Defaults ') + 8].isspace() else ''}timestamp_timeout={target_timeout}\",\n                                  content)\n        if \"timestamp_timeout\" not in modified_content:\n            modified_content += f\"\\nDefaults timestamp_timeout={target_timeout}\"\n        \n        # Invoke visudo to edit the file safely\n        with open(excessive_timeout_file, 'w') as tmp_edit:\n            tmp_edit.write(modified_content)\n        subprocess.check_call(['sudo', 'visudo', '-f', excessive_timeout_file])\n        print(f\"Successfully updated `{excessive_timeout_file}` using `visudo`.\")\n    else:\n        print(\"No remediation necessary for sudo authentication timeout.\")\n"
  },
  {
    "name": "Ensure access to the su command is restricted",
    "id": "5.2.7",
    "type": "Automated",
    "start_page": 571,
    "end_page": 572,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The su command allows a user to run a command or shell as another user. The program has been superseded by sudo, which allows for more granular control over privileged access. Normally, the su command can be executed by any user. By uncommenting the pam_wheel.so statement in /etc/pam.d/su, the su command will only allow users in a specific groups to execute su. This group should be empty to reinforce the use of sudo for privileged access.",
    "rationale": "Restricting the use of su, and using sudo in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via sudo, whereas su can only record that a user executed the su program.",
    "audit_details": "Run the following command:\n```\n# grep -Pi '^\th*auth\th+(?:required|requisite)\th+pam_wheel\\.so\\h+(?:[^#\\n\\r]+\\h+)?((?!\\2)(use_uid\\b|group=\\H+\\b))\\h+(?:[^#\\n\\r]+\\h+)?((?!\\1)(use_uid\\b|group=\\H+\\b))(\\h+.*)?$' /etc/pam.d/su\n```\nVerify the output matches:\n```\nauth required pam_wheel.so use_uid group=<group_name>\n```\nRun the following command and verify that the group specified in <group_name> contains no users:\n```\n# grep <group_name> /etc/group\n```\nVerify the output does not contain any users in the relevant group:\n```\n<group_name>:x:<GID>:\n```\n",
    "audit_code": "# grep -Pi '^\th*auth\th+(?:required|requisite)\th+pam_wheel\\.so\\h+(?:[^#\\n\\r]+\\h+)?((?!\\2)(use_uid\\b|group=\\H+\\b))\\h+(?:[^#\\n\\r]+\\h+)?((?!\\1)(use_uid\\b|group=\\H+\\b))(\\h+.*)?$' /etc/pam.d/su\n\n# grep <group_name> /etc/group",
    "remediation_details": "Create an empty group that will be specified for use of the su command. The group should be named according to site policy.\nExample:\n```\n# groupadd sugroup\n```\nAdd the following line to the /etc/pam.d/su file, specifying the empty group:\n```\nauth required pam_wheel.so use_uid group=sugroup\n```\n",
    "remediation_code": "# groupadd sugroup\n\nauth required pam_wheel.so use_uid group=sugroup",
    "python_script": "\nimport subprocess\nimport grp\nimport os\n\n# Group name to be used for restricting su access\nGROUP_NAME = 'sugroup'\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for the 'Ensure access to the su command is restricted' vulnerability.\n    \n    Returns:\n    bool: True if the system is secure, False otherwise.\n    \"\"\"\n    # 1. Check pam_wheel.so configuration in /etc/pam.d/su\n    pam_config_path = '/etc/pam.d/su'\n    with open(pam_config_path, 'r') as file:\n        pam_config = file.readlines()\n    expected_line = f'auth required pam_wheel.so use_uid group={GROUP_NAME}\\n'\n    if expected_line not in pam_config:\n        print(f\"Missing or incorrect 'pam_wheel.so' configuration in {pam_config_path}.\")\n        return False\n    \n    # 2. Verify the specified group contains no users\n    try:\n        group_info = grp.getgrnam(GROUP_NAME)\n        if group_info.gr_mem:\n            print(f\"Group '{GROUP_NAME}' is not empty. Users: {', '.join(group_info.gr_mem)}\")\n            return False\n    except KeyError:\n        print(f\"Group '{GROUP_NAME}' does not exist during audit.\")\n        return False\n    \n    print(f\"All checks passed for '{GROUP_NAME}'.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediates the 'Ensure access to the su command is restricted' vulnerability.\n    \"\"\"\n    # 1. Create an empty group if it doesn't exist\n    try:\n        grp.getgrnam(GROUP_NAME)\n        print(f\"Group '{GROUP_NAME}' already exists. Skipping creation.\")\n    except KeyError:\n        subprocess.run(['groupadd', GROUP_NAME])\n        print(f\"Created empty group '{GROUP_NAME}'.\")\n\n    # 2. Ensure correct pam_wheel.so line is present in /etc/pam.d/su\n    pam_config_path = '/etc/pam.d/su'\n    expected_line = f'auth required pam_wheel.so use_uid group={GROUP_NAME}\\n'\n    with open(pam_config_path, 'r+') as file:\n        lines = file.readlines()\n        file.seek(0)\n        line_found = False\n        for line in lines:\n            if line.startswith('auth ') and 'pam_wheel.so' in line:\n                file.write(expected_line)\n                line_found = True\n            else:\n                file.write(line)\n        if not line_found:\n            file.write(expected_line)\n        file.truncate()\n    print(f\"Configured '{pam_config_path}' to use group '{GROUP_NAME}' for su access.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure latest version of pam is installed",
    "id": "5.3.1.1",
    "type": "Automated",
    "start_page": 575,
    "end_page": 575,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Updated versions of PAM include additional functionality",
    "rationale": "To ensure the system has full functionality and access to the options covered by this Benchmark the latest version of libpam-runtime should be installed on the system",
    "audit_details": "Run the following command to verify the version of libpam-runtime on the system:\n\n```\n# dpkg-query -s libpam-runtime | grep -P -- '^(Status|Version)\\b'\n```\n\nThe output should be similar to:\n```\nStatus: install ok installed\nVersion: 1.4.0-9\n```\n",
    "audit_code": "# dpkg-query -s libpam-runtime | grep -P -- '^(Status|Version)\\b'",
    "remediation_details": "**- IF - the version of libpam-runtime on the system is less that version 1.5.2-6:**\nRun the following command to update to the latest version of PAM:\n\n```\n# apt upgrade libpam-runtime\n```\n",
    "remediation_code": "# apt upgrade libpam-runtime",
    "python_script": "\nimport subprocess\nimport re\nfrom packaging import version\n\n# Minimum required version of libpam-runtime\nMIN_REQUIRED_VERSION = \"1.5.2-6\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if the latest version of pam (libpam-runtime) is installed.\"\"\"\n    try:\n        output = subprocess.check_output([\"dpkg-query\", \"-s\", \"libpam-runtime\"])\n        output = output.decode(\"utf-8\")\n        for line in output.splitlines():\n            if line.startswith(\"Version:\"):\n                current_version = line.split(\": \")[1]\n                if version.parse(current_version) < version.parse(MIN_REQUIRED_VERSION):\n                    print(f\"Outdated version of libpam-runtime found: {current_version} (expected at least {MIN_REQUIRED_VERSION})\")\n                    return False\n        print(f\"Latest version of libpam-runtime is installed (or newer than {MIN_REQUIRED_VERSION})\")\n        return True\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing libpam-runtime version: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by upgrading libpam-runtime to the latest version if necessary.\"\"\"\n    try:\n        # First, update package lists to ensure we have the latest package information\n        subprocess.check_call([\"apt\", \"update\"])\n        print(\"Updated package lists.\")\n        \n        # Upgrade libpam-runtime\n        subprocess.check_call([\"apt\", \"full-upgrade\", \"libpam-runtime\", \"-y\"])\n        print(\"Upgraded libpam-runtime to the latest version.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error remediating libpam-runtime upgrade: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure libpam-modules is installed",
    "id": "5.3.1.2",
    "type": "Automated",
    "start_page": 576,
    "end_page": 576,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Pluggable Authentication Modules for PAM",
    "rationale": "To ensure the system has full functionality and access to the PAM options covered by this Benchmark",
    "audit_details": "Run the following command to verify libpam-modules is installed and version 1.5.2-6 or later:\n\n```\n# dpkg-query -s libpam-modules | grep -P -- '^(Status|Version)\\b'\n```\n\nThe output should be similar to:\n```\nStatus: install ok installed\nVersion: 1.4.0-9\n```\n",
    "audit_code": "# dpkg-query -s libpam-modules | grep -P -- '^(Status|Version)\\b'",
    "remediation_details": "**- IF - the version of libpam-modules on the system is less that version 1.5.2-6:**\nRun the following command to update to the latest version of PAM:\n\n```\n# apt upgrade libpam-modules\n```\n",
    "remediation_code": "# apt upgrade libpam-modules",
    "python_script": "\nimport subprocess\nimport pkg_resources\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if libpam-modules is installed and its version is 1.5.2-6 or later.\n    \n    Returns:\n        bool: True if the vulnerability is present (outdated or not installed), False otherwise\n    \"\"\"\n    try:\n        # Use pkg_resources to get the version of libpam-modules\n        version = pkg_resources.get_distribution('libpam-modules').version\n    except pkg_resources.DistributionNotFound:\n        # If not found, consider it vulnerable\n        print(\"libpam-modules is not installed.\")\n        return True\n    \n    # Check if the version is 1.5.2-6 or later\n    vulnerable_version = \"1.5.2-6\"\n    if pkg_resources.parse_version(version) < pkg_resources.parse_version(vulnerable_version):\n        print(f\"libpam-modules version {version} is outdated (should be {vulnerable_version} or later).\")\n        return True\n    \n    print(\"libpam-modules is up-to-date and installed.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by updating libpam-modules to the latest version.\n    \"\"\"\n    # Initialize apt cache\n    cache = apt.Cache()\n    \n    # Check if libpam-modules is already the latest version\n    if cache['libpam-modules'].is_upgradable:\n        print(f\"Updating libpam-modules from {cache['libpam-modules'].installed.version} to {cache['libpam-modules'].candidate.version}...\")\n        # Upgrade libpam-modules using apt\n        subprocess.run(['apt', 'install', '--only-upgrade', 'libpam-modules', '-y'])\n    else:\n        print(\"libpam-modules is already up-to-date.\")\n        \n    # Ensure the apt cache is updated after the operation\n    cache.update()\n    cache.open()\n"
  },
  {
    "name": "Ensure libpam-pwquality is installed",
    "id": "5.3.1.3",
    "type": "Automated",
    "start_page": 577,
    "end_page": 577,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "libpwquality provides common functions for password quality checking and scoring them based on their apparent randomness. The library also provides a function for generating random passwords with good pronounceability. This module can be plugged into the password stack of a given service to provide some plug-in strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options.",
    "rationale": "Strong passwords reduce the risk of systems being hacked through brute force methods.",
    "audit_details": "Run the following command to verify libpam-pwquality is installed: # dpkg-query -s libpam-pwquality | grep -P -- '^(Status|Version)\\b' The output should be similar to: Status: install ok installed Version: 1.4.4-1",
    "audit_code": "# dpkg-query -s libpam-pwquality | grep -P -- '^(Status|Version)\\b'",
    "remediation_details": "Run the following command to install libpam-pwquality: # apt install libpam-pwquality",
    "remediation_code": "# apt install libpam-pwquality",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if libpam-pwquality is installed.\"\"\"\n    try:\n        # Using dpkg to check if the package is installed\n        output = subprocess.check_output(['dpkg', '-s', 'libpam-pwquality'])\n        return b\"Status: install ok installed\" in output\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing libpam-pwquality: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by installing libpam-pwquality if not already installed.\"\"\"\n    if not audit_vuln():\n        # Using apt to install the package, assuming user has sufficient permissions\n        try:\n            subprocess.check_call(['apt', 'update'])  # Update package lists\n            print(\"Updated apt package lists.\")\n            subprocess.check_call(['apt', 'install', '-y', 'libpam-pwquality'])\n            print(\"Installed libpam-pwquality package.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error remediating libpam-pwquality: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"libpam-pwquality is already installed. No action needed.\")\n"
  },
  {
    "name": "Ensure pam_unix module is enabled",
    "id": "5.3.2.1",
    "type": "Automated",
    "start_page": 579,
    "end_page": 580,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "pam_unix is the standard Unix authentication module. It uses standard calls from the system's libraries to retrieve and set account information as well as authentication. Usually this is obtained from the /etc/passwd and if shadow is enabled, the /etc/shadow file as well.\n\nThe account component performs the task of establishing the status of the user's account and password based on the following shadow elements: expire, last_change, max_change, min_change, warn_change. In the case of the latter, it may offer advice to the user on changing their password or, through the PAM_AUTHTOKEN_REQD return, delay giving service to the user until they have established a new password. The entries listed above are documented in the shadow(5) manual page. Should the user's record not contain one or more of these entries, the corresponding shadow check is not performed.\n\nThe authentication component performs the task of checking the users credentials (password). The default action of this module is to not permit the user access to a service if their official password is blank.",
    "rationale": "The system should only provide access after performing authentication of a user.",
    "audit_details": "Run the following command to verify that pam_unix is enabled:\n# grep -P -- '\\bpam_unix\\.so\\b' /etc/pam.d/common{account,session,auth,password}\n\nOutput should be simular to:\n/etc/pam.d/common-account:account  [success=1 new_authtok_reqd=done default=ignore]  pam_unix.so\n/etc/pam.d/common-session:session  required  pam_unix.so\n/etc/pam.d/common-auth:auth  [success=2 default=ignore]  pam_unix.so try_first_pass\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt",
    "audit_code": "# grep -P -- '\\bpam_unix\\.so\\b' /etc/pam.d/common{account,session,auth,password}",
    "remediation_details": "Run the following command to enable the pam_unix module:\n# pam-auth-update --enable unix\n\nNote: If a site specific custom profile is being used in your environment to configure PAM that includes the configuration for the pam_faillock module, enable that module instead",
    "remediation_code": "# pam-auth-update --enable unix",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if pam_unix module is enabled in PAM configuration files.\"\"\"\n    config_files = ['/etc/pam.d/common-account', '/etc/pam.d/common-session', \n                    '/etc/pam.d/common-auth', '/etc/pam.d/common-password']\n    for file in config_files:\n        if not os.path.exists(file):\n            print(f\"Configuration file {file} not found.\")\n            return True  # Vulnerable: config file missing\n        with open(file, 'r') as f:\n            contents = f.read()\n            if 'pam_unix.so' not in contents:\n                print(f\"pam_unix.so not found in {file}.\")\n                return True  # Vulnerable: pam_unix.so not found\n    print(\"pam_unix.so found in all required configuration files.\")\n    return False  # Not vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Enable the unix module using pam-auth-update.\"\"\"\n    command = ['pam-auth-update', '--enable', 'unix']\n    try:\n        subprocess.check_call(command)\n        print(\"Enabled `unix` module using pam-auth-update.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to enable unix module: {e}\")\n\n# Example usage\nif __name__ == '__main__':\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure pam_faillock module is enabled",
    "id": "5.3.2.2",
    "type": "Automated",
    "start_page": 581,
    "end_page": 583,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than the configured number of consecutive failed authentications (this is defined by the deny parameter in the faillock configuration). It stores the failure records into per-user files in the tally directory.",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit_details": "Run the following commands to verify that pam_faillock is enabled:\n\n```\n# grep -P -- '\\bpam_faillock\\.so\\b' /etc/pam.d/common-{auth,account}\n```\n\n### Output should be similar to:\n```\n/etc/pam.d/common-auth:auth   requisite           pam_faillock.so preauth\n/etc/pam.d/common-auth:auth   [default=die]         pam_faillock.so authfail\n/etc/pam.d/common-account:account    required            pam_faillock.so\n```\nPage 580",
    "audit_code": "# grep -P -- '\\bpam_faillock\\.so\\b' /etc/pam.d/common-{auth,account}",
    "remediation_details": "Create two pam-auth-update profiles in /usr/share/pam-configs/: Create the first profile with the following lines:\n```\nName: Enable pam_faillock to deny access\nDefault: yes\nPriority: 0\nAuth-Type: Primary\nAuth:\n    [default=die]          pam_faillock.so authfail\n```\n\n Example:\n#!/usr/bin/env bash\n{\n  arr=('Name: Enable pam_faillock to deny access' 'Default: yes' 'Priority:\n0' 'Auth-Type: Primary' 'Auth:' '    [default=die]         pam_faillock.so authfail') \n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/faillock\n}\n\n Create the second profile with the following lines:\nName: Notify of failed login attempts and reset count upon success\nDefault: yes\nPriority: 1024\nAuth-Type: Primary\nAuth:\n    requisite            pam_faillock.so preauth\nAccount-Type: Primary\nAccount:\n    required            pam_faillock.so\n\n Example:\n#!/usr/bin/env bash\n{\n  arr=('Name: Notify of failed login attempts and reset count upon success'\n'Default: yes' 'Priority: 1024' 'Auth-Type: Primary' 'Auth:' '    requisite            pam_faillock.so preauth' 'Account-Type:\nPrimary' 'Account:' '    required            pam_faillock.so') \n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/faillock_notify\n}\n\nRun the following command to update the common-auth and common-account PAM files with the new profiles:\n\n```\n# pam-auth-update --enable <profile_filename>\n```\n\n### Example:\n```\n# pam-auth-update --enable faillock\n# pam-auth-update --enable faillock_notify\n```\n\nPage 581",
    "remediation_code": "# pam-auth-update --enable faillock\n# pam-auth-update --enable faillock_notify",
    "python_script": "\nimport os\nimport subprocess\n\n# Define the paths and contents for the PAM profiles\npam_profiles_dir = '/usr/share/pam-configs/'\nprofile_faillock_contents = [\n    'Name: Enable pam_faillock to deny access',\n    'Default: yes',\n    'Priority: 0',\n    'Auth-Type: Primary',\n    'Auth:',\n    '    [default=die]          pam_faillock.so authfail'\n]\n\nprofile_faillock_notify_contents = [\n    'Name: Notify of failed login attempts and reset count upon success',\n    'Default: yes',\n    'Priority: 1024',\n    'Auth-Type: Primary',\n    'Auth:',\n    '    requisite            pam_faillock.so preauth',\n    'Account-Type: Primary',\n    'Account:',\n    '    required            pam_faillock.so'\n]\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if pam_faillock is enabled in common-auth and common-account.\"\"\"\n    pam_files = ['/etc/pam.d/common-auth', '/etc/pam.d/common-account']\n    expected_lines = {\n        '/etc/pam.d/common-auth': [\n            'auth   requisite           pam_faillock.so preauth',\n            'auth   [default=die]         pam_faillock.so authfail'\n        ],\n        '/etc/pam.d/common-account': [\n            'account    required            pam_faillock.so'\n        ]\n    }\n    \n    for file, lines in expected_lines.items():\n        try:\n            with open(file, 'r') as f:\n                file_contents = f.readlines()\n                for line in lines:\n                    if line.strip() not in [content.strip() for content in file_contents]:\n                        print(f\"Missing expected line in {file}: {line}\")\n                        return False\n        except FileNotFoundError:\n            print(f\"File {file} not found.\")\n            return False\n    \n    print(\"pam_faillock.so is properly configured in all files.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by creating PAM profiles and enabling them.\"\"\"\n    # Create PAM profiles\n    with open(os.path.join(pam_profiles_dir, 'faillock'), 'w') as f:\n        for line in profile_faillock_contents:\n            f.write(line + '\\n')\n    print(\"Created PAM profile: faillock\")\n    \n    with open(os.path.join(pam_profiles_dir, 'faillock_notify'), 'w') as f:\n        for line in profile_faillock_notify_contents:\n            f.write(line + '\\n')\n    print(\"Created PAM profile: faillock_notify\")\n    \n    # Enable the profiles using pam-auth-update\n    for profile in ['faillock', 'faillock_notify']:\n        subprocess.run(['pam-auth-update', '--enable', profile])\n        print(f\"Enabled PAM profile via pam-auth-update: {profile}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure pam_pwquality module is enabled",
    "id": "5.3.2.3",
    "type": "Automated",
    "start_page": 584,
    "end_page": 586,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_pwquality.so module performs password quality checking. This module can be plugged into the password stack of a given service to provide strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options.\n\nThe action of this module is to prompt the user for a password and check its strength against a system dictionary and a set of rules for identifying poor choices.\n\nThe first action is to prompt for a single password, check its strength and then, if it is considered strong, prompt for the password a second time (to verify that it was typed correctly on the first occasion). All being well, the password is passed on to subsequent modules to be installed as the new authentication token.",
    "rationale": "Use of a unique, complex passwords helps to increase the time and resources required to compromise the password.",
    "audit_details": "Run the following command to verify that pam_pwhistory is enabled:\n\n```\n# grep -P -- '\\bpam_pwquality\\.so\\b' /etc/pam.d/common-password\n```\n\nOutput should be similar to:\n```\npassword  requisite  pam_pwquality.so retry=3\n```\nPage 583",
    "audit_code": "# grep -P -- '\\bpam_pwquality\\.so\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following script to verify the pam_pwquality.so line exists in a pam-auth-update profile:\n\n```\n# grep -P -- '\\bpam_pwquality\\.so\\b' /usr/share/pam-configs/*\n```\n\nOutput should be similar to:\n```\n/usr/share/pam-configs/pwquality:    requisite           pam_pwquality.so retry=3\n/usr/share/pam-configs/pwquality:    requisite           pam_pwquality.so retry=3\n```\n- IF - similar output is returned:\nRun the following command to update /etc/pam.d/common-password with the returned profile:\n```\n# pam-auth-update --enable {PROFILE_NAME}\n```\n_Example:_\n```\n# pam-auth-update pwquality\n```\n- IF - similar output is NOT returned:\nRun the following script to create a pam-auth-update profile for pwquality:\n```\n!#/usr/bin/env bash\n{\n  arr=('Name: Pwquality password strength checking' 'Default: yes'\n'Priority: 1024' 'Conflicts: cracklib' 'Password-Type: Primary' 'Password:' '    requisite            pam_pwquality.so retry=3' 'Password-Initial:'\n'requisite')\n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwquality\n}\n```\nRun the following command to update /etc/pam.d/common-password with the pwquality profile:\n```\n# pam-auth-update --enable pwquality\n```\n**Note:**\n  - The name used for the file must be used in the pam-auth-update --enable command\n  - The Name: line should be easily recognizable and understood\n  - The Priority: Line is important as it effects the order of the lines in the\n```\n    /etc/pam.d/ files\n```\n  - If a site specific custom profile is being used in your environment to configure PAM that includes the configuration for the pam_pwquality module, enable that module instead",
    "remediation_code": "# grep -P -- '\\bpam_pwquality\\.so\\b' /usr/share/pam-configs/*\n# pam-auth-update --enable {PROFILE_NAME}\n!#/usr/bin/env bash\n{\n  arr=('Name: Pwquality password strength checking' 'Default: yes'\n'Priority: 1024' 'Conflicts: cracklib' 'Password-Type: Primary' 'Password:' '    requisite            pam_pwquality.so retry=3' 'Password-Initial:'\n'requisite')\n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwquality\n}\n# pam-auth-update --enable pwquality",
    "python_script": "\nimport pathlib\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if pam_pwquality.so is enabled in /etc/pam.d/common-password\"\"\"\n    common_password_file = pathlib.Path('/etc/pam.d/common-password')\n    pattern = r'\\bpam_pwquality\\.so\\b'\n    with common_password_file.open('r') as file:\n        for line in file:\n            if re.search(pattern, line):\n                return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by enabling or creating a pwquality profile\"\"\"\n    # Check if a similar profile exists in /usr/share/pam-configs/\n    config_dir = pathlib.Path('/usr/share/pam-configs/')\n    for profile in config_dir.glob('**/*'):\n        if profile.is_file():\n            with profile.open('r') as file:\n                for line in file:\n                    if 'pam_pwquality.so' in line:\n                        print(f\"Enabling existing profile: {profile.name}\")\n                        subprocess.run(['pam-auth-update', '--enable', profile.name])\n                        return\n\n    # Create a new profile for pwquality\n    profile_name = 'pwquality'\n    profile_path = config_dir / profile_name\n    profile_content = [\n        'Name: Pwquality password strength checking',\n        'Default: yes',\n        'Priority: 1024',\n        'Conflicts: cracklib',\n        'Password-Type: Primary',\n        'Password: requisite pam_pwquality.so retry=3',\n        'Password-Initial: requisite'\n    ]\n    with profile_path.open('w') as file:\n        file.write('\\n'.join(profile_content))\n    print(f\"Created new profile: {profile_name}\")\n    \n    # Enable the new profile\n    print(f\"Enabling new profile: {profile_name}\")\n    subprocess.run(['pam-auth-update', '--enable', profile_name])\n"
  },
  {
    "name": "Ensure pam_pwhistory module is enabled",
    "id": "5.3.2.4",
    "type": "Automated",
    "start_page": 587,
    "end_page": 589,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_pwhistory.so module saves the last passwords for each user in order to force password change history and keep the user from alternating between the same password too frequently. This module does not work together with kerberos. In general, it does not make much sense to use this module in conjunction with NIS or LDAP, since the old passwords are stored on the local machine and are not available on another machine for password history checking.",
    "rationale": "Use of a unique, complex passwords helps to increase the time and resources required to compromise the password.",
    "audit_details": "Run the following command to verify that pam_pwhistory is enabled:\n\n```\n# grep -P -- '\\bpam_pwhistory\\.so\\b' /etc/pam.d/common-password\n```\n\nOutput should be similar to:\n```\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root\ntry_first_pass use_authtok\n```\n\nPage 586",
    "audit_code": "# grep -P -- '\\bpam_pwhistory\\.so\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following script to verify the pam_pwquality.so line exists in a pam-auth-update profile:\n\n```\n# grep -P -- '\\bpam_pwhistory\\.so\\b' /usr/share/pam-configs/*\n```\n\nOutput should be similar to:\n```\n/usr/share/pam-configs/pwhistory:  requisite  pam_pwhistory.so remember=24\nenforce_for_root try_first_pass use_authtok\n```\n**- IF - similar output is returned:**\nRun the following command to update /etc/pam.d/common-password with the returned profile:\n\n```\n# pam-auth-update --enable {PROFILE_NAME}\n```\n\n_Example:_\n```\n# pam-auth-update pwhistory\n```\n\n**- IF - similar output is NOT returned:**\nRun the following script to create a pam-auth-update profile for pwhistory:\n```\n!#/usr/bin/env bash\n{\n  arr=('Name: pwhistory password history checking' 'Default: yes' 'Priority:\n1024' 'Password-Type: Primary' 'Password:' '    requisite           \npam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok')\n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwhistory\n}\n```\nRun the following command to update /etc/pam.d/common-password with the pwhistory profile:\n```\n# pam-auth-update --enable pwhistory\n```\n**Note:**\n  - The name used for the file must be used in the pam-auth-update --enable command\n  - The Name: line should be easily recognizable and understood\n  - The Priority: Line is important as it effects the order of the lines in the `/etc/pam.d/ files`\n  - If a site specific custom profile is being used in your environment to configure PAM that includes the configuration for the pam_pwhistory module, enable that module instead\n\nPage 587",
    "remediation_code": "# grep -P -- '\\bpam_pwhistory\\.so\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport pathlib\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if pam_pwhistory.so is enabled in /etc/pam.d/common-password.\"\"\"\n    common_password_path = pathlib.Path('/etc/pam.d/common-password')\n    pattern = r'\\bpam_pwhistory\\.so\\b'\n    try:\n        content = common_password_path.read_text()\n        return bool(re.search(pattern, content))\n    except FileNotFoundError:\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by enabling or creating a pam_pwhistory profile.\"\"\"\n    # Check if pam_pwhistory.so is already enabled\n    if audit_vuln():\n        print(\"pam_pwhistory.so is already enabled. No action required.\")\n        return\n\n    # Search for an existing profile\n    profiles_dir = pathlib.Path('/usr/share/pam-configs/')\n    existing_profile = next((p for p in profiles_dir.glob('*') if 'pwhistory' in p.name), None)\n\n    if existing_profile:\n        # Enable the existing profile\n        subprocess.run(['pam-auth-update', '--enable', existing_profile.stem])\n        print(f\"Enabled existing pam_pwhistory profile: {existing_profile.name}\")\n    else:\n        # Create a new profile\n        new_profile_path = profiles_dir / 'pwhistory'\n        new_profile_content = [\n            'Name: pwhistory password history checking',\n            'Default: yes',\n            'Priority: 1024',\n            'Password-Type: Primary',\n            'Password: requisite pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok'\n        ]\n        new_profile_path.write_text('\\n'.join(new_profile_content))\n        print(f\"Created new pam_pwhistory profile: {new_profile_path.name}\")\n\n        # Enable the new profile\n        subprocess.run(['pam-auth-update', '--enable', new_profile_path.stem])\n        print(\"Enabled newly created pam_pwhistory profile.\")\n\n# Example usage\nif __name__ == '__main__':\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure password failed attempts lockout is configured",
    "id": "5.3.3.1.1",
    "type": "Automated",
    "start_page": 592,
    "end_page": 593,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The deny=<n> option will deny access if the number of consecutive authentication failures for this user during the recent interval exceeds.",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit_details": "Run the following command to verify that Number of failed logon attempts before the account is locked is no greater than 5 and meets local site policy:\n```\n# grep -Pi -- '^\n*deny\nh*=\nh*[1-5]\b' /etc/security/faillock.conf\ndeny = 5\n```\nRun the following command to verify that the deny argument has not been set, or 5 or less and meets local site policy:\n```\n# grep -Pi -'^\nh*auth\nh+(requisite|required|sufficient)\nh+pam_faillock.so\nh+([^#\\n\\r]+\\h+)?deny\nh*=\\h*(0|[6-9]|[1-9][0-9]+)\b' /etc/pam.d/common-auth\nNothing should be returned\n```",
    "audit_code": "# grep -Pi -- '^\nh*deny\nh*=\nh*[1-5]\b' /etc/security/faillock.conf\n\ndeny = 5\n\n# grep -Pi -'^\nh*auth\nh+(requisite|required|sufficient)\nh+pam_faillock.so\nh+([^#\\n\\r]+\\h+)?deny\nh*=\\h*(0|[6-9]|[1-9][0-9]+)\b' /etc/pam.d/common-auth\nNothing should be returned\n",
    "remediation_details": "Create or edit the following line in /etc/security/faillock.conf setting the deny option to 5 or less:\n```\ndeny = 5\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_faillock.so\\h+([^#\\n\\r]+\\h+)?deny\\b' /usr/share/pamconfigs/*\n```\nEdit any returned files and remove the deny=<N> arguments from the pam_faillock.so line(s):",
    "remediation_code": "# grep -Pl -- '\\bpam_faillock.so\\h+([^#\\n\\r]+\\h+)?deny\\b' /usr/share/pamconfigs/*\n",
    "python_script": "\nimport configparser\nimport re\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    # Check 1: deny = [1-5] in /etc/security/faillock.conf\n    faillock_conf = Path('/etc/security/faillock.conf')\n    if not faillock_conf.is_file():\n        print(\"File not found: /etc/security/faillock.conf\")\n        return False\n    \n    deny_pattern = re.compile(r'^\\s*deny\\s*=\\s*[1-5]\\s*$')\n    with open(faillock_conf, 'r') as file:\n        for line in file:\n            if deny_pattern.match(line):\n                break\n        else:\n            print(\"deny = [1-5] not found in /etc/security/faillock.conf\")\n            return False\n\n    # Check 2: No deny = 0 or >= 6 in /etc/pam.d/common-auth for pam_faillock.so\n    pam_common_auth = Path('/etc/pam.d/common-auth')\n    if not pam_common_auth.is_file():\n        print(\"File not found: /etc/pam.d/common-auth\")\n        return False\n    \n    deny_zero_or_gt_five_pattern = re.compile(r'^\\s*auth\\s+([a-z]+)\\s+pam_faillock.so\\s+[^#]*deny\\s*=\\s*(0|[6-9]|[1-9][0-9]+)\\b')\n    with open(pam_common_auth, 'r') as file:\n        for line in file:\n            if deny_zero_or_gt_five_pattern.match(line):\n                print(\"Found deny = 0 or >= 6 in /etc/pam.d/common-auth for pam_faillock.so\")\n                return False\n\n    print(\"Vulnerability not found.\")\n    return True\n\ndef remediate_vuln() -> None:\n    # Remediation 1: Set deny = 5 in /etc/security/faillock.conf\n    faillock_conf = Path('/etc/security/faillock.conf')\n    config = configparser.ConfigParser()\n    config.read(faillock_conf)\n    \n    if 'DEFAULT' not in config.sections():\n        config['DEFAULT'] = {}\n    \n    config['DEFAULT']['deny'] = '5'\n    \n    with open(faillock_conf, 'w') as config_file:\n        config.write(config_file)\n    print(\"Set deny = 5 in /etc/security/faillock.conf\")\n\n    # Remediation 2: Remove deny=<N> from pam_faillock.so lines in /usr/share/pamconfigs/*\n    pamconfigs_path = Path('/usr/share/pamconfigs/')\n    if not pamconfigs_path.is_dir():\n        print(\"Directory not found: /usr/share/pamconfigs/\")\n        return\n    \n    for file in pamconfigs_path.glob('*.conf'):\n        modified_lines = []\n        deny_pattern = re.compile(r'(\\bpam_faillock.so\\s+[^#]*?)\\s+deny\\s*=\\s*\\d+\\b')\n        with open(file, 'r') as f:\n            for line in f:\n                modified_line = deny_pattern.sub(r'\\1', line)\n                if modified_line!= line:\n                    print(f\"Removed deny argument from pam_faillock.so in {file.name}\")\n                modified_lines.append(modified_line)\n        \n        with open(file, 'w') as f:\n            f.writelines(modified_lines)\n"
  },
  {
    "name": "Ensure password unlock time is configured",
    "id": "5.3.3.1.2",
    "type": "Automated",
    "start_page": 594,
    "end_page": 596,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "unlock_time=<n> - The access will be re-enabled after seconds after the lock out. The value 0 has the same meaning as value never - the access will not be re-enabled without resetting the faillock entries by the faillock(8) command.\n\nNote:\n\n- The default directory that pam_faillock uses is usually cleared on system boot so the access will be also re-enabled after system reboot. If that is undesirable a different tally directory must be set with the dir option.\n\n- It is usually undesirable to permanently lock out users as they can become easily a target of denial of service attack unless the usernames are random and kept secret to potential attackers.\n\n- The maximum configurable value for unlock_time is 604800",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit_details": "Run the following command to verify that the time in seconds before the account is unlocked is either 0 (never) or 900 (15 minutes) or more and meets local site policy:\n```\n# grep -Pi -- '^\n\\h*unlock_time\\h*=\\h*(0|9[0-9][0-9]|[1-9][0-9]{3,})\\b' /etc/security/faillock.conf\nunlock_time = 900\n```\nRun the following command to verify that the unlock_time argument has not been set, or is either 0 (never) or 900 (15 minutes) or more and meets local site policy:\n```\n# grep -Pi -- '^\n\\h*auth\\h+(requisite|required|sufficient)\\h+pam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?unlock_time\\h*=\\h*([1-9]|[1-9][0-9]|[1-8][0-9][0-9])\\b' /etc/pam.d/commonauth\nNothing should be returned\n``",
    "audit_code": "# grep -Pi -- '^\n\\h*unlock_time\\h*=\\h*(0|9[0-9][0-9]|[1-9][0-9]{3,})\\b' /etc/security/faillock.conf",
    "remediation_details": "Set password unlock time to conform to site policy. unlock_time should be 0 (never), or 900 seconds or greater.\n\nEdit /etc/security/faillock.conf and update or add the following line:\n```\nunlock_time = 900\n```\n\nRun the following command: remove the unlock_time argument from the pam_faillock.so module in the PAM files:\n# grep -Pl -- '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?unlock_time\\b' /usr/share/pam-configs/*\n\nEdit any returned files and remove the unlock_time=<N> argument from the pam_faillock.so line(s):",
    "remediation_code": "# grep -Pl -- '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?unlock_time\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport re\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit password unlock time configuration.\n    \n    Returns:\n        bool: True if compliant, False otherwise.\n    \"\"\"\n    faillock_conf = Path('/etc/security/faillock.conf')\n    pam_common_auth = Path('/etc/pam.d/common-auth')\n    \n    # Check if faillock.conf exists and contains a compliant unlock_time\n    if faillock_conf.exists():\n        pattern = r'^\\s*unlock_time\\s*=\\s*(0|9[0-9][0-9]|[1-9][0-9]{3,})\\b'\n        if not re.search(pattern, faillock_conf.read_text(), re.MULTILINE):\n            return False\n    \n    # Verify unlock_time is not set to a non-compliant value in pam_common_auth\n    if pam_common_auth.exists():\n        pattern = r'^\\s*auth\\s+(requisite|required|sufficient)\\s+pam_faillock\\.so\\s+.*\\bunlock_time\\s*=\\s*([1-8][0-9][0-9])\\b'\n        if re.search(pattern, pam_common_auth.read_text(), re.MULTILINE):\n            return False\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate password unlock time configuration.\n    \"\"\"\n    faillock_conf = Path('/etc/security/faillock.conf')\n    pam_configs_dir = Path('/usr/share/pam-configs/')\n    \n    # Update or add unlock_time in faillock.conf\n    if faillock_conf.exists():\n        content = faillock_conf.read_text()\n        pattern = r'^\\s*unlock_time\\s*=\\s*[0-9]+\\b'\n        if re.search(pattern, content, re.MULTILINE):\n            new_content = re.sub(pattern, 'unlock_time = 900', content, count=1)\n            faillock_conf.write_text(new_content)\n            print(\"Updated unlock_time to 900 in /etc/security/faillock.conf\")\n        else:\n            with faillock_conf.open('a') as file:\n                file.write('unlock_time = 900\\n')\n            print(\"Added unlock_time = 900 to /etc/security/faillock.conf\")\n    else:\n        with faillock_conf.open('w') as file:\n            file.write('unlock_time = 900\\n')\n        print(\"Created /etc/security/faillock.conf with unlock_time = 900\")\n    \n    # Remove unlock_time arguments from pam_faillock.so lines\n    for file in pam_configs_dir.glob('*.config'):\n        content = file.read_text()\n        pattern = r'\\bunlock_time\\s*=\\s*[0-9]+\\b'\n        new_content = re.sub(pattern, '', content)\n        if new_content!= content:\n            file.write_text(new_content)\n            print(f\"Removed unlock_time argument from pam_faillock.so in {file.name}\")\n"
  },
  {
    "name": "Ensure password number of changed characters is configured",
    "id": "5.3.3.2.1",
    "type": "Automated",
    "start_page": 602,
    "end_page": 605,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality difok option sets the number of characters in a password that must not be present in the old password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the difok option is set to 2 or more and follows local site policy:\n```\n# grep -Psi -- '^\n*difok\n*=\n*([2-9]|[1-9][0-9]+)\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwdifok.conf:difok = 2\n```\nVerify returned value(s) are 2 or more and meet local site policy Run the following command to verify that difok is not set, is 2 or more, and conforms to local site policy:\n```\ngrep -Psi -'^\n*password\n+(requisite|required|sufficient)\n*pam_pwquality.so\n+([^#\n\r]+\n+)?difok\n*=([0-1])\b' /etc/pam.d/common-password\nNothing should be returned\n```\nNote:\n\n - settings should be configured in only one location for clarity\n - Settings observe an order of precedence:\n `o` module arguments override the settings in the\n `/etc/security/pwquality.conf configuration file`\n `o` settings in the /etc/security/pwquality.conf configuration file override settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n `o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory are read in canonical order, with last read file containing the setting taking precedence\n - It is recommended that settings be configured in a .conf file in the\n `/etc/security/pwquality.conf.d/ directory for clarity, convenience, and durability.",
    "audit_code": "# grep -Psi -- '^\n*difok\n*=\n*([2-9]|[1-9][0-9]+)\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n# grep -Psi -'^\n*password\n+(requisite|required|sufficient)\n*pam_pwquality.so\n+([^#\n\r]+\n+)?difok\n*=\n*([0-1])\b' /etc/pam.d/common-password",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set difok to 2 or more. Ensure setting conforms to local site policy:\n_Example:_\n```bash\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\n*difok\n*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\n%s' \"difok = 2\" > /etc/security/pwquality.conf.d/50-pwdifok.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- 'bpam_pwquality.so\n+([^#\\n\\r]+)?difok\\b' /usr/share/pamconfigs/*\n```\nEdit any returned files and remove the difok argument from the pam_pwquality.so line(s):",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*difok\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"difok = 2\" > /etc/security/pwquality.conf.d/50-pwdifok.conf\n}\n# grep -Pl -- '\\bpam_pwquality.so\\h+([^#\\n\\r]+)?difok\\b' /usr/share/pamconfigs/*\n",
    "python_script": "\nimport os\nimport re\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit difok configuration\"\"\"\n    desired_value = 2\n    conf_dir = '/etc/security/pwquality.conf.d/'\n    conf_file = '/etc/security/pwquality.conf'\n    pam_common_password = '/etc/pam.d/common-password'\n\n    # Check pwquality configurations\n    difok_set_correctly = False\n    for file in [conf_file] + list(pathlib.Path(conf_dir).glob('*.conf')):\n        content = file.read_text()\n        match = re.search(r'^\\s*difok\\s*=\\s*(\\d+)\\b', content, re.MULTILINE)\n        if match and int(match.group(1)) >= desired_value:\n            difok_set_correctly = True\n            break\n\n    # Check for conflicting settings in pam.d\n    pam_content = pathlib.Path(pam_common_password).read_text()\n    conflicting_settings = re.search(r'^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality.so\\s+([^#\\n\\r]+\\s+)?difok\\s*=\\s*([01])\\b', pam_content, re.MULTILINE)\n    if conflicting_settings:\n        print(f\"Conflicting difok setting found in {pam_common_password}: {conflicting_settings.group(0)}\")\n        return False\n\n    return difok_set_correctly\n\ndef remediate_vuln(desired_difok_value: int = 2) -> None:\n    \"\"\"Remediate difok configuration\"\"\"\n    conf_dir = '/etc/security/pwquality.conf.d/'\n    conf_file_path = pathlib.Path(conf_dir) / '50-pwdifok.conf'\n    pam_configs_dir = '/usr/share/pamconfigs/'\n\n    # Create or modify.conf file for difok setting\n    if not os.path.exists(conf_dir):\n        os.makedirs(conf_dir)\n        print(f\"Created directory: {conf_dir}\")\n    \n    with open(conf_file_path, 'w') as f:\n        f.write(f\"difok = {desired_difok_value}\\n\")\n    print(f\"Assigned difok = {desired_difok_value} in {conf_file_path}\")\n\n    # Remove conflicting difok arguments from pam_pwquality.so lines\n    for file in pathlib.Path(pam_configs_dir).glob('*'):\n        content = file.read_text()\n        updated_content = re.sub(r'(\\bpam_pwquality.so\\s+[^#\\n\\r]+)\\s+difok\\s*=\\s*[01]\\b', r'\\1', content, flags=re.MULTILINE)\n        if updated_content!= content:\n            file.write_text(updated_content)\n            print(f\"Removed conflicting difok setting from {file}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"difok configuration already compliant.\")\n"
  },
  {
    "name": "Ensure minimum password length is configured",
    "id": "5.3.3.2.2",
    "type": "Automated",
    "start_page": 606,
    "end_page": 609,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The minimum password length setting determines the lowers number of characters that make up a password for a user account. There are many different theories about how to determine the best password length for an organization, but perhaps \"passphrase\" is a better term than \"password\".\n\nThe minlen option sets the minimum acceptable size for the new password (plus one if credits are not disabled which is the default). Cannot be set to lower value than 6.",
    "rationale": "Strong passwords help protect systems from password attacks. Types of password attacks include dictionary attacks, which attempt to use common words and phrases, and brute force attacks, which try every possible combination of characters. Also attackers may try to obtain the account database so they can use tools to discover the accounts and passwords.",
    "audit_details": "Run the following command to verify that password length is 14 or more characters, and conforms to local site policy:\n```\n# grep -Psi -- '^\n*minlen\\h*=\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\b'\n/etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwlength.conf:minlen = 14\n```\nVerify returned value(s) are no less than 14 characters and meet local site policy.\nRun the following command to verify that minlen is not set, or is 14 or more characters, and conforms to local site policy:\n```\ngrep -Psi -'^\n*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?minlen\\h*=\\h*([0-9]|1[0-3])\\b' /etc/pam.d/system-auth\n/etc/pam.d/common-password\nNothing should be returned\n```\n**Note:**\n - settings should be configured in only one location for clarity\n - Settings observe an order of precedence:\n`o` module arguments override the settings in the\n```\n       /etc/security/pwquality.conf configuration file\n```\n`o` settings in the /etc/security/pwquality.conf configuration file override\nsettings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\nare read in canonical order, with last read file containing the setting taking\nprecedence\n - It is recommended that settings be configured in a .conf file in the\n```\n    /etc/security/pwquality.conf.d/ directory for clarity, convenience, and\n```\ndurability.",
    "audit_code": "# grep -Psi -- '^\n*minlen\\h*=\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\b'\n/etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set password length of 14 or more characters. Ensure that password length conforms to local site policy:\n_Example:_\n```\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*minlen\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"minlen = 14\" > /etc/security/pwquality.conf.d/50pwlength.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?minlen\\b' /usr/share/pamconfigs/*\n```\nEdit any returned files and remove the minlen argument from the pam_pwquality.so line(s):",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*minlen\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"minlen = 14\" > /etc/security/pwquality.conf.d/50pwlength.conf\n}",
    "python_script": "\nimport os\nimport re\nimport configparser\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit minimum password length configuration\"\"\"\n    # Check module arguments in /etc/pam.d/* files\n    for file in os.listdir('/etc/pam.d/'):\n        with open(os.path.join('/etc/pam.d/', file), 'r') as f:\n            content = f.read()\n            if re.search(r'\\bpam_pwquality\\.so\\s+[^#]*\\bminlen\\s*=\\s*([1-9]|1[0-3])\\b', content):\n                print(f\"Found insecure minlen setting in /etc/pam.d/{file}\")\n                return False\n\n    # Check /etc/security/pwquality.conf file\n    config = configparser.ConfigParser()\n    config.read('/etc/security/pwquality.conf')\n    if config.has_option('pwquality', 'minlen'):\n        minlen = config.getint('pwquality', 'minlen')\n        if minlen < 14:\n            print(f\"Found insecure minlen setting in /etc/security/pwquality.conf: {minlen}\")\n            return False\n\n    # Check.conf files in /etc/security/pwquality.conf.d/ directory\n    for file in sorted(os.listdir('/etc/security/pwquality.conf.d/')):\n        with open(os.path.join('/etc/security/pwquality.conf.d/', file), 'r') as f:\n            content = f.read()\n            match = re.search(r'^\\s*minlen\\s*=\\s*(\\d+)\\s*$', content, re.MULTILINE)\n            if match:\n                minlen = int(match.group(1))\n                if minlen < 14:\n                    print(f\"Found insecure minlen setting in /etc/security/pwquality.conf.d/{file}: {minlen}\")\n                    return False\n\n    print(\"Minimum password length configuration is secure (14 or more characters)\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate minimum password length configuration\"\"\"\n    # Create or modify.conf file in /etc/security/pwquality.conf.d/ directory\n    config_dir = '/etc/security/pwquality.conf.d/'\n    if not os.path.exists(config_dir):\n        os.mkdir(config_dir)\n    with open(os.path.join(config_dir, '50pwlength.conf'), 'w') as f:\n        f.write(\"minlen = 14\\n\")\n    print(f\"Created/updated {config_dir}50pwlength.conf with minlen = 14\")\n\n    # Remove minlen arguments from pam_pwquality.so lines in /etc/pam.d/* files\n    for file in os.listdir('/etc/pam.d/'):\n        file_path = os.path.join('/etc/pam.d/', file)\n        with open(file_path, 'r+') as f:\n            content = f.read()\n            updated_content = re.sub(r'\\bpam_pwquality\\.so\\s+[^#]*\\bminlen\\s*=\\s*\\d+\\b', 'pam_pwquality.so', content)\n            if updated_content!= content:\n                f.seek(0)\n                f.write(updated_content)\n                f.truncate()\n                print(f\"Removed minlen argument from /etc/pam.d/{file}\")\n"
  },
  {
    "name": "Ensure password same consecutive characters is configured",
    "id": "5.3.3.2.4",
    "type": "Automated",
    "start_page": 614,
    "end_page": 617,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality `maxrepeat option sets the maximum number of allowed same consecutive characters in a new password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the maxrepeat option is set to 3 or less, not 0, and follows local site policy:\n```\n# grep -Psi -- '^\n*maxrepeat\nh*=\n*[1-3]\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwrepeat.conf:maxrepeat = 3\n```\nVerify returned value(s) are 3 or less, not 0, and meet local site policy\nRun the following command to verify that maxrepeat is not set, is 3 or less, not 0, and conforms to local site policy:\n```\ngrep -Psi -'^\n*password\text{(requisite|required|sufficient)}\text{+}pam_pwquality.so\text{(}([^#\n\\r]+\text{+})?maxrepeat\text{=}*(0|[4-9]|[1-9][0-9]+)\b' /etc/pam.d/common-password\nNothing should be returned\n```\n**Note:**\n  - settings should be configured in only one location for clarity\n  - Settings observe an order of precedence:\n  `o` module arguments override the settings in the\n```\n       /etc/security/pwquality.conf configuration file\n```\n`o` settings in the /etc/security/pwquality.conf configuration file override\nsettings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\nare read in canonical order, with last read file containing the setting taking\nprecedence\n  - It is recommended that settings be configured in a .conf file in the\n```\n    /etc/security/pwquality.conf.d/ directory for clarity, convenience, and\n```\ndurability.",
    "audit_code": "Run the following command to verify that the maxrepeat option is set to 3 or less, not 0, and follows local site policy:\n```\n# grep -Psi -- '^\n*maxrepeat\nh*=\n*[1-3]\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwrepeat.conf:maxrepeat = 3\n```\nVerify returned value(s) are 3 or less, not 0, and meet local site policy",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set maxrepeat to 3 or less and not 0. Ensure setting conforms to local site policy:\n_Example:_\n```\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\n*maxrepeat\n*=\n*# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir\n/etc/security/pwquality.conf.d/\n  printf '\n%s' \"maxrepeat = 3\" > /etc/security/pwquality.conf.d/50pwrepeat.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- '\bpam_pwquality.so\text{+}([^#\n\\r]+\text{+})?maxrepeat\b'\n/usr/share/pam-configs/*\n```\nEdit any returned files and remove the maxrepeat argument from the pam_pwquality.so line(s):",
    "remediation_code": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set maxrepeat to 3 or less and not 0. Ensure setting conforms to local site policy:\n_Example:_\n```\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\n*maxrepeat\n*=\n*# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir\n/etc/security/pwquality.conf.d/\n  printf '\n%s' \"maxrepeat = 3\" > /etc/security/pwquality.conf.d/50pwrepeat.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- '\bpam_pwquality.so\text{+}([^#\n\\r]+\text{+})?maxrepeat\b'\n/usr/share/pam-configs/*\n```\nEdit any returned files and remove the maxrepeat argument from the pam_pwquality.so line(s):",
    "python_script": "\nimport pathlib\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit password same consecutive characters configuration\"\"\"\n    # Define paths and pattern\n    pwquality_conf_path = pathlib.Path(\"/etc/security/pwquality.conf\")\n    pwquality_conf_d_path = pathlib.Path(\"/etc/security/pwquality.conf.d/\")\n    pam_common_password_path = pathlib.Path(\"/etc/pam.d/common-password\")\n    pattern = re.compile(r\"^maxrepeat\\s*=\\s*([1-3])\\b\")\n\n    # Check pwquality.conf and *.conf in pwquality.conf.d/\n    for path in [pwquality_conf_path] + list(pwquality_conf_d_path.glob(\"*.conf\")):\n        try:\n            with open(path, \"r\") as file:\n                for line in file:\n                    match = pattern.match(line)\n                    if match and int(match.group(1)) <= 3 and int(match.group(1)) != 0:\n                        # Found valid maxrepeat setting, check for conflicts\n                        subprocess.check_output(\n                            f\"grep -P '^password\\\\s+(requisite|required|sufficient)\\\\s+pam_pwquality.so.*maxrepeat' {pam_common_password_path}\",\n                            shell=True\n                        )\n                        # If the above command doesn't return output, we're good\n                        return True\n        except FileNotFoundError:\n            continue\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password same consecutive characters configuration\"\"\"\n    # Create/Modify .conf file in /etc/security/pwquality.conf.d/\n    conf_file_path = pathlib.Path(\"/etc/security/pwquality.conf.d/50pwrepeat.conf\")\n    conf_file_path.parent.mkdir(parents=True, exist_ok=True)\n    with open(conf_file_path, \"w\") as file:\n        file.write(\"maxrepeat = 3\")\n    print(f\"Created/Modified {conf_file_path} with maxrepeat = 3\")\n\n    # Remove maxrepeat argument from pam_pwquality.so lines\n    for path in pathlib.Path(\"/usr/share/pam-configs/\").glob(\"*\"):\n        try:\n            with open(path, \"r+\") as file:\n                content = file.readlines()\n                file.seek(0)\n                for line in content:\n                    if \"pam_pwquality.so\" in line and \"maxrepeat\" in line:\n                        print(f\"Removing maxrepeat from {path}\")\n                        file.write(re.sub(r\"maxrepeat=[^#\\s]+\", \"\", line))\n                    else:\n                        file.write(line)\n                file.truncate()\n        except FileNotFoundError:\n            continue\n"
  },
  {
    "name": "Ensure password maximum sequential characters is configured",
    "id": "5.3.3.2.5",
    "type": "Automated",
    "start_page": 618,
    "end_page": 621,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality `maxsequence` option sets the maximum length of monotonic character sequences in the new password. Examples of such sequence are 12345 or fedcb. The check is disabled if the value is 0. **Note: Most such passwords will not pass the simplicity check unless the sequence is only a minor part of the password.**",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the maxsequence option is set to 3 or less, not `0`, and follows local site policy:\n\n# grep -Psi -- '(^\\h*maxsequence\\h*=\\h*[1-3]\\b)' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n\n_Example output:_\n/etc/security/pwquality.conf.d/50-pwmaxsequence.conf:maxsequence = 3\n\nVerify returned value(s) are 3 or less, not 0, and meet local site policy.\nRun the following command to verify that maxsequence is not set, is 3 or less, not 0, and conforms to local site policy:\n\n# grep -Psi -'(^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b)' /etc/pam.d/common-password\nNothing should be returned.\n**Note:**\n- Settings should be configured in only one location for clarity.\n- Settings observe an order of precedence:\n  - module arguments override the settings in the `/etc/security/pwquality.conf` configuration file\n  - settings in the `/etc/security/pwquality.conf` configuration file override settings in a .conf file in the `/etc/security/pwquality.conf.d/` directory\n  - settings in a .conf file in the `/etc/security/pwquality.conf.d/` directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a .conf file in the `/etc/security/pwquality.conf.d/` directory for clarity, convenience, and durability.",
    "audit_code": "# grep -Psi -- '(^\\h*maxsequence\\h*=\\h*[1-3]\\b)' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n# grep -Psi -'(^\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b)' /etc/pam.d/common-password",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set maxsequence to 3 or less and not 0. Ensure setting conforms to local site policy:\n_Example:_\n```bash\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*maxsequence\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"maxsequence = 3\" > /etc/security/pwquality.conf.d/50pwmaxsequence.conf\n}\n```\nRun the following command:\n```bash\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\b' /usr/share/pam-configs/*\n```\nEdit any returned files and remove the maxsequence argument from the pam_pwquality.so line(s):",
    "remediation_code": "# Create or modify a file\n# Add or modify maxsequence setting\necho \"maxsequence = 3\" > /etc/security/pwquality.conf.d/50pwmaxsequence.conf\n# Remove maxsequence from PAM configs\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\b' /usr/share/pam-configs/*\n# Edit returned files",
    "python_script": "\nimport pathlib\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if maxsequence is correctly configured\"\"\"\n    # Regular expression pattern to match maxsequence setting\n    pattern = re.compile(r'^\\s*maxsequence\\s*=(\\d+)\\s*$')\n\n    # Check /etc/security/pwquality.conf\n    pwquality_conf = pathlib.Path('/etc/security/pwquality.conf')\n    if pwquality_conf.exists():\n        with pwquality_conf.open('r') as file:\n            for line in file:\n                match = pattern.match(line)\n                if match and (int(match.group(1)) < 1 or int(match.group(1)) > 3):\n                    print(f\"Invalid maxsequence value in {pwquality_conf}: {line.strip()}\")\n                    return False\n\n    # Check /etc/security/pwquality.conf.d/*.conf\n    conf_dir = pathlib.Path('/etc/security/pwquality.conf.d/')\n    if conf_dir.exists():\n        for conf_file in conf_dir.glob('*.conf'):\n            with conf_file.open('r') as file:\n                for line in file:\n                    match = pattern.match(line)\n                    if match and (int(match.group(1)) < 1 or int(match.group(1)) > 3):\n                        print(f\"Invalid maxsequence value in {conf_file}: {line.strip()}\")\n                        return False\n\n    # Verify no invalid maxsequence settings in /etc/pam.d/common-password\n    pam_config = pathlib.Path('/etc/pam.d/common-password')\n    if pam_config.exists():\n        with pam_config.open('r') as file:\n            for line in file:\n                if 'pam_pwquality.so' in line and 'maxsequence=' in line:\n                    value = line.split('maxsequence=')[1].split()[0]\n                    if value == '0' or (value.isdigit() and (int(value) < 1 or int(value) > 3)):\n                        print(f\"Invalid maxsequence setting in {pam_config}: {line.strip()}\")\n                        return False\n\n    print(\"Maxsequence settings are within the allowed range.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate maxsequence configuration issues\"\"\"\n    # Create /etc/security/pwquality.conf.d/ directory if it doesn't exist\n    conf_dir = pathlib.Path('/etc/security/pwquality.conf.d/')\n    if not conf_dir.exists():\n        conf_dir.mkdir()\n        print(f\"Created directory: {conf_dir}\")\n\n    # Create or modify a.conf file to set maxsequence = 3\n    remediation_file = conf_dir / '50pwmaxsequence.conf'\n    with remediation_file.open('w') as file:\n        file.write('maxsequence = 3\\n')\n    print(f\"Set maxsequence to 3 in {remediation_file}\")\n\n    # Remove maxsequence arguments from pam_pwquality.so lines in /usr/share/pam-configs/*\n    pam_configs_dir = pathlib.Path('/usr/share/pam-configs/')\n    if pam_configs_dir.exists():\n        for config_file in pam_configs_dir.glob('*.conf'):\n            lines = []\n            modified = False\n            with config_file.open('r') as file:\n                for line in file:\n                    if 'pam_pwquality.so' in line and 'maxsequence=' in line:\n                        line = re.sub(r'maxsequence=[^ ]*', '', line).rstrip()\n                        modified = True\n                    lines.append(line)\n            if modified:\n                with config_file.open('w') as file:\n                    file.writelines(lines)\n                print(f\"Removed maxsequence argument from pam_pwquality.so in {config_file}\")\n"
  },
  {
    "name": "Ensure password dictionary check is enabled",
    "id": "5.3.3.2.6",
    "type": "Automated",
    "start_page": 622,
    "end_page": 624,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality `dictcheck` option sets whether to check for the words from the cracklib dictionary.",
    "rationale": "If the operating system allows the user to select passwords based on dictionary words, this increases the chances of password compromise by increasing the opportunity for successful guesses, and brute-force attacks.",
    "audit_details": "Run the following command to verify that the dictcheck option is not set to 0 (disabled) in a pwquality configuration file:\n```\n# grep -Psi -- '^\\\\h*dictcheck\\\\h*=\\\\h*0\\\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\nNothing should be returned\n```\nRun the following command to verify that the dictcheck option is not set to 0 (disabled) as a module argument in a PAM file:\n```\n# grep -Psi -'^\\\\h*password\\\\h+(requisite|required|sufficient)\\\\h+pam_pwquality\\.so\\\\h+([^#\\\\n\\\\r]+\\\\h+)?dictcheck\\\\h*=\\\\h*0\\\\b' /etc/pam.d/common-password\nNothing should be returned\n```\n**Note:**\n  - Settings observe an order of precedence:\n`o` module arguments override the settings in the\n       `/etc/security/pwquality.conf configuration file`\n`o` settings in the /etc/security/pwquality.conf configuration file override\nsettings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\nare read in canonical order, with last read file containing the setting taking\nprecedence\n  - It is recommended that settings be configured in a .conf file in the\n    `/etc/security/pwquality.conf.d/ directory for clarity, convenience, and durability.",
    "audit_code": "# grep -Psi -- '^\\\\h*dictcheck\\\\h*=\\\\h*0\\\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\nNothing should be returned\n# grep -Psi -'^\\\\h*password\\\\h+(requisite|required|sufficient)\\\\h+pam_pwquality\\.so\\\\h+([^#\\\\n\\\\r]+\\\\h+)?dictcheck\\\\h*=\\\\h*0\\\\b' /etc/pam.d/common-password\nNothing should be returned",
    "remediation_details": "Edit any file ending in .conf in the /etc/security/pwquality.conf.d/ directory and/or\nthe file /etc/security/pwquality.conf and comment out or remove any instance of\n```\ndictcheck = 0:\n```\n_Example:_\n```\n# sed -ri 's/^\\s*dictcheck\\s*=/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\\\h+([^#\\\\n\\\\r]+)?dictcheck\\\\b'\n/usr/share/pam-configs/*\n```\nEdit any returned files and remove the dictcheck argument from the pam_pwquality.so line(s)",
    "remediation_code": "# sed -ri 's/^\\s*dictcheck\\s*=/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n# grep -Pl -- '\\bpam_pwquality\\.so\\\\h+([^#\\\\n\\\\r]+)?dictcheck\\\\b'\n/usr/share/pam-configs/*",
    "python_script": "\nimport re\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if password dictionary check is disabled\"\"\"\n    vuln_found = False\n\n    # Check /etc/security/pwquality.conf and *.conf in /etc/security/pwquality.conf.d/\n    for file in [pathlib.Path('/etc/security/pwquality.conf')] + list(pathlib.Path('/etc/security/pwquality.conf.d/').glob('*.conf')):\n        try:\n            content = file.read_text()\n            if re.search(r'^\\s*dictcheck\\s*=\\s*0\\b', content, re.MULTILINE):\n                print(f\"Found dictcheck disabled in {file}\")\n                vuln_found = True\n        except OSError as e:\n            print(f\"Error reading {file}: {e}\")\n\n    # Check /etc/pam.d/common-password\n    pam_file = pathlib.Path('/etc/pam.d/common-password')\n    try:\n        content = pam_file.read_text()\n        if re.search(r'^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so\\s+([^#\\n\\r]+)?dictcheck\\s*=\\s*0\\b', content, re.MULTILINE):\n            print(f\"Found dictcheck disabled as module argument in {pam_file}\")\n            vuln_found = True\n    except OSError as e:\n        print(f\"Error reading {pam_file}: {e}\")\n\n    return vuln_found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by enabling password dictionary check\"\"\"\n    # Comment out or remove dictcheck = 0 lines in /etc/security/pwquality.conf and *.conf in /etc/security/pwquality.conf.d/\n    for file in [pathlib.Path('/etc/security/pwquality.conf')] + list(pathlib.Path('/etc/security/pwquality.conf.d/').glob('*.conf')):\n        try:\n            content = file.read_text()\n            new_content = re.sub(r'^(\\s*)dictcheck\\s*=\\s*0\\b', r'# \\1dictcheck = 0', content, flags=re.MULTILINE)\n            if new_content!= content:\n                file.write_text(new_content)\n                print(f\"Commented out dictcheck = 0 in {file}\")\n        except OSError as e:\n            print(f\"Error updating {file}: {e}\")\n\n    # Remove dictcheck argument from pam_pwquality.so lines in /usr/share/pam-configs/*\n    for file in pathlib.Path('/usr/share/pam-configs/').glob('*'):\n        try:\n            content = file.read_text()\n            new_content = re.sub(r'(\\bpam_pwquality\\.so\\s+[^#\\n\\r]+?)\\s*dictcheck\\b', r'\\1', content)\n            if new_content!= content:\n                file.write_text(new_content)\n                print(f\"Removed dictcheck argument from pam_pwquality.so in {file}\")\n        except OSError as e:\n            print(f\"Error updating {file}: {e}\")\n"
  },
  {
    "name": "Ensure password quality checking is enforced",
    "id": "5.3.3.2.7",
    "type": "Automated",
    "start_page": 625,
    "end_page": 626,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_pwquality module can be configured to either reject a password if it fails the checks, or only print a warning. This is configured by setting the enforcing=<N> argument. If nonzero, a password will be rejected if it fails the checks, otherwise only a warning message will be provided. This setting applies only to the pam_pwquality module and possibly other applications that explicitly change their behavior based on it. It does not affect pwmake(1) and pwscore(1).",
    "rationale": "Strong passwords help protect systems from password attacks. Types of password attacks include dictionary attacks, which attempt to use common words and phrases, and brute force attacks, which try every possible combination of characters. Also attackers may try to obtain the account database so they can use tools to discover the accounts and passwords.",
    "audit_details": "Run the following command to verify that enforcing=0 has not been set in a pwquality configuration file:\n```\n# grep -PHsi -- '^\th*enforcing\th*=\th*0\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\nNothing should be returned\nRun the following command to verify that the enforcing=0 argument has not been set on the pam_pwquality module:\n```\n# grep -PHsi -'^\th*password\th+[^#\\n\\r]+\\hpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/etc/pam.d/common-password\n```\nNothing should be returned",
    "audit_code": "# grep -PHsi -- '^\th*enforcing\th*=\th*0\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n\n# grep -PHsi -'^\th*password\th+[^#\\n\\r]+\\hpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/etc/pam.d/common-password\n",
    "remediation_details": "Run the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/usr/share/pam-configs/*\n```\nEdit any returned files and remove the enforcing=0 argument from the `pam_pwquality.so line(s)`\nEdit /etc/security/pwquality.conf and all files ending in .conf in the `/etc/security/pwquality.conf.d/` directory and remove or comment out any line containing the enforcing = 0 argument:\n_Example:_\n```\n# sed -ri 's/^\\s*enforcing\\s*=\\s*0/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\n",
    "remediation_code": "# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/usr/share/pam-configs/*\n\n# sed -ri 's/^\\s*enforcing\\s*=\\s*0/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n",
    "python_script": "\nimport pathlib\nimport re\n\ndef audit_vuln() -> bool:\n    # Step 1: Check pwquality configuration files\n    pwquality_conf_dir = pathlib.Path('/etc/security')\n    conf_files = [pwquality_conf_dir / 'pwquality.conf'] + list((pwquality_conf_dir / 'pwquality.conf.d').glob('*.conf'))\n    for file in conf_files:\n        content = file.read_text()\n        if re.search(r'^\\s*enforcing\\s*=\\s*0\\b', content, re.MULTILINE):\n            print(f\"Found enforcing=0 in {file}\")\n            return False  # Vulnerability found\n\n    # Step 2: Check pam_pwquality module in common-password\n    common_password_file = pathlib.Path('/etc/pam.d/common-password')\n    content = common_password_file.read_text()\n    if re.search(r'^\\s*password\\s+[^#\\n\\r]+pam_pwquality\\.so\\s+([^#\\n\\r]+)?enforcing=0\\b', content, re.MULTILINE):\n        print(f\"Found enforcing=0 in {common_password_file}\")\n        return False  # Vulnerability found\n\n    print(\"No enforcing=0 found in audit\")\n    return True  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    # Identify and manually suggest edit for pam-configs (non-automated due to complexity and risk)\n    pam_configs_dir = pathlib.Path('/usr/share/pam-configs/')\n    for file in pam_configs_dir.glob('*'):\n        content = file.read_text()\n        if re.search(r'\\bpam_pwquality\\.so\\s+([^#\\n\\r]+)?enforcing=0\\b', content):\n            print(f\"**MANUAL ACTION REQUIRED**: Edit {file} and remove enforcing=0 from pam_pwquality.so line(s)\")\n\n    # Step 2: Comment out enforcing=0 in pwquality configuration files\n    pwquality_conf_dir = pathlib.Path('/etc/security')\n    conf_files = [pwquality_conf_dir / 'pwquality.conf'] + list((pwquality_conf_dir / 'pwquality.conf.d').glob('*.conf'))\n    for file in conf_files:\n        content = file.read_text()\n        updated_content = re.sub(r'^(\\s*)enforcing\\s*=\\s*0\\b', r'#\\1enforcing = 0', content, flags=re.MULTILINE)\n        if updated_content!= content:\n            file.write_text(updated_content)\n            print(f\"Commented out enforcing=0 in {file}\")\n"
  },
  {
    "name": "Ensure password quality is enforced for the root user",
    "id": "5.3.3.2.8",
    "type": "Automated",
    "start_page": 627,
    "end_page": 629,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "If the pwquality enforce_for_root option is enabled, the module will return error on failed check even if the user changing the password is root. This option is off by default which means that just the message about the failed check is printed but root can change the password anyway. Note: The root is not asked for an old password so the checks that compare the old and new password are not performed.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the enforce_for_root option is enabled in a pwquality configuration file:\n    # grep -Psi -- '^\thin*enforce_for_root\\b' /etc/security/pwquality.conf\n    /etc/security/pwquality.conf.d/*.conf\nExample output:\n    /etc/security/pwquality.conf.d/50-pwroot.conf:enforce_for_root\n\nNote:\n- Settings observe an order of precedence:\n   o module arguments override the settings in the /etc/security/pwquality.conf configuration file\n   o settings in the /etc/security/pwquality.conf configuration file override settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n   o settings in a .conf file in the /etc/security/pwquality.conf.d/ directory are read in canonical order, with last read file containing the setting taking precedence\n- It is recommended that settings be configured in a .conf file in the /etc/security/pwquality.conf.d/ directory for clarity, convenience, and durability.",
    "audit_code": "# grep -Psi -- '^\thin*enforce_for_root\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf",
    "remediation_details": "Edit or add the following line in a *.conf file in /etc/security/pwquality.conf.d or in /etc/security/pwquality.conf:\nExample:\n    #!/urs/bin/env bash\n    {\n      [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n      printf '\\n%s\\n' \"enforce_for_root\" > /etc/security/pwquality.conf.d/50pwroot.conf\n    }",
    "remediation_code": "#!/urs/bin/env bash\n{\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s\\n' \"enforce_for_root\" > /etc/security/pwquality.conf.d/50pwroot.conf\n}",
    "python_script": "\nimport pathlib\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if enforce_for_root is set in pwquality config files.\"\"\"\n    config_dirs = [pathlib.Path('/etc/security/pwquality.conf'), \n                   pathlib.Path('/etc/security/pwquality.conf.d/')]\n    \n    for config_dir in config_dirs:\n        if config_dir.is_file():  # Direct file check for pwquality.conf\n            with open(config_dir, 'r') as file:\n                for line in file:\n                    if line.strip() == 'enforce_for_root':\n                        return True\n        elif config_dir.is_dir():  # Recursive check for.conf files in dir\n            for file in config_dir.rglob('*.conf'):\n                with open(file, 'r') as conf_file:\n                    for line in conf_file:\n                        if line.strip() == 'enforce_for_root':\n                            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring enforce_for_root is set in a pwquality config file.\"\"\"\n    config_dir = pathlib.Path('/etc/security/pwquality.conf.d/')\n    config_file = config_dir / '50pwroot.conf'\n    \n    # Create directory if it doesn't exist\n    if not config_dir.exists():\n        config_dir.mkdir()\n        print(f\"Created directory '{config_dir}'\")\n    \n    # Create or modify the config file to include 'enforce_for_root'\n    if not config_file.exists():\n        with open(config_file, 'w') as file:\n            file.write('enforce_for_root\\n')\n        print(f\"Created file '{config_file}' with 'enforce_for_root'\")\n    else:\n        with open(config_file, 'r+') as file:\n            content = file.read()\n            if 'enforce_for_root' not in content:\n                file.write('enforce_for_root\\n')\n                print(f\"Appended 'enforce_for_root' to '{config_file}'\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediation needed.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found. 'enforce_for_root' is already set.\")\n"
  },
  {
    "name": "Ensure password history remember is configured",
    "id": "5.3.3.3.1",
    "type": "Automated",
    "start_page": 631,
    "end_page": 633,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords. The number of passwords remembered is set via the remember argument value in set for the pam_pwhistory module.  - remember=<N> - <N> is the number of old passwords to remember",
    "rationale": "Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password.",
    "audit_details": "Run the following command and verify:  - The pwhistory line in /etc/pam.d/common-password includes remember=<N>  - The value of <N> is 24 or more  - The value meets local site policy\n```\n# grep -Psi -'^\n\\h*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?remember=\\d+\\b\n' /etc/pam.d/common-password\n```\nOutput should be similar to:\n```\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root\ntry_first_pass use_authtok\n```",
    "audit_code": "# grep -Psi -'^\n\\h*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?remember=\\d+\\b\n' /etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n```\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n```\nEdit any returned files and edit or add the remember= argument, with a value of 24 or more, that meets local site policy to the pam_pwhistory line in the Password section:\n_Example File:_\n```\nName: pwhistory password history checking\nDefault: yes\nPriority: 1024\nPassword-Type: Primary\nPassword:\n  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass\nuse_authtok # <- **ensure line includes remember=<N>**\n```\nRun the following command to update the files in the /etc/pam.d/ directory:\n```\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n```\n_Example:_\n```\n# pam-auth-update --enable pwhistory\n```",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
    "python_script": "\nimport re\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit password history remember configuration\"\"\"\n    pam_d_path = pathlib.Path('/etc/pam.d/common-password')\n    pattern = r'password\\s+requisite\\s+pam_pwhistory\\.so\\s+[^#]*remember=(\\d+)'\n    try:\n        content = pam_d_path.read_text()\n        match = re.search(pattern, content)\n        if match:\n            remembered_passwords = int(match.group(1))\n            return remembered_passwords >= 24\n    except FileNotFoundError:\n        pass\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password history remember configuration\"\"\"\n    # Find relevant config files\n    config_dir = pathlib.Path('/usr/share/pam-configs/')\n    pattern = r'Password-Type:\\s*Primary.*?pam_pwhistory\\.so'\n    for file in config_dir.rglob('*.cfg'):\n        try:\n            content = file.read_text()\n            if re.search(pattern, content, re.DOTALL):\n                print(f\"Found config file: {file.name}\")\n                # Edit the file to include remember=24\n                new_content = re.sub(\n                    r'(password\\s+requisite\\s+pam_pwhistory\\.so)([^#]*$)',\n                    r'\\1 remember=24\\2',\n                    content, flags=re.MULTILINE\n                )\n                if new_content != content:\n                    file.write_text(new_content)\n                    print(f\"Updated {file.name} with remember=24\")\n                # Update PAM configuration\n                subprocess.run(['pam-auth-update', '--enable', file.stem])\n                print(f\"Updated PAM configuration with {file.stem}\")\n        except FileNotFoundError:\n            pass\n```\n**Example Usage:**\n```python\nif __name__ == '__main__':\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure password history is enforced for the root user",
    "id": "5.3.3.3.2",
    "type": "Automated",
    "start_page": 634,
    "end_page": 636,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "If the pwhistory enforce_for_root option is enabled, the module will enforce password history for the root user as well",
    "rationale": "Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password",
    "audit_details": "Run the following command to verify that the enforce_for_root argument is exists on the pwhistory line in /etc/pam.d/common-password:\n```\n# grep -Psi -'^\n*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?enforce_for_ro\not\\b' /etc/pam.d/common-password\n```\nOutput should be similar to:\n```\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root\ntry_first_pass use_authtok\n```\nPage 633",
    "audit_code": "# grep -Psi -'^\n*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?enforce_for_ro\not\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n```\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if(/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n```\nEdit any returned files and add the enforce_for_root argument to the pam_pwhistory line in the Password section:\n_Example File:_\n```\nName: pwhistory password history checking\nDefault: yes\nPriority: 1024\nPassword-Type: Primary\nPassword:\n  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass\nuse_authtok # <- **ensure line includes enforce_for_root**\n```\nRun the following command to update the files in the /etc/pam.d/ directory:\n```\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n```\n_Example:_\n```\n# pam-auth-update --enable pwhistory\n```\n",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if(/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n\n# pam-auth-update --enable pwhistory",
    "python_script": "\nimport re\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if password history is enforced for the root user\"\"\"\n    file_path = '/etc/pam.d/common-password'\n    pattern = r'\\bpassword\\s+[^#]+\\bpam_pwhistory\\.so\\b(?:[^#\\n\\r]+?\\b)?enforce_for_root\\b'\n    try:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            return bool(re.search(pattern, content))\n    except FileNotFoundError:\n        print(f\"File not found: {file_path}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by enforcing password history for the root user\"\"\"\n    # Find relevant files in /usr/share/pam-configs/\n    config_dir = '/usr/share/pam-configs/'\n    files = []\n    for root, _, filenames in os.walk(config_dir):\n        for filename in filenames:\n            file_path = os.path.join(root, filename)\n            with open(file_path, 'r') as file:\n                content = file.read()\n                if 'Password-Type: Primary' in content and 'pam_pwhistory.so' in content:\n                    files.append(file_path)\n\n    # Update each file by adding enforce_for_root to pam_pwhistory.so line\n    for file_path in files:\n        with open(file_path, 'r+') as file:\n            content = file.readlines()\n            updated = False\n            for i, line in enumerate(content):\n                if 'pam_pwhistory.so' in line:\n                    if 'enforce_for_root' not in line:\n                        content[i] = re.sub(r'(pam_pwhistory\\.so)', r'\\1 enforce_for_root', line)\n                        updated = True\n            if updated:\n                file.seek(0)\n                file.writelines(content)\n                file.truncate()\n                print(f\"Updated {file_path} with enforce_for_root\")\n\n        # Extract the profile name from the file path (e.g., 'pwhistory' from '/usr/share/pam-configs/pwhistory')\n        profile_name = os.path.splitext(os.path.basename(file_path))[0]\n        print(f\"Running pam-auth-update --enable {profile_name}\")\n        subprocess.run(['pam-auth-update', '--enable', profile_name])\n"
  },
  {
    "name": "Ensure pam_pwhistory includes use_authtok",
    "id": "5.3.3.3.3",
    "type": "Automated",
    "start_page": 637,
    "end_page": 638,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "use_authtok - When password changing enforce the module to set the new password to the one provided by a previously stacked password module",
    "rationale": "use_authtok allows multiple pam modules to confirm a new password before it is accepted.",
    "audit_details": "Run the following command to verify that the use_authtok argument exists on the pwhistory line in /etc/pam.d/common-password:\n# grep -Psi -'^\\\\h*password\\\\h+[^#\\\\n\\\\r]+\\\\h+pam_pwhistory\\\\.so\\\\h+([^#\\\\n\\\\r]+\\\\h+)?use_authtok\\\\b' /etc/pam.d/common-password\n\nOutput should be similar to:\n\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok",
    "audit_code": "# grep -Psi -'^\\\\h*password\\\\h+[^#\\\\n\\\\r]+\\\\h+pam_pwhistory\\\\.so\\\\h+([^#\\\\n\\\\r]+\\\\h+)?use_authtok\\\\b' /etc/pam.d/common-password",
    "remediation_details": "Edit any returned files and add the use_authtok argument to the pam_pwhistory line in the Password section:\n_Example File:_\nName: pwhistory password history checking\nDefault: yes\nPriority: 1024\nPassword-Type: Primary\nPassword:\n  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok # <- **ensure line includes use_authtok**\n\nRun the following command to update the files in the /etc/pam.d/ directory:\n\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n\n_Example:_\n\n# pam-auth-update --enable pwhistory",
    "remediation_code": "# pam-auth-update --enable pwhistory",
    "python_script": "\nimport re\nimport subprocess\nimport fileinput\n\n# Define constants for easier modification\nPAM_PASSWORD_FILE = '/etc/pam.d/common-password'\nPAM_MODULE_NAME = 'pwhistory'\nPAM_AUTH_UPDATE_CMD = f'pam-auth-update --enable {PAM_MODULE_NAME}'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if pam_pwhistory includes use_authtok in /etc/pam.d/common-password\"\"\"\n    try:\n        with open(PAM_PASSWORD_FILE, 'r') as file:\n            content = file.read()\n            pattern = r'password\\s+requisite\\s+pam_pwhistory\\.so.*\\buse_authtok\\b'\n            return bool(re.search(pattern, content))\n    except FileNotFoundError:\n        print(f\"File {PAM_PASSWORD_FILE} not found.\")\n        return False\n    except Exception as e:\n        print(f\"Error auditing vulnerability: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by adding use_authtok to pam_pwhistory.so line\"\"\"\n    try:\n        # Backup the original file\n        subprocess.run(f'cp {PAM_PASSWORD_FILE} {PAM_PASSWORD_FILE}.backup', shell=True, check=True)\n        print(f\"Backed up {PAM_PASSWORD_FILE} to {PAM_PASSWORD_FILE}.backup\")\n        \n        # Update the file content\n        with fileinput.input(PAM_PASSWORD_FILE, inplace=True) as file:\n            for line in file:\n                if 'pam_pwhistory.so' in line and 'use_authtok' not in line:\n                    updated_line = re.sub(r'(pam_pwhistory\\.so[^ ]*)', r'\\g<1> use_authtok', line)\n                    print(updated_line, end='')\n                else:\n                    print(line, end='')\n        print(f\"Updated {PAM_PASSWORD_FILE} to include use_authtok in pam_pwhistory.so line\")\n        \n        # Apply changes using pam-auth-update\n        subprocess.run(PAM_AUTH_UPDATE_CMD, shell=True, check=True)\n        print(f\"Ran {PAM_AUTH_UPDATE_CMD} to apply changes\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running command: {e}\")\n    except Exception as e:\n        print(f\"Error remediating vulnerability: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure pam_unix does not include nullok",
    "id": "5.3.3.4.1",
    "type": "Automated",
    "start_page": 640,
    "end_page": 642,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nullok argument overrides the default action of pam_unix.so to not permit the user access to a service if their official password is blank.",
    "rationale": "Using a strong password is essential to helping protect personal and sensitive information from unauthorized access",
    "audit_details": "Run the following command to verify that the nullok argument is not set on the\n```\npam_unix.so module:\n# grep -PH -- '^\n*\n*[^#\n\r]+\n*pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bnullok\\b'\n\n Output should be similar to:\n/etc/pam.d/common-password:password  [success=1 default=ignore] \npam_unix.so obscure use_authtok try_first_pass yescrypt\n/etc/pam.d/common-auth:auth  [success=2 default=ignore]  pam_unix.so\ntry_first_pass\n/etc/pam.d/common-account:account  [success=1 new_authtok_reqd=done\ndefault=ignore]  pam_unix.so\n/etc/pam.d/common-session:session  required  pam_unix.so\n/etc/pam.d/common-session-noninteractive:session  required  pam_unix.so\n\n```\nPage 639",
    "audit_code": "# grep -PH -- '^\n*\n*[^#\n\r]+\n*pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bnullok\\b'",
    "remediation_details": "Run the following command:\n```\n# grep -PH -- '^\n*([^#\n\r]+\n+)?pam_unix\\.so\\h+([^#\n\r]+\n+)?nullok\\b'\n/usr/share/pam-configs/*\n\n Edit any files returned and remove the nullok argument for the pam_unix lines Example File:\nName: Unix authentication\nDefault: yes\nPriority: 256\nAuth-Type: Primary\nAuth:\n    [success=end default=ignore]  pam_unix.so try_first_pass # <**ensure line does not include nullok nullok**>\nAuth-Initial:\n    [success=end default=ignore]  pam_unix.so # <- **ensure line does not include nullok nullok**\nAccount-Type: Primary\nAccount:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nAccount-Initial:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nSession-Type: Additional\nSession:\n    required    pam_unix.so\nSession-Initial:\n    required    pam_unix.so\nPassword-Type: Primary\nPassword:\n    [success=end default=ignore]  pam_unix.so obscure use_authtok\ntry_first_pass yescrypt\nPassword-Initial:\n    [success=end default=ignore]  pam_unix.so obscure yescrypt\n\n Run the following command to update the files in the /etc/pam.d/ directory:\n\n```\n# pam-auth-update --enable <EDITED_PROFILE_NAME>\n```\n\n### Example:\n```\n# pam-auth-update --enable unix\n```\n\n### Note: If custom files are being used, the corresponding files in /etc/pam.d/ would need to be edited directly, and the pam-auth-update --enable <EDITED_PROFILE_NAME> command skipped\nPage 640",
    "remediation_code": "# pam-auth-update --enable unix",
    "python_script": "\nimport re\nimport pathlib\nimport subprocess\n\n# Define PAM configuration file paths\npam_config_dirs = ['/etc/pam.d/', '/usr/share/pam-configs/']\npam_config_files = ['common-password', 'common-auth', 'common-account', 'common-session', 'common-session-noninteractive']\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if pam_unix.so includes nullok in PAM configuration files.\n    \n    Returns:\n        bool: True if nullok is found, False otherwise\n    \"\"\"\n    for dir_path in pam_config_dirs:\n        for file_name in pam_config_files:\n            file_path = pathlib.Path(dir_path) / file_name\n            if file_path.is_file():\n                with file_path.open('r') as file:\n                    for line in file:\n                        if re.search(r'\\bpam_unix\\.so\\b.*\\bnullok\\b', line):\n                            print(f\"Found 'nullok' in {file_path}: {line.strip()}\")\n                            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate pam_unix.so nullok vulnerability in PAM configuration files.\n    \"\"\"\n    edited_profiles = set()\n    \n    # Search and edit files in /usr/share/pam-configs/\n    for file_path in pathlib.Path('/usr/share/pam-configs/').glob('*.cfg'):\n        with file_path.open('r+') as file:\n            content = file.readlines()\n            modified = False\n            for i, line in enumerate(content):\n                if re.search(r'\\bpam_unix\\.so\\b.*\\bnullok\\b', line):\n                    print(f\"Removing 'nullok' from {file_path}: {line.strip()}\")\n                    content[i] = re.sub(r'\\bnullok\\b', '', line)\n                    modified = True\n            if modified:\n                file.seek(0)\n                file.writelines(content)\n                file.truncate()\n                edited_profiles.add(file_path.stem)\n    \n    # Update PAM configuration for edited profiles (if applicable)\n    for profile in edited_profiles:\n        subprocess.run(['pam-auth-update', '--enable', profile])\n        print(f\"Updated PAM configuration for profile: {profile}\")\n\n# Example usage\nif __name__ == '__main__':\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure pam_unix does not include remember",
    "id": "5.3.3.4.2",
    "type": "Automated",
    "start_page": 643,
    "end_page": 644,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The remember=n argument saves the last n passwords for each user in /etc/security/opasswd in order to force password change history and keep the user from alternating between the same password too frequently. The MD5 password hash algorithm is used for storing the old passwords. Instead of this option the pam_pwhistory module should be used. The pam_pwhistory module saves the last n passwords for each user in /etc/security/opasswd using the password hash algorithm set on the pam_unix module. This allows for the yescrypt or sha512 hash algorithm to be used.",
    "rationale": "The remember=n argument should be removed to ensure a strong password hashing algorithm is being used. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local user's old passwords stored in /etc/security/opasswd.",
    "audit_details": "Run the following command to verify that the remember argument is not set on the pam_unix.so module:\n# grep -PH -- '^\\\r*^\\h*[^#\\n\\r]+\\h*pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bremember=\\d+\\b'\n\nOutput should be similar to:\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure yescrypt\n/etc/pam.d/common-auth:auth  [success=1 default=ignore]  pam_unix.so\n/etc/pam.d/common-account:account  [success=1 new_authtok_reqd=done default=ignore]  pam_unix.so\n/etc/pam.d/common-session:session  required  pam_unix.so\n/etc/pam.d/common-session-noninteractive:session  required  pam_unix.so",
    "audit_code": "# grep -PH -- '^\r*^\t*[^#\n\r]+\t*pam_unix.so\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\bremember=\\d+\b'",
    "remediation_details": "Run the following command:\n# grep -PH -- '^(\\h*([^#\\n\\r]+\\h+)?pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?remember\\b' /usr/share/pam-configs/*\n\nEdit any files returned and remove the remember=_<N>_ argument for the pam_unix lines.\n\nExample output:\n[success=end default=ignore]  pam_unix.so obscure use_authtok try_first_pass yescrypt remember=5 # **<- remove remember=<N>**\n[success=end default=ignore]  pam_unix.so obscure yescrypt remember=5 # **<remove remember=<N>**\n\nRun the following command to update the files in the /etc/pam.d/ directory:\n# pam-auth-update --enable <EDITED_PROFILE_NAME>\n\nExample:\n# pam-auth-update --enable unix\n\nNote: If custom files are being used, the corresponding files in /etc/pam.d/ would need to be edited directly, and the pam-auth-update --enable <EDITED_PROFILE_NAME> command skipped",
    "remediation_code": "# grep -PH -- '^(\\h*([^#\\n\\r]+\\h+)?pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?remember\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport re\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit for the presence of 'remember' argument with pam_unix.so in /etc/pam.d/* files.\n    \n    Returns:\n        bool: True if the vulnerability is not found, False otherwise.\n    \"\"\"\n    pattern = r\"^.*pam_unix\\.so.*\\bremember=\\d+\\b\"\n    for file in pathlib.Path(\"/etc/pam.d\").glob(\"common-*\"):\n        with open(file, 'r') as f:\n            for line in f:\n                if re.search(pattern, line):\n                    return False  # Vulnerability found\n    return True  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by removing 'remember=<N>' from pam_unix.so lines \n    in /usr/share/pam-configs/* files and update pam-auth configuration.\n    \"\"\"\n    pattern_find = r\"^(.*pam_unix\\.so.*\\b)remember=\\d+(.*)$\"\n    replacement = r\"\\1\\2\"\n    for file in pathlib.Path(\"/usr/share/pam-configs\").glob(\"*\"):\n        try:\n            with open(file, 'r+') as f:\n                content = f.readlines()\n                modified = False\n                for i, line in enumerate(content):\n                    new_line, num_subs = re.subn(pattern_find, replacement, line)\n                    if num_subs > 0:\n                        content[i] = new_line\n                        modified = True\n                        print(f\"Removed 'remember=<N>' from {file.name}:{i+1}\")\n                if modified:\n                    f.seek(0)\n                    f.write(''.join(content))\n                    f.truncate()\n        except PermissionError:\n            print(f\"Permission denied for {file}. Skipping...\")\n    \n    # Assuming 'unix' profile if not explicitly noted in the task\n    print(\"Updating pam-auth configuration for 'unix' profile...\")\n    subprocess.run([\"pam-auth-update\", \"--enable\", \"unix\"])\n"
  },
  {
    "name": "Ensure pam_unix includes a strong password hashing algorithm",
    "id": "5.3.3.4.3",
    "type": "Automated",
    "start_page": 645,
    "end_page": 648,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password.\n\nThe pam_unix module can be configured to use one of the following hashing algorithms for user's passwords:\n\n  - `md5 - When a user changes their password next, encrypt it with the MD5 algorithm.`\n\n  - `bigcrypt - When a user changes their password next, encrypt it with the DEC C2 algorithm.`\n\n  - `sha256 - When a user changes their password next, encrypt it with the SHA256 algorithm. The SHA256 algorithm must be supported by the crypt(3) function.`\n\n  - `sha512 - When a user changes their password next, encrypt it with the SHA512 algorithm. The SHA512 algorithm must be supported by the crypt(3) function.`\n\n  - `blowfish - When a user changes their password next, encrypt it with the blowfish algorithm. The blowfish algorithm must be supported by the crypt(3) function.`\n\n  - `gost_yescrypt - When a user changes their password next, encrypt it with the gost-yescrypt algorithm. The gost-yescrypt algorithm must be supported by the crypt(3) function.`\n\n  - `yescrypt - When a user changes their password next, encrypt it with the yescrypt algorithm. The yescrypt algorithm must be supported by the crypt(3) function.",
    "rationale": "The SHA-512 and yescrypt algorithms provide a stronger hash than other algorithms used by Linux for password hash generation. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local user passwords.\n\n**Note: These changes only apply to the local system.**",
    "audit_details": "Run the following command to verify that a strong password hashing algorithm is set on the pam_unix.so module:\n```\n# grep -PH -'^\th*password\th+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\b' /etc/pam.d/common-password\n```\nOutput should be similar to:\n```\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt\n```\nVerify that the line(s) include either sha512 **- OR -** `yescrypt`",
    "audit_code": "# grep -PH -'^\th*password\th+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n```\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n```\nEdit any returned files and edit or add a strong hashing algorithm, either sha512 or yescrypt, that meets local site policy to the pam_unix lines in the Password section:\n_Example File:_\n```\nName: Unix authentication\nDefault: yes\nPriority: 256\nAuth-Type: Primary # <- Start of \"Auth\" section\nAuth:\n    [success=end default=ignore]  pam_unix.so try_first_pass\nAuth-Initial:\n    [success=end default=ignore]  pam_unix.so\nAccount-Type: Primary # <- Start of \"Account\" section\nAccount:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nAccount-Initial:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nSession-Type: Additional # <- Start of \"Session\" section\nSession:\n    required    pam_unix.so\nSession-Initial:\n    required    pam_unix.so\nPassword-Type: Primary # <- Start of \"Password\" section\nPassword:\n    [success=end default=ignore]  pam_unix.so obscure use_authtok try_first_pass yescrypt # <- **ensure hashing algorithm is either sha512 or yescrypt**\nPassword-Initial:\n    [success=end default=ignore]  pam_unix.so obscure yescrypt # <**ensure hashing algorithm is either sha512 or yescrypt**\n```\nRun the following command to update the files in the /etc/pam.d/ directory:\n```\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n```\n_Example:_\n```\n# pam-auth-update --enable unix\n```\n",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
    "python_script": "\nimport re\nimport subprocess\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if a strong password hashing algorithm (sha512 or yescrypt) is used by pam_unix.so.\"\"\"\n    common_password_file = Path('/etc/pam.d/common-password')\n    pattern = r'password\\s+[^#]+\\spam_unix\\.so\\s+[^#]*(sha512|yescrypt)\\b'\n    if common_password_file.exists():\n        content = common_password_file.read_text()\n        return bool(re.search(pattern, content))\n    else:\n        print(f\"File {common_password_file} not found.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring pam_unix.so uses a strong password hashing algorithm (sha512 or yescrypt).\"\"\"\n    config_dir = Path('/usr/share/pam-configs/')\n    target_files = [file for file in config_dir.glob('*') if file.is_file()]\n    \n    for file in target_files:\n        content = file.read_text()\n        if 'Password-Type:' in content and 'pam_unix.so' in content:\n            print(f\"Updating {file.name}...\")\n            updated_content = re.sub(r'(Password:\\s*\\[success=end default=ignore\\]\\s*pam_unix\\.so)([^#\\n]*)',\n                                      lambda m: f\"{m.group(1)} obscure use_authtok try_first_pass yescrypt\",\n                                      content, flags=re.MULTILINE)\n            if updated_content!= content:\n                file.write_text(updated_content)\n                print(f\"Added 'yescrypt' to {file.name}.\")\n    \n    # Assuming 'unix' is the modified profile name based on the provided example\n    subprocess.run(['pam-auth-update', '--enable', 'unix'])\n    print(\"Ran pam-auth-update to apply changes.\")\n"
  },
  {
    "name": "Ensure pam_unix includes use_authtok",
    "id": "5.3.3.4.4",
    "type": "Automated",
    "start_page": 649,
    "end_page": 651,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "use_authtok - When password changing enforce the module to set the new password to the one provided by a previously stacked password module",
    "rationale": "use_authtok allows multiple pam modules to confirm a new password before it is accepted.",
    "audit_details": "Run the following command to verify that use_authtok is set on the pam_unix.so module lines in the password stack:\n# grep -PH -'^\th*password\th+([^#\\n\\r]+)\\hpam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' /etc/pam.d/common-password\n\nOutput should be similar to:\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt\n\nVerify that the line(s) include use_authtok",
    "audit_code": "# grep -PH -'^\th*password\th+([^#\\n\\r]+)\\hpam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n\nEdit any returned files add use_authtok to the pam_unix line in the Password section under Password: subsection: Note: The if the file's Password section includes a Password-Initial: subsection, use_authtok should not be added to the pam_unix line in the Password-Initial: subsection Example File:\nName: Unix authentication\nDefault: yes\nPriority: 256\nAuth-Type: Primary # <- Start of \"Auth\" section\nAuth:\n    [success=end default=ignore]  pam_unix.so try_first_pass\nAuth-Initial:\n    [success=end default=ignore]  pam_unix.so\nAccount-Type: Primary # <- Start of \"Account\" section\nAccount:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nAccount-Initial:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nSession-Type: Additional # <- Start of \"Session\" section\nSession:\n    required    pam_unix.so\nSession-Initial:\n    required    pam_unix.so\nPassword-Type: Primary # <- Start of \"Password\" section\nPassword:\n    [success=end default=ignore]  pam_unix.so obscure use_authtok try_first_pass yescrypt # <- **ensure line includes use_authtok**\nPassword-Initial:\n    [success=end default=ignore]  pam_unix.so obscure yescrypt # <**Password-Initial: subsection does not include use_authtok",
    "remediation_code": "# pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
    "python_script": ""
  },
  {
    "name": "Ensure password expiration is configured",
    "id": "5.4.1.1",
    "type": "Automated",
    "start_page": 654,
    "end_page": 657,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age.\n\n`PASS_MAX_DAYS` _<N> - The maximum number of days a password may be used. If the_ password is older than this, a password change will be forced. If not specified, -1 will be assumed (which disables the restriction).",
    "rationale": "The window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity.\n\nWe recommend a yearly password change. This is primarily because for all their good intentions users will share credentials across accounts. Therefore, even if a breach is publicly identified, the user may not see this notification, or forget they have an account on that site. This could leave a shared credential vulnerable indefinitely. Having an organizational policy of a 1-year (annual) password expiration is a reasonable compromise to mitigate this with minimal user burden.",
    "audit_details": "Run the following command and verify PASS_MAX_DAYS is set to 365 days or less and conforms to local site policy:\n```\n# grep -Pi -- '^\\\\h*PASS_MAX_DAYS\\\\h+\\\\d+\\\\b' /etc/login.defs\n```\n_Example output:_\n```\nPASS_MAX_DAYS 365\n```\nRun the following command and Review list of users and PASS_MAX_DAYS to verify that all users PASS_MAX_DAYS conforms to site policy (no more than 365 days): Run the following command to verify all passwords have a PASS_MAX_DAYS of 365 days or less and greater than 0 days:\n```\n# awk -F: '($2~/^\\\\$.+\\\\$) {if($5 > 365 || $5 < 1)print \"User: \" $1 \" PASS_MAX_DAYS: \" $5}' /etc/shadow\n```\nNothing should be returned",
    "audit_code": "# grep -Pi -- '^[ \\t]*PASS_MAX_DAYS[ \\t]+[0-9]+\\b' /etc/login.defs\n",
    "remediation_details": "Set the PASS_MAX_DAYS parameter to conform to site policy in /etc/login.defs :\n```\nPASS_MAX_DAYS 365\n```\nModify user parameters for all users with a password set to match:\n```\n# chage --maxdays 365 <user>\n```\nEdit /etc/login.defs and set PASS_MAX_DAYS to a value greater than 0 that follows local site policy:\n_Example:_\n```\nPASS_MAX_DAYS 365\n```\nRun the following command to modify user parameters for all users with a password set to a maximum age no greater than 356 or less than 1 that follows local site policy:\n```\n# chage --maxdays <N> <user>\n```\n_Example:_\n```\n# awk -F: '($2~/^\\\\$.+\\\\$) {if($5 > 365 || $5 < 1)system (\"chage --maxdays 365 \" $1)}' /etc/shadow\n```\n",
    "remediation_code": "# vi /etc/login.defs\n# chage --maxdays 365 <user>",
    "python_script": "\nimport re\nimport pwd\nimport spwd\nimport subprocess\n\ndef audit_vuln() -> bool:\n    # Verify PASS_MAX_DAYS in /etc/login.defs\n    with open(\"/etc/login.defs\", \"r\") as login_defs:\n        for line in login_defs:\n            match = re.match(r'^\\s*PASS_MAX_DAYS\\s+(\\d+)\\s*$', line)\n            if match:\n                pass_max_days = int(match.group(1))\n                if pass_max_days > 365 or pass_max_days < 1:\n                    print(f\"PASS_MAX_DAYS in /etc/login.defs is set to {pass_max_days}, which does not conform to the site policy.\")\n                    return False\n\n    # Verify all users' PASS_MAX_DAYS in /etc/shadow\n    for user in pwd.getpwall():\n        try:\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_max > 365 or shadow_entry.sp_max < 1:\n                print(f\"User {user.pw_name} has PASS_MAX_DAYS set to {shadow_entry.sp_max}, which does not conform to the site policy.\")\n                return False\n        except KeyError:\n            # User not found in shadow database (likely no password set)\n            continue\n\n    return True\n\n\ndef remediate_vuln() -> None:\n    desired_pass_max_days = 365\n\n    # Set PASS_MAX_DAYS in /etc/login.defs\n    with open(\"/etc/login.defs\", \"r+\") as login_defs:\n        lines = login_defs.readlines()\n        login_defs.seek(0)\n        pass_max_days_found = False\n        for line in lines:\n            if line.startswith(\"PASS_MAX_DAYS\"):\n                login_defs.write(f\"PASS_MAX_DAYS {desired_pass_max_days}\\n\")\n                pass_max_days_found = True\n            else:\n                login_defs.write(line)\n        if not pass_max_days_found:\n            login_defs.write(f\"PASS_MAX_DAYS {desired_pass_max_days}\\n\")\n        login_defs.truncate()\n    print(f\"Set PASS_MAX_DAYS to {desired_pass_max_days} in /etc/login.defs\")\n\n    # Modify user parameters for all users with a password set\n    for user in pwd.getpwall():\n        try:\n            subprocess.run([\"chage\", \"--maxdays\", str(desired_pass_max_days), user.pw_name])\n            print(f\"Updated PASS_MAX_DAYS for user {user.pw_name} to {desired_pass_max_days}\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to update PASS_MAX_DAYS for user {user.pw_name}: {e}\")\n"
  },
  {
    "name": "Ensure password expiration warning days is configured",
    "id": "5.4.1.3",
    "type": "Automated",
    "start_page": 661,
    "end_page": 662,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify users that their password will expire in a defined number of days.\n\n`PASS_WARN_AGE` _<N> - The number of days warning given before a password expires. A_\nzero means warning is given only upon the day of expiration, a negative value means no warning is given. If not specified, no warning will be provided.",
    "rationale": "Providing an advance warning that a password will be expiring gives users time to think of a secure password. Users caught unaware may choose a simple password or write it down where it may be discovered.",
    "audit_details": "Run the following command and verify PASS_WARN_AGE is 7 or more and follows local site policy:\n\n```\n# grep -Pi -- '^\n*PASS_WARN_AGE\n+\n\n\\d+\n\b' /etc/login.defs\n\n```\n_Example output:_\n```\nPASS_WARN_AGE 7\n```\nRun the following command to verify all passwords have a PASS_WARN_AGE of 7 or more:\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($6 < 7)print \"User: \" $1 \" PASS_WARN_AGE: \"\n$6}' /etc/shadow\n```\nNothing should be returned",
    "audit_code": "# grep -Pi -- '^\n*PASS_WARN_AGE\n+\n\n\\d+\n\b' /etc/login.defs\n# awk -F: '($2~/^\\$.+\\$/) {if($6 < 7)print \"User: \" $1 \" PASS_WARN_AGE: \" $6}' /etc/shadow",
    "remediation_details": "Edit /etc/login.defs and set PASS_WARN_AGE to a value of 7 or more that follows local site policy:\n_Example:_\n```\nPASS_WARN_AGE 7\n```\nRun the following command to modify user parameters for all users with a password set to a minimum warning to 7 or more days that follows local site policy:\n```\n# chage --warndays <N> <user>\n```\n_Example:_\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($6 < 7)system (\"chage --warndays 7 \" $1)}' /etc/shadow\n```\n**Default Value:**\nPASS_WARN_AGE 7",
    "remediation_code": "# chage --warndays <N> <user>\n# awk -F: '($2~/^\\$.+\\$/) {if($6 < 7)system (\"chage --warndays 7 \" $1)}' /etc/shadow",
    "python_script": "\nimport pathlib\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit password expiration warning days configuration.\"\"\"\n    # Define the file paths\n    login_defs = pathlib.Path('/etc/login.defs')\n    shadow = pathlib.Path('/etc/shadow')\n\n    # Regular expression pattern for PASS_WARN_AGE\n    pattern = re.compile(r'^\\s*PASS_WARN_AGE\\s+(\\d+)\\s*$')\n\n    # Extract PASS_WARN_AGE from /etc/login.defs\n    with login_defs.open('r') as file:\n        for line in file:\n            match = pattern.match(line)\n            if match:\n                warn_age = int(match.group(1))\n                if warn_age < 7:\n                    print(f\"PASS_WARN_AGE in /etc/login.defs is set to {warn_age}, which is less than 7.\")\n                    return False\n\n    # Check PASS_WARN_AGE for all users in /etc/shadow\n    with shadow.open('r') as file:\n        for line in file:\n            fields = line.split(':')\n            if len(fields) > 5 and fields[1].startswith('$') and int(fields[5]) < 7:\n                print(f\"User {fields[0]} has PASS_WARN_AGE set to {fields[5]}, which is less than 7.\")\n                return False\n\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password expiration warning days configuration.\"\"\"\n    # Define the target PASS_WARN_AGE value\n    target_warn_age = 7\n\n    # Edit /etc/login.defs to set PASS_WARN_AGE\n    login_defs = pathlib.Path('/etc/login.defs')\n    lines = []\n    found = False\n    with login_defs.open('r') as file:\n        for line in file:\n            if line.startswith('PASS_WARN_AGE'):\n                lines.append(f'PASS_WARN_AGE {target_warn_age}\\n')\n                found = True\n            else:\n                lines.append(line)\n    if not found:\n        lines.append(f'PASS_WARN_AGE {target_warn_age}\\n')\n    with login_defs.open('w') as file:\n        file.writelines(lines)\n    print(f\"Updated PASS_WARN_AGE in /etc/login.defs to {target_warn_age}.\")\n\n    # Update PASS_WARN_AGE for users in /etc/shadow\n    shadow = pathlib.Path('/etc/shadow')\n    with shadow.open('r') as file:\n        for line in file:\n            fields = line.split(':')\n            if len(fields) > 5 and fields[1].startswith('$') and int(fields[5]) < target_warn_age:\n                subprocess.run(['chage', '--warndays', str(target_warn_age), fields[0]])\n                print(f\"Updated PASS_WARN_AGE for user {fields[0]} to {target_warn_age}.\")\n"
  },
  {
    "name": "Ensure strong password hashing algorithm is configured",
    "id": "5.4.1.4",
    "type": "Automated",
    "start_page": 663,
    "end_page": 665,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password. ENCRYPT_METHOD (string) - This defines the system default encryption algorithm for encrypting passwords (if no algorithm are specified on the command line). It can take one of these values:\n  - `MD5 - MD5-based algorithm will be used for encrypting password`\n  - `SHA256 - SHA256-based algorithm will be used for encrypting password`\n  - `SHA512 - SHA512-based algorithm will be used for encrypting password`\n  - `BCRYPT - BCRYPT-based algorithm will be used for encrypting password`\n  - `YESCRYPT - YESCRYPT-based algorithm will be used for encrypting password`\n  - `DES - DES-based algorithm will be used for encrypting password (default)`\n\nNote:\n  - This parameter overrides the deprecated MD5_CRYPT_ENAB variable.\n  - This parameter will only affect the generation of group passwords.\n  - The generation of user passwords is done by PAM and subject to the PAM configuration.\n  - It is recommended to set this variable consistently with the PAM configuration.",
    "rationale": "The SHA-512 and yescrypt algorithms provide a stronger hash than other algorithms used by Linux for password hash generation. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local group passwords.",
    "audit_details": "Run the following command to verify the hashing algorithm is sha512 or yescrypt in /etc/login.defs:\n```\n# grep -Pi -- '^[\\h]*ENCRYPT_METHOD\\h+(SHA512|yescrypt)\\b' /etc/login.defs\n```\nExample output:\n```\nENCRYPT_METHOD SHA512\n - OR ENCRYPT_METHOD YESCRYPT\n```",
    "audit_code": "# grep -Pi -- '^[\\h]*ENCRYPT_METHOD\\h+(SHA512|yescrypt)\\b' /etc/login.defs",
    "remediation_details": "Edit /etc/login.defs and set the ENCRYPT_METHOD to SHA512 or YESCRYPT:\n```\nENCRYPT_METHOD <HASHING_ALGORITHM>\n```\nExample:\n```\nENCRYPT_METHOD YESCRYPT\n```",
    "remediation_code": "Edit /etc/login.defs and set the ENCRYPT_METHOD to SHA512 or YESCRYPT.",
    "python_script": "\nimport re\nimport os\n\n# Target file and desired hashing algorithm\nTARGET_FILE = '/etc/login.defs'\nDESIRE_HASH_METHOD = 'yescrypt'\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the ENCRYPT_METHOD in /etc/login.defs is set to SHA512 or yescrypt.\n    \n    Returns:\n        bool: True if the hashing method is secure, False otherwise.\n    \"\"\"\n    try:\n        with open(TARGET_FILE, 'r') as file:\n            content = file.read()\n            pattern = r'^\\s*ENCRYPT_METHOD\\s+(SHA512|yescrypt)\\b'\n            return bool(re.search(pattern, content, re.MULTILINE))\n    except FileNotFoundError:\n        print(f\"File {TARGET_FILE} not found.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Updates ENCRYPT_METHOD in /etc/login.defs to the desired secure hashing algorithm.\n    \"\"\"\n    if not audit_vuln():  # Check if remediation is needed\n        try:\n            with open(TARGET_FILE, 'r+') as file:\n                content = file.read()\n                pattern = r'^\\s*ENCRYPT_METHOD\\s+.+'\n                new_line = f\"ENCRYPT_METHOD {DESIRE_HASH_METHOD}\"\n                updated_content = re.sub(pattern, new_line, content, flags=re.MULTILINE)\n                if updated_content == content:  # No match found, append\n                    updated_content += f\"\\n{new_line}\"\n                file.seek(0)\n                file.write(updated_content)\n                file.truncate()\n            print(f\"Updated ENCRYPT_METHOD to {DESIRE_HASH_METHOD} in {TARGET_FILE}.\")\n        except Exception as e:\n            print(f\"Failed to update {TARGET_FILE}: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure inactive password lock is configured",
    "id": "5.4.1.5",
    "type": "Automated",
    "start_page": 666,
    "end_page": 668,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "User accounts that have been inactive for over a given period of time can be automatically disabled.\n```\nINACTIVE - Defines the number of days after the password exceeded its maximum age\n```\nwhere the user is expected to replace this password.\nThe value is stored in the shadow password file. An input of 0 will disable an expired password with no delay. An input of -1 will blank the respective field in the shadow password file.",
    "rationale": "Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.",
    "audit_details": "Run the following command and verify INACTIVE conforms to site policy (no more than 45 days):\n```\n# useradd -D | grep INACTIVE\nINACTIVE=45\n```\nVerify all users with a password have Password inactive no more than 45 days after password expires\nVerify all users with a password have Password inactive no more than 45 days after password expires: Run the following command and Review list of users and INACTIVE to verify that all users INACTIVE conforms to site policy (no more than 45 days):\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)print \"User: \" $1 \" INACTIVE: \" $7}' /etc/shadow\n```\nNothing should be returned.",
    "audit_code": "# useradd -D | grep INACTIVE\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)print \"User: \" $1 \" INACTIVE: \" $7}' /etc/shadow",
    "remediation_details": "Run the following command to set the default password inactivity period to 45 days or less that meets local site policy:\n```\n# useradd -D -f <N>\n```\n_Example:_\n```\n# useradd -D -f 45\n```\nRun the following command to modify user parameters for all users with a password set to a inactive age of 45 days or less that follows local site policy:\n```\n# chage --inactive <N> <user>\n```\n_Example:_\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)system (\"chage --inactive 45 \" $1)}' /etc/shadow\n```",
    "remediation_code": "# useradd -D -f 45\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)system (\"chage --inactive 45 \" $1)}' /etc/shadow",
    "python_script": "\nimport pwd\nimport spwd\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit inactive password lock configuration.\n    \n    Returns:\n    bool: True if configuration conforms to site policy, False otherwise\n    \"\"\"\n    # Verify default INACTIVE value\n    default_inactive = subprocess.check_output([\"useradd\", \"-D\"]).decode().splitlines()\n    default_inactive = next((line.split(\"=\")[1] for line in default_inactive if line.startswith(\"INACTIVE\")), None)\n    if default_inactive and int(default_inactive) > 45:\n        print(f\"Default INACTIVE value ({default_inactive}) exceeds site policy (\u2264 45 days)\")\n        return False\n\n    # Verify all users with a password have INACTIVE set to \u2264 45 days\n    for user in pwd.getpwall():\n        if user.pw_shell!= \"/usr/sbin/nologin\" and user.pw_shell!= \"/bin/false\":\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_inact and int(shadow_entry.sp_inact) > 45:\n                print(f\"User {user.pw_name} has INACTIVE value ({shadow_entry.sp_inact}) exceeding site policy (\u2264 45 days)\")\n                return False\n\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate inactive password lock configuration.\n    \"\"\"\n    # Set default password inactivity period to \u2264 45 days\n    subprocess.run([\"useradd\", \"-D\", \"-f\", \"45\"])\n    print(\"Set default password inactivity period to 45 days\")\n\n    # Update all users with a password to have an INACTIVE age of \u2264 45 days\n    for user in pwd.getpwall():\n        if user.pw_shell!= \"/usr/sbin/nologin\" and user.pw_shell!= \"/bin/false\":\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_inact and int(shadow_entry.sp_inact) > 45:\n                subprocess.run([\"chage\", \"--inactive\", \"45\", user.pw_name])\n                print(f\"Updated user {user.pw_name} INACTIVE value to 45 days\")\n"
  },
  {
    "name": "Ensure all users last password change date is in the past",
    "id": "5.4.1.6",
    "type": "Automated",
    "start_page": 669,
    "end_page": 670,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "All users should have a password change date in the past.",
    "rationale": "If a user's recorded password change date is in the future, then they could bypass any set password expiration.",
    "audit_details": "Run the following command and verify nothing is returned\n```\n{\n  while IFS= read -r l_user; do\n   l_change=$(date -d \"$(chage --list $l_user | grep '^Last password\nchange' | cut -d: -f2 | grep -v 'never$')\" +%s)\n   if [[ \"$l_change\" -gt \"$(date +%s)\" ]]; then\n     echo \"User: \\\"$l_user\\\" last password change was \\\"$(chage --list\n$l_user | grep '^Last password change' | cut -d: -f2)\\\"\"\n   fi\n  done < <(awk -F: '$2~/^\\$.+\\$/{print $1}' /etc/shadow)\n}\n```",
    "audit_code": "{\n  while IFS= read -r l_user; do\n   l_change=$(date -d \"$(chage --list $l_user | grep '^Last password\nchange' | cut -d: -f2 | grep -v 'never$')\" +%s)\n   if [[ \"$l_change\" -gt \"$(date +%s)\" ]]; then\n     echo \"User: \\\"$l_user\\\" last password change was \\\"$(chage --list\n$l_user | grep '^Last password change' | cut -d: -f2)\\\"\"\n   fi\n  done < <(awk -F: '$2~/^\\$.+\\$/{print $1}' /etc/shadow)\n}",
    "remediation_details": "Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate.",
    "remediation_code": "",
    "python_script": "\nimport pwd\nimport spwd\nimport datetime\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for users with a password change date in the future.\n    \n    Returns:\n    bool: True if any user has a password change date in the future, False otherwise.\n    \"\"\"\n    vuln_found = False\n    for user in pwd.getpwall():\n        try:\n            spwd_entry = spwd.getspnam(user.pw_name)\n            if spwd_entry.sp_pwdchg != 0:  # 0 indicates no change or \"never\"\n                change_date = datetime.date.fromtimestamp(spwd_entry.sp_pwdchg * 86400)  # convert days since epoch to date\n                if change_date > datetime.date.today():\n                    print(f\"User: \\\"{user.pw_name}\\\" last password change was in the future: {change_date}\")\n                    vuln_found = True\n        except KeyError:\n            # User not found in shadow database ( unlikely, but handle just in case)\n            pass\n    return vuln_found\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Locks accounts and expires passwords for users with a password change date in the future.\n    \"\"\"\n    for user in pwd.getpwall():\n        try:\n            spwd_entry = spwd.getspnam(user.pw_name)\n            if spwd_entry.sp_pwdchg != 0:  \n                change_date = datetime.date.fromtimestamp(spwd_entry.sp_pwdchg * 86400)  \n                if change_date > datetime.date.today():\n                    subprocess.run(f\"usermod -L {user.pw_name}\", shell=True, check=True)\n                    print(f\"Locked account for: {user.pw_name}\")\n                    subprocess.run(f\"chage -d 0 {user.pw_name}\", shell=True, check=True)\n                    print(f\"Expired password for: {user.pw_name}\")\n        except KeyError:\n            pass\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure root is the only UID 0 account",
    "id": "5.4.2.1",
    "type": "Automated",
    "start_page": 672,
    "end_page": 672,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Any account with UID 0 has superuser privileges on the system.",
    "rationale": "This access must be limited to only the default root account and only from the system console. Administrative access must be through an unprivileged account using an approved mechanism as noted in Item 5.6 Ensure access to the su command is restricted.",
    "audit_details": "Run the following command and verify that only \"root\" is returned:\n```\n# awk -F: '($3 == 0) { print $1 }' /etc/passwd\nroot\n```\n",
    "audit_code": "# awk -F: '($3 == 0) { print $1 }' /etc/passwd",
    "remediation_details": "Run the following command to change the root account UID to 0:\n```\n# usermod -u 0 root\n```\nModify any users other than root with UID 0 and assign them a new UID.",
    "remediation_code": "# usermod -u 0 root",
    "python_script": "\nimport pwd\nimport grp\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit to ensure only 'root' has UID 0.\"\"\"\n    with open(\"/etc/passwd\", \"r\") as passwd_file:\n        for line in passwd_file.readlines():\n            if line.split(\":\")[2] == '0' and line.split(\":\")[0]!= 'root':\n                print(f\"Found non-root account '{line.split(':')[0]}' with UID 0.\")\n                return False\n    print(\"Only 'root' account found with UID 0.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring root's UID is 0 and changing other UIDs.\"\"\"\n    # Sanity check: Ensure root's UID is indeed 0 (not that this should ever change)\n    if pwd.getpwnam('root').pw_uid!= 0:\n        os.system(\"usermod -u 0 root\")\n        print(\"Set root account's UID to 0.\")\n    \n    # Find and modify non-root accounts with UID 0\n    next_uid = 1001  # Starting point, increase as needed\n    for user in pwd.getpwall():\n        if user.pw_uid == 0 and user.pw_name!= 'root':\n            while pwd.getpwuid(next_uid):  # Find next available UID\n                next_uid += 1\n            os.system(f\"usermod -u {next_uid} {user.pw_name}\")\n            print(f\"Changed UID of non-root account '{user.pw_name}' to {next_uid}.\")\n            next_uid += 1\n"
  },
  {
    "name": "Ensure root is the only GID 0 account",
    "id": "5.4.2.2",
    "type": "Automated",
    "start_page": 673,
    "end_page": 674,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The usermod command can be used to specify which group the root account belongs to. This affects permissions of files that are created by the root account.",
    "rationale": "Using GID 0 for the root account helps prevent root -owned files from accidentally becoming accessible to non-privileged users.",
    "audit_details": "Run the following command to verify the root user's primary GID is 0, and no other user's have GID 0 as their primary GID:\n```\n# awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1\":\"$4}' /etc/passwd\nroot:0\n```\n**Note: User's: sync, shutdown, halt, and operator are excluded from the check for other user's with GID 0**",
    "audit_code": "# awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1\":\"$4}' /etc/passwd\nroot:0",
    "remediation_details": "Run the following command to set the root user's GID to 0:\n```\n# usermod -g 0 root\n```\nRun the following command to set the root group's GID to 0:\n```\n# groupmod -g 0 root\n```\nRemove any users other than the root user with GID 0 or assign them a new GID if appropriate.",
    "remediation_code": "# usermod -g 0 root\n# groupmod -g 0 root",
    "python_script": "\nimport pwd\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if only root has GID 0.\"\"\"\n    # Dictionary to store users with their GIDs for easy lookup\n    users_gids = {}\n    for user in pwd.getpwall():\n        users_gids[user.pw_name] = user.pw_gid\n    \n    # Check if root's primary GID is 0\n    if users_gids.get('root') != 0:\n        print(\"Root user's primary GID is not 0.\")\n        return False\n    \n    # Check if any other user (excluding sync, shutdown, halt, operator) has GID 0\n    excluded_users = ['sync', 'shutdown', 'halt', 'operator']\n    for user, gid in users_gids.items():\n        if user not in excluded_users and gid == 0 and user != 'root':\n            print(f\"User {user} has GID 0, which is not allowed.\")\n            return False\n    \n    # Verify root group's GID is 0\n    try:\n        if grp.getgrnam('root').gr_gid != 0:\n            print(\"Root group's GID is not 0.\")\n            return False\n    except KeyError:\n        print(\"Root group not found, which is unexpected.\")\n        return False\n    \n    print(\"Only root has GID 0 and root group's GID is 0, as required.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by ensuring only root has GID 0.\"\"\"\n    import subprocess\n    \n    # Set root user's GID to 0 (not necessary but for compliance with original request)\n    subprocess.run(['usermod', '-g', '0', 'root'])\n    print(\"Set root user's GID to 0.\")\n    \n    # Set root group's GID to 0\n    subprocess.run(['groupmod', '-g', '0', 'root'])\n    print(\"Set root group's GID to 0.\")\n    \n    # Find and modify or remove other users with GID 0 (excluding root and the excluded users)\n    excluded_users = ['sync', 'shutdown', 'halt', 'operator', 'root']\n    for user in pwd.getpwall():\n        if user.pw_name not in excluded_users and user.pw_gid == 0:\n            # Assign a new GID (here we choose 1001, but in a real scenario, \n            # this should be handled based on the system's user management policies)\n            new_gid = 1001\n            subprocess.run(['usermod', '-g', str(new_gid), user.pw_name])\n            print(f\"Assigned new GID {new_gid} to user {user.pw_name}.\")\n"
  },
  {
    "name": "Ensure group root is the only GID 0 group",
    "id": "5.4.2.3",
    "type": "Automated",
    "start_page": 675,
    "end_page": 676,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The groupmod command can be used to specify which group the root group belongs to. This affects permissions of files that are group owned by the root group.",
    "rationale": "Using GID 0 for the root group helps prevent root group owned files from accidentally becoming accessible to non-privileged users.",
    "audit_details": "Run the following command to verify no group other than root is assigned GID 0:\n```\n# awk -F: '$3==\"0\"{print $1\":\"$3}' /etc/group\nroot:0\n```\n",
    "audit_code": "# awk -F: '$3==\"0\"{print $1\":\"$3}' /etc/group\nroot:0\n",
    "remediation_details": "Run the following command to set the root group's GID to 0:\n```\n# groupmod -g 0 root\n```\n\nRemove any groups other than the root group with GID 0 or assign them a new GID if appropriate.",
    "remediation_code": "# groupmod -g 0 root\n",
    "python_script": "\nimport grp\nimport pwd\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if any group other than 'root' has GID 0.\"\"\"\n    vulnerable = False\n    for g in grp.getgrall():\n        if g.gr_gid == 0 and g.gr_name!= 'root':\n            print(f\"Found non-root group '{g.gr_name}' with GID 0.\")\n            vulnerable = True\n    return vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Ensure only the 'root' group has GID 0.\"\"\"\n    # Set the root group's GID to 0 (not necessary if already set, but harmless)\n    subprocess.run(['groupmod', '-g', '0', 'root'])\n    print(\"Confirmed root group's GID is 0.\")\n    \n    # Remove or reassign any other GID 0 groups\n    for g in grp.getgrall():\n        if g.gr_gid == 0 and g.gr_name!= 'root':\n            # Assign a new GID (e.g., the next available GID)\n            new_gid = max(grp.getgrall(), key=lambda x: x.gr_gid).gr_gid + 1\n            subprocess.run(['groupmod', '-g', str(new_gid), g.gr_name])\n            print(f\"Reassigned group '{g.gr_name}' from GID 0 to GID {new_gid}.\")\n```\nExample usage:\n```python\nif audit_vuln():\n    print(\"System is vulnerable. Remediating...\")\n    remediate_vuln()\nelse:\n    print(\"System is not vulnerable.\")\n"
  },
  {
    "name": "Ensure root password is set",
    "id": "5.4.2.4",
    "type": "Automated",
    "start_page": 677,
    "end_page": 678,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are a number of methods to access the root account directly. Without a password set any user would be able to gain access and thus control over the entire system.",
    "rationale": "Access to root should be secured at all times.",
    "audit_details": "Run the following command to verify the root user's password is set:\n```\n# passwd -S root | awk '$2 ~ /^P/ {print \"User: \\\"\" $1 \"\\\" Password is set\"}'\nUser: \"root\" Password is set\n```\n",
    "audit_code": "# passwd -S root | awk '$2 ~ /^P/ {print \"User: \\\"\" $1 \"\\\" Password is set\"}'\nUser: \"root\" Password is set",
    "remediation_details": "Run the following command to set a password for the root user:\n```\n# passwd root\n```\n",
    "remediation_code": "# passwd root\n",
    "python_script": "\nimport getpass\nimport subprocess\nimport pwd\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the root user's password is set.\n    \n    Returns:\n    bool: True if the root password is set, False otherwise.\n    \"\"\"\n    # Fetch root user's password entry\n    try:\n        root_entry = pwd.getpwnam('root')\n    except KeyError:\n        print(\"Error: Could not retrieve root user's password entry.\")\n        return False\n    \n    # Check if the password is set (i.e., not locked or empty)\n    # The 'pw_passwd' field will contain an 'x' if the password is managed by shadow\n    # and not directly stored here; this doesn't necessarily mean it's unset.\n    # For a more accurate check, we'd ideally check /etc/shadow, which requires root.\n    # Given the constraints, we'll check for the common indicators of an unset password.\n    if not root_entry.pw_passwd or root_entry.pw_passwd in ['!', '*']:\n        return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by setting a password for the root user.\n    \"\"\"\n    # Prompt user for a new password securely\n    while True:\n        new_password = getpass.getpass(\"Enter new password for root: \")\n        confirm_password = getpass.getpass(\"Confirm new password for root: \")\n        if new_password == confirm_password:\n            break\n        print(\"Passwords do not match. Please try again.\")\n    \n    # Construct and run the command to set the root password\n    # Using subprocess to run the passwd command with the provided password\n    # Note: This approach requires careful handling to avoid shell injection risks.\n    # Here, we're directly passing the password to the stdin of the subprocess,\n    # which is safer than constructing a shell command with the password.\n    process = subprocess.Popen(['passwd', 'root'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n    output, error = process.communicate(f\"{new_password}\\n{new_password}\")\n    \n    if process.returncode == 0:\n        print(\"Set password for root user.\")\n    else:\n        print(f\"Failed to set password for root user. Error: {error}\")\n\n# Example Usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Root password is not set. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"Root password is already set.\")\n"
  },
  {
    "name": "Ensure root path integrity",
    "id": "5.4.2.5",
    "type": "Automated",
    "start_page": 679,
    "end_page": 681,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.",
    "rationale": "Including the current working directory (.) or other writable directory in root's executable path makes it likely that an attacker can gain superuser access by forcing an administrator operating as root to execute a Trojan horse program.",
    "audit_details": "Run the following script to verify root's path does not include:\n\n - Locations that are not directories\n\n - An empty directory (::)\n\n - A trailing (:)\n\n - Current working directory (.)\n\n - Non root owned directories\n\n - Directories that less restrictive than mode 0755",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output2=\"\"\n  l_pmask=\"0022\"\n  l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  l_root_path=\"$(sudo -Hiu root env | grep '^PATH' | cut -d= -f2)\"\n  unset a_path_loc && IFS=\":\" read -ra a_path_loc <<< \"$l_root_path\"\n  grep -q \"::\" <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains a empty directory (::)\"\n  grep -Pq \":\\h*$\" <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains a trailing (:)\"\n  grep -Pq '(*\\h+|:)\\.(?::|\\h*$)' <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains current working directory (.)\"\n  while read -r l_path; do\n   if [ -d \"$l_path\" ]; then\n     while read -r l_fmode l_fown; do\n      [ \"$l_fown\" != \"root\" ] && l_output2=\"$l_output2\\n - Directory: \\\"$l_path\\\" is owned by: \\\"$l_fown\\\" should be owned by \\\"root\\\"\"\n      [ $(( $l_fmode & $l_pmask )) -gt 0 ] && l_output2=\"$l_output2\\n Directory: \\\"$l_path\\\" is mode: \\\"$l_fmode\\\" and should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n     done <<< \"$(stat -Lc '%#a %U' \"$l_path\")\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_path\\\" is not a directory\"\n   fi\n  done <<< \"$(printf \"%s\\n\" \"${a_path_loc[@]}\")\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n *** PASS ***\\n - Root's path is correctly configured\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n  fi\n}",
    "remediation_details": "Correct or justify any:\n\n - Locations that are not directories\n\n - Empty directories (::)\n\n - Trailing (:)\n\n - Current working directory (.)\n\n - Non root owned directories\n\n - Directories that less restrictive than mode 0755",
    "remediation_code": "",
    "python_script": "\nimport os\nimport stat\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit root's PATH for potential vulnerabilities.\"\"\"\n    root_path = subprocess.check_output([\"sudo\", \"-Hiu\", \"root\", \"env\", \"PATH\"]).decode().split(\"=\")[1].strip()\n    path_locations = root_path.split(\":\")\n    issues = []\n\n    for location in path_locations:\n        if not location:  # Empty directory '::' or trailing ':'\n            issues.append(f\"- root's path contains an empty directory ({location})\")\n        elif location == \".\":  # Current working directory\n            issues.append(f\"- root's path contains current working directory ({location})\")\n        elif not os.path.isdir(location):  # Non-directory location\n            issues.append(f\"- '{location}' is not a directory\")\n        else:\n            # Check ownership and permissions\n            stat_info = os.stat(location)\n            if stat_info.st_uid!= 0:  # Non-root owned\n                issues.append(f\"- Directory: '{location}' is owned by '{os.getcwduid(stat_info.st_uid).name}' should be owned by 'root'\")\n            if stat_info.st_mode & 0o022:  # Permissions less restrictive than 0755\n                issues.append(f\"- Directory: '{location}' is mode: '{stat.filemode(stat_info.st_mode)}' and should be mode: 'rwxr-x' or more restrictive\")\n\n    if issues:\n        print(\"\\n- Audit Result:\\n** FAIL **\")\n        print(\"- * Reasons for audit failure *:\")\n        for issue in issues:\n            print(issue)\n        return False\n    else:\n        print(\"\\n- Audit Result:\\n*** PASS ***\\n- Root's path is correctly configured\")\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerabilities found in root's PATH.\"\"\"\n    root_path = subprocess.check_output([\"sudo\", \"-Hiu\", \"root\", \"env\", \"PATH\"]).decode().split(\"=\")[1].strip()\n    path_locations = root_path.split(\":\")\n    new_path = []\n\n    for location in path_locations:\n        if not location or location == \".\":  # Empty directory, trailing colon, or current working directory\n            print(f\"Removed '{location}' from root's PATH.\")\n            continue\n        elif not os.path.isdir(location):  # Non-directory location\n            print(f\"Removed non-directory '{location}' from root's PATH.\")\n            continue\n        else:\n            # Check and fix ownership and permissions\n            stat_info = os.stat(location)\n            if stat_info.st_uid!= 0:  # Non-root owned\n                print(f\"Changing ownership of '{location}' to 'root'...\")\n                subprocess.check_call([\"sudo\", \"chown\", \"root:root\", location])\n            if stat_info.st_mode & 0o022:  # Permissions less restrictive than 0755\n                print(f\"Setting '{location}' to mode '0755'...\")\n                subprocess.check_call([\"sudo\", \"chmod\", \"0755\", location])\n            new_path.append(location)\n\n    # Update root's PATH if necessary\n    new_root_path = \":\".join(new_path)\n    if new_root_path!= root_path:\n        print(\"Updating root's PATH...\")\n        subprocess.check_call([\"sudo\", \" tee /etc/environment\"], input=f\"PATH={new_root_path}\".encode())\n        # Note: Logging out and back in or restarting may be required for changes to take full effect.\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure root user umask is configured",
    "id": "5.4.2.6",
    "type": "Automated",
    "start_page": 682,
    "end_page": 684,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The user file-creation mode mask (umask) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw-rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode. umask can be set with either Octal or Symbolic values:\n  - `Octal (Numeric) Value - Represented by either three or four digits. ie umask 0027` or umask 027. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively.\n  - `Symbolic Value - Represented by a comma separated list for User u, group g, and world/other o. The permissions listed are not masked by umask. ie a umask set by umask u=rwx,g=rx,o= is the Symbolic equivalent of the Octal `umask 027.` This umask would set a newly created directory with file mode drwxr-x--- and a newly created file with file mode rw-r-----.",
    "rationale": "Setting a secure value for umask ensures that users make a conscious choice about their file permissions. A permissive umask value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users.",
    "audit_details": "Run the following to verify the root user umask is set to enforce a newly created directories' permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive:\n```\ngrep -Psi -- '^\n*umask\n+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][06]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' /root/.bash_profile /root/.bashrc\nNothing should be returned\n```\n",
    "audit_code": "grep -Psi -- '^\n*umask\n+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][06]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' /root/.bash_profile /root/.bashrc\nNothing should be returned\n",
    "remediation_details": "Edit /root/.bash_profile and /root/.bashrc and remove, comment out, or update any line with umask to be 0027 or more restrictive.",
    "remediation_code": "# Example of restrictive umask\numask 0027\n",
    "python_script": "\nimport pathlib\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit root user umask configuration\"\"\"\n    files_to_check = [pathlib.Path(\"/root/.bash_profile\"), pathlib.Path(\"/root/.bashrc\")]\n    pattern = re.compile(r'^\\s*umask\\s+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][06]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))')\n\n    for file in files_to_check:\n        try:\n            content = file.read_text()\n            if pattern.search(content):\n                return False  # Vulnerable: umask setting found\n        except FileNotFoundError:\n            pass  # File not present, continue\n        except Exception as e:\n            print(f\"Error auditing {file}: {e}\")\n            return False  # Audit failed, assume vulnerable\n\n    return True  # No umask settings found, not vulnerable\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate root user umask configuration\"\"\"\n    target_umask = \"0027\"\n    files_to_update = [pathlib.Path(\"/root/.bash_profile\"), pathlib.Path(\"/root/.bashrc\")]\n\n    for file in files_to_update:\n        try:\n            content = file.read_text()\n            updated_content = re.sub(r'^\\s*umask\\s+[^\\n]*\\n?', '', content)  # Remove existing umask lines\n            file.write_text(updated_content + f\"\\numask {target_umask}\\n\")  # Append new umask setting\n            print(f\"Updated umask to {target_umask} in {file}\")\n        except FileNotFoundError:\n            with open(file, 'w') as f:\n                f.write(f\"umask {target_umask}\\n\")\n            print(f\"Created {file} with umask {target_umask}\")\n        except Exception as e:\n            print(f\"Error remediating {file}: {e}\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure system accounts do not have a valid login shell",
    "id": "5.4.2.7",
    "type": "Automated",
    "start_page": 685,
    "end_page": 687,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide an interactive shell.",
    "rationale": "It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.",
    "audit_details": "Run the following command to verify system accounts, except for root, halt, sync, shutdown or nfsnobody, do not have a valid login shell:\n#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\'/'\\'$NF != \\\"nologin\\\" {print}' /etc/shells | sed\n-rn '/^\\/\\/s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"$l_valid_shells\" -F:\n'($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\'/'\\'$NF != \\\"nologin\\\" {print}' /etc/shells | sed\n-rn '/^\\/\\/s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"$l_valid_shells\" -F:\n'($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'",
    "remediation_details": "Run the following command to set the shell for any service accounts returned by the audit to nologin:\n# usermod -s $(command -v nologin) <user>",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($( awk -F\\'/'\\'$NF != \\\"nologin\\\" {print}' /etc/shells | sed\n-rn '/^\\/\\/s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"$l_valid_shells\" -F:\n'($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && ($3<'",
    "python_script": "\nimport pwd\nimport shutil\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit system accounts for valid login shells\"\"\"\n    vulnerable_accounts = []\n    nologin_path = shutil.which('nologin')\n    for user in pwd.getpwall():\n        if user.pw_name in ['root', 'halt', 'sync', 'shutdown', 'nfsnobody']:\n            continue\n        if user.pw_shell != nologin_path:\n            vulnerable_accounts.append(user.pw_name)\n    print(f\"Found vulnerable system accounts: {', '.join(vulnerable_accounts)}\" if vulnerable_accounts else \"No vulnerable system accounts found\")\n    return bool(vulnerable_accounts)\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate system accounts with valid login shells\"\"\"\n    nologin_path = shutil.which('nologin')\n    for user in pwd.getpwall():\n        if user.pw_name in ['root', 'halt', 'sync', 'shutdown', 'nfsnobody']:\n            continue\n        if user.pw_shell != nologin_path:\n            subprocess.run(['usermod', '-s', nologin_path, user.pw_name])\n            print(f\"Updated shell for {user.pw_name} to {nologin_path}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure accounts without a valid login shell are locked",
    "id": "5.4.2.8",
    "type": "Automated",
    "start_page": 688,
    "end_page": 689,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide an interactive shell.",
    "rationale": "It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.",
    "audit_details": "Run the following script to verify all non-root accounts without a valid login shell are locked.\n#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  while IFS= read -r l_user; do\n   passwd -S \"$l_user\" | awk '$2 !~ /^L/ {print \"Account: \\\"\" $1 \"\\\" does not have a valid login shell and is not locked\"}'\n  done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat)\n{print $1}' /etc/passwd)\n}",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  while IFS= read -r l_user; do\n   passwd -S \"$l_user\" | awk '$2 !~ /^L/ {print \"Account: \\\"\" $1 \"\\\" does not have a valid login shell and is not locked\"}'\n  done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat)\n{print $1}' /etc/passwd)\n}",
    "remediation_details": "Run the following command to lock any non-root accounts without a valid login shell returned by the audit:\n\n# usermod -L <user>\n\n_Example script::_\n#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  while IFS= read -r l_user; do\n   passwd -S \"$l_user\" | awk '$2 !~ /^L/ {system (\"usermod -L \" $1)}'\n  done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat)\n{print $1}' /etc/passwd)\n}",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  while IFS= read -r l_user; do\n   passwd -S \"$l_user\" | awk '$2 !~ /^L/ {system (\"usermod -L \" $1)}'\n  done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat)\n{print $1}' /etc/passwd)\n}",
    "python_script": "\nimport subprocess\nimport pwd\n\ndef get_valid_shells():\n    \"\"\"Retrieve valid login shells from /etc/shells, excluding 'nologin'.\"\"\"\n    valid_shells = []\n    with open(\"/etc/shells\", \"r\") as shells_file:\n        for line in shells_file:\n            shell = line.strip()\n            if shell!= \"/usr/sbin/nologin\":\n                valid_shells.append(shell)\n    return tuple(valid_shells)  # Return as a tuple for efficient membership tests\n\ndef get_vulnerable_accounts(valid_shells):\n    \"\"\"Identify non-root accounts without a valid login shell that are not locked.\"\"\"\n    vulnerable_accounts = []\n    for user in pwd.getpwall():\n        if user.pw_name!= \"root\" and user.pw_shell not in valid_shells:\n            # Use 'passwd' command to check lock status, as pwd module doesn't provide this info directly\n            lock_status = subprocess.check_output([\"passwd\", \"-S\", user.pw_name]).decode(\"utf-8\").split()[1]\n            if lock_status!= \"L\":\n                vulnerable_accounts.append(user.pw_name)\n    return vulnerable_accounts\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for vulnerable accounts and return True if any are found, False otherwise.\"\"\"\n    valid_shells = get_valid_shells()\n    vulnerable_accounts = get_vulnerable_accounts(valid_shells)\n    if vulnerable_accounts:\n        print(f\"Accounts without a valid login shell and not locked: {', '.join(vulnerable_accounts)}\")\n        return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerable accounts by locking them.\"\"\"\n    valid_shells = get_valid_shells()\n    vulnerable_accounts = get_vulnerable_accounts(valid_shells)\n    for account in vulnerable_accounts:\n        subprocess.run([\"usermod\", \"-L\", account])\n        print(f\"Locked account: {account}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure default user shell timeout is configured",
    "id": "5.4.3.2",
    "type": "Automated",
    "start_page": 692,
    "end_page": 695,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "TMOUT is an environmental setting that determines the timeout of a shell in seconds.\n\n- TMOUT=n - Sets the shell timeout to n seconds. A setting of TMOUT=0 disables timeout.\n\n- readonly TMOUT- Sets the TMOUT environmental variable as readonly, preventing unwanted modification during run-time.\n\n- export TMOUT - exports the TMOUT variable\n\n**System Wide Shell Configuration Files:**\n\n- `/etc/profile - used to set system wide environmental variables on users shells.`\nThe variables are sometimes the same ones that are in the .bash_profile, however this file is used to set an initial PATH or PS1 for all shell users of the system. is only executed for interactive login shells, or shells executed with **the --login parameter.**\n\n- `/etc/profile.d - /etc/profile will execute the scripts within`\n```\n/etc/profile.d/*.sh. It is recommended to place your configuration in a shell\n```\nscript within /etc/profile.d to set your own system wide environmental\nvariables.\n\n- `/etc/bashrc - System wide version of .bashrc. In Fedora derived distributions,`\n```\n/etc/bashrc also invokes /etc/profile.d/*.sh if non-login shell, but redirects output\n```\nto /dev/null if non-interactive. **Is only executed for interactive shells or if**\n```\nBASH_ENV is set to /etc/bashrc.\n``",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized user access to another user's shell session that has been left unattended. It also ends the inactive session and releases the resources associated with that session.",
    "audit_details": "Run the following script to verify that TMOUT is configured to: include a timeout of no more than 900 seconds, to be readonly, to be exported, and is not being changed to a longer timeout.\n```\n#!/usr/bin/env bash\n{\n  output1=\"\" output2=\"\"\n  [ -f /etc/bashrc ] && BRC=\"/etc/bashrc\"\n  for f in \"$BRC\" /etc/profile /etc/profile.d/*.sh ; do\n   grep -Pq '^\\\\s*([^#]+\\\\s+)?TMOUT=(900|[1-8][0-9][0-9]|[1-9][0-9]|[19])\\\\b' \"$f\" && grep -Pq\n'^\\\\s*([^#]+;\\\\s*)?readonly\\\\s+TMOUT(\\\\s+|\\\\s*;|\\\\s*$|=(900|[1-8][0-9][0-9]|[19][0-9]|[1-9]))\\\\b' \"$f\" && grep -Pq\n'^\\\\s*([^#]+;\\\\s*)?export\\\\s+TMOUT(\\\\s+|\\\\s*;|\\\\s*$|=(900|[1-8][0-9][0-9]|[1-9][09]|[1-9]))\\\\b' \"$f\" && \n  output1=\"$f\"\n  done\n  grep -Pq '^\\\\s*([^#]+\\\\s+)?TMOUT=(9[0-9][1-9]|9[1-9][0-9]|0+|[1-9]\\d{3,})\\\\b'\n/etc/profile /etc/profile.d/*.sh \"$BRC\" && output2=$(grep -Ps\n'^\\\\s*([^#]+\\\\s+)?TMOUT=(9[0-9][1-9]|9[1-9][0-9]|0+|[1-9]\\d{3,})\\\\b'\n/etc/profile /etc/profile.d/*.sh $BRC)\n  if [ -n \"$output1\" ] && [ -z \"$output2\" ]; then\n   echo -e \"\\nPASSED\\n\\nTMOUT is configured in: \\\"$output1\\\"\\n\"\n  else\n   [ -z \"$output1\" ] && echo -e \"\\nFAILED\\n\\nTMOUT is not configured\\n\"\n   [ -n \"$output2\" ] && echo -e \"\\nFAILED\\n\\nTMOUT is incorrectly\nconfigured in: \\\"$output2\\\"\\n\"\n  fi\n}\n``",
    "audit_code": "#!/usr/bin/env bash\n{\n  output1=\"\" output2=\"\"\n  [ -f /etc/bashrc ] && BRC=\"/etc/bashrc\"\n  for f in \"$BRC\" /etc/profile /etc/profile.d/*.sh ; do\n   grep -Pq '^\\\\s*([^#]+\\\\s+)?TMOUT=(900|[1-8][0-9][0-9]|[1-9][0-9]|[19])\\\\b' \"$f\" && grep -Pq\n'^\\\\s*([^#]+;\\\\s*)?readonly\\\\s+TMOUT(\\\\s+|\\\\s*;|\\\\s*$|=(900|[1-8][0-9][0-9]|[19][0-9]|[1-9]))\\\\b' \"$f\" && grep -Pq\n'^\\\\s*([^#]+;\\\\s*)?export\\\\s+TMOUT(\\\\s+|\\\\s*;|\\\\s*$|=(900|[1-8][0-9][0-9]|[1-9][09]|[1-9]))\\\\b' \"$f\" && \n  output1=\"$f\"\n  done\n  grep -Pq '^\\\\s*([^#]+\\\\s+)?TMOUT=(9[0-9][1-9]|9[1-9][0-9]|0+|[1-9]\\d{3,})\\\\b'\n/etc/profile /etc/profile.d/*.sh \"$BRC\" && output2=$(grep -Ps\n'^\\\\s*([^#]+\\\\s+)?TMOUT=(9[0-9][1-9]|9[1-9][0-9]|0+|[1-9]\\d{3,})\\\\b'\n/etc/profile /etc/profile.d/*.sh $BRC)\n  if [ -n \"$output1\" ] && [ -z \"$output2\" ]; then\n   echo -e \"\\nPASSED\\n\\nTMOUT is configured in: \\\"$output1\\\"\\n\"\n  else\n   [ -z \"$output1\" ] && echo -e \"\\nFAILED\\n\\nTMOUT is not configured\\n\"\n   [ -n \"$output2\" ] && echo -e \"\\nFAILED\\n\\nTMOUT is incorrectly\nconfigured in: \\\"$output2\\\"\\n\"\n  fi\n}",
    "remediation_details": "Review /etc/bashrc, /etc/profile, and all files ending in *.sh in the /etc/profile.d/ directory and remove or edit all TMOUT=_n_ entries to follow local site policy. TMOUT should not exceed 900 or be equal to 0. Configure TMOUT in one of the following files:\n\n- A file in the /etc/profile.d/ directory ending in .sh\n\n- `/etc/profile`\n\n- `/etc/bashrc`\n\nTMOUT configuration examples:\n\nAs multiple lines:\n```\nTMOUT=900\nreadonly TMOUT\nexport TMOUT\n```\n\nAs a single line:\n```\nreadonly TMOUT=900 ; export TMOUT\n``",
    "remediation_code": "TMOUT=900\nreadonly TMOUT\nexport TMOUT",
    "python_script": "\nimport pathlib\nimport re\nimport os\n\n# Constants\nCONFIG_FILES = [\"/etc/bashrc\", \"/etc/profile\", \"/etc/profile.d/\"]\nTMOUT_CONFIG = \"readonly TMOUT=900 ; export TMOUT\\n\"\nCONFIG_DIR = pathlib.Path(\"/etc/profile.d/\")\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if TMOUT is correctly configured.\"\"\"\n    config_found = False\n    for file in CONFIG_FILES:\n        if file.endswith(\".d/\"):  # Handle directory case\n            for config_file in CONFIG_DIR.glob(\"*.sh\"):\n                if _check_tmout_config(config_file):\n                    config_found = True\n                    print(f\"TMOUT is configured in: {config_file}\")\n                    break\n        elif pathlib.Path(file).exists():\n            if _check_tmout_config(file):\n                config_found = True\n                print(f\"TMOUT is configured in: {file}\")\n                break\n    return config_found\n\ndef _check_tmout_config(file_path: str) -> bool:\n    \"\"\"Check if a single file has the correct TMOUT configuration.\"\"\"\n    try:\n        with open(file_path, 'r') as file:\n            content = file.read()\n            # Regular expression to match correct TMOUT configuration\n            pattern = r\"^\\s*readonly\\s+TMOUT\\s*=\\s*(900|[1-8]\\d{2}|[1-9]\\d{1,2}|[1-9])\\s*;\\s*export\\s+TMOUT\\s*$\"\n            if re.search(pattern, content, re.MULTILINE):\n                return True\n    except OSError as e:\n        print(f\"Error reading {file_path}: {e}\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate TMOUT configuration.\"\"\"\n    config_file = CONFIG_DIR / \"tmout_config.sh\"\n    if not config_file.exists():\n        try:\n            with open(config_file, 'w') as file:\n                file.write(TMOUT_CONFIG)\n            os.chmod(config_file, 0o644)  #Set perms to match other config files\n            print(f\"Created {config_file} with correct TMOUT configuration.\")\n        except OSError as e:\n            print(f\"Error creating {config_file}: {e}\")\n    else:\n        print(f\"{config_file} already exists. Updating TMOUT configuration...\")\n        try:\n            with open(config_file, 'w') as file:\n                file.write(TMOUT_CONFIG)\n            print(f\"Updated {config_file} with correct TMOUT configuration.\")\n        except OSError as e:\n            print(f\"Error updating {config_file}: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure default user umask is configured",
    "id": "5.4.3.3",
    "type": "Automated",
    "start_page": 696,
    "end_page": 702,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The user file-creation mode mask (umask) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw-rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode. umask can be set with either Octal or Symbolic values: - `Octal (Numeric) Value - Represented by either three or four digits. ie umask 0027 or umask 027. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively. - `Symbolic Value - Represented by a comma separated list for User u, group g, and world/other o. The permissions listed are not masked by umask. ie a umask set by umask u=rwx,g=rx,o= is the Symbolic equivalent of the Octal `umask 027. This umask would set a newly created directory with file mode drwxr-x--- and a newly created file with file mode rw-r-----.",
    "rationale": "Setting a secure default value for umask ensures that users make a conscious choice about their file permissions. A permissive umask value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users.",
    "audit_details": "Run the following to verify the default user umask is set to enforce a newly created directories' permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive:\n#!/usr/bin/env bash\n{  \n  l_output=\"\" l_output2=\"\"  \n  file_umask_chk()  \n  {  \n    if grep -Psiq -- '^\\\\h*umask\\\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\\\h*#.*)?$' \"$l_file\"; then  \n     l_output=\"$l_output\\n - umask is set correctly in \\\"$l_file\\\"\"  \n    elif grep -Psiq -- '^\\\\h*umask\\\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][07][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then  \n     l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"  \n    fi  \n  }  \n  while IFS= read -r -d $'\\0' l_file; do  \n    file_umask_chk  \n  done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)  \n  [ -z \"$l_output\" ] && l_file=\"/etc/profile\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/bashrc\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/bash.bashrc\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/pam.d/postlogin\"  \n  if [ -z \"$l_output\" ]; then  \n    if grep -Psiq -'^\\\\h*session\\\\h+[^#\\n\\r]+\\\\h+pam_umask\\.so\\\\h+([^#\\n\\r]+\\\\h+)?umask=(0?[0-7][27]7)\\b' \"$l_file\"; then  \n     l_output1=\"$l_output1\\n - umask is set correctly in \\\"$l_file\\\"\"  \n    elif grep -Psiq '^\\\\h*session\\\\h+[^#\\n\\r]+\\\\h+pam_umask\\.so\\\\h+([^#\\n\\r]+\\\\h+)?umask=(([0-7][07][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then  \n     l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"  \n    fi  \n  fi  \n  [ -z \"$l_output\" ] && l_file=\"/etc/login.defs\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/default/login\" && file_umask_chk  \n  [[ -z \"$l_output\" && -z \"$l_output2\" ]] && l_output2=\"$l_output2\\n umask is not set\"  \n  if [ -z \"$l_output2\" ]; then  \n    echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *\\n$l_output\\n\"  \n  else  \n    echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"  \n    [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *\\n$l_output\\n\"  \n  fi  \n}",
    "audit_code": "#!/usr/bin/env bash\n{  \n  l_output=\"\" l_output2=\"\"  \n  file_umask_chk()  \n  {  \n    if grep -Psiq -- '^\\\\h*umask\\\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\\\h*#.*)?$' \"$l_file\"; then  \n     l_output=\"$l_output\\n - umask is set correctly in \\\"$l_file\\\"\"  \n    elif grep -Psiq -- '^\\\\h*umask\\\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][07][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then  \n     l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"  \n    fi  \n  }  \n  while IFS= read -r -d $'\\0' l_file; do  \n    file_umask_chk  \n  done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)  \n  [ -z \"$l_output\" ] && l_file=\"/etc/profile\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/bashrc\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/bash.bashrc\" && file_umask_chk  \n  [ -z \"$l_output\" ] && l_file=\"/etc/pam.d/postlogin\"  \n  if [ -z \"$l_output\" ]; then  \n    if grep -Psiq -'^\\",
    "remediation_details": "Run the following script and perform the instructions in the output:\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_out=\"\"\n  file_umask_chk()\n  {\n   if grep -Psiq -- '^\\\\h*umask\\\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\\\h*#.*)?$' \"$l_file\"; then\n     l_out=\"$l_out\\n - umask is set correctly in \\\"$l_file\\\"\"\n   elif grep -Psiq -- '^\\",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_out=\"\"\n  file_umask_chk()\n  {\n   if grep -Psiq -- '^\\",
    "python_script": "\nimport os\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure the default user umask is set correctly.\n    \n    Returns:\n        bool: True if umask is correctly set, False otherwise.\n    \"\"\"\n    target_umask_pattern = re.compile(r'^\\s*umask\\s+(0?[0-7][27]7|u(=rwx,)?g=rx,?o=)')\n    generic_umask_pattern = re.compile(r'^\\s*umask\\s+([0-7]{3,4}|u=[rwx,]+g=[rwx,]+o=[rwx,]+)')\n    \n    config_files = ['/etc/profile.d/*.sh', '/etc/profile', '/etc/bashrc', \n                    '/etc/bash.bashrc', '/etc/pam.d/postlogin', '/etc/login.defs', \n                    '/etc/default/login']\n    \n    umask_set_correctly = False\n    umask_set_incorrectly = False\n    \n    for file_pattern in config_files:\n        for file in glob.glob(file_pattern):\n            try:\n                with open(file, 'r') as f:\n                    for line in f.readlines():\n                        if target_umask_pattern.match(line):\n                            print(f\"Found correct umask setting in {file}: {line.strip()}\")\n                            umask_set_correctly = True\n                        elif generic_umask_pattern.match(line):\n                            print(f\"Found potentially incorrect umask setting in {file}: {line.strip()}\")\n                            umask_set_incorrectly = True\n            except Exception as e:\n                print(f\"Error reading {file}: {e}\")\n    \n    if umask_set_correctly:\n        return True\n    elif umask_set_incorrectly:\n        return False\n    else:\n        print(\"No umask setting found in scanned configuration files.\")\n        return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the correct umask in /etc/login.defs if not already set.\n    \"\"\"\n    target_file = '/etc/login.defs'\n    umask_setting = 'umask 027'\n    \n    try:\n        with open(target_file, 'r+') as f:\n            content = f.readlines()\n            f.seek(0)\n            umask_set = False\n            for line in content:\n                if line.strip() == umask_setting:\n                    print(f\"Correct umask setting already exists in {target_file}.\")\n                    umask_set = True\n                else:\n                    f.write(line)\n            if not umask_set:\n                f.write(umask_setting + '\\n')\n                print(f\"Added correct umask setting to {target_file}: {umask_setting}\")\n    except Exception as e:\n        print(f\"Error remediating vulnerability: {e}\")\n\n\nif __name__ == \"__main__\":\n    import glob\n    \n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure AIDE is installed",
    "id": "6.1.1",
    "type": "Automated",
    "start_page": 705,
    "end_page": 706,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "AIDE takes a snapshot of filesystem state including modification times, permissions, and file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the system.",
    "rationale": "By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.",
    "audit_details": "Run the following command to verify aide is installed:\n```\n# dpkg-query -s aide &>/dev/null && echo \"aide is installed\"\naide is installed\n```\nRun the following command to verify aide-common is installed:\n```\n# dpkg-query -s aide-common &>/dev/null && echo \"aide-common is installed\"\naide-common is installed\n```",
    "audit_code": "# dpkg-query -s aide &>/dev/null && echo \"aide is installed\"\naide is installed\n# dpkg-query -s aide-common &>/dev/null && echo \"aide-common is installed\"\naide-common is installed\n",
    "remediation_details": "Install AIDE using the appropriate package manager or manual installation:\n```\n# apt install aide aide-common\n```\nConfigure AIDE as appropriate for your environment. Consult the AIDE documentation for options.\nRun the following commands to initialize AIDE:\n```\n# aideinit\n# mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n```\n",
    "remediation_code": "# apt install aide aide-common\n# aideinit\n# mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure AIDE is installed\"\"\"\n    required_packages = ['aide', 'aide-common']\n    for package in required_packages:\n        if not pkg_resources.is_installed(package):\n            print(f\"{package} is not installed\")\n            return False\n    print(\"AIDE and AIDE-common are installed\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Install and initialize AIDE\"\"\"\n    # Install AIDE and AIDE-common\n    install_cmd = [\"apt\", \"install\", \"-y\", \"aide\", \"aide-common\"]\n    subprocess.run(install_cmd, check=True)\n    print(\"Installed AIDE and AIDE-common\")\n\n    # Initialize AIDE\n    init_cmd = [\"aideinit\"]\n    subprocess.run(init_cmd, check=True)\n    print(\"Initialized AIDE database\")\n\n    # Move new database to default location\n    mv_cmd = [\"mv\", \"/var/lib/aide/aide.db.new\", \"/var/lib/aide/aide.db\"]\n    subprocess.run(mv_cmd, check=True)\n    print(\"Moved new AIDE database to /var/lib/aide/aide.db\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure filesystem integrity is regularly checked",
    "id": "6.1.2",
    "type": "Automated",
    "start_page": 707,
    "end_page": 709,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.",
    "rationale": "Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.",
    "audit_details": "Run the following commands to verify a cron job scheduled to run the aide check.\n```\n# grep -Prs '^([^#\\n\\r]+\\h+)?(\\/usr\\/s?bin\\/|^\\h*)aide(\\.wrapper)?\\h+(-(check|update)|([^#\\n\\r]+\\h+)?$AIDEARGS)\\b' /etc/cron.* /etc/crontab\n/var/spool/cron/\n```\nEnsure a cron job in compliance with site policy is returned.\n\n**- OR -**\nRun the following commands to verify that aidecheck.service and aidecheck.timer are enabled and aidecheck.timer is running\n```\n# systemctl is-enabled aidecheck.service\n# systemctl is-enabled aidecheck.timer\n# systemctl status aidecheck.timer\n```\nPage 706",
    "audit_code": "# grep -Prs '^([^#\\n\\r]+\\h+)?(\\/usr\\/s?bin\\/|^\\h*)aide(\\.wrapper)?\\h+(-(check|update)|([^#\\n\\r]+\\h+)?$AIDEARGS)\\b' /etc/cron.* /etc/crontab\n/var/spool/cron/ \n\n# systemctl is-enabled aidecheck.service\n# systemctl is-enabled aidecheck.timer\n# systemctl status aidecheck.timer",
    "remediation_details": "If cron will be used to schedule and run aide check:\nRun the following command:\n```\n# crontab -u root -e\n```\nAdd the following line to the crontab:\n```\n0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n```\n\n**- OR - If aidecheck.service and aidecheck.timer will be used to schedule and run aide check:**\nCreate or edit the file /etc/systemd/system/aidecheck.service and add the following lines:\n```\n[Unit]\nDescription=Aide Check\n[Service]\nType=simple\nExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n[Install]\nWantedBy=multi-user.target\n```\nCreate or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:\n```\n[Unit]\nDescription=Aide check every day at 5AM\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n[Install]\nWantedBy=multi-user.target\n```\nRun the following commands:\n```\n# chown root:root /etc/systemd/system/aidecheck.*\n# chmod 0644 /etc/systemd/system/aidecheck.*\n# systemctl daemon-reload\n# systemctl enable aidecheck.service\n# systemctl --now enable aidecheck.timer\n```\n**References:**\n1. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.service\n2. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.timer\nPage 707",
    "remediation_code": "# crontab -u root -e\n\n0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n\n# chown root:root /etc/systemd/system/aidecheck.*\n# chmod 0644 /etc/systemd/system/aidecheck.*\n# systemctl daemon-reload\n# systemctl enable aidecheck.service\n# systemctl --now enable aidecheck.timer\n\n[Unit]\nDescription=Aide Check\n[Service]\nType=simple\nExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n[Install]\nWantedBy=multi-user.target\n\n[Unit]\nDescription=Aide check every day at 5AM\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n[Install]\nWantedBy=multi-user.target\n",
    "python_script": "\nimport pathlib\nimport tempfile\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit filesystem integrity check schedule.\"\"\"\n    \n    # Check for aide cron job\n    cron_files = [pathlib.Path(\"/etc/crontab\"), *pathlib.Path(\"/etc/cron.*\").glob(\"cron.*\")]\n    cron_files.extend(pathlib.Path(\"/var/spool/cron/\").iterdir())\n    for file in cron_files:\n        try:\n            content = file.read_text()\n            if \"aide.wrapper\" in content and (\"--check\" in content or \"--update\" in content):\n                return True\n        except PermissionError:\n            print(f\"Permission denied reading {file}\", file=sys.stderr)\n    \n    # Check for aidecheck.service and aidecheck.timer\n    try:\n        subprocess.check_output([\"systemctl\", \"is-enabled\", \"aidecheck.service\"])\n        subprocess.check_output([\"systemctl\", \"is-enabled\", \"aidecheck.timer\"])\n        subprocess.check_output([\"systemctl\", \"status\", \"aidecheck.timer\"])\n        return True\n    except subprocess.CalledProcessError:\n        pass\n    \n    return False\n\ndef remediate_vuln(use_cron: bool = True) -> None:\n    \"\"\"Remediate filesystem integrity check schedule.\n    \n    :param use_cron: Whether to use cron (default) or aidecheck.service/timer.\n    \"\"\"\n    \n    if use_cron:\n        # Open root's crontab for editing\n        with tempfile.TemporaryDirectory() as tmp_dir:\n            tmp_file = pathlib.Path(tmp_dir) / \"crontab\"\n            subprocess.check_call([\"crontab\", \"-u\", \"root\", \"-l\"], stdout=tmp_file.open(\"w\"))\n            \n            # Add aide check line\n            with tmp_file.open(\"a\") as f:\n                f.write(\"0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\\n\")\n            \n            # Update crontab\n            subprocess.check_call([\"crontab\", \"-u\", \"root\", tmp_file])\n        print(\"Added aide check to root's crontab.\")\n    \n    else:\n        # Create/edit aidecheck.service\n        service_file = pathlib.Path(\"/etc/systemd/system/aidecheck.service\")\n        service_content = \"\"\"\n[Unit]\nDescription=Aide Check\n[Service]\nType=simple\nExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n[Install]\nWantedBy=multi-user.target\n\"\"\"\n        service_file.write_text(service_content)\n        print(\"Created/Updated aidecheck.service.\")\n        \n        # Create/edit aidecheck.timer\n        timer_file = pathlib.Path(\"/etc/systemd/system/aidecheck.timer\")\n        timer_content = \"\"\"\n[Unit]\nDescription=Aide check every day at 5AM\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n[Install]\nWantedBy=multi-user.target\n\"\"\"\n        timer_file.write_text(timer_content)\n        print(\"Created/Updated aidecheck.timer.\")\n        \n        # Set permissions and enable services\n        subprocess.check_call([\"chown\", \"root:root\", service_file, timer_file])\n        subprocess.check_call([\"chmod\", \"0644\", service_file, timer_file])\n        subprocess.check_call([\"systemctl\", \"daemon-reload\"])\n        subprocess.check_call([\"systemctl\", \"enable\", \"aidecheck.service\"])\n        subprocess.check_call([\"systemctl\", \"--now\", \"enable\", \"aidecheck.timer\"])\n        print(\"Enabled aidecheck.service and timer.\")\n"
  },
  {
    "name": "Ensure journald service is enabled and active",
    "id": "6.2.1.1.1",
    "type": "Automated",
    "start_page": 716,
    "end_page": 717,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Ensure that the systemd-journald service is enabled to allow capturing of logging events.",
    "rationale": "If the systemd-journald service is not enabled to start on boot, the system will not capture logging events.",
    "audit_details": "Run the following command to verify systemd-journald is enabled:\n```\n# systemctl is-enabled systemd-journald.service\nstatic\n```\n**Note: By default the systemd-journald service does not have an [Install] section and thus cannot be enabled / disabled. It is meant to be referenced as Requires or Wants by other unit files. As such, if the status of systemd-journald is not static, investigate why**\nRun the following command to verify systemd-journald is active:\n```\n# systemctl is-active systemd-journald.service\nactive\n```\n",
    "audit_code": "# systemctl is-enabled systemd-journald.service\nstatic\n\n# systemctl is-active systemd-journald.service\nactive\n",
    "remediation_details": "Run the following commands to unmask and start systemd-journald.service\n```\n# systemctl unmask systemd-journald.service\n# systemctl start systemd-journald.service\n```\n",
    "remediation_code": "# systemctl unmask systemd-journald.service\n# systemctl start systemd-journald.service\n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if systemd-journald is enabled and active.\"\"\"\n    # Check if systemd-journald is active\n    active_status_cmd = [\"systemctl\", \"is-active\", \"systemd-journald.service\"]\n    active_status = subprocess.run(active_status_cmd, capture_output=True, text=True)\n    if active_status.returncode == 0 and active_status.stdout.strip() == \"active\":\n        print(\"systemd-journald is active.\")\n    else:\n        print(\"systemd-journald is not active.\")\n\n    # Check if systemd-journald is static (expected behavior)\n    enabled_status_cmd = [\"systemctl\", \"is-enabled\", \"systemd-journald.service\"]\n    enabled_status = subprocess.run(enabled_status_cmd, capture_output=True, text=True)\n    if enabled_status.returncode == 0 and enabled_status.stdout.strip()!= \"static\":\n        print(\"Investigation required: systemd-journald is not static.\")\n\n    # Since systemd-journald can't be enabled/disabled by default, we focus on active status\n    return active_status.returncode == 0 and active_status.stdout.strip() == \"active\"\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate systemd-journald service.\"\"\"\n    # Check if systemd-journald is static before proceeding\n    enabled_status_cmd = [\"systemctl\", \"is-enabled\", \"systemd-journald.service\"]\n    enabled_status = subprocess.run(enabled_status_cmd, capture_output=True, text=True)\n    if enabled_status.returncode == 0 and enabled_status.stdout.strip()!= \"static\":\n        print(\"Investigation required before remediating systemd-journald. Skipping remediation.\")\n        return\n\n    # Unmask systemd-journald.service\n    unmask_cmd = [\"systemctl\", \"unmask\", \"systemd-journald.service\"]\n    subprocess.run(unmask_cmd, check=True)\n    print(\"Unmasked systemd-journald.service.\")\n\n    # Start systemd-journald.service\n    start_cmd = [\"systemctl\", \"start\", \"systemd-journald.service\"]\n    subprocess.run(start_cmd, check=True)\n    print(\"Started systemd-journald.service.\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure journald ForwardToSyslog is disabled",
    "id": "6.2.1.1.4",
    "type": "Automated",
    "start_page": 722,
    "end_page": 725,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Data from journald should be kept in the confines of the service and not forwarded to other services.",
    "rationale": "Logs of the system should be handled by journald and not forwarded to other logging mechanisms.",
    "audit_details": "Run the following script to verify ForwardToSyslog in not set to yes:\n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"ForwardToSyslog=yes\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"\"]=$l_file)\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\n\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n      l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n      l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n      if ! grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<<\n\"$l_systemd_file_parameter_value\"; then\n        l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      fi\n     done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure**\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\n   l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n   l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n   config_file_parameter_chk\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"ForwardToSyslog=yes\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"\"]=$l_file)\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\n\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n      l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n      l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n      if ! grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<<\n\"$l_systemd_file_parameter_value\"; then\n        l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      fi\n     done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure**\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\n   l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n   l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n   config_file_parameter_chk\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n",
    "remediation_details": "Set the following parameter in the [Journal] section in /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf:\n\n```\nForwardToSyslog=no\n```\n\n### Example:\n```\n#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\n\\h*\\[Journal\\] /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\\n' \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\\n' \"[Journal]\" \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n```\n\nNote: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n\n```\n# systemctl reload-or-restart systemd-journald\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\n\\h*\\[Journal\\] /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\\n' \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\\n' \"[Journal]\" \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n\n Note: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n\n```\n# systemctl reload-or-restart systemd-journald\n```\n",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if ForwardToSyslog is set to 'yes' in journald config files.\"\"\"\n    config_files = ['/etc/systemd/journald.conf']\n    config_files.extend([f for f in os.listdir('/etc/systemd/journald.conf.d/') if f.endswith('.conf')])\n    config_files = ['/etc/systemd/journald.conf.d/' + f for f in config_files[1:]] + [config_files[0]]\n\n    for file in config_files:\n        try:\n            with open(file, 'r') as f:\n                for line in f.readlines():\n                    line = line.strip()\n                    if line.startswith('ForwardToSyslog=yes'):\n                        print(f\"Found 'ForwardToSyslog=yes' in {file}, audit failed.\")\n                        return False\n                    if line.startswith('ForwardToSyslog=no'):\n                        print(f\"Found 'ForwardToSyslog=no' in {file}, audit passed (for this file).\")\n        except FileNotFoundError:\n            pass  # File not found, might not be an issue if it's supposed to be created during remediation\n    print(\"Audit passed: 'ForwardToSyslog=yes' not found in any configuration file.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting ForwardToSyslog to 'no' in a journald config file and reload systemd-journald.\"\"\"\n    config_dir = '/etc/systemd/journald.conf.d/'\n    config_file = os.path.join(config_dir, '90-remediation.conf')  # Using a high number to ensure it's read last\n\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir, exist_ok=True)\n        print(f\"Created directory {config_dir}\")\n\n    with open(config_file, 'w') as f:\n        f.write(\"[Journal]\\nForwardToSyslog=no\\n\")\n    print(f\"Created {config_file} with 'ForwardToSyslog=no'\")\n\n    subprocess.run(['systemctl', 'reload-or-restart', 'systemd-journald'], check=True)\n    print(\"Reloaded/restarted systemd-journald service\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure journald Storage is configured",
    "id": "6.2.1.1.5",
    "type": "Automated",
    "start_page": 726,
    "end_page": 729,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server they are protected from loss due to a reboot.",
    "rationale": "Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.",
    "audit_details": "Run the following script to verify Storage is set to persistent:\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Storage=persistent\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"\")(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=(['\"$l_systemd_parameter\"']=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\",
    "audit_code": "```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Storage=persistent\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"\")(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=(['\"$l_systemd_parameter\"']=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\",
    "remediation_details": "Set the following parameter in the [Journal] section in /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf:\n\n```\nStorage=persistent\n```\n\n### Example:\n```\n#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\n*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\n' \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\n' \"[Journal]\" \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n```\n\nNote: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n```\n# systemctl reload-or-restart systemd-journald\n```\n",
    "remediation_code": "```\n#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\n*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\n' \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\n' \"[Journal]\" \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n```\n",
    "python_script": "\nimport configparser\nimport os\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if Storage is set to persistent in journald configuration\"\"\"\n    config_file = '/etc/systemd/journald.conf'\n    config_dir = '/etc/systemd/journald.conf.d/'\n    config_parser = configparser.ConfigParser()\n\n    # Check main config file\n    config_parser.read(config_file)\n    if config_parser.has_section('Journal') and config_parser.get('Journal', 'Storage', fallback=None) == 'persistent':\n        return True\n\n    # Check config files in directory\n    for file in pathlib.Path(config_dir).glob('*.conf'):\n        config_parser.read(file)\n        if config_parser.has_section('Journal') and config_parser.get('Journal', 'Storage', fallback=None) == 'persistent':\n            return True\n\n    return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting Storage to persistent in journald configuration\"\"\"\n    config_dir = '/etc/systemd/journald.conf.d/'\n    config_file = os.path.join(config_dir, '60-journald.conf')\n    config_parser = configparser.ConfigParser()\n\n    # Create config directory if it doesn't exist\n    pathlib.Path(config_dir).mkdir(exist_ok=True)\n\n    # Check if file exists and has [Journal] section\n    if os.path.exists(config_file):\n        config_parser.read(config_file)\n        if config_parser.has_section('Journal'):\n            # Append Storage=persistent if [Journal] section exists\n            print(f\"Appending 'Storage=persistent' to {config_file}\")\n            with open(config_file, 'a') as file:\n                file.write(\"Storage=persistent\\n\")\n        else:\n            # Add [Journal] section and Storage=persistent if section doesn't exist\n            print(f\"Adding '[Journal]' section and 'Storage=persistent' to {config_file}\")\n            with open(config_file, 'a') as file:\n                file.write(\"[Journal]\\nStorage=persistent\\n\")\n    else:\n        # Create new file with [Journal] section and Storage=persistent\n        print(f\"Creating {config_file} with '[Journal]' section and 'Storage=persistent'\")\n        with open(config_file, 'w') as file:\n            file.write(\"[Journal]\\nStorage=persistent\\n\")\n\n    # Reload or restart systemd-journald service\n    print(\"Reloading systemd-journald service...\")\n    subprocess.run(['systemctl', 'reload-or-restart', 'systemd-journald'])\n"
  },
  {
    "name": "Ensure journald Compress is configured",
    "id": "6.2.1.1.6",
    "type": "Automated",
    "start_page": 730,
    "end_page": 733,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large.",
    "rationale": "Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.",
    "audit_details": "Run the following script to verify Compress is set to yes: \n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Compress=yes\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio\n'^\n\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n      l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n      l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n      if grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<<\n\"$l_systemd_file_parameter_value\"; then\n        l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value matching: \\\"$l_systemd_parameter_value\\\"\\n\"\n      fi\n     done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure\n**\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\n   l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n   l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n   config_file_parameter_chk\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n\n#### Page 730\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Compress=yes\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio\n'^\n\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n      l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n      l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n      if grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<<\n\"$l_systemd_file_parameter_value\"; then\n        l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value matching: \\\"$l_systemd_parameter_value\\\"\\n\"\n      fi\n     done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure\n**\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\n   l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n   l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n   config_file_parameter_chk\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n",
    "remediation_details": "Set the following parameter in the [Journal] section in /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf: \n\n```\nCompress=yes\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir\n/etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\\n' \"Compress=yes\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\\n' \"[Journal]\" \"Compress=yes\" >>\n/etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n\n Note: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n\n```\n# systemctl reload-or-restart systemd-journald\n```\n",
    "python_script": "\nimport configparser\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if journald Compress is configured\"\"\"\n    config_file = \"/etc/systemd/journald.conf\"\n    config_dir = \"/etc/systemd/journald.conf.d/\"\n    compress_set_correctly = False\n\n    # Check main config file\n    if os.path.exists(config_file):\n        config = configparser.ConfigParser()\n        config.read(config_file)\n        if \"Journal\" in config and \"Compress\" in config[\"Journal\"]:\n            compress_set_correctly = config[\"Journal\"][\"Compress\"].lower() == \"yes\"\n\n    # Check config directory for overriding settings\n    if not compress_set_correctly and os.path.exists(config_dir):\n        for filename in os.listdir(config_dir):\n            if filename.endswith(\".conf\"):\n                file_path = os.path.join(config_dir, filename)\n                config = configparser.ConfigParser()\n                config.read(file_path)\n                if \"Journal\" in config and \"Compress\" in config[\"Journal\"]:\n                    compress_set_correctly = config[\"Journal\"][\"Compress\"].lower() == \"yes\"\n                    break\n\n    return compress_set_correctly\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate journald Compress configuration\"\"\"\n    config_dir = \"/etc/systemd/journald.conf.d/\"\n    config_file = os.path.join(config_dir, \"60-journald.conf\")\n\n    # Create config directory if it doesn't exist\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)\n        print(f\"Created directory: {config_dir}\")\n\n    # Create or modify config file with the required setting\n    config = configparser.ConfigParser()\n    if os.path.exists(config_file):\n        config.read(config_file)\n    if \"Journal\" not in config:\n        config[\"Journal\"] = {}\n    config[\"Journal\"][\"Compress\"] = \"yes\"\n\n    with open(config_file, \"w\") as f:\n        config.write(f)\n    print(f\"Wrote configuration to: {config_file}\")\n\n    # Reload or restart the systemd-journald service\n    subprocess.run([\"systemctl\", \"reload-or-restart\", \"systemd-journald\"])\n    print(\"Reloaded or restarted systemd-journald service\")\n"
  },
  {
    "name": "Ensure systemd-journal-remote is installed",
    "id": "6.2.1.2.1",
    "type": "Automated",
    "start_page": 735,
    "end_page": 736,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Journald systemd-journal-remote supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralized log management.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit_details": "Run the following command to verify systemd-journal-remote is installed.\n```\n# dpkg-query -s systemd-journal-remote &>/dev/null && echo \"systemd-journal-remote is installed\"\nsystemd-journal-remote is installed\n```\n",
    "audit_code": "# dpkg-query -s systemd-journal-remote &>/dev/null && echo \"systemd-journal-remote is installed\"",
    "remediation_details": "Run the following command to install systemd-journal-remote:\n```\n# apt install systemd-journal-remote\n```\n",
    "remediation_code": "# apt install systemd-journal-remote",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits if systemd-journal-remote is installed.\"\"\"\n    try:\n        # Attempt to query the package, suppressing output\n        subprocess.check_output(['dpkg-query', '-s', 'systemd-journal-remote'], stderr=subprocess.DEVNULL)\n        # If no exception was raised, the package is installed\n        return True\n    except subprocess.CalledProcessError:\n        # Exception indicates the package is not installed\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the vulnerability by installing systemd-journal-remote.\"\"\"\n    try:\n        # Execute the installation command\n        subprocess.check_call(['apt', 'install', '-y', 'systemd-journal-remote'])\n        print(\"Installed `systemd-journal-remote` package.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to install `systemd-journal-remote`: {e}\")\n\n# Example Usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"systemd-journal-remote is already installed.\")\n"
  },
  {
    "name": "Ensure systemd-journal-upload is enabled and active",
    "id": "6.2.1.2.3",
    "type": "Automated",
    "start_page": 739,
    "end_page": 740,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Journald systemd-journal-upload supports the ability to send log events it gathers to a remote log host.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit_details": "Run the following command to verify systemd-journal-upload is enabled.\n```\n# systemctl is-enabled systemd-journal-upload.service\nenabled\n```\nRun the following command to verify systemd-journal-upload is active:\n```\n# systemctl is-active systemd-journal-upload.service\nactive\n``",
    "audit_code": "# systemctl is-enabled systemd-journal-upload.service\nenabled\n\n# systemctl is-active systemd-journal-upload.service\nactive",
    "remediation_details": "Run the following commands to unmask, enable and start systemd-journal-upload:\n```\n# systemctl unmask systemd-journal-upload.service\n# systemctl --now enable systemd-journal-upload.service\n``",
    "remediation_code": "# systemctl unmask systemd-journal-upload.service\n# systemctl --now enable systemd-journal-upload.service",
    "python_script": "\nimport subprocess\nimport dbus\n\n# Connect to dbus to interact with systemd\nsystem_bus = dbus.SystemBus()\nsystemd_manager = system_bus.get_object('org.freedesktop.systemd1', '/org/freedesktop/systemd1')\nsystemd_manager_iface = dbus.Interface(systemd_manager, dbus_interface='org.freedesktop.systemd1.Manager')\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if systemd-journal-upload is enabled and active.\"\"\"\n    # Use dbus to check if the service is enabled and active\n    service_name = 'systemd-journal-upload.service'\n    try:\n        service_state = systemd_manager_iface.GetServiceStatus(service_name)\n        return service_state[1] == 'enabled' and service_state[2] == 'active'\n    except dbus.exceptions.DBusException:\n        # If access is denied or service not found, fall back to subprocess\n        enabled_check = subprocess.run(['systemctl', 'is-enabled', service_name], capture_output=True, text=True)\n        active_check = subprocess.run(['systemctl', 'is-active', service_name], capture_output=True, text=True)\n        return enabled_check.stdout.strip() == 'enabled' and active_check.stdout.strip() == 'active'\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by unmasking, enabling, and starting systemd-journal-upload.\"\"\"\n    service_name = 'systemd-journal-upload.service'\n    # Unmask the service\n    subprocess.run(['systemctl', 'unmask', service_name])\n    print(f\"Unmasked `{service_name}` systemd service.\")\n\n    # Enable and start the service\n    subprocess.run(['systemctl', '--now', 'enable', service_name])\n    print(f\"Enabled and started `{service_name}` systemd service.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure systemd-journal-remote service is not in use",
    "id": "6.2.1.2.4",
    "type": "Automated",
    "start_page": 741,
    "end_page": 742,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Journald systemd-journal-remote supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts. **NOTE:** - The same package, systemd-journal-remote, is used for both sending logs to remote hosts and receiving incoming logs. - With regards to receiving logs, there are two services; systemd-journal-remote.socket and systemd-journal-remote.service.",
    "rationale": "If a client is configured to also receive data, thus turning it into a server, the client system is acting outside it's operational boundary.",
    "audit_details": "Run the following command to verify systemd-journal-remote.socket and systemd-journal-remote.service are not enabled:\n# systemctl is-enabled systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^enabled'\nNothing should be returned\n\nRun the following command to verify systemd-journal-remote.socket and systemd-journal-remote.service are not active:\n# systemctl is-active systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^active'\nNothing should be returned",
    "audit_code": "# systemctl is-enabled systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^enabled'\n\n# systemctl is-active systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^active'",
    "remediation_details": "Run the following commands to stop and mask systemd-journal-remote.socket and systemd-journal-remote.service:\n# systemctl stop systemd-journal-remote.socket systemd-journal-remote.service\n# systemctl mask systemd-journal-remote.socket systemd-journal-remote.service",
    "remediation_code": "# systemctl stop systemd-journal-remote.socket systemd-journal-remote.service\n# systemctl mask systemd-journal-remote.socket systemd-journal-remote.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if systemd-journal-remote is not in use.\"\"\"\n    services = ['systemd-journal-remote.socket', 'systemd-journal-remote.service']\n    for service in services:\n        # Check if service is enabled\n        enabled_check = subprocess.run(['systemctl', 'is-enabled', service], \n                                       stdout=subprocess.PIPE, text=True)\n        if enabled_check.stdout.strip() == 'enabled':\n            print(f\"Enabled {service} found. Audit failed.\")\n            return False\n        \n        # Check if service is active\n        active_check = subprocess.run(['systemctl', 'is-active', service], \n                                      stdout=subprocess.PIPE, text=True)\n        if active_check.stdout.strip() == 'active':\n            print(f\"Active {service} found. Audit failed.\")\n            return False\n    \n    print(\"No enabled or active systemd-journal-remote services found. Audit passed.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate systemd-journal-remote service usage.\"\"\"\n    services = ['systemd-journal-remote.socket', 'systemd-journal-remote.service']\n    for service in services:\n        # Stop the service\n        subprocess.run(['systemctl', 'stop', service])\n        print(f\"Stopped {service} service.\")\n        \n        # Mask the service\n        subprocess.run(['systemctl', 'mask', service])\n        print(f\"Masked {service} service.\")\n\n# Example Usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure access to all logfiles has been configured",
    "id": "6.2.2.1",
    "type": "Automated",
    "start_page": 744,
    "end_page": 749,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Log files contain information from many services on the the local system, or in the event of a centralized log server, others systems logs as well.\n\nIn general log files are found in /var/log/, although application can be configured to store logs elsewhere. Should your application store logs in another, ensure to run the same test on that location.",
    "rationale": "It is important that log files have the correct permissions to ensure that sensitive data is protected and that only the appropriate users / groups have access to them.",
    "audit_details": "Run the following script to verify that files in /var/log/ have appropriate permissions and ownership:\n\n#### Page 743\n\n```bash\n#!/usr/bin/env bash\n{\n  l_op2=\"\" l_output2=\"\"\n  l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n  file_test_chk()\n  {\n   l_op2=\"\"\n   if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n     l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\"\n   fi\n   if [[ ! \\\"$l_user\\\" =~ $l_auser ]]; then\n     l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\"\n   fi\n   if [[ ! \\\"$l_group\\\" =~ $l_agroup ]]; then\n     l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\"\n   fi\n   [ -n \\\"$l_op2\\\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n  }\n  unset a_file && a_file=() # clear and initialize array\n  # Loop to create array with stat of files that could possibly fail one of the audits\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \\\"$l_file\\\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \\\"$l_file\\\")\")\n  done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! group root \\) -print0)\n  while IFS=\\\"^\\\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n   l_bname=\"$(basename \\\"$l_fname\\\")\"\n   case \\\"$l_bname\\\" in\n     lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp* | README)\n      perm_mask='0113'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"root\"\n      l_agroup=\"(root|utmp)\"\n      file_test_chk\n      ;;\n     secure | auth.log | syslog | messages)\n      perm_mask='0137'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      file_test_chk\n      ;;\n     SSSD | sssd)\n      perm_mask='0117'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"(root|SSSD)\"\n      l_agroup=\"(root|SSSD)\"\n      file_test_chk      \n      ;;\n     gdm | gdm3)\n\n#### Page 744\n\n```\n\n```\n      perm_mask='0117'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"root\"\n      l_agroup=\"(root|gdm|gdm3)\"\n      file_test_chk  \n      ;;\n     *.journal | *.journal~)\n      perm_mask='0137'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"root\"\n      l_agroup=\"(root|systemd-journal)\"\n      file_test_chk\n      ;;\n     *)\n      perm_mask='0137'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then\n        if [[ ! \\\"$l_user\\\" =~ $l_auser ]]; then\n         l_auser=\"(root|syslog|$l_user)\"\n        fi\n        if [[ ! \\\"$l_group\\\" =~ $l_agroup ]]; then\n         l_tst=\"\"\n         while l_out3=\"\" read -r l_duid; do\n           [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed\n         done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3} /etc/passwd)\";\n         [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\"\n        fi\n      fi\n      file_test_chk\n      ;;\n   esac\n  done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\"\n  unset a_file # Clear array\n  # If all files passed, then we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Results:\\n ** Pass **\\n- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n\"\n  else\n   # print the reason why we are failing\n   echo -e \"\\n- Audit Results:\\n ** Fail **\\n$l_output2\"\n  fi\n}",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_op2=\"\" l_output2=\"\"\n  l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n  file_test_chk()\n  {\n   l_op2=\"\"\n   if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n     l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\"\n   fi\n   if [[ ! \\\"$l_user\\\" =~ $l_auser ]]; then\n     l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\"\n   fi\n   if [[ ! \\\"$l_group\\\" =~ $l_agroup ]]; then\n     l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\"\n   fi\n   [ -n \\\"$l_op2\\\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n  }\n  unset a_file && a_file=() # clear and initialize array\n  # Loop to create array with stat of files that could possibly fail one of the audits\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \\\"$l_file\\\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \\\"$l_file\\\")\")\n  done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! group root \\) -print0)\n  while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n   l_bname=\"$(basename \\\"$l_fname\\\")\"\n   case \\\"$l_bname\\\" in\n     lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp* | README)\n      perm_mask='0113'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"root\"\n      l_agroup=\"(root|utmp)\"\n      file_test_chk\n      ;;\n     secure | auth.log | syslog | messages)\n      perm_mask='0137'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      file_test_chk\n      ;;\n     SSSD | sssd)\n      perm_mask='0117'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_auser=\"(root|SSSD)\"\n      l_agroup=\"(root|SSSD)\"\n      file_test_chk      \n      ;;\n     gdm | gdm3)\n\n#### Page 744",
    "remediation_details": "Run the following script to update permissions and ownership on files in /var/log. Although the script is not destructive, ensure that the output of the audit procedure is captured in the event that the remediation causes issues.",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_op2=\"\" l_output2=\"\"\n  l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n  file_test_fix()\n  {\n   l_op2=\"\"\n   l_fuser=\"root\"\n   l_fgroup=\"root\"\n   if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n     l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\\n  - Removing excess permissions\"\n     chmod \\\"$l_rperms\\\" \\\"$l_fname\\\"\n   fi\n   if [[ ! \\\"$l_user\\\" =~ $l_auser ]]; then\n     l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\\n  - Changing ownership to: \\\"$l_fuser\\\"\"\n     chown \\\"$l_fuser\\\" \\\"$l_fname\\\"\n   fi\n   if [[ ! \\\"$l_group\\\" =~ $l_agroup ]]; then\n     l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by \\\"${l_agroup//|/ or }\\\"\\n  - Changing group ownership to: \\\"$l_fgroup\\\"\"\n     chgrp \\\"$l_fgroup\\\" \\\"$l_fname\\\"\n   fi\n   [ -n \\\"$l_op2\\\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n  }\n  unset a_file && a_file=() # clear and initialize array\n  # Loop to create array with stat of files that could possibly fail one of the audits\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \\\"$l_file\\\" ] && a_file+=(\"$(stat -Lc '%n^%#a^%U^%u^%G^%g' \\\"$l_file\\\")\")\n  done < <(find -L /var/log -type f \\( -perm /0137 -o ! -user root -o ! -group root \\) -print0)\n  while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n   l_bname=\"$(basename \\\"$l_fname\\\")\"\n   case \\\"$l_bname\\\" in\n     lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README)\n      perm_mask='0113'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_rperms=\"ug-x,o-wx\"\n      l_auser=\"root\"\n      l_agroup=\"(root|utmp)\"\n      file_test_fix\n      ;;\n     secure | auth.log | syslog | messages)\n      perm_mask='0137'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_rperms=\"u-x,g-wx,o-rwx\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      file_test_fix\n      ;;\n     SSSD | sssd)\n      perm_mask='0117'\n      maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n      l_rperms=\"ug-x,o-rwx\"\n      l_auser=\"(root|SSSD)\"\n      l_agroup=\"(root|SSSD)\"\n      file_test_fix      \n      ;;\n     gdm | gdm3)\n\n#### Page 746",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\nimport re\n\n# Predefined rules based on file name patterns\nrules = {\n    r'^(lastlog|lastlog\\.\\d+|wtmp|wtmp\\.\\d+|wtmp-\\d+|btmp|btmp\\.\\d+|btmp-\\d+|README)$': {\n        'perm_mask': 0o113,  # u=rw, g=r, o=r\n        'owner': 'root',\n        'group': ['root', 'utmp']\n    },\n    r'^(secure|auth\\.log|syslog|messages)$': {\n        'perm_mask': 0o137,  # u=rw, g=r, o=\n        'owner': ['root', 'syslog'],\n        'group': ['root', 'adm']\n    },\n    r'^(SSSD|sssd)$': {\n        'perm_mask': 0o117,  # u=r, g=r, o=\n        'owner': ['root', 'SSSD'],\n        'group': ['root', 'SSSD']\n    },\n    r'^(gdm|gdm3)$': {\n        'perm_mask': 0o117,  # u=r, g=r, o=\n        'owner': 'root',\n        'group': ['root', 'gdm', 'gdm3']\n    },\n    r'\\.journal$|\\.journal~$': {\n        'perm_mask': 0o137,  # u=rw, g=r, o=\n        'owner': 'root',\n        'group': ['root', 'systemd-journal']\n    },\n    '.*': {  # Default rule\n        'perm_mask': 0o137,  # u=rw, g=r, o=\n        'owner': ['root', 'syslog'],\n        'group': ['root', 'adm']\n    }\n}\n\ndef audit_vuln() -> bool:\n    audit_passed = True\n    for entry in os.scandir('/var/log'):\n        if entry.is_file():\n            file_path = entry.path\n            file_stat = entry.stat()\n            owner_name = pwd.getpwuid(file_stat.st_uid).pw_name\n            group_name = grp.getgrgid(file_stat.st_gid).gr_name\n            \n            # Determine applicable rule\n            applicable_rule = None\n            for pattern, rule in rules.items():\n                if re.match(pattern, os.path.basename(file_path)):\n                    applicable_rule = rule\n                    break\n            \n            if applicable_rule:\n                # Check permissions\n                if file_stat.st_mode & applicable_rule['perm_mask']:\n                    print(f\"File: {file_path} - Mode: {stat.filemode(file_stat.st_mode)} should be more restrictive than {oct(applicable_rule['perm_mask'])[2:]}\")\n                    audit_passed = False\n                \n                # Check ownership\n                if owner_name not in applicable_rule['owner']:\n                    print(f\"File: {file_path} - Owned by: {owner_name} and should be owned by {'/'.join(applicable_rule['owner'])}\")\n                    audit_passed = False\n                \n                # Check group ownership\n                if group_name not in applicable_rule['group']:\n                    print(f\"File: {file_path} - Group owned by: {group_name} and should be group owned by {'/'.join(applicable_rule['group'])}\")\n                    audit_passed = False\n    \n    return audit_passed\n\ndef remediate_vuln() -> None:\n    for entry in os.scandir('/var/log'):\n        if entry.is_file():\n            file_path = entry.path\n            file_stat = entry.stat()\n            owner_name = pwd.getpwuid(file_stat.st_uid).pw_name\n            group_name = grp.getgrgid(file_stat.st_gid).gr_name\n            \n            # Determine applicable rule\n            applicable_rule = None\n            for pattern, rule in rules.items():\n                if re.match(pattern, os.path.basename(file_path)):\n                    applicable_rule = rule\n                    break\n            \n            if applicable_rule:\n                # Fix permissions\n                if file_stat.st_mode & applicable_rule['perm_mask']:\n                    new_mode = file_stat.st_mode & ~applicable_rule['perm_mask']\n                    os.chmod(file_path, new_mode)\n                    print(f\"Adjusted permissions for {file_path} to {stat.filemode(new_mode)}\")\n                \n                # Fix ownership\n                target_owner = applicable_rule['owner'][0] if owner_name not in applicable_rule['owner'] else owner_name\n                if owner_name != target_owner:\n                    target_uid = pwd.getpwnam(target_owner).pw_uid\n                    os.chown(file_path, target_uid, -1)\n                    print(f\"Changed ownership of {file_path} to {target_owner}\")\n                \n                # Fix group ownership\n                target_group = applicable_rule['group'][0] if group_name not in applicable_rule['group'] else group_name\n                if group_name != target_group:\n                    target_gid = grp.getgrnam(target_group).gr_gid\n                    os.chown(file_path, -1, target_gid)\n                    print(f\"Changed group ownership of {file_path} to {target_group}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"** Audit Failed. Initiating Remediation **\")\n        remediate_vuln()\n    else:\n        print(\"** Audit Passed. No remediation needed. **\")\n"
  },
  {
    "name": "Ensure permissions on /etc/passwd are configured",
    "id": "7.1.1",
    "type": "Automated",
    "start_page": 879,
    "end_page": 880,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/passwd file contains user account information that is used by many system utilities and therefore must be readable for these utilities to operate.",
    "rationale": "It is critical to ensure that the /etc/passwd file is protected from unauthorized write access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/passwd is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/passwd Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/passwd",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd: # chmod u-x,go-wx /etc/passwd # chown root:root /etc/passwd",
    "remediation_code": "# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the permissions and ownership of /etc/passwd.\n    \n    Returns:\n        bool: True if the file is configured correctly, False otherwise.\n    \"\"\"\n    passwd_file = \"/etc/passwd\"\n    \n    # Check permissions (644 or more restrictive)\n    perms = stat.S_IMODE(os.stat(passwd_file).st_mode)\n    if perms != 0o644 and perms not in [p for p in range(0o000, 0o644) if p ^ 0o222]:  # 0o222 is --w--w--\n        print(f\"Permissions for {passwd_file} are not 644 or more restrictive (current: {stat.filemode(perms)}).\")\n        return False\n    \n    # Check Uid (0/root)\n    if os.stat(passwd_file).st_uid != 0:\n        print(f\"Uid for {passwd_file} is not 0 (root) (current: {os.stat(passwd_file).st_uid}).\")\n        return False\n    \n    # Check Gid (0/root)\n    if os.stat(passwd_file).st_gid != 0:\n        print(f\"Gid for {passwd_file} is not 0 (root) (current: {os.stat(passwd_file).st_gid}).\")\n        return False\n    \n    print(f\"Permissions, Uid, and Gid for {passwd_file} are correctly configured.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate any issues with the permissions and ownership of /etc/passwd.\n    \"\"\"\n    passwd_file = \"/etc/passwd\"\n    \n    # Remove excess permissions and set to 644\n    os.chmod(passwd_file, 0o644)\n    print(f\"Set permissions for {passwd_file} to 644.\")\n    \n    # Set owner to root\n    os.chown(passwd_file, 0, -1)  # -1 to keep the current group\n    print(f\"Set owner of {passwd_file} to root.\")\n    \n    # Set group to root (only if not already set)\n    if os.stat(passwd_file).st_gid != 0:\n        os.chown(passwd_file, -1, 0)  # -1 to keep the current user\n        print(f\"Set group of {passwd_file} to root.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/passwd- are configured",
    "id": "7.1.2",
    "type": "Automated",
    "start_page": 881,
    "end_page": 882,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/passwd- file contains backup user account information.",
    "rationale": "It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/passwd- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/passwdAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/passwdAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd-:\n```\n# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd\n```",
    "remediation_code": "# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the permissions and ownership of /etc/passwd-.\n    \n    Returns:\n        bool: True if the configuration is secure, False otherwise.\n    \"\"\"\n    file_path = \"/etc/passwd-\"\n    file_stat = os.stat(file_path)\n    \n    # Check file mode (permissions)\n    if file_stat.st_mode & 0o777!= 0o644 and not is_more_restrictive(file_stat.st_mode, 0o644):\n        print(f\"Weak permissions detected for {file_path}, expected 644 or more restrictive, found {stat.filemode(file_stat.st_mode)}\")\n        return False\n    \n    # Check UID (User ID)\n    if file_stat.st_uid!= 0:\n        print(f\"UID mismatch for {file_path}, expected 0 (root), found {file_stat.st_uid}\")\n        return False\n    \n    # Check GID (Group ID)\n    if file_stat.st_gid!= 0:\n        print(f\"GID mismatch for {file_path}, expected 0 (root), found {file_stat.st_gid}\")\n        return False\n    \n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate weaknesses in /etc/passwd- permissions and ownership.\n    \"\"\"\n    file_path = \"/etc/passwd-\"\n    \n    # Set permissions to 644 if necessary\n    desired_mode = 0o644\n    current_mode = os.stat(file_path).st_mode\n    if current_mode!= desired_mode:\n        os.chmod(file_path, desired_mode)\n        print(f\"Set permissions of {file_path} to {stat.filemode(desired_mode)}\")\n    \n    # Set owner to root if necessary\n    if os.stat(file_path).st_uid!= 0:\n        os.chown(file_path, 0, -1)  # -1 to keep the group unchanged\n        print(f\"Set owner of {file_path} to root\")\n    \n    # Set group to root if necessary\n    if os.stat(file_path).st_gid!= 0:\n        os.chown(file_path, -1, 0)  # -1 to keep the user unchanged\n        print(f\"Set group of {file_path} to root\")\n\n\ndef is_more_restrictive(mode, comparison_mode):\n    \"\"\"\n    Checks if the provided file mode is more restrictive than the comparison mode.\n    \n    Args:\n        mode (int): The file mode to check.\n        comparison_mode (int): The mode to compare against.\n    \n    Returns:\n        bool: True if the mode is more restrictive, False otherwise.\n    \"\"\"\n    # More restrictive means fewer permissions allowed\n    return (mode & 0o777) < (comparison_mode & 0o777)\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/group are configured",
    "id": "7.1.3",
    "type": "Automated",
    "start_page": 883,
    "end_page": 884,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/group file contains a list of all the valid groups defined in the system. The command below allows read/write access for root and read access for everyone else.",
    "rationale": "The /etc/group file needs to be protected from unauthorized changes by non-privileged users, but needs to be readable as this information is used with many non-privileged programs.",
    "audit_details": "Run the following command to verify /etc/group is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group:\n# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "remediation_code": "# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure permissions on /etc/group are configured\"\"\"\n    group_file = '/etc/group'\n    desired_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    desired_uid = 0  # root\n    desired_gid = 0  # root\n\n    # Get current file stats\n    file_stats = os.stat(group_file)\n    current_mode = file_stats.st_mode & 0o777  # Mask to get permission bits\n    current_uid = file_stats.st_uid\n    current_gid = file_stats.st_gid\n\n    # Check if any of the desired settings are not met\n    if (current_mode!= desired_mode or \n        current_uid!= desired_uid or \n        current_gid!= desired_gid):\n        return True  # Vulnerability present\n    return False  # No vulnerability\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure permissions on /etc/group are configured\"\"\"\n    group_file = '/etc/group'\n    desired_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    desired_uid = 0  # root\n    desired_gid = 0  # root\n\n    # Modify permissions\n    os.chmod(group_file, desired_mode)\n    print(f\"Modified permissions of `{group_file}` to {stat.filemode(desired_mode)}\")\n\n    # Set owner to root\n    root_uid = pwd.getpwnam('root').pw_uid\n    os.chown(group_file, root_uid, -1)  # -1 to keep current GID\n    print(f\"Set owner of `{group_file}` to root (UID {root_uid})\")\n\n    # Set group to root\n    root_gid = grp.getgrnam('root').gr_gid\n    os.chown(group_file, -1, root_gid)  # -1 to keep current UID\n    print(f\"Set group of `{group_file}` to root (GID {root_gid})\")\n\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/group- are configured",
    "id": "7.1.4",
    "type": "Automated",
    "start_page": 885,
    "end_page": 886,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/group- file contains a backup list of all the valid groups defined in the system.",
    "rationale": "It is critical to ensure that the /etc/group- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/group- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/groupAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/groupAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group-:\n# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "remediation_code": "# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions, owner, and group of /etc/group-\"\"\"\n    file_path = \"/etc/group-\"\n    \n    # Check if file exists\n    if not os.path.exists(file_path):\n        return False  # or raise FileNotFoundError(f\"{file_path} not found\")\n    \n    # Get file stats\n    file_stats = os.stat(file_path)\n    \n    # Permissions check (644 or more restrictive)\n    if not (file_stats.st_mode & 0o777) == 0o644:\n        return False\n    \n    # UID and Username check\n    uid = file_stats.st_uid\n    if uid!= 0 or pwd.getpwuid(uid).pw_name!= 'root':\n        return False\n    \n    # GID and Groupname check\n    gid = file_stats.st_gid\n    if gid!= 0 or grp.getgrgid(gid).gr_name!= 'root':\n        return False\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions, owner, and group issues on /etc/group-\"\"\"\n    file_path = \"/etc/group-\"\n    \n    # Remove excess permissions to achieve at least 644\n    new_permissions = 0o644\n    current_permissions = stat.S_IMODE(os.stat(file_path).st_mode)\n    os.chmod(file_path, new_permissions)\n    print(f\"Set permissions of {file_path} to {oct(new_permissions)[2:]}\")\n    \n    # Set owner to root\n    root_uid = pwd.getpwnam('root').pw_uid\n    os.chown(file_path, root_uid, -1)  # -1 keeps the current group ID unchanged\n    print(f\"Set owner of {file_path} to root (UID: {root_uid})\")\n    \n    # Set group to root\n    root_gid = grp.getgrnam('root').gr_gid\n    os.chown(file_path, -1, root_gid)  # -1 keeps the current user ID unchanged\n    print(f\"Set group of {file_path} to root (GID: {root_gid})\")\n\n# Example usage\nif not audit_vuln():\n    print(\"Vulnerability found. Remediation needed.\")\n    remediate_vuln()\nelse:\n    print(\"/etc/group- configuration is secure.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/shadow are configured",
    "id": "7.1.5",
    "type": "Automated",
    "start_page": 887,
    "end_page": 888,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/shadow file is used to store the information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert the user accounts.",
    "audit_details": "Run the following command to verify /etc/shadow is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or ({GID}/ shadow):\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow\n```\n\n_Example:_\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/shadow to root and group to either root or shadow:\n```\n# chown root:shadow /etc/shadow\n-OR# chown root:root /etc/shadow\n```\nRun the following command to remove excess permissions from /etc/shadow:\n```\n# chmod u-x,g-wx,o-rwx /etc/shadow\n```",
    "remediation_code": "# chown root:shadow /etc/shadow\n# chmod u-x,g-wx,o-rwx /etc/shadow",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits the vulnerability of /etc/shadow permissions and ownership.\"\"\"\n    shadow_path = '/etc/shadow'\n    desired_mode = 0o640  # 640 in octal\n    root_uid = 0\n    root_name = 'root'\n    shadow_gid_name = 'shadow'\n\n    # Get current stat of /etc/shadow\n    shadow_stat = os.stat(shadow_path)\n\n    # Check permissions\n    if shadow_stat.st_mode & 0o777 != desired_mode:\n        print(f\"Permissions for {shadow_path} are not set to 0640 or more restrictive, found: {stat.filemode(shadow_stat.st_mode)}\")\n        return False\n\n    # Check UID\n    if shadow_stat.st_uid != root_uid or pwd.getpwuid(shadow_stat.st_uid).pw_name != root_name:\n        print(f\"UID for {shadow_path} is not 0/root, found UID: {shadow_stat.st_uid}, Username: {pwd.getpwuid(shadow_stat.st_uid).pw_name}\")\n        return False\n\n    # Check GID\n    shadow_gid = grp.getgrnam(shadow_gid_name).gr_gid\n    if shadow_stat.st_gid not in [root_uid, shadow_gid]:\n        print(f\"GID for {shadow_path} is not 0/root or {shadow_gid}/{shadow_gid_name}, found GID: {shadow_stat.st_gid}, Groupname: {grp.getgrgid(shadow_stat.st_gid).gr_name}\")\n        return False\n\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the vulnerability by adjusting ownership and permissions of /etc/shadow.\"\"\"\n    shadow_path = '/etc/shadow'\n    new_ownership = (0, grp.getgrnam('shadow').gr_gid)  # root:shadow\n    new_permissions = 0o640  # Octal for 640\n\n    # Set ownership to root:shadow\n    os.chown(shadow_path, *new_ownership)\n    print(f\"Set ownership of {shadow_path} to {pwd.getpwuid(new_ownership[0]).pw_name}:{grp.getgrgid(new_ownership[1]).gr_name}\")\n\n    # Adjust permissions to 640\n    os.chmod(shadow_path, new_permissions)\n    print(f\"Adjusted permissions of {shadow_path} to {stat.filemode(new_permissions)}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found, remediating...\")\n        remediate_vuln()\n    else:\n        print(\"/etc/shadow configuration is secure.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/shadow- are configured",
    "id": "7.1.6",
    "type": "Automated",
    "start_page": 889,
    "end_page": 890,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/shadow- file is used to store backup information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/shadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/shadow- is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or {GID}/shadow:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow\n```\n\n_Example:_\n\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/shadow- to root and group to either root or shadow:\n```\n# chown root:shadow /etc/shadow -OR# chown root:root /etc/shadow\n```\nRun the following command to remove excess permissions from /etc/shadow-:\n```\n# chmod u-x,g-wx,o-rwx /etc/shadow\n```",
    "remediation_code": "# chown root:shadow /etc/shadow\n# chown root:root /etc/shadow\n# chmod u-x,g-wx,o-rwx /etc/shadow",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit /etc/shadow- permissions, UID, and GID.\"\"\"\n    file_path = \"/etc/shadow-\"\n    try:\n        file_stat = os.stat(file_path)\n    except FileNotFoundError:\n        print(f\"Error: File '{file_path}' not found.\")\n        return False\n\n    # Check permissions (at least 640)\n    perms = stat.filemode(file_stat.st_mode)\n    if not (perms.startswith(\"rw-r-----\") or perms.startswith(\"rw-------\")):\n        print(f\"Weak permissions detected: {perms} for {file_path}\")\n        return False\n\n    # Check UID (0/root)\n    uid = file_stat.st_uid\n    if uid!= 0 or pwd.getpwuid(uid).pw_name!= \"root\":\n        print(f\"UID mismatch: {uid} for {file_path}, expected 0/root\")\n        return False\n\n    # Check GID (0/root or {GID}/shadow)\n    gid = file_stat.st_gid\n    if (gid, grp.getgrgid(gid).gr_name) not in [(0, \"root\"), (grp.getgrnam(\"shadow\").gr_gid, \"shadow\")]:\n        print(f\"GID mismatch: {gid} for {file_path}, expected 0/root or shadow\")\n        return False\n\n    print(f\"Permissions, UID, and GID for {file_path} are secure.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability by adjusting /etc/shadow- ownership and permissions.\"\"\"\n    file_path = \"/etc/shadow-\"\n    root_uid, root_gid = 0, 0\n    shadow_gid = grp.getgrnam(\"shadow\").gr_gid\n\n    # Set ownership to root:shadow (preferred) or root:root\n    try:\n        os.chown(file_path, root_uid, shadow_gid)\n        print(f\"Set ownership of {file_path} to root:shadow.\")\n    except OSError as e:\n        if e.errno == 2:  # No such file or directory (shadow group not present, fallback to root:root)\n            os.chown(file_path, root_uid, root_gid)\n            print(f\"Set ownership of {file_path} to root:root (fallback).\")\n        else:\n            raise\n\n    # Adjust permissions to at least 640 (u-x, g-wx, o-rwx)\n    perms = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n    os.chmod(file_path, perms)\n    print(f\"Adjusted permissions of {file_path} to at least 640 (u-x, g-wx, o-rwx).\")\n"
  },
  {
    "name": "Ensure permissions on /etc/gshadow are configured",
    "id": "7.1.7",
    "type": "Automated",
    "start_page": 891,
    "end_page": 892,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/gshadow file is used to store the information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/gshadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/gshadow file (such as group administrators) could also be useful to subvert the group.",
    "audit_details": "Run the following command to verify /etc/gshadow is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or `{GID}/shadow:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow\n```\n\n_Example:_\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/gshadow to root and group to either root or shadow:\n```\n# chown root:shadow /etc/gshadow\n -OR# chown root:root /etc/gshadow\n```\nRun the following command to remove excess permissions form /etc/gshadow:\n```\n# chmod u-x,g-wx,o-rwx /etc/gshadow\n```\n",
    "remediation_code": "# chown root:shadow /etc/gshadow\n# chmod u-x,g-wx,o-rwx /etc/gshadow",
    "python_script": "\nimport os\nimport stat\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit /etc/gshadow for correct permissions, UID, and GID.\"\"\"\n    file_path = '/etc/gshadow'\n    file_stat = os.stat(file_path)\n    \n    # Check permissions (mode 640 or more restrictive)\n    desired_permissions = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n    if file_stat.st_mode & 0o777!= desired_permissions:\n        print(f\"Adjusted permissions for '{file_path}' to 640.\")\n        os.chmod(file_path, desired_permissions)\n        return False  #Permissions were not as expected, corrected in audit for immediate security\n    \n    # Check UID (0/root)\n    if file_stat.st_uid!= 0:\n        print(f\"Changed owner of '{file_path}' to root.\")\n        shutil.chown(file_path, user='root')\n        return False  #UID was not as expected, corrected in audit for immediate security\n    \n    # Check GID (0/root or {GID}/shadow, assuming shadow's GID for simplicity)\n    if file_stat.st_gid not in [0, shutil.which('shadow')]:  # Simplified GID check, may need adjustment\n        print(f\"Changed group of '{file_path}' to shadow.\")\n        shutil.chown(file_path, group='shadow')\n        return False  #GID was not as expected, corrected in audit for immediate security\n    \n    return True  # All checks passed\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate any vulnerabilities found in /etc/gshadow's permissions, UID, or GID.\"\"\"\n    file_path = '/etc/gshadow'\n    \n    # Set ownership to root:shadow (shadow group used for remediation as per initial example)\n    shutil.chown(file_path, user='root', group='shadow')\n    print(f\"Changed ownership of '{file_path}' to root:shadow.\")\n    \n    # Remove excess permissions (ensure mode 640)\n    desired_permissions = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n    os.chmod(file_path, desired_permissions)\n    print(f\"Adjusted permissions for '{file_path}' to 640.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/gshadow- are configured",
    "id": "7.1.8",
    "type": "Automated",
    "start_page": 893,
    "end_page": 894,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/gshadow- file is used to store backup information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/gshadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/gshadow- is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or {GID}/shadow:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow\n```\n\n_Example:_\n\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/gshadow- to root and group to either root or shadow:\n```\n# chown root:shadow /etc/gshadow -OR# chown root:root /etc/gshadow\n```\nRun the following command to remove excess permissions form /etc/gshadow-:\n```\n# chmod u-x,g-wx,o-rwx /etc/gshadow\n```\n",
    "remediation_code": "# chown root:shadow /etc/gshadow\n# chown root:root /etc/gshadow\n# chmod u-x,g-wx,o-rwx /etc/gshadow",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions and ownership of /etc/gshadow-\"\"\"\n    file_path = \"/etc/gshadow-\"\n    file_stat = os.stat(file_path)\n    \n    # Permissions check: at least 640 (rw-r-----)\n    perms_ok = (file_stat.st_mode & 0o777) == 0o640\n    \n    # Uid check: 0/root\n    uid_ok = file_stat.st_uid == 0\n    \n    # Gid check: 0/root or shadow group (assuming shadow's GID is known or root as fallback)\n    # Note: For precise identification of the 'shadow' group's GID, using pwd.getpwnam or grp.getgrnam would be more accurate.\n    #       However, since we're also accepting root as a fallback and to maintain simplicity without additional imports:\n    gid_ok = file_stat.st_gid == 0  # Simplified check for root; adjust if needed for 'shadow'\n    \n    return all([perms_ok, uid_ok, gid_ok])\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate ownership and permissions issues with /etc/gshadow-\"\"\"\n    file_path = \"/etc/gshadow-\"\n    \n    # Set ownership to root:shadow (preferred), fallback to root:root if shadow not found\n    try:\n        import grp\n        shadow_gid = grp.getgrnam('shadow').gr_gid\n        print(f\"Setting ownership of {file_path} to root:shadow...\")\n        os.chown(file_path, 0, shadow_gid)\n    except KeyError:\n        print(f\"Shadow group not found, setting ownership of {file_path} to root:root...\")\n        os.chown(file_path, 0, 0)\n    \n    # Remove excess permissions to achieve at least 640 mode\n    desired_perms = 0o640\n    print(f\"Applying permissions {desired_perms:o} to {file_path}...\")\n    os.chmod(file_path, desired_perms)\n\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability detected. Remediation required.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/shells are configured",
    "id": "7.1.9",
    "type": "Automated",
    "start_page": 895,
    "end_page": 896,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "/etc/shells is a text file which contains the full pathnames of valid login shells. This file is consulted by chsh and available to be queried by other programs.",
    "rationale": "It is critical to ensure that the /etc/shells file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/shells is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root: # stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shells Access: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shells",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/shells: # chmod u-x,go-wx /etc/shells # chown root:root /etc/shells",
    "remediation_code": "# chmod u-x,go-wx /etc/shells\n# chown root:root /etc/shells",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions, UID, and GID of /etc/shells\"\"\"\n    shells_path = '/etc/shells'\n    expected_permissions = 0o644\n    expected_uid = 0\n    expected_gid = 0\n\n    file_stat = os.stat(shells_path)\n    actual_permissions = file_stat.st_mode & 0o777\n\n    if (actual_permissions & ~expected_permissions)!= 0:  # Check if permissions are more restrictive\n        print(f\"Unexpected permissions on {shells_path}: {stat.filemode(actual_permissions)} (expected {stat.filemode(expected_permissions)})\")\n        return False\n\n    if file_stat.st_uid!= expected_uid or pwd.getpwuid(file_stat.st_uid).pw_name!= 'root':\n        print(f\"Unexpected owner on {shells_path}: {file_stat.st_uid} (expected 0/root)\")\n        return False\n\n    if file_stat.st_gid!= expected_gid or grp.getgrgid(file_stat.st_gid).gr_name!= 'root':\n        print(f\"Unexpected group on {shells_path}: {file_stat.st_gid} (expected 0/root)\")\n        return False\n\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions, owner, and group of /etc/shells\"\"\"\n    shells_path = '/etc/shells'\n    expected_permissions = 0o644\n    expected_uid = 0\n    expected_gid = 0\n\n    # Set owner and group to root\n    os.chown(shells_path, expected_uid, expected_gid)\n    print(f\"Set owner and group of {shells_path} to {expected_uid}/root:{expected_gid}/root\")\n\n    # Remove excess permissions\n    current_permissions = os.stat(shells_path).st_mode\n    new_permissions = (current_permissions & ~0o222) & ~0o033  # u-x, go-wx\n    os.chmod(shells_path, new_permissions)\n    print(f\"Set permissions of {shells_path} to {stat.filemode(new_permissions)}\")\n"
  },
  {
    "name": "Ensure permissions on /etc/security/opasswd are configured",
    "id": "7.1.10",
    "type": "Automated",
    "start_page": 897,
    "end_page": 898,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "/etc/security/opasswd and it's backup /etc/security/opasswd.old hold user's previous passwords if pam_unix or pam_pwhistory is in use on the system",
    "rationale": "It is critical to ensure that /etc/security/opasswd is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following commands to verify /etc/security/opasswd and /etc/security/opasswd.old are mode 600 or more restrictive, Uid is 0/root and Gid is 0/root if they exist:\n# [ -e \"/etc/security/opasswd\" ] && stat -Lc '%n Access: (%#a/%A) Uid: (%u/ %U) Gid: ( %g/ %G)' /etc/security/opasswd\n/etc/security/opasswd Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n -ORNothing is returned\n# [ -e \"/etc/security/opasswd.old\" ] && stat -Lc '%n Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/security/opasswd.old\n/etc/security/opasswd.old Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n -ORNothing is returned",
    "audit_code": "# [ -e \"/etc/security/opasswd\" ] && stat -Lc '%n Access: (%#a/%A) Uid: (%u/ %U) Gid: ( %g/ %G)' /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && stat -Lc '%n Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/security/opasswd.old",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/security/opasswd and /etc/security/opasswd.old if they exist:\n# [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd\n# [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old\n# [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old",
    "remediation_code": "# [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd\n# [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old\n# [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions and ownership of /etc/security/opasswd and /etc/security/opasswd.old\"\"\"\n    vulnerable = False\n    files_to_check = ['/etc/security/opasswd', '/etc/security/opasswd.old']\n    desired_uid = pwd.getpwnam('root').pw_uid\n    desired_gid = grp.getgrnam('root').gr_gid\n    desired_permissions = stat.S_IRUSR | stat.S_IWUSR  # 0600\n\n    for file in files_to_check:\n        if os.path.exists(file):\n            file_stat = os.stat(file)\n            if (file_stat.st_mode & 0o777)!= desired_permissions or \\\n               file_stat.st_uid!= desired_uid or \\\n               file_stat.st_gid!= desired_gid:\n                vulnerable = True\n                print(f\"File {file} has incorrect permissions ({stat.filemode(file_stat.st_mode)}) or ownership (UID: {file_stat.st_uid}, GID: {file_stat.st_gid}).\")\n\n    return vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions and ownership issues for /etc/security/opasswd and /etc/security/opasswd.old\"\"\"\n    desired_uid = pwd.getpwnam('root').pw_uid\n    desired_gid = grp.getgrnam('root').gr_gid\n    desired_permissions = stat.S_IRUSR | stat.S_IWUSR  # 0600\n    files_to_remediate = ['/etc/security/opasswd', '/etc/security/opasswd.old']\n\n    for file in files_to_remediate:\n        if os.path.exists(file):\n            # Change ownership to root:root\n            if os.stat(file).st_uid!= desired_uid or os.stat(file).st_gid!= desired_gid:\n                os.chown(file, desired_uid, desired_gid)\n                print(f\"Changed ownership of {file} to root:root.\")\n\n            # Apply desired permissions\n            current_permissions = os.stat(file).st_mode & 0o777\n            if current_permissions!= desired_permissions:\n                os.chmod(file, desired_permissions)\n                print(f\"Applied permissions {stat.filemode(desired_permissions)} to {file}.\")\n"
  },
  {
    "name": "Ensure world writable files and directories are secured",
    "id": "7.1.11",
    "type": "Automated",
    "start_page": 899,
    "end_page": 902,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "World writable files are the least secure. Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. See the chmod(2) man page for more information.\n\nSetting the sticky bit on world writable directories prevents users from deleting or renaming files in that directory that are not owned by them.",
    "rationale": "Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity.\n\nThis feature prevents the ability to delete or rename files in world writable directories (such as /tmp) that are owned by another user.",
    "audit_details": "Run the following script to verify:\n\n  - No world writable files exist\n  - No world writable directories without the sticky bit exist",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_smask='01000'\n  a_file=(); a_dir=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/*\" -a ! -path \"/snap/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      [ -f \"$l_file\" ] && a_file+=(\"$l_file\") # Add WR files\n      if [ -d \"$l_file\" ]; then # Add directories w/o sticky bit\n        l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n        [ ! $(( $l_mode & $l_smask )) -gt 0 ] && a_dir+=(\"$l_file\")\n      fi\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\\/run\\/user\\/|\\/tmp|\\/var\\/tmp)/){print $2}')\n  if ! (( ${#a_file[@]} > 0 )); then\n   l_output=\"$l_output\\n - No world writable files exist on the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_file[@]}\")\\\" World writable files on the system.\\n  - The following is a list of World writable files:\\n$(printf '%s\\n' \"${a_file[@]}\")\\n  - end of list\\n\"\n  fi\n  if ! (( ${#a_dir[@]} > 0 )); then\n   l_output=\"$l_output\\n - Sticky bit is set on world writable directories on the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_dir[@]}\")\\\" World writable directories without the sticky bit on the system.\\n  - The following is a list of World writable directories without the sticky bit:\\n$(printf '%s\\n' \"${a_dir[@]}\")\\n  - end of list\\n\"\n  fi\n  unset a_path; unset a_arr; unset a_file; unset a_dir # Remove arrays\n  # If l_output2 is empty, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"- * Correctly configured *:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "- World Writable Files:\n`o` It is recommended that write access is removed from other with the command ( chmod o-w <filename> ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file.\n\n- World Writable Directories:\n`o` Set the sticky bit on all world writable directories with the command ( chmod a+t <directory_name> )\n\n### Run the following script to:\n- Remove other write permission from any world writable files\n- Add the sticky bit to all world writable directories",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_smask='01000'\n  a_file=(); a_dir=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/*\" -a ! -path \"/snap/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n      if [ -f \"$l_file\" ]; then # Remove excess permissions from WW files\n        echo -e \" - File: \\\"$l_file\\\" is mode: \\\"$l_mode\\\"\\n removing write permission on \\\"$l_file\\\" from \\\"other\\\"\"\n        chmod o-w \"$l_file\"\n      fi\n      if [ -d \"$l_file\" ]; then # Add sticky bit\n        if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then\n         echo -e \" - Directory: \\\"$l_file\\\" is mode: \\\"$l_mode\\\" and doesn't have the sticky bit set\\n - Adding the sticky bit\"\n         chmod a+t \"$l_file\"\n        fi\n      fi\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\\/run\\/user\\/|\\/tmp|\\/var\\/tmp)/){print $2}') \n}",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for world-writable files and directories without the sticky bit.\n    \n    Returns:\n    bool: True if no vulnerabilities found, False otherwise.\n    \"\"\"\n    vulnerable = False\n    excluded_paths = [\"/run/user/*\", \"/proc/*\", \"*/containerd/*\", \"*/kubelet/pods/*\", \n                      \"*/kubelet/plugins/*\", \"/sys/*\", \"/snap/*\"]\n    excluded_mounts = [\"nfs\", \"proc\", \"smb\", \"vfat\", \"iso9660\", \"efivarfs\", \"selinuxfs\"]\n    excluded_targets = [\"/run/user/\", \"/tmp\", \"/var/tmp\"]\n    \n    for mount in _get_mounts(excluded_mounts, excluded_targets):\n        for root, dirs, files in os.walk(mount, topdown=True):\n            if any(root.startswith(ep) for ep in excluded_paths):\n                del dirs[:]  # Skip excluded paths\n                continue\n            for file in files:\n                file_path = os.path.join(root, file)\n                if _is_world_writable(file_path):\n                    print(f\"World-writable file found: {file_path}\")\n                    vulnerable = True\n            for dir in dirs:\n                dir_path = os.path.join(root, dir)\n                if _is_dir_world_writable_without_sticky_bit(dir_path):\n                    print(f\"World-writable directory without sticky bit found: {dir_path}\")\n                    vulnerable = True\n    \n    return not vulnerable\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate world-writable files by removing 'other' write permission and \n    adds the sticky bit to world-writable directories.\n    \"\"\"\n    excluded_paths = [\"/run/user/*\", \"/proc/*\", \"*/containerd/*\", \"*/kubelet/pods/*\", \n                      \"*/kubelet/plugins/*\", \"/sys/*\", \"/snap/*\"]\n    excluded_mounts = [\"nfs\", \"proc\", \"smb\", \"vfat\", \"iso9660\", \"efivarfs\", \"selinuxfs\"]\n    excluded_targets = [\"/run/user/\", \"/tmp\", \"/var/tmp\"]\n    \n    for mount in _get_mounts(excluded_mounts, excluded_targets):\n        for root, dirs, files in os.walk(mount, topdown=True):\n            if any(root.startswith(ep) for ep in excluded_paths):\n                del dirs[:]  # Skip excluded paths\n                continue\n            for file in files:\n                file_path = os.path.join(root, file)\n                if _is_world_writable(file_path):\n                    os.chmod(file_path, stat.S_IMODE(os.stat(file_path).st_mode) & ~stat.S_IWOTH)\n                    print(f\"Removed 'other' write permission from {file_path}\")\n            for dir in dirs:\n                dir_path = os.path.join(root, dir)\n                if _is_dir_world_writable_without_sticky_bit(dir_path):\n                    os.chmod(dir_path, stat.S_IMODE(os.stat(dir_path).st_mode) | stat.S_ISVTX)\n                    print(f\"Added sticky bit to {dir_path}\")\n\n\ndef _get_mounts(excluded_mounts, excluded_targets):\n    # Simulate findmnt output filtering\n    # For completeness, you might want to parse actual 'findmnt' output or use a Python lib for mount info\n    mounts = [\"/\", \"/home\", \"/boot\", \"/mnt\"]  # Example mounts, replace with actual parsing or lookup\n    for mount in mounts:\n        if os.path.basename(mount) not in excluded_targets and os.path.basename(os.path.dirname(mount)) not in excluded_mounts:\n            yield mount\n\n\ndef _is_world_writable(path):\n    # Check if 'other' has write permission\n    return stat.S_IMODE(os.stat(path).st_mode) & stat.S_IWOTH\n\n\ndef _is_dir_world_writable_without_sticky_bit(path):\n    # Check if it's a directory, 'other' has write permission, and the sticky bit is not set\n    mode = os.stat(path).st_mode\n    return stat.S_ISDIR(mode) and (mode & stat.S_IWOTH) and not (mode & stat.S_ISVTX)\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerabilities found. Attempting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerabilities found.\")\n"
  },
  {
    "name": "Ensure no files or directories without an owner and a group exist",
    "id": "7.1.12",
    "type": "Automated",
    "start_page": 903,
    "end_page": 905,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by those users or groups.",
    "rationale": "A new user or group who is assigned a deleted user's user ID or group ID may then end up \"owning\" a deleted user or group's files, and thus have more access on the system than was intended.",
    "audit_details": "Run the following script to verify no unowned or ungrouped files or directories exist:\n\n```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_nouser=(); a_nogroup=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path\n\"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path\n\"*/kubelet/plugins/*\" -a ! -path \"/sys/fs/cgroup/memory/*\" -a ! -path\n\"/var/*/private/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      while IFS=: read -r l_user l_group; do\n        [ \"$l_user\" = \"UNKNOWN\" ] && a_nouser+=(\"$l_file\")\n        [ \"$l_group\" = \"UNKNOWN\" ] && a_nogroup+=(\"$l_file\")\n      done < <(stat -Lc '%U:%G' \"$l_file\")\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type\n-d \\) \\( -nouser -o -nogroup \\) -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^\\/run\\/user\\//){print $2}')\n  if ! (( ${#a_nouser[@]} > 0 )); then\n   l_output=\"$l_output\\n - No files or directories without a owner exist\non the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nouser[@]}\")\\\" unowned files or directories on the system.\\n  - The\nfollowing is a list of unowned files and/or directories:\\n$(printf '%s\\n' \"${a_nouser[@]}\")\\n  - end of list\"\n  fi\n  if ! (( ${#a_nogroup[@]} > 0 )); then\n   l_output=\"$l_output\\n - No files or directories without a group exist\non the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nogroup[@]}\")\\\" ungrouped files or directories on the system.\\n  - The following is a list of ungrouped files and/or directories:\\n$(printf '%s\\n' \"${a_nogroup[@]}\")\\n  - end of list\"\n  fi \n  unset a_path; unset a_arr ; unset a_nouser; unset a_nogroup # Remove\narrays\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *:\n$l_output\\n\"\n  fi\n} \n``` \n\n### Note: On systems with a large number of files and/or directories, this audit may be a long running process",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_nouser=(); a_nogroup=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path\n\"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path\n\"*/kubelet/plugins/*\" -a ! -path \"/sys/fs/cgroup/memory/*\" -a ! -path\n\"/var/*/private/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      while IFS=: read -r l_user l_group; do\n        [ \"$l_user\" = \"UNKNOWN\" ] && a_nouser+=(\"$l_file\")\n        [ \"$l_group\" = \"UNKNOWN\" ] && a_nogroup+=(\"$l_file\")\n      done < <(stat -Lc '%U:%G' \"$l_file\")\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type\n-d \\) \\( -nouser -o -nogroup \\) -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^\\/run\\/user\\//){print $2}')\n  if ! (( ${#a_nouser[@]} > 0 )); then\n   l_output=\"$l_output\\n - No files or directories without a owner exist\non the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nouser[@]}\")\\\" unowned files or directories on the system.\\n  - The\nfollowing is a list of unowned files and/or directories:\\n$(printf '%s\\n' \"${a_nouser[@]}\")\\n  - end of list\"\n  fi\n  if ! (( ${#a_nogroup[@]} > 0 )); then\n   l_output=\"$l_output\\n - No files or directories without a group exist\non the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nogroup[@]}\")\\\" ungrouped files or directories on the system.\\n  - The following is a list of ungrouped files and/or directories:\\n$(printf '%s\\n' \"${a_nogroup[@]}\")\\n  - end of list\"\n  fi \n  unset a_path; unset a_arr ; unset a_nouser; unset a_nogroup # Remove\narrays\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *:\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Remove or set ownership and group ownership of these files and/or directories to an active user on the system as appropriate.",
    "remediation_code": "",
    "python_script": "\nimport os\nimport stat\nfrom pathlib import Path\nimport pwd\nimport grp\n\ndef get_active_user():\n    \"\"\"Find the first non-root, non-system user.\"\"\"\n    for user in pwd.getpwall():\n        if user.pw_uid >= 1000 and user.pw_name!= 'root':\n            return user.pw_name\n    return None\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for files/directories without an owner or group.\"\"\"\n    excluded_paths = [Path('/run/user'), Path('/proc'), Path('/sys/fs/cgroup/memory'),\n                      Path('/var/*/private'), Path('/containerd'), Path('/kubelet/pods'),\n                      Path('/kubelet/plugins')]\n    unowned_or_ungrouped = []\n\n    for mount in Path('/proc/mounts').read_text().splitlines():\n        _, mount_point, *_ = mount.split()\n        mount_point = Path(mount_point)\n        if any(mount_point.is_relative_to(excluded) for excluded in excluded_paths):\n            continue\n\n        for file in mount_point.rglob('*'):\n            if not file.exists():\n                continue\n            stat_info = file.stat()\n            if stat_info.st_uid == 0 or stat_info.st_gid == 0:\n                # Special IDs ((root, nobody), might not indicate an issue, but check anyway\n                try:\n                    pwd.getpwuid(stat_info.st_uid)\n                    grp.getgrgid(stat_info.st_gid)\n                except (KeyError, OSError):\n                    unowned_or_ungrouped.append(file)\n\n    return len(unowned_or_ungrouped) == 0\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate unowned or ungrouped files/directories.\"\"\"\n    active_user = get_active_user()\n    if active_user is None:\n        print(\"Warning: No active non-root, non-system user found. Remediation not possible.\")\n        return\n\n    active_user_uid = pwd.getpwnam(active_user).pw_uid\n    active_user_gid = grp.getgrnam(active_user).gr_gid  # Assuming group has the same name as user\n\n    if audit_vuln():\n        print(\"No files or directories without an owner or group found. Remediation not needed.\")\n        return\n\n    for file in Path('/').rglob('*'):\n        if not file.exists():\n            continue\n        stat_info = file.stat()\n        if stat_info.st_uid == 0 or stat_info.st_gid == 0:\n            # Special IDs, let's set to the active user for simplicity\n            try:\n                pwd.getpwuid(stat_info.st_uid)\n                grp.getgrgid(stat_info.st_gid)\n            except (KeyError, OSError):\n                os.chown(file, active_user_uid, active_user_gid)\n                print(f\"Set owner and group of {file} to {active_user} (UID: {active_user_uid}, GID: {active_user_gid})\")\n"
  },
  {
    "name": "Ensure accounts in /etc/passwd use shadowed passwords",
    "id": "7.2.1",
    "type": "Automated",
    "start_page": 910,
    "end_page": 912,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Local accounts can uses shadowed passwords. With shadowed passwords, The passwords are saved in shadow password file, /etc/shadow, encrypted by a salted oneway hash. Accounts with a shadowed password have an x in the second field in /etc/passwd.",
    "rationale": "The /etc/passwd file also contains information like user ID's and group ID's that are used by many system programs. Therefore, the /etc/passwd file must remain world readable. In spite of encoding the password with a randomly-generated one-way hash function, an attacker could still break the system if they got access to the /etc/passwd file. This can be mitigated by using shadowed passwords, thus moving the passwords in the /etc/passwd file to /etc/shadow. The /etc/shadow file is set so only root will be able to read and write. This helps mitigate the risk of an attacker gaining access to the encoded passwords with which to perform a dictionary attack.",
    "audit_details": "Run the following command and verify that no output is returned:\n```\n# awk -F: '($2 != \"x\" ) { print \"User: \\\"\" $1 \"\\\" is not set to shadowed passwords \"}' /etc/passwd\n```\n",
    "audit_code": "# awk -F: '($2 != \"x\" ) { print \"User: \\\"\" $1 \"\\\" is not set to shadowed passwords \"}' /etc/passwd",
    "remediation_details": "Run the following command to set accounts to use shadowed passwords and migrate passwords in /etc/passwd to /etc/shadow:\n```\n# pwconv\n```\nInvestigate to determine if the account is logged in and what it is being used for, to determine if it needs to be forced off.",
    "remediation_code": "# pwconv",
    "python_script": "\nimport pwd\nimport spwd\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if accounts in /etc/passwd use shadowed passwords.\n    \n    Returns:\n    bool: True if vulnerability exists, False otherwise.\n    \"\"\"\n    for user in pwd.getpwall():\n        if user.pw_passwd != 'x':\n            print(f\"User: \\\"{user.pw_name}\\\" is not set to use shadowed passwords.\")\n            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting accounts to use shadowed passwords.\n    \"\"\"\n    # Check if any users need remediation before running pwconv\n    needs_remediation = False\n    for user in pwd.getpwall():\n        if user.pw_passwd != 'x':\n            needs_remediation = True\n            break\n    \n    if needs_remediation:\n        # Run pwconv to migrate passwords to /etc/shadow\n        subprocess.run(['pwconv'])\n        print(\"Successfully migrated passwords to /etc/shadow using pwconv.\")\n        \n        # After remediation, confirm all users are now shadowed\n        for user in pwd.getpwall():\n            if user.pw_passwd == 'x':\n                print(f\"Confirmed User: \\\"{user.pw_name}\\\" is now set to use shadowed passwords.\")\n            else:\n                print(f\"Warning: User \\\"{user.pw_name}\\\" could not be set to use shadowed passwords.\")\n    else:\n        print(\"No users requiring shadow password migration found.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(\"Auditing Vulnerability:\")\n    vulnerable = audit_vuln()\n    \n    if vulnerable:\n        print(\"\\nRemediation Needed. Proceeding with remediation...\")\n        remediate_vuln()\n    else:\n        print(\"\\nNo vulnerability found. System is already using shadowed passwords for all users.\")\n"
  },
  {
    "name": "Ensure /etc/shadow password fields are not empty",
    "id": "7.2.2",
    "type": "Automated",
    "start_page": 913,
    "end_page": 914,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "An account with an empty password field means that anybody may log in as that user without providing a password.",
    "rationale": "All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user.",
    "audit_details": "Run the following command and verify that no output is returned:\n\n```\n# awk -F: '($2 == \"\" ) { print $1 \" does not have a password \" }' /etc/shadow\n```\n",
    "audit_code": "# awk -F: '($2 == \"\" ) { print $1 \" does not have a password \" }' /etc/shadow",
    "remediation_details": "If any accounts in the /etc/shadow file do not have a password, run the following command to lock the account until it can be determined why it does not have a password:\n\n```\n# passwd -l <username>\n```\nAlso, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off.",
    "remediation_code": "# passwd -l <username>",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit /etc/shadow for empty password fields.\"\"\"\n    try:\n        with open(\"/etc/shadow\", \"r\") as shadow_file:\n            vulnerable = any(\n                line.split(\":\")[1] == \"\" for line in shadow_file.readlines()\n            )\n            return vulnerable\n    except PermissionError:\n        print(\"Permission denied: Cannot read /etc/shadow.\")\n        return False  # or raise, depending on desired behavior\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by locking accounts with empty password fields.\"\"\"\n    if not audit_vuln():  # Reuse audit to identify vulnerable accounts\n        print(\"No accounts with empty password fields found.\")\n        return\n\n    try:\n        with open(\"/etc/shadow\", \"r\") as shadow_file:\n            vulnerable_accounts = [\n                line.split(\":\")[0] for line in shadow_file.readlines() if line.split(\":\")[1] == \"\"\n            ]\n            for account in vulnerable_accounts:\n                subprocess.run([\"passwd\", \"-l\", account])\n                print(f\"Locked account '{account}' due to empty password field.\")\n    except PermissionError:\n        print(\"Permission denied: Cannot remediate /etc/shadow entries.\")\n\nif __name__ == \"__main__\":\n    print(\"Audit Result:\", \"VULNERABLE\" if audit_vuln() else \"Secure\")\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure all groups in /etc/passwd exist in /etc/group",
    "id": "7.2.3",
    "type": "Automated",
    "start_page": 915,
    "end_page": 916,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Over time, system administration errors and changes can lead to groups being defined in /etc/passwd but not in /etc/group.",
    "rationale": "Groups defined in the /etc/passwd file but not in the /etc/group file pose a threat to system security since group permissions are not properly managed.",
    "audit_details": "Run the following script to verify all GIDs in /etc/passwd exist in /etc/group:\n```\n#!/usr/bin/env bash\n{\n  a_passwd_group_gid=(\"$(awk -F: '{print $4}' /etc/passwd | sort -u)\")\n  a_group_gid=(\"$(awk -F: '{print $3}' /etc/group | sort -u)\")\n  a_passwd_group_diff=(\"$(printf '%s\\n' \"${a_group_gid[@]}\"\n\"${a_passwd_group_gid[@]}\" | sort | uniq -u)\")\n  while IFS= read -r l_gid; do\n   awk -F: '($4 == \"\"$l_gid\"\") {print \" - User: \\\"\" $1 \"\\\" has GID: \\\"\"\n$4 \"\\\" which does not exist in /etc/group\" }' /etc/passwd\n  done < <(printf '%s\\n' \"${a_passwd_group_gid[@]}\"\n\"${a_passwd_group_diff[@]}\" | sort | uniq -D | uniq)\n  unset a_passwd_group_gid; unset a_group_gid; unset a_passwd_group_diff\n}\n```\nNothing should be returned",
    "audit_code": "#!/usr/bin/env bash\n{\n  a_passwd_group_gid=(\"$(awk -F: '{print $4}' /etc/passwd | sort -u)\")\n  a_group_gid=(\"$(awk -F: '{print $3}' /etc/group | sort -u)\")\n  a_passwd_group_diff=(\"$(printf '%s\\n' \"${a_group_gid[@]}\"\n\"${a_passwd_group_gid[@]}\" | sort | uniq -u)\")\n  while IFS= read -r l_gid; do\n   awk -F: '($4 == \"\"$l_gid\"\") {print \" - User: \\\"\" $1 \"\\\" has GID: \\\"\"\n$4 \"\\\" which does not exist in /etc/group\" }' /etc/passwd\n  done < <(printf '%s\\n' \"${a_passwd_group_gid[@]}\"\n\"${a_passwd_group_diff[@]}\" | sort | uniq -D | uniq)\n  unset a_passwd_group_gid; unset a_group_gid; unset a_passwd_group_diff\n}",
    "remediation_details": "Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found.",
    "remediation_code": "",
    "python_script": "\nimport pwd\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit vulnerability: Ensure all groups in /etc/passwd exist in /etc/group.\n    \n    Returns:\n        bool: True if all GIDs in /etc/passwd exist in /etc/group, False otherwise.\n    \"\"\"\n    passwd_gids = [entry.pw_gid for entry in pwd.getpwall()]\n    group_gids = [entry.gr_gid for entry in grp.getgrall()]\n    \n    missing_gids = [gid for gid in passwd_gids if gid not in group_gids]\n    \n    if missing_gids:\n        for gid in missing_gids:\n            user_names = [entry.pw_name for entry in pwd.getpwall() if entry.pw_gid == gid]\n            for user_name in user_names:\n                print(f\" - User: \\\"{user_name}\\\" has GID: \\\"{gid}\\\" which does not exist in /etc/group\")\n        return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate vulnerability: Add missing GIDs from /etc/passwd to /etc/group.\n    \"\"\"\n    passwd_gids = [entry.pw_gid for entry in pwd.getpwall()]\n    group_gids = [entry.gr_gid for entry in grp.getgrall()]\n    missing_gids = [gid for gid in passwd_gids if gid not in group_gids]\n    \n    for gid in missing_gids:\n        user_names = [entry.pw_name for entry in pwd.getpwall() if entry.pw_gid == gid]\n        group_name = f\"missing_group_{gid}\"  # Default group name, can be improved\n        # Check if group name already exists before adding\n        if not any(entry.gr_name == group_name for entry in grp.getgrall()):\n            # Using subprocess to execute the groupadd command as it's more straightforward for this task\n            # and provides immediate feedback if the command fails due to permissions or other issues.\n            cmd = f\"groupadd -g {gid} {group_name}\"\n            subprocess.run(cmd, shell=True, check=True)\n            print(f\"Added group \\\"{group_name}\\\" with GID: \\\"{gid}\\\" to /etc/group for users: {', '.join(user_names)}\")\n        else:\n            print(f\"Group for GID \\\"{gid}\\\" already exists, skipping. (Users: {', '.join(user_names)})\")\n\n# Example usage:\nif not audit_vuln():\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure shadow group is empty",
    "id": "7.2.4",
    "type": "Automated",
    "start_page": 917,
    "end_page": 918,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The shadow group allows system programs which require access the ability to read the /etc/shadow file. No users should be assigned to the shadow group.",
    "rationale": "Any users assigned to the shadow group would be granted read access to the /etc/shadow file. If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed passwords to break them. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert additional user accounts.",
    "audit_details": "Run the following commands and verify no results are returned:\n```\n# awk -F: '($1==\"shadow\") {print $NF}' /etc/group\n# awk -F: '($4 == '\"$(getent group shadow | awk -F: '{print $3}' | xargs)\"')\n{print \" - user: \\\" \" $1 \" \\\" primary group is the shadow group\"} ' /etc/passwd\n``",
    "audit_code": "# awk -F: '($1==\"shadow\") {print $NF}' /etc/group\n# awk -F: '($4 == '\"$(getent group shadow | awk -F: '{print $3}' | xargs)\"')\n{print \" - user: \\\" \" $1 \" \\\" primary group is the shadow group\"} ' /etc/passwd\n",
    "remediation_details": "Run the following command to remove all users from the shadow group\n```\n# sed -ri 's/(^shadow:[^:]*:[^:]*:)([^:]+$)/\\1/' /etc/group\n```\nChange the primary group of any users with shadow as their primary group.\n```\n# usermod -g <primary group> <user>\n```",
    "remediation_code": "# sed -ri 's/(^shadow:[^:]*:[^:]*:)([^:]+$)/\\1/' /etc/group\n# usermod -g <primary group> <user>\n",
    "python_script": "\nimport pwd\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure the shadow group is empty.\n    \n    Returns:\n    bool: True if vulnerability is found, False otherwise.\n    \"\"\"\n    # Check supplementary users in /etc/group\n    shadow_gid = grp.getgrnam('shadow').gr_gid\n    for user in pwd.getpwall():\n        if shadow_gid in [g.gr_gid for g in grp.getgroups(user.pw_name)]:\n            print(f\"Found user '{user.pw_name}' in the shadow group.\")\n            return True\n    \n    # Verify no user has shadow as their primary group in /etc/passwd\n    for user in pwd.getpwall():\n        if user.pw_gid == shadow_gid:\n            print(f\"User '{user.pw_name}' has shadow as their primary group.\")\n            return True\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by ensuring the shadow group is empty.\n    \"\"\"\n    shadow_gid = grp.getgrnam('shadow').gr_gid\n    \n    # Remove all supplementary users from the shadow group in /etc/group\n    with open(\"/etc/group\", \"r+\") as f:\n        lines = f.readlines()\n        f.seek(0)\n        for line in lines:\n            if line.startswith(\"shadow:\"):\n                # Remove supplementary users\n                f.write(\"shadow:x:\" + str(shadow_gid) + \":\\n\")\n                print(\"Removed supplementary users from the shadow group.\")\n            else:\n                f.write(line)\n        f.truncate()\n    \n    # Change primary group for users who currently have shadow as their primary group\n    for user in pwd.getpwall():\n        if user.pw_gid == shadow_gid:\n            # Assuming the first group in /etc/group as the new primary group for simplicity\n            # In a real scenario, you would need to determine the appropriate primary group for the user\n            new_primary_gid = grp.getgrall()[0].gr_gid\n            subprocess.run([\"usermod\", \"-g\", str(new_primary_gid), user.pw_name])\n            print(f\"Changed primary group for user '{user.pw_name}' to gid {new_primary_gid}.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure no duplicate UIDs exist",
    "id": "7.2.5",
    "type": "Automated",
    "start_page": 919,
    "end_page": 919,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the useradd program will not let you create a duplicate User ID (UID), it is possible for an administrator to manually edit the /etc/passwd file and change the UID field.",
    "rationale": "Users must be assigned unique UIDs for accountability and to ensure appropriate access protections.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n while read -r l_count l_uid; do\n  if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate UID: \\\"$l_uid\\\" Users: \\\"$(awk -F: '($3 == n) {\nprint $1 }' n=$l_uid /etc/passwd | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c)\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n while read -r l_count l_uid; do\n  if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate UID: \\\"$l_uid\\\" Users: \\\"$(awk -F: '($3 == n) {\nprint $1 }' n=$l_uid /etc/passwd | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c)\n}\n",
    "remediation_details": "Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to.",
    "remediation_code": "",
    "python_script": "\nimport pwd\nimport os\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(message)s')\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits for duplicate UIDs in /etc/passwd.\n    \n    Returns:\n        bool: True if duplicate UIDs exist, False otherwise.\n    \"\"\"\n    uid_counts = {}\n    with open(\"/etc/passwd\", \"r\") as passwd_file:\n        for line in passwd_file:\n            uid = int(line.split(\":\")[2])\n            uid_counts[uid] = uid_counts.get(uid, 0) + 1\n    \n    duplicate_uids = {uid: count for uid, count in uid_counts.items() if count > 1}\n    \n    if duplicate_uids:\n        for uid, count in duplicate_uids.items():\n            users = [user.pw_name for user in pwd.getpwall() if user.pw_uid == uid]\n            logging.info(f\"Duplicate UID: {uid} Users: {', '.join(users)}\")\n        return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Initiates remediation for duplicate UIDs by identifying affected files and users.\n    Guidance is provided for manual update of UIDs and file ownership.\n    \"\"\"\n    # Identify duplicate UIDs and affected users (same as audit_vuln)\n    duplicate_uids = {}\n    with open(\"/etc/passwd\", \"r\") as passwd_file:\n        for line in passwd_file:\n            uid = int(line.split(\":\")[2])\n            duplicate_uids[uid] = duplicate_uids.get(uid, 0) + 1\n    \n    duplicate_uids = {uid: count for uid, count in duplicate_uids.items() if count > 1}\n    \n    for uid in duplicate_uids:\n        users = [user.pw_name for user in pwd.getpwall() if user.pw_uid == uid]\n        \n        # Identify files owned by the duplicate UID\n        files_owned = []\n        for root, dirs, files in os.walk(\"/\"):\n            for file in files:\n                file_path = os.path.join(root, file)\n                try:\n                    if os.stat(file_path).st_uid == uid:\n                        files_owned.append(file_path)\n                except PermissionError:\n                    logging.info(f\"Permission denied for {file_path}. Skipping...\")\n        \n        # Log affected users and files for manual review\n        logging.info(f\"Manual Review Required for Duplicate UID: {uid}\")\n        logging.info(f\"Users: {', '.join(users)}\")\n        if files_owned:\n            logging.info(\"Files owned by these users with the duplicate UID:\")\n            for file in files_owned:\n                logging.info(file)\n            logging.info(\"Instructions:\")\n            logging.info(\"1. Determine the correct UID for each user/file.\")\n            logging.info(\"2. Update the user's UID using `usermod -u NEW_UID USERNAME`.\")\n            logging.info(\"3. Update file ownership using `chown -R NEW_UID:NEW_GID FILEPATH` as needed.\")\n        else:\n            logging.info(\"No files found owned by the duplicate UID. Only user table update required.\")\n            logging.info(\"Instructions:\")\n            logging.info(\"1. Determine the correct UID for each user.\")\n            logging.info(\"2. Update the user's UID using `usermod -u NEW_UID USERNAME`.\")\n"
  },
  {
    "name": "Ensure no duplicate GIDs exist",
    "id": "7.2.6",
    "type": "Automated",
    "start_page": 920,
    "end_page": 921,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the groupadd program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the /etc/group file and change the GID field.",
    "rationale": "User groups must be assigned unique GIDs for accountability and to ensure appropriate access protections.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n  while read -r l_count l_gid; do\n   if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate GID: \\\"$l_gid\\\" Groups: \\\"$(awk -F: '($3 == n) {\nprint $1 }' n=$l_gid /etc/group | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/group | sort -n | uniq -c)\n} \n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  while read -r l_count l_gid; do\n   if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate GID: \\\"$l_gid\\\" Groups: \\\"$(awk -F: '($3 == n) {\nprint $1 }' n=$l_gid /etc/group | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/group | sort -n | uniq -c)\n} \n",
    "remediation_details": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to.",
    "remediation_code": "",
    "python_script": "\nimport pathlib\nimport csv\nfrom collections import Counter\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for duplicate GIDs in /etc/group\"\"\"\n    group_file = pathlib.Path('/etc/group')\n    gids = [row[2] for row in csv.reader(group_file.open('r'), delimiter=:)]\n    gid_counts = Counter(gids)\n    return all(count == 1 for count in gid_counts.values())\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate duplicate GIDs (identification and suggestive steps only)\"\"\"\n    group_file = pathlib.Path('/etc/group')\n    groups = list(csv.reader(group_file.open('r'), delimiter=:))\n    gids = [row[2] for row in groups]\n    gid_counts = Counter(gids)\n    duplicate_gids = {gid for gid, count in gid_counts.items() if count > 1}\n    \n    if not duplicate_gids:\n        print(\"No duplicate GIDs found.\")\n        return\n    \n    # Find the highest existing GID for suggesting new ones\n    max_gid = max(int(gid) for gid in gids if gid.isdigit())\n    new_gid = max_gid + 1\n    \n    for duplicate_gid in duplicate_gids:\n        affected_groups = [row[0] for row in groups if row[2] == duplicate_gid]\n        print(f\"Duplicate GID: {duplicate_gid} found in Groups: {', '.join(affected_groups)}\")\n        \n        # Manual Review Required\n        print(f\"**MANUAL REVIEW REQUIRED**: Check all files owned by GID {duplicate_gid} to determine correct group ownership.\")\n        \n        # Suggest new GIDs for affected groups\n        for group in affected_groups[1:]:  # Assuming the first group keeps the original GID\n            print(f\"Suggested new GID for {group}: {new_gid}\")\n            new_gid += 1  # Increment for the next suggestion\n            \n            # **WARNING**: Actual modification not implemented. Example of what could be done with caution:\n            # - Update /etc/group file with new GID for the group.\n            # - Use `os.chown` or `pathlib.Path.chown` to update file ownership for affected files.\n            #   This step requires precise knowledge of desired file ownerships and is thus omitted.\n"
  },
  {
    "name": "Ensure no duplicate user names exist",
    "id": "7.2.7",
    "type": "Automated",
    "start_page": 922,
    "end_page": 923,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the useradd program will not let you create a duplicate user name, it is possible for an administrator to manually edit the /etc/passwd file and change the user name.",
    "rationale": "If a user is assigned a duplicate user name, it will create and have access to files with the first UID for that username in /etc/passwd . For example, if \"test4\" has a UID of 1000 and a subsequent \"test4\" entry has a UID of 2000, logging in as \"test4\" will use UID 1000. Effectively, the UID is shared, which is a security problem.",
    "audit_details": "Run the following script and verify no results are returned:\n```bash\n#!/usr/bin/env bash\n{\n  while read -r l_count l_user; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate User: \\\"$l_user\\\" Users: \\\"$(awk -F: '($1 == n) {\nprint $1 }' n=$l_user /etc/passwd | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}\n```",
    "audit_code": "#!/usr/bin/env bash\n{\n  while read -r l_count l_user; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate User: \\\"$l_user\\\" Users: \\\"$(awk -F: '($1 == n) {\nprint $1 }' n=$l_user /etc/passwd | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}",
    "remediation_details": "Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs.",
    "remediation_code": "",
    "python_script": ""
  },
  {
    "name": "Ensure no duplicate group names exist",
    "id": "7.2.8",
    "type": "Automated",
    "start_page": 924,
    "end_page": 925,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the groupadd program will not let you create a duplicate group name, it is possible for an administrator to manually edit the /etc/group file and change the group name.",
    "rationale": "If a group is assigned a duplicate group name, it will create and have access to files with the first GID for that group in /etc/group . Effectively, the GID is shared, which is a security problem.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n  while read -r l_count l_group; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate Group: \\\"$l_group\\\" Groups: \\\"$(awk -F: '($1 == n) { print $1 }' n=$l_group /etc/group | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  while read -r l_count l_group; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate Group: \\\"$l_group\\\" Groups: \\\"$(awk -F: '($1 == n) { print $1 }' n=$l_group /etc/group | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}",
    "remediation_details": "Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs.",
    "remediation_code": "",
    "python_script": "\nimport grp\nimport pwd\nimport os\nimport shutil\nimport tempfile\n\ndef audit_vuln() -> bool:\n    \"\"\"Check for duplicate group names in /etc/group\"\"\"\n    group_names = [g.gr_name for g in grp.getgrall()]\n    return len(group_names)!= len(set(group_names))\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate duplicate group names by assigning new unique names\"\"\"\n    # Create a temporary file for the updated group database\n    with tempfile.NamedTemporaryFile(mode='w', delete=False) as tmp_file:\n        tmp_filename = tmp_file.name\n        \n        # Track encountered group names and their counts\n        group_name_count = {}\n        \n        # Iterate over the original /etc/group file\n        with open('/etc/group', 'r') as orig_file:\n            for line in orig_file:\n                # Parse the group line (format: group_name:password:GID:user_list)\n                group_name = line.split(':')[0]\n                if group_name in group_name_count:\n                    # If the group name is a duplicate, generate a new one\n                    base_name, count = group_name_count[group_name]\n                    new_name = f\"{base_name}_{count}\"\n                    print(f\"Renaming duplicate group '{group_name}' to '{new_name}'\")\n                    group_name_count[group_name] = (base_name, count + 1)\n                    line = line.replace(group_name, new_name, 1)  # Only replace the first occurrence\n                else:\n                    group_name_count[group_name] = (group_name, 1)\n                \n                # Write the updated line to the temporary file\n                tmp_file.write(line)\n    \n    # Replace the original /etc/group file with the updated temporary file\n    shutil.copymode('/etc/group', tmp_filename)\n    os.rename(tmp_filename, '/etc/group')\n    print(f\"Updated /etc/group file with unique group names\")\n"
  },
  {
    "name": "Ensure local interactive user home directories are configured",
    "id": "7.2.9",
    "type": "Automated",
    "start_page": 926,
    "end_page": 930,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The user home directory is space defined for the particular user to set local environment variables and to store personal files. While the system administrator can establish secure permissions for users' home directories, the users can easily override these. Users can be defined in /etc/passwd without a home directory or with a home directory that does not actually exist.",
    "rationale": "Since the user is accountable for files stored in the user home directory, the user must be the owner of the directory. Group or world-writable user home directories may enable malicious users to steal or modify other users' data or to gain another user's system privileges. If the user's home directory does not exist or is unassigned, the user will be placed in '/' and will not be able to write any files or have local environment variables set.",
    "audit_details": "Run the following script to Ensure:\n\n - local interactive user home directories exist\n\n - Ensure local interactive users own their home directories\n\n - Ensure local interactive user home directories are mode 750 or more restrictive",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_heout2=\"\" l_hoout2=\"\" l_haout2=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed\n-rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home\nlocation\n   a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users\nbefore proceeding \n  [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\"\nLocal interactive users found on the system\\n - This may be a long running\ncheck\\n\"\n  while read -r l_user l_home; do\n   if [ -d \"$l_home\" ]; then\n     l_mask='0027'\n     l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n     while read -r l_own l_mode; do\n      [ \"$l_user\" != \"$l_own\" ] && l_hoout2=\"$l_hoout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\"\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n        l_haout2=\"$l_haout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\"\n      fi\n     done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n   else\n     l_heout2=\"$l_heout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't\nexist\"\n   fi\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  [ -z \"$l_heout2\" ] && l_output=\"$l_output\\n  - home directories exist\" ||\nl_output2=\"$l_output2$l_heout2\"\n  [ -z \"$l_hoout2\" ] && l_output=\"$l_output\\n  - own their home directory\" || l_output2=\"$l_output2$l_hoout2\"\n  [ -z \"$l_haout2\" ] && l_output=\"$l_output\\n  - home directories are mode: \\\"$l_max\\\" or more restrictive\" || l_output2=\"$l_output2$l_haout2\"\n  [ -n \"$l_output\" ] && l_output=\" - All local interactive users:$l_output\"\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *\\n$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *\\n$l_output\"\n  fi\n}",
    "remediation_details": "If a local interactive users' home directory is undefined and/or doesn't exist, follow local site policy and perform one of the following:\n\n  - Lock the user account\n\n  - Remove the user from the system\n\n  - create a directory for the user. If undefined, edit /etc/passwd and add the absolute path to the directory to the last field of the user.\n\nRun the following script to:\n\n  - Remove excessive permissions from local interactive users home directories\n\n  - Update the home directory's owner",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output2=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed\n-rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home\nlocation\n   a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users\nbefore proceeding \n  [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\"\nLocal interactive users found on the system\\n - This may be a long running\nprocess\\n\"\n  while read -r l_user l_home; do\n   if [ -d \"$l_home\" ]; then\n     l_mask='0027'\n     l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n     while read -r l_own l_mode; do\n      if [ \"$l_user\" != \"$l_own\" ]; then\n        l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\"\nis owned by: \\\"$l_own\\\"\\n - changing ownership to: \\\"$l_user\\\"\\n\"\n        chown \"$l_user\" \"$l_home\"\n      fi\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n        l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\"\nis mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\\n - \nremoving excess permissions\\n\"\n        chmod g-w,o-rwx \"$l_home\"\n      fi\n     done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n   else\n     l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\"\nDoesn't exist\\n - Please create a home in accordance with local site\npolicy\"\n   fi\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \" - No modification needed to local interactive users home\ndirectories\"\n  else\n   echo -e \"\\n$l_output2\"\n  fi\n}",
    "python_script": "\nimport os\nimport pwd\nimport stat\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits local interactive user home directories.\n    \n    Checks for existence, correct ownership, and restrictive permissions (mode 750 or more).\n    \n    Returns:\n        bool: True if all checks pass, False otherwise.\n    \"\"\"\n    issues_found = False\n    for user in pwd.getpwall():\n        if user.pw_shell and 'nologin' not in user.pw_shell:\n            home_dir = user.pw_dir\n            if not os.path.exists(home_dir):\n                print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" Doesn't exist\")\n                issues_found = True\n            else:\n                stat_info = os.stat(home_dir)\n                if stat_info.st_uid!= user.pw_uid:\n                    print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" is owned by: \\\"{grp.getgrgid(stat_info.st_gid).gr_name}\\\"\")\n                    issues_found = True\n                if (stat_info.st_mode & 0o027)!= 0:\n                    print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" is mode: {stat.filemode(stat_info.st_mode)} should be mode: \\\"rwxr-x---\\\" or more restrictive\")\n                    issues_found = True\n    return not issues_found\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediation for local interactive user home directory vulnerabilities.\n    \n    Updates ownership and removes excessive permissions.\n    \"\"\"\n    for user in pwd.getpwall():\n        if user.pw_shell and 'nologin' not in user.pw_shell:\n            home_dir = user.pw_dir\n            if os.path.exists(home_dir):\n                stat_info = os.stat(home_dir)\n                if stat_info.st_uid!= user.pw_uid:\n                    os.chown(home_dir, user.pw_uid, -1)\n                    print(f\"- Changed ownership of \\\"{home_dir}\\\" to \\\"{user.pw_name}\\\"\")\n                if (stat_info.st_mode & 0o027)!= 0:\n                    os.chmod(home_dir, stat_info.st_mode & ~0o027)\n                    print(f\"- Removed excess permissions from \\\"{home_dir}\\\"\")\n            else:\n                print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" Doesn't exist - Please create a home in accordance with local site policy\")\n\nif __name__ == \"__main__\":\n    print(\"Audit Result:\")\n    if audit_vuln():\n        print(\"** PASS **\")\n        print(\"- All local interactive users' home directories are correctly configured\")\n    else:\n        print(\"** FAIL **\")\n        print(\"Running remediation...\")\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure local interactive user dot files access is configured",
    "id": "7.2.10",
    "type": "Automated",
    "start_page": 931,
    "end_page": 936,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "While the system administrator can establish secure permissions for users' \"dot\" files, the users can easily override these.\n\n  - `.forward file specifies an email address to forward the user's mail to.`\n\n  - `.rhost file provides the \"remote authentication\" database for the rcp, rlogin, and` \n### rsh commands and the rcmd() function. These files bypass the standard password-based user authentication mechanism. They specify remote hosts and users that are considered trusted (i.e. are allowed to access the local system without supplying a password)\n\n  - `.netrc file contains data for logging into a remote host or passing authentication` \n### to an API.\n\n  - `.bash_history file keeps track of the user\u2019s commands.`",
    "rationale": "User configuration files with excessive or incorrect access may enable malicious users to steal or modify other users' data or to gain another user's system privileges.",
    "audit_details": "Run the following script to verify local interactive user dot files:\n\n  - Don't include .forward, .rhost, or .netrc files\n\n  - Are mode 0644 or more restrictive\n\n  - Are owned by the local interactive user\n\n  - Are group owned by the user's primary group\n\n  ```\n    .bash_history is mode 0600 or more restrictive\n\n### Note: If a .netrc file is required, and follows local site policy, it should be mode 0600 or more restrictive.\n```\nPage 930",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\"\n  l_bf=\"\" l_df=\"\" l_nf=\"\" l_hf=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed\n-rn '/^\\/{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home\nlocation\n   [[ -n \"$l_epu\" && -n \"$l_eph\" ]] && a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"\">${#a_uarr[@]} # Here if we want to look at number of users\nbefore proceeding \n  l_maxsize=\"1000\" # Maximun number of local interactive users before\nwarning (Default 1,000)\n  [ \"$l_asize \" -gt \"$l_maxsize\" ] && echo -e \"\\n ** INFO **\\n \"$l_asize\" Local interactive users found on the system\\n - This may be a\nlong running check\\n\"\n  file_access_chk()\n  {\n   l_facout2=\"\"\n   l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n   if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n     l_facout2=\"$l_facout2\\n - File: \"$l_hdfile\" is mode: \"$l_mode\\\" and should be mode: \"$l_max\" or more restrictive\"\n   fi\n   if [[ ! \"$l_owner\" =~ ($l_user) ]]; then\n     l_facout2=\"$l_facout2\\n - File: \"$l_hdfile\" owned by:\n\"$l_owner\" and should be owned by \"${l_user//|/ or }\"\"\n   fi\n   if [[ ! \"$l_gowner\" =~ ($l_group) ]]; then\n     l_facout2=\"$l_facout2\\n - File: \"$l_hdfile\" group owned by:\n\"$l_gowner\" and should be group owned by \"${l_group//|/ or }\"\"\n   fi\n  }\n  while read -r l_user l_home; do\n   l_fe=\"\" l_nout2=\"\" l_nout3=\"\" l_dfout2=\"\" l_hdout2=\"\" l_bhout2=\"\"\n   if [ -d \"$l_home\" ]; then\n     l_group=\"$(id -gn \"$l_user\" | xargs)\"\n     l_group=\"${l_group// /|}\"\n     while IFS= read -r -d $'\\0' l_hdfile; do\n      while read -r l_mode l_owner l_gowner; do\n        case \"$(basename \"$l_hdfile\")\" in\n         .forward | .rhost )\n           l_fe=\"Y\" && l_bf=\"Y\"\n           l_dfout2=\"$l_dfout2\\n - File: \"$l_hdfile\" exists\" ;; \n         .netrc )\n           l_mask='0177'\n           file_access_chk\n           if [ -n \"$l_facout2\" ]; then\n            l_fe=\"Y\" && l_nf=\"Y\"\n            l_nout2=\"$l_facout2\"\n           else\n            l_nout3=\"  - File: \"$l_hdfile\" exists\"\n           fi ;;\n\n         .bash_history )\n           l_mask='0177'\n           file_access_chk\n           if [ -n \"$l_facout2\" ]; then\n            l_fe=\"Y\" && l_hf=\"Y\"\n            l_bhout2=\"$l_facout2\"\n           fi ;;\n         * )\n           l_mask='0133'\n           file_access_chk\n           if [ -n \"$l_facout2\" ]; then\n            l_fe=\"Y\" && l_df=\"Y\"\n            l_hdout2=\"$l_facout2\"\n           fi ;; \n         esac\n      done <<< \"$(stat -Lc '%#a %U %G' \"$l_hdfile\")\"\n     done < <(find \"$l_home\" -xdev -type f -name '.*' -print0)\n   fi\n   if [ \"$l_fe\" = \"Y\" ]; then\n     l_output2=\"$l_output2\\n - User: \"$l_user\" Home Directory:\n\"$l_home\"\"\n     [ -n \"$l_dfout2\" ] && l_output2=\"$l_output2$l_dfout2\"\n     [ -n \"$l_nout2\" ] && l_output2=\"$l_output2$l_nout2\"\n     [ -n \"$l_bhout2\" ] && l_output2=\"$l_output2$l_bhout2\"\n     [ -n \"$l_hdout2\" ] && l_output2=\"$l_output2$l_hdout2\"\n   fi\n   [ -n \"$l_nout3\" ] && l_output3=\"$l_output3\\n - User: \"$l_user\" Home\nDirectory: \"$l_home\"\\n$l_nout3\"\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  unset a_uarr # Remove array\n  [ -n \"$l_output3\" ] && l_output3=\" - ** Warning **\\n - \".netrc\" files\nshould be removed unless deemed necessary\\n  and in accordance with local\nsite policy:$l_output3\"\n  [ -z \"$l_bf\" ] && l_output=\"$l_output\\n  - \".forward\" or \".rhost\"\nfiles\"\n  [ -z \"$l_nf\" ] && l_output=\"$l_output\\n  - \".netrc\" files with\nincorrect access configured\"\n  [ -z \"$l_hf\" ] && l_output=\"$l_output\\n  - \".bash_history\" files with\nincorrect access configured\"\n  [ -z \"$l_df\" ] && l_output=\"$l_output\\n  - \"dot\" files with incorrect\naccess configured\"\n  [ -n \"$l_output\" ] && l_output=\" - No local interactive users home\ndirectories contain:$l_output\"\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *\n:\\n$l_output\\n\"\n   echo -e \"$l_output3\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :\\n$l_output2\\n\"\n   echo -e \"- * Correctly configured *\n:\\n$l_output\\n\"\n  fi\n}\n",
    "remediation_details": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy. The following script will:\n\n  - remove excessive permissions on dot files within interactive users' home\n### directories\n\n  - change ownership of dot files within interactive users' home directories to the\n### user\n\n  - change group ownership of dot files within interactive users' home directories to\nthe\n### user's primary group\n\n  - list .forward and .rhost files to be investigated and manually deleted",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn\n'/^\\/{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home location\n   [[ -n \"$l_epu\" && -n \"$l_eph\" ]] && a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }'\n/etc/passwd)\"\n  l_asize=\"\">${#a_uarr[@]} # Here if we want to look at number of users before proceeding \n  l_maxsize=\"1000\" # Maximum number of local interactive users before warning (Default 1,000)\n  [ \"$l_asize \" -gt \"$l_maxsize\" ] && echo -e \"\\n ** INFO **\\n - \"$l_asize\" Local\ninteractive users found on the system\\n - This may be a long running check\\n\"\n  file_access_fix()\n  {\n   l_facout2=\"\"\n   l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n   if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n     echo -e \" - File: \"$l_hdfile\" is mode: \"$l_mode\" and should be mode: \"$l_max\" or\nmore restrictive\\n  - Changing to mode \"$l_max\"\"\n     chmod \"$l_chp\" \"$l_hdfile\"\n   fi\n   if [[ ! \"$l_owner\" =~ ($l_user) ]]; then\n     echo -e \" - File: \"$l_hdfile\" owned by: \"$l_owner\" and should be owned by\n\"${l_user//|/ or }\"\\n  - Changing ownership to \"$l_user\"\"\n     chown \"$l_user\" \"$l_hdfile\"\n   fi\n   if [[ ! \"$l_gowner\" =~ ($l_group) ]]; then\n     echo -e \" - File: \"$l_hdfile\" group owned by: \"$l_gowner\" and should be group owned\nby \"${l_group//|/ or }\"\\n  - Changing group ownership to \"$l_group\"\"\n     chgrp \"$l_group\" \"$l_hdfile\"\n   fi\n  }\n  while read -r l_user l_home; do\n   if [ -d \"$l_home\" ]; then\n     echo -e \"\\n - Checking user: \"$l_user\" home directory: \"$l_home\"\"\n     l_group=\"$(id -gn \"$l_user\" | xargs)\"\n     l_group=\"${l_group// /|}\"\n     while IFS= read -r -d $'\\0' l_hdfile; do\n      while read -r l_mode l_owner l_gowner; do\n        case \"$(basename \"$l_hdfile\")\" in\n         .forward | .rhost )\n           echo -e \" - File: \"$l_hdfile\" exists\\n  - Please investigate and\nmanually delete \"$l_hdfile\"\"\n         ;; \n         .netrc )\n           l_mask='0177'\n           l_chp=\"u-x,go-rwx\"\n           file_access_fix ;;\n         .bash_history )\n           l_mask='0177'\n           l_chp=\"u-x,go-rwx\"\n           file_access_fix ;;\n         * )\n           l_mask='0133'\n           l_chp=\"u-x,go-wx\"\n           file_access_fix ;;\n         esac\n      done <<< \"$(stat -Lc '%#a %U %G' \"$l_hdfile\")\"\n     done < <(find \"$l_home\" -xdev -type f -name '.*' -print0)\n   fi\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  unset a_uarr # Remove array\n} //",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits local interactive user dot files for vulnerabilities.\n    \n    Returns:\n        bool: True if all checks pass, False otherwise.\n    \"\"\"\n    valid_shells = subprocess.check_output([\"awk\", \"-F/\", '$NF!= \"nologin\" {print}', \"/etc/shells\"]).decode().splitlines()\n    valid_shells_pattern = \"^(\" + \"|\".join(valid_shells) + \")$\"\n    \n    users = pwd.getpwall()\n    interactive_users = [user for user in users if user.pw_shell and user.pw_shell!= \"/usr/sbin/nologin\"]\n    \n    audit_passed = True\n    output = []\n    output3 = []\n    \n    for user in interactive_users:\n        home_dir = user.pw_dir\n        if os.path.isdir(home_dir):\n            group_name = grp.getgrgid(user.pw_gid).gr_name\n            \n            dot_files = [os.path.join(home_dir, file) for file in os.listdir(home_dir) if file.startswith('.') and os.path.isfile(os.path.join(home_dir, file))]\n            \n            for file in dot_files:\n                file_stat = os.stat(file)\n                mode = stat.filemode(file_stat.st_mode)\n                owner = pwd.getpwuid(file_stat.st_uid).pw_name\n                group = grp.getgrgid(file_stat.st_gid).gr_name\n                \n                if file.endswith(('.forward', '.rhost')):\n                    output.append(f\" - File: {file} exists\")\n                    audit_passed = False\n                elif file == os.path.join(home_dir, '.netrc'):\n                    if not (mode == '-rw-------' and owner == user.pw_name and group == group_name):\n                        output.append(f\" - File: {file} has incorrect permissions or ownership. Mode: {mode}, Owned by: {owner}, Group: {group}\")\n                        audit_passed = False\n                    else:\n                        output3.append(f\" - User: {user.pw_name} Home Directory: {home_dir}\\n  - File: {file} exists\")\n                elif file == os.path.join(home_dir, '.bash_history'):\n                    if not (mode == '-rw-------' and owner == user.pw_name and group == group_name):\n                        output.append(f\" - File: {file} has incorrect permissions or ownership. Mode: {mode}, Owned by: {owner}, Group: {group}\")\n                        audit_passed = False\n                else:\n                    if not (stat.S_IMODE(file_stat.st_mode) & 0o133 == 0 and owner == user.pw_name and group == group_name):\n                        output.append(f\" - File: {file} has incorrect permissions or ownership. Mode: {mode}, Owned by: {owner}, Group: {group}\")\n                        audit_passed = False\n            \n    if output:\n        print(\"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n\" + \"\\n\".join(output))\n    else:\n        print(\"\\n- Audit Result:\\n ** PASS **\")\n    \n    if output3:\n        print(\"\\n - ** Warning **\\n - \\\".netrc\\\" files should be removed unless deemed necessary and in accordance with local site policy:\\n\" + \"\\n\".join(output3))\n    \n    return audit_passed\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate vulnerabilities found in local interactive user dot files.\n    \"\"\"\n    valid_shells = subprocess.check_output([\"awk\", \"-F/\", '$NF!= \"nologin\" {print}', \"/etc/shells\"]).decode().splitlines()\n    valid_shells_pattern = \"^(\" + \"|\".join(valid_shells) + \")$\"\n    \n    users = pwd.getpwall()\n    interactive_users = [user for user in users if user.pw_shell and user.pw_shell!= \"/usr/sbin/nologin\"]\n    \n    for user in interactive_users:\n        home_dir = user.pw_dir\n        if os.path.isdir(home_dir):\n            group_name = grp.getgrgid(user.pw_gid).gr_name\n            \n            dot_files = [os.path.join(home_dir, file) for file in os.listdir(home_dir) if file.startswith('.') and os.path.isfile(os.path.join(home_dir, file))]\n            \n            for file in dot_files:\n                file_stat = os.stat(file)\n                mode = stat.filemode(file_stat.st_mode)\n                owner = pwd.getpwuid(file_stat.st_uid).pw_name\n                group = grp.getgrgid(file_stat.st_gid).gr_name\n                \n                if file.endswith(('.forward', '.rhost')):\n                    print(f\" - File: {file} exists. Please investigate and manually delete {file}\")\n                elif file == os.path.join(home_dir, '.netrc'):\n                    if mode!= '-rw-------' or owner!= user.pw_name or group!= group_name:\n                        print(f\" - File: {file} is mode: {mode} and should be mode: -rw------- or more restrictive. Changing to mode -rw-------\")\n                        os.chmod(file, 0o600)\n                        if owner!= user.pw_name:\n                            print(f\" - File: {file} owned by: {owner} and should be owned by {user.pw_name}. Changing ownership to {user.pw_name}\")\n                            os.chown(file, user.pw_uid, -1)\n                        if group!= group_name:\n                            print(f\" - File: {file} group owned by: {group} and should be group owned by {group_name}. Changing group ownership to {group_name}\")\n                            os.chown(file, -1, grp.getgrnam(group_name).gr_gid)\n                elif file == os.path.join(home_dir, '.bash_history'):\n                    if mode!= '-rw-------' or owner!= user.pw_name or group!= group_name:\n                        print(f\" - File: {file} is mode: {mode} and should be mode: -rw------- or more restrictive. Changing to mode -rw-------\")\n                        os.chmod(file, 0o600)\n                        if owner!= user.pw_name:\n                            print(f\" - File: {file} owned by: {owner} and should be owned by {user.pw_name}. Changing ownership to {user.pw_name}\")\n                            os.chown(file, user.pw_uid, -1)\n                        if group!= group_name:\n                            print(f\" - File: {file} group owned by: {group} and should be group owned by {group_name}. Changing group ownership to {group_name}\")\n                            os.chown(file, -1, grp.getgrnam(group_name).gr_gid)\n                else:\n                    if stat.S_IMODE(file_stat.st_mode) & 0o133!= 0 or owner!= user.pw_name or group!= group_name:\n                        print(f\" - File: {file} is mode: {mode} and should be mode: -rw-r----- or more restrictive. Changing to mode -rw-r-----\")\n                        os.chmod(file, 0o640)\n                        if owner!= user.pw_name:\n                            print(f\" - File: {file} owned by: {owner} and should be owned by {user.pw_name}. Changing ownership to {user.pw_name}\")\n                            os.chown(file, user.pw_uid, -1)\n                        if group!= group_name:\n                            print(f\" - File: {file} group owned by: {group} and should be group owned by {group_name}. Changing group ownership to {group_name}\")\n                            os.chown(file, -1, grp.getgrnam(group_name).gr_gid)\n\n# Example usage\nif __name__ == \"__main__\":\n    audit_passed = audit_vuln()\n    if not audit_passed:\n        remediate_vuln()\n"
  }
]