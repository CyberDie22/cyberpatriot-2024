[
  {
    "name": "Ensure cramfs kernel module is not available",
    "id": "1.1.1.1",
    "type": "Automated",
    "start_page": 22,
    "end_page": 26,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The cramfs filesystem type is a compressed read-only Linux filesystem embedded in small footprint systems. A cramfs image can be used without having to first decompress the image.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the cramfs module is disabled: -IF- the module is available in the running kernel:\n\n\u2022 An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory\n\n\u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n\u2022 The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n\n#### \u2022 No additional configuration is necessary",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"cramfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\n\\h*install \\/bin\\/([^true|false])' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\n\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\n\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the cramfs module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install cramfs /bin/false in the /etc/modprobe.d/ directory\n\n\u2022 Create a file ending in .conf with blacklist cramfs in the /etc/modprobe.d/ directory\n\n#### \u2022 Unload cramfs from the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 Create a file ending in .conf with blacklist cramfs in the /etc/modprobe.d/ directory\n\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n\n#### \u2022 No remediation is necessary",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"cramfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\n\\h*install \\/bin\\/([^true|false])' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "**\n```python\nimport os\nimport pathlib\nimport subprocess\n\nMODULE_NAME = \"cramfs\"\nMODULE_TYPE = \"fs\"\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the cramfs kernel module is not available or properly disabled.\n    \n    Returns:\n        bool: True if the module is not available or properly disabled, False otherwise.\n    \"\"\"\n    module_exists = False\n    module_denied = False\n    module_loaded = False\n    \n    # Check if the module exists in any installed kernel\n    for root_dir in ['/lib/modules']:\n        for dirpath, dirnames, filenames in os.walk(root_dir):\n            if dirpath.endswith(MODULE_TYPE) and MODULE_NAME in dirnames:\n                module_exists = True\n                \n                # Check if the module is denylisted\n                for conf_file in pathlib.Path('/etc/modprobe.d').glob('*.conf'):\n                    with open(conf_file, 'r') as file:\n                        if f\"blacklist {MODULE_NAME}\" in file.read():\n                            module_denied = True\n                            break\n                \n                # Check if the module is loaded in the current kernel\n                if subprocess.run(['lsmod'], stdout=subprocess.PIPE).stdout.decode().find(MODULE_NAME) != -1:\n                    module_loaded = True\n                \n                # If the module exists in the running kernel, perform additional checks\n                if dirpath.__contains__(os.uname().release):\n                    if not module_denied:\n                        print(f\"Module {MODULE_NAME} is not denylisted.\")\n                        return False\n                    \n                    # Check if the module is loadable\n                    result = subprocess.run(['modprobe', '-n', '-v', MODULE_NAME], stdout=subprocess.PIPE).stdout.decode()\n                    if not any(line.startswith('install /bin/') and '/false' in line for line in result.splitlines()):\n                        print(f\"Module {MODULE_NAME} is not properly configured to be non-loadable.\")\n                        return False\n                    \n                    if module_loaded:\n                        print(f\"Module {MODULE_NAME} is loaded.\")\n                        return False\n                \n    # If the module does not exist or is properly configured, pass the audit\n    if not module_exists:\n        print(f\"Module {MODULE_NAME} does not exist in any installed kernel.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by disabling the cramfs kernel module.\n    \"\"\"\n    # Create a .conf file to denylist the module if it doesn't exist\n    conf_file = pathlib.Path(f'/etc/modprobe.d/{MODULE_NAME}.conf')\n    if not conf_file.exists():\n        with open(conf_file, 'w') as file:\n            file.write(f\"blacklist {MODULE_NAME}\")\n        print(f\"Created {conf_file} with blacklist {MODULE_NAME}\")\n    \n    # Ensure the module is not loadable\n    result = subprocess.run(['modprobe', '-n', '-v', MODULE_NAME], stdout=subprocess.PIPE).stdout.decode()\n    if not any(line.startswith('install /bin/') and '/false' in line for line in result.splitlines()):\n        with open(conf_file, 'a') as file:\n            file.write(f\"\\ninstall {MODULE_NAME} /bin/false\")\n        print(f\"Added 'install {MODULE_NAME} /bin/false' to {conf_file}\")\n    \n    # Unload the module if it's loaded\n    if subprocess.run(['lsmod'], stdout=subprocess.PIPE).stdout.decode().find(MODULE_NAME) != -1:\n        subprocess.run(['modprobe', '-r', MODULE_NAME])\n        print(f\"Unloaded module {MODULE_NAME}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n```"
  },
  {
    "name": "Ensure freevxfs kernel module is not available",
    "id": "1.1.1.2",
    "type": "Automated",
    "start_page": 27,
    "end_page": 31,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The freevxfs filesystem type is a free version of the Veritas type filesystem. This is the primary filesystem type for HP-UX operating systems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the freevxfs module is disabled: -IF- the module is available in the running kernel:\n\n#### \u2022 An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory\n\n \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n \u2022 The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n\n#### \u2022 No additional configuration is necessary\n\nPage 26\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"freevxfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"\\$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"\\$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"\\$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the freevxfs module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install freevxfs /bin/false in the /etc/modprobe.d/ directory\n\n \u2022 Create a file ending in .conf with blacklist freevxfs in the /etc/modprobe.d/ directory\n\n#### \u2022 Unload freevxfs from the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 Create a file ending in .conf with blacklist freevxfs in the /etc/modprobe.d/ directory\n \n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n\n#### \u2022 No remediation is necessary\n\n Page 28\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"freevxfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport subprocess\nimport glob\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits the system to ensure freevxfs kernel module is not available.\"\"\"\n    module_name = \"freevxfs\"\n    module_type = \"fs\"\n    module_path = f\"/lib/modules/**/kernel/{module_type}\"\n    module_dir_name = module_name.replace('-', '/')\n\n    # Check if module exists in any installed kernel\n    for module_dir in glob.glob(module_path, recursive=True):\n        if os.path.isdir(os.path.join(module_dir, module_dir_name)) and os.listdir(os.path.join(module_dir, module_dir_name)):\n            # Check if module is loaded\n            if subprocess.Popen(f\"lsmod | grep {module_name}\", shell=True, stdout=subprocess.PIPE).communicate()[0]:\n                print(f\"Module {module_name} is loaded.\")\n                return False\n\n            # Check if module is loadable\n            if not any(f\"/bin/false\" in line for f in glob.glob(\"/etc/modprobe.d/*.conf\") for line in open(f).readlines() if module_name in line):\n                if subprocess.Popen(f\"modprobe -n -v {module_name}\", shell=True, stdout=subprocess.PIPE).communicate()[0].decode().strip() != f\"install /bin/{'true' if 'true' in subprocess.Popen(f\"modprobe --showconfig\", shell=True, stdout=subprocess.PIPE).communicate()[0].decode() else 'false'} {module_name}\":\n                    print(f\"Module {module_name} is loadable.\")\n                    return False\n\n            # Check if module is denylisted\n            if not subprocess.Popen(f\"modprobe --showconfig | grep -q 'blacklist {module_name}'\", shell=True).returncode == 0:\n                print(f\"Module {module_name} is not denylisted.\")\n                return False\n\n    print(f\"No issues found with {module_name} module.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the system to ensure freevxfs kernel module is not available.\"\"\"\n    module_name = \"freevxfs\"\n    module_type = \"fs\"\n    module_path = f\"/lib/modules/**/kernel/{module_type}\"\n    module_dir_name = module_name.replace('-', '/')\n    config_file = f\"/etc/modprobe.d/{module_name}.conf\"\n\n    Path(config_file).touch(exist_ok=True)  # Ensure file exists\n\n    # Unload module if loaded\n    if subprocess.Popen(f\"lsmod | grep {module_name}\", shell=True, stdout=subprocess.PIPE).communicate()[0]:\n        print(f\"Unloading module {module_name}...\")\n        subprocess.Popen(f\"modprobe -r {module_name}\", shell=True)\n\n    # Add blacklist rule if not present\n    if not subprocess.Popen(f\"modprobe --showconfig | grep -q 'blacklist {module_name}'\", shell=True).returncode == 0:\n        print(f\"Deny listing {module_name}...\")\n        with open(config_file, \"a\") as file:\n            file.write(f\"blacklist {module_name}\\n\")\n\n    # Set module to not loadable if currently loadable\n    if subprocess.Popen(f\"modprobe -n -v {module_name}\", shell=True, stdout=subprocess.PIPE).communicate()[0].decode().strip() not in [f\"install /bin/{'true' if 'true' in subprocess.Popen(f\"modprobe --showconfig\", shell=True, stdout=subprocess.PIPE).communicate()[0].decode() else 'false'} {module_name}\"]:\n        print(f\"Setting module {module_name} to not loadable...\")\n        with open(config_file, \"a\") as file:\n            file.write(f\"install {module_name} /bin/false\\n\")\n"
  },
  {
    "name": "Ensure hfs kernel module is not available",
    "id": "1.1.1.3",
    "type": "Automated",
    "start_page": 32,
    "end_page": 36,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The hfs filesystem type is a hierarchical filesystem that allows you to mount Mac OS filesystems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the hfs module is disabled: -IF- the module is available in the running kernel:\n\n- An entry including /bin/true or /bin/false exists in a file within the /etc/modprobe.d/ directory\n- The module is deny listed in a file within the /etc/modprobe.d/ directory\n- The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n- The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n\n- No additional configuration is necessary",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"hfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/true|false' <<< \"$l_loadable\"; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the hfs module: -IF- the module is available in the running kernel:\n\n- Create a file ending in .conf with install hfs /bin/false in the /etc/modprobe.d/ directory\n- Create a file ending in .conf with blacklist hfs in the /etc/modprobe.d/ directory\n- Unload hfs from the kernel\n\n### -IF- available in ANY installed kernel:\n\n- Create a file ending in .conf with blacklist hfs in the /etc/modprobe.d/ directory\n\n-IF- the kernel module is not available on the system or pre-compiled into the kernel:\n\n- No remediation is necessary",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"hfs\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in \"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/true|false' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport subprocess\nimport glob\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the vulnerability of the hfs kernel module.\n    \n    Returns:\n    bool: True if the module is secure (not loadable, not loaded, or deny-listed), False otherwise.\n    \"\"\"\n    module_name = \"hfs\"\n    module_type = \"fs\"\n    search_loc = \"/etc/modprobe.d/*.conf\"\n    module_path = f\"/lib/modules/**/kernel/{module_type}\"\n    \n    # Check if the module is loadable\n    loadable_output = subprocess.run(['modprobe', '-n', '-v', module_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if b\"install /bin/true\" in loadable_output.stdout or b\"install /bin/false\" in loadable_output.stdout:\n        print(f\"Module {module_name} is not loadable.\")\n    else:\n        print(f\"Module {module_name} is loadable: {loadable_output.stdout.decode().strip()}\")\n        return False\n    \n    # Check if the module is loaded\n    if not subprocess.run(['lsmod'], stdout=subprocess.PIPE).stdout.decode().strip().find(module_name):\n        print(f\"Module {module_name} is not loaded.\")\n    else:\n        print(f\"Module {module_name} is loaded.\")\n        return False\n    \n    # Check if the module is deny-listed\n    for file in glob.glob(search_loc):\n        with open(file, 'r') as f:\n            if f.read().find(f\"blacklist {module_name}\") != -1:\n                print(f\"Module {module_name} is deny-listed in {file}.\")\n                return True\n    \n    print(f\"Module {module_name} is not deny-listed.\")\n    return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability of the hfs kernel module.\n    \"\"\"\n    module_name = \"hfs\"\n    module_type = \"fs\"\n    module_path = f\"/lib/modules/**/kernel/{module_type}\"\n    conf_file = f\"/etc/modprobe.d/{module_name}.conf\"\n    \n    # Check if the module exists on the system\n    for dir in glob.glob(module_path, recursive=True):\n        if os.path.isdir(os.path.join(dir, module_name.replace('-', '/'))) and os.listdir(os.path.join(dir, module_name.replace('-', '/'))):\n            print(f\"Module {module_name} exists in {dir}. Checking if disabled...\")\n            \n            # If the module is loadable, add \"install hfs /bin/false\" to a .conf file in /etc/modprobe.d/\n            loadable_output = subprocess.run(['modprobe', '-n', '-v', module_name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if b\"install /bin/true\" not in loadable_output.stdout and b\"install /bin/false\" not in loadable_output.stdout:\n                with open(conf_file, 'a+') as f:\n                    f.write(f\"install {module_name} /bin/false\\n\")\n                print(f\"Disabled loadability of {module_name} by adding to {conf_file}.\")\n            \n            # Deny-list the module\n            if not subprocess.run(['modprobe', '--showconfig'], stdout=subprocess.PIPE).stdout.decode().strip().find(f\"blacklist {module_name}\"):\n                with open(conf_file, 'a+') as f:\n                    f.write(f\"blacklist {module_name}\\n\")\n                print(f\"Deny-listed {module_name} by adding to {conf_file}.\")\n            \n            # Unload the module if loaded\n            if subprocess.run(['lsmod'], stdout=subprocess.PIPE).stdout.decode().strip().find(module_name) != -1:\n                subprocess.run(['modprobe', '-r', module_name])\n                print(f\"Unloaded {module_name}.\")\n"
  },
  {
    "name": "Ensure hfsplus kernel module is not available",
    "id": "1.1.1.4",
    "type": "Automated",
    "start_page": 37,
    "end_page": 41,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The hfsplus filesystem type is a hierarchical filesystem designed to replace hfs that allows you to mount Mac OS filesystems.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the hfsplus module is disabled: -IF- the module is available in the running kernel:\n - An entry including /bin/true or /bin/false exists in a file within the \n    /etc/modprobe.d/ directory\n - The module is deny listed in a file within the /etc/modprobe.d/ directory\n - The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n#### \u2022 No additional configuration is necessary",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"hfsplus\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\",
    "remediation_details": "Run the following script to disable the hfsplus module: -IF- the module is available in the running kernel:\n#### \u2022 Create a file ending in .conf with install hfsplus /bin/false in the\n    /etc/modprobe.d/ directory\n \u2022 Create a file ending in .conf with blacklist hfsplus in the /etc/modprobe.d/\n### directory\n#### \u2022 Unload hfsplus from the kernel\n### -IF- available in ANY installed kernel:\n#### \u2022 Create a file ending in .conf with blacklist hfsplus in the /etc/modprobe.d/\n### directory\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n#### \u2022 No remediation is necessary",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"hfsplus\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\n\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\",
    "python_script": "\nimport os\nimport pathlib\nimport shutil\nimport subprocess\n\ndef audit_vuln() -> bool:\n    module_name = \"hfsplus\"\n    modprobe_d_path = pathlib.Path(\"/etc/modprobe.d/\")\n    kernel_modules_path = pathlib.Path(\"/lib/modules/\")\n\n    # Check if module is deny-listed in /etc/modprobe.d/\n    deny_listed = any(\n        (module_name in file.read_text() and (\"blacklist\" in file.read_text() or \"install\" in file.read_text()))\n        for file in modprobe_d_path.glob(\"*.conf\")\n    )\n\n    # Check if module is loaded in the kernel\n    loaded_modules = subprocess.check_output([\"lsmod\"]).decode().splitlines()\n    module_loaded = any(module_name in line for line in loaded_modules)\n\n    # Check module availability in running and installed kernels\n    # Assuming if it's not loadable, it's either not available or pre-compiled\n    try:\n        subprocess.check_output([\"modprobe\", \"-n\", \"-v\", module_name])\n        module_available = True\n    except subprocess.CalledProcessError:\n        module_available = False\n\n    # Audit passes if the module is either not available, deny-listed, and not loaded\n    return (not module_available) or (deny_listed and not module_loaded)\n\ndef remediate_vuln() -> None:\n    module_name = \"hfsplus\"\n    modprobe_d_path = pathlib.Path(\"/etc/modprobe.d/\")\n    conf_filename = f\"disable_{module_name}.conf\"\n\n    # Create a.conf file with install and blacklist directives\n    conf_file_path = modprobe_d_path / conf_filename\n    with open(conf_file_path, \"w\") as file:\n        file.write(f\"install {module_name} /bin/false\\n\")\n        file.write(f\"blacklist {module_name}\\n\")\n    print(f\"Created `{conf_filename}` in `/etc/modprobe.d/` with deny-list directives.\")\n\n    # Unload the module if it's currently loaded\n    try:\n        subprocess.check_output([\"modprobe\", \"-r\", module_name])\n        print(f\"Unloaded `{module_name}` from the kernel.\")\n    except subprocess.CalledProcessError as e:\n        if e.returncode!= 1:  # Module not found (already unloaded) has return code 1\n            print(f\"Failed to unload `{module_name}`: {e}\")\n"
  },
  {
    "name": "Ensure jffs2 kernel module is not available",
    "id": "1.1.1.5",
    "type": "Automated",
    "start_page": 42,
    "end_page": 46,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The jffs2 (journaling flash filesystem 2) filesystem type is a log-structured filesystem used in flash memory devices.",
    "rationale": "Removing support for unneeded filesystem types reduces the local attack surface of the system. If this filesystem type is not needed, disable it.",
    "audit_details": "Run the following script to verify the jffs2 module is disabled: -IF- the module is available in the running kernel:\n\n#### \u2022 An entry including /bin/true or /bin/false exists in a file within the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n \u2022 The module is not loaded in the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 The module is deny listed in a file within the /etc/modprobe.d/ directory\n\n### -IF- the kernel module is not available on the system, or pre-compiled into the kernel:\n\n#### \u2022 No additional configuration is necessary",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\" l_dl=\"\" # Unset output variables\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_searchloc=\"/lib/modprobe.d/*.conf /usr/local/lib/modprobe.d/*.conf /run/modprobe.d/*.conf /etc/modprobe.d/*.conf\"\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_chk()\n  {\n   # Check if the module is currently loadable\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" is not loadable: \\\"$l_loadable\\\"\"\n   else\n     l_output2=\"\\$l_output2\\n - module: \\\"$l_mname\\\" is loadable: \\\"$l_loadable\\\"\"\n   fi\n  }\n  module_loaded_chk()\n  {\n   # Check if the module is currently loaded\n   if ! lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" is not loaded\"\n   else\n     l_output2=\"\\$l_output2\\n - module: \\\"$l_mname\\\" is loaded\"\n   fi\n  }\n  module_deny_chk()\n  {\n   # Check if the module is deny listed\n   l_dl=\"y\"\n   if modprobe --showconfig | grep -Pq -- '^\\h*blacklist\\h+'\"$l_mpname\"'\\b'; then\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" is deny listed in: \\\"$(grep -Pls -\"^\\h*blacklist\\h+$l_mname\\b\" $l_searchloc)\\\"\"\n   else\n     l_output2=\"\\$l_output2\\n - module: \\\"$l_mname\\\" is not deny listed\"\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     l_output3=\"\\$l_output3\\n - \\\"$l_mdir\\\"\"\n     [ \"$l_dl\" != \"y\" ] && module_deny_chk\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_chk\n      module_loaded_chk\n     fi\n   else\n     l_output=\"\\$l_output\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\"\n   fi\n  done\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_output3\" ] && echo -e \"\\n\\n -- INFO --\\n - module: \\\"$l_mname\\\" exists in:$l_output3\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to disable the jffs2 module: -IF- the module is available in the running kernel:\n\n#### \u2022 Create a file ending in .conf with install jffs2 /bin/false in the\n```\n    /etc/modprobe.d/ directory\n\n \u2022 Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/\n### directory\n\n#### \u2022 Unload jffs2 from the kernel\n\n### -IF- available in ANY installed kernel:\n\n#### \u2022 Create a file ending in .conf with blacklist jffs2 in the /etc/modprobe.d/\n### directory\n\n -IF- the kernel module is not available on the system or pre-compiled into the kernel:\n#### \u2022 No remediation is necessary",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_mname=\"jffs2\" # set module name\n  l_mtype=\"fs\" # set module type\n  l_mpath=\"/lib/modules/**/kernel/$l_mtype\"\n  l_mpname=\"$(tr '-' '_' <<< \"$l_mname\")\"\n  l_mndir=\"$(tr '-' '/' <<< \"$l_mname\")\"\n  module_loadable_fix()\n  {\n   # If the module is currently loadable, add \"install {MODULE_NAME} /bin/false\" to a file in\n\"/etc/modprobe.d\"\n   l_loadable=\"$(modprobe -n -v \"$l_mname\")\"\n   [ \"$(wc -l <<< \"$l_loadable\")\" -gt \"1\" ] && l_loadable=\"$(grep -P -\"(^\\h*install|\\b$l_mname)\\b\" <<< \"$l_loadable\")\"\n   if ! grep -Pq -- '^\\h*install \\/bin\\/(true|false)' <<< \"$l_loadable\"; then\n     echo -e \"\\n - setting module: \\\"$l_mname\\\" to be not loadable\"\n     echo -e \"install $l_mname /bin/false\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  module_loaded_fix()\n  {\n   # If the module is currently loaded, unload the module\n   if lsmod | grep \"$l_mname\" > /dev/null 2>&1; then\n     echo -e \"\\n - unloading module \\\"$l_mname\\\"\"\n     modprobe -r \"$l_mname\"\n   fi\n  }\n  module_deny_fix()\n  {\n   # If the module isn't deny listed, denylist the module\n   if ! modprobe --showconfig | grep -Pq -- \"^\\h*blacklist\\h+$l_mpname\\b\"; then\n     echo -e \"\\n - deny listing \\\"$l_mname\\\"\"\n     echo -e \"blacklist $l_mname\" >> /etc/modprobe.d/\"$l_mpname\".conf\n   fi\n  }\n  # Check if the module exists on the system\n  for l_mdir in $l_mpath; do\n   if [ -d \"$l_mdir/$l_mndir\" ] && [ -n \"$(ls -A $l_mdir/$l_mndir)\" ]; then\n     echo -e \"\\n - module: \\\"$l_mname\\\" exists in \\\"$l_mdir\\\"\\n - checking if disabled...\"\n     module_deny_fix\n     if [ \"$l_mdir\" = \"/lib/modules/$(uname -r)/kernel/$l_mtype\" ]; then\n      module_loadable_fix\n      module_loaded_fix\n     fi\n   else\n     echo -e \"\\n - module: \\\"$l_mname\\\" doesn't exist in \\\"$l_mdir\\\"\\n\"\n   fi\n  done\n  echo -e \"\\n - remediation of module: \\\"$l_mname\\\" complete\\n\"\n}",
    "python_script": "\nimport os\nimport subprocess\n\n# Constants\nMODULE_NAME = \"jffs2\"\nMODULE_TYPE = \"fs\"\nMODULE_PATH = f\"/lib/modules/**/kernel/{MODULE_TYPE}\"\nMODPROBE_D_PATH = \"/etc/modprobe.d/\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if jffs2 kernel module is available and properly configured.\"\"\"\n    module_exists = False\n    for root, dirs, files in os.walk(\"/lib/modules/\"):\n        if MODULE_NAME in dirs:\n            module_exists = True\n            module_dir = os.path.join(root, MODULE_NAME)\n            # Check if module is deny-listed\n            deny_listed = subprocess.run(\n                f\"modprobe --showconfig | grep -q '^ *blacklist *{MODULE_NAME}$'\",\n                shell=True,\n                stdout=subprocess.DEVNULL,\n            ).returncode == 0\n            if not deny_listed:\n                print(f\" - Module {MODULE_NAME} is not deny-listed\")\n                return False\n            # Check if module is loaded\n            loaded = subprocess.run(\n                f\"lsmod | grep -q {MODULE_NAME}\", shell=True, stdout=subprocess.DEVNULL\n            ).returncode == 0\n            if loaded:\n                print(f\" - Module {MODULE_NAME} is loaded\")\n                return False\n            # Check if module is loadable\n            loadable = subprocess.run(\n                f\"modprobe -n -v {MODULE_NAME} | grep -q '^ *install.* /bin/true$'\",\n                shell=True,\n                stdout=subprocess.DEVNULL,\n            ).returncode!= 0\n            if loadable:\n                print(f\" - Module {MODULE_NAME} is loadable\")\n                return False\n            print(f\" - Module {MODULE_NAME} is properly configured in {module_dir}\")\n    \n    if not module_exists:\n        print(f\" - Module {MODULE_NAME} does not exist on the system\")\n    \n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate jffs2 kernel module by deny-listing and unloading it.\"\"\"\n    # Deny-list the module\n    deny_list_file = os.path.join(MODPROBE_D_PATH, f\"{MODULE_NAME}.conf\")\n    with open(deny_list_file, \"a+\") as f:\n        f.write(f\"blacklist {MODULE_NAME}\\n\")\n    print(f\" - Deny-listed {MODULE_NAME} in {deny_list_file}\")\n    \n    # Unload the module (if loaded)\n    if subprocess.run(\n        f\"lsmod | grep -q {MODULE_NAME}\", shell=True, stdout=subprocess.DEVNULL\n    ).returncode == 0:\n        subprocess.run(f\"modprobe -r {MODULE_NAME}\", shell=True)\n        print(f\" - Unloaded {MODULE_NAME} module\")\n    \n    # Make the module non-loadable (if not already)\n    loadable_check = subprocess.run(\n        f\"modprobe -n -v {MODULE_NAME} | grep -q '^ *install.* /bin/true$'\",\n        shell=True,\n        stdout=subprocess.DEVNULL,\n    ).returncode!= 0\n    if loadable_check:\n        with open(deny_list_file, \"a+\") as f:\n            f.write(f\"install {MODULE_NAME} /bin/false\\n\")\n        print(f\" - Set {MODULE_NAME} to be non-loadable\")\n"
  },
  {
    "name": "Ensure /tmp is a separate partition",
    "id": "1.1.2.1.1",
    "type": "Automated",
    "start_page": 64,
    "end_page": 67,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /tmp directory is a world-writable directory used for temporary storage by all users and some applications.\n\n- IF - an entry for /tmp exists in /etc/fstab it will take precedence over entries in systemd default unit file.\n\nNote: In an environment where the main system is diskless and connected to iSCSI, entries in /etc/fstab may not take precedence.\n/tmp can be configured to use tmpfs.\ntmpfs puts everything into the kernel internal caches and grows and shrinks to accommodate the files it contains and is able to swap unneeded pages out to swap space. It has maximum size limits which can be adjusted on the fly via mount -o remount.\nSince tmpfs lives completely in the page cache and on swap, all tmpfs pages will be shown as \"Shmem\" in /proc/meminfo and \"Shared\" in free. Notice that these counters also include shared memory. The most reliable way to get the count is using df and du.\ntmpfs has three mount options for sizing:\n - `size: The limit of allocated bytes for this tmpfs instance. The default is half of your physical RAM without swap. If you oversize your tmpfs instances the machine will deadlock since the OOM handler will not be able to free that memory.\n - `nr_blocks: The same as size, but in blocks of PAGE_SIZE.`\n - `nr_inodes: The maximum number of inodes for this instance. The default is half of the number of your physical RAM pages, or (on a machine with highmem) the number of lowmem RAM pages, whichever is the lower.\nThese parameters accept a suffix k, m or g and can be changed on remount. The size parameter also accepts a suffix % to limit this tmpfs instance to that percentage of your physical RAM. The default, when neither size nor nr_blocks is specified, is size=50%.",
    "rationale": "Making /tmp its own file system allows an administrator to set additional mount options such as the noexec option on the mount, making /tmp useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system setuid program and wait for it to be updated. Once the program was updated, the hard link would be broken, and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw.\n\nThis can be accomplished by either mounting tmpfs to /tmp, or creating a separate partition for /tmp.",
    "audit_details": "Run the following command and verify the output shows that /tmp is mounted. Particular requirements pertaining to mount options are covered in ensuing sections.\n\n# findmnt -kn /tmp\n\nExample output:\n/tmp  tmpfs tmpfs rw,nosuid,nodev,noexec\n\nEnsure that systemd will mount the /tmp partition at boot time.\n\n# systemctl is-enabled tmp.mount\n\nExample output:\ngenerated\n\nVerify output is not masked or disabled. Note: By default, systemd will output generated if there is an entry in /etc/fstab for /tmp. This just means systemd will use the entry in /etc/fstab instead of its default unit file configuration for /tmp.",
    "audit_code": "# findmnt -kn /tmp\n\n# systemctl is-enabled tmp.mount",
    "remediation_details": "First ensure that systemd is correctly configured to ensure that /tmp will be mounted at boot time.\n\n# systemctl unmask tmp.mount\n\nFor specific configuration requirements of the /tmp mount for your environment, modify /etc/fstab. Example of using tmpfs with specific mount options:\ntmpfs /tmp tmpfs   defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n\nNote: the size=2G is an example of setting a specific size for tmpfs. Example of using a volume or disk with specific mount options. The source location of the volume or disk will vary depending on your environment:\n<device> /tmp  <fstype>  defaults,nodev,nosuid,noexec  0 0",
    "remediation_code": "# systemctl unmask tmp.mount\n\n# nano /etc/fstab\n\n# mount -o remount /tmp",
    "python_script": "\nimport subprocess\nimport os\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if /tmp is a separate partition\"\"\"\n    # Check if /tmp is mounted\n    mount_output = subprocess.check_output(['findmnt', '-kn', '/tmp']).decode('utf-8')\n    if not mount_output.strip():\n        print(\"/tmp is not mounted\")\n        return False\n\n    # Check if systemd will mount /tmp at boot time\n    systemd_output = subprocess.check_output(['systemctl', 'is-enabled', 'tmp.mount']).decode('utf-8')\n    if systemd_output.strip() in ['masked', 'disabled']:\n        print(\"systemd will not mount /tmp at boot time (masked or disabled)\")\n        return False\n\n    print(\"/tmp is mounted and systemd will mount it at boot time\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate if /tmp is not a separate partition\"\"\"\n    # Unmask tmp.mount systemd service\n    subprocess.check_call(['systemctl', 'unmask', 'tmp.mount'])\n    print(\"Unmasked tmp.mount systemd service\")\n\n    # Modify /etc/fstab to include recommended mount options for /tmp using tmpfs\n    fstab_entry = \"tmpfs /tmp tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\"\n    with open(\"/etc/fstab\", \"a+\") as fstab_file:\n        if fstab_entry not in fstab_file.read():\n            fstab_file.write(fstab_entry + \"\\n\")\n    print(\"Added tmpfs entry to /etc/fstab with recommended mount options\")\n\n    # Remount /tmp with new options\n    subprocess.check_call(['mount', '-o', 'remount', '/tmp'])\n    print(\"Remounted /tmp with new options\")\n    # Verify the new mount options are applied\n    subprocess.check_call(['findmnt', '-kn', '/tmp'])\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        if not audit_vuln():\n            print(\"Vulnerability found. Run with 'remediate' argument to fix.\")\n        else:\n            print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure nodev option set on /tmp partition",
    "id": "1.1.2.1.2",
    "type": "Automated",
    "start_page": 68,
    "end_page": 69,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /tmp filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /tmp.",
    "audit_details": "- IF - a separate partition exists for /tmp, verify that the nodev option is set. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /tmp | grep -v nodev Nothing should be returned",
    "audit_code": "# findmnt -kn /tmp | grep -v nodev\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /tmp. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /tmp partition. Example: <device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0 Run the following command to remount /tmp with the configured options: # mount -o remount /tmp",
    "remediation_code": "<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /tmp\n",
    "python_script": "\nimport pathlib\nimport subprocess\nimport pdev\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nodev option is set on /tmp partition.\"\"\"\n    tmp_mount = pdev.find_mount_point('/tmp')\n    if tmp_mount:\n        return 'nodev' in tmp_mount.options\n    else:\n        # If no separate partition exists for /tmp, consider it as not vulnerable\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nodev option to /tmp partition in /etc/fstab and remounting.\"\"\"\n    fstab_path = pathlib.Path('/etc/fstab')\n    tmp_mount = pdev.find_mount_point('/tmp')\n    \n    if tmp_mount:\n        with fstab_path.open('r+') as file:\n            lines = file.readlines()\n            file.seek(0)\n            tmp_partition_found = False\n            for line in lines:\n                if line.startswith(tmp_mount.device):\n                    # Add nodev if it's not already there\n                    if 'nodev' not in line:\n                        updated_line = line.strip() + ',nodev' + '\\n'\n                        print(f\"Updated fstab line for /tmp to include nodev: {updated_line.strip()}\")\n                    else:\n                        updated_line = line\n                        print(\"/tmp already has nodev option in fstab.\")\n                    tmp_partition_found = True\n                file.write(updated_line if tmp_partition_found and 'updated_line' in locals() else line)\n            if not tmp_partition_found:\n                print(\"/tmp partition not found in fstab. Cannot remediate.\")\n                return\n        \n        # Remount /tmp with the new options\n        subprocess.run(['mount', '-o', 'remount', '/tmp'])\n        print(\"Remounted /tmp with updated options.\")\n    else:\n        print(\"No separate partition for /tmp found. No remediation needed.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Proceeding to remediate...\")\n        remediate_vuln()\n    else:\n        print(\"Nodev option is already set for /tmp or /tmp is not on a separate partition.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /tmp partition",
    "id": "1.1.2.1.3",
    "type": "Automated",
    "start_page": 70,
    "end_page": 71,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /tmp.",
    "audit_details": "- IF - a separate partition exists for /tmp, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. Example:\n```\n# findmnt -kn /tmp | grep -v nosuid\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /tmp | grep -v nosuid",
    "remediation_details": "- IF - a separate partition exists for /tmp. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /tmp partition. Example:\n```\n<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n``` Run the following command to remount /tmp with the configured options:\n```\n# mount -o remount /tmp\n```",
    "remediation_code": "Edit /etc/fstab and mount /tmp with nosuid option.",
    "python_script": ""
  },
  {
    "name": "Ensure noexec option set on /tmp partition",
    "id": "1.1.2.1.4",
    "type": "Automated",
    "start_page": 72,
    "end_page": 73,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /tmp.",
    "audit_details": "IF - a separate partition exists for /tmp, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example:\n```\n# findmnt -kn /tmp | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /tmp | grep -v noexec",
    "remediation_details": "IF - a separate partition exists for /tmp. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /tmp partition.\nExample:\n```\n<device> /tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /tmp with the configured options:\n```\n# mount -o remount /tmp\n```",
    "remediation_code": "# mount -o remount /tmp",
    "python_script": "\nimport psutil\nimport os\nimport fileinput\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /tmp partition\"\"\"\n    tmp_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/tmp'), None)\n    if tmp_mount and 'noexec' in tmp_mount.opts:\n        return True\n    print(\"/tmp partition is missing or noexec option is not set.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding noexec option to /tmp partition in /etc/fstab and remounting\"\"\"\n    fstab_file = '/etc/fstab'\n    tmp_line_identifier = f\" {os.sep}tmp \"\n    \n    # Backup original /etc/fstab\n    subprocess.run(f\"cp {fstab_file} {fstab_file}.orig\", shell=True, check=True)\n    print(f\"Backed up {fstab_file} to {fstab_file}.orig\")\n    \n    # Modify /etc/fstab to include noexec for /tmp\n    with fileinput.input(files=[fstab_file], inplace=True) as file:\n        for line in file:\n            if tmp_line_identifier in line:\n                if 'noexec' not in line:\n                    line = line.strip() + ',noexec'\n                    print(f\"Updated /tmp line in {fstab_file} to include noexec option.\")\n            print(line, end='')\n    \n    # Remount /tmp with new options\n    subprocess.run(f\"mount -o remount {os.sep}tmp\", shell=True, check=True)\n    print(f\"Remounted {os.sep}tmp with new options.\")\n"
  },
  {
    "name": "Ensure /dev/shm is a separate partition",
    "id": "1.1.2.2.1",
    "type": "Automated",
    "start_page": 75,
    "end_page": 76,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /dev/shm directory is a world-writable directory that can function as shared memory that facilitates inter process communication (IPC).",
    "rationale": "Making /dev/shm its own file system allows an administrator to set additional mount options such as the noexec option on the mount, making /dev/shm useless for an attacker to install executable code. It would also prevent an attacker from establishing a hard link to a system setuid program and wait for it to be updated. Once the program was updated, the hard link would be broken and the attacker would have his own copy of the program. If the program happened to have a security vulnerability, the attacker could continue to exploit the known flaw. This can be accomplished by mounting tmpfs to /dev/shm.",
    "audit_details": "-IF- `/dev/shm is to be used on the system, run the following command and verify the output shows that /dev/shm is mounted. Particular requirements pertaining to mount options are covered in ensuing sections.",
    "audit_code": "# findmnt -kn /dev/shm\n\nExample output:\n/dev/shm  tmpfs tmpfs rw,nosuid,nodev,noexec,relatime,seclabel",
    "remediation_details": "For specific configuration requirements of the /dev/shm mount for your environment, modify /etc/fstab.",
    "remediation_code": "tmpfs /dev/shm tmpfs  \ndefaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0\n\nReferences:  \n1. https://www.freedesktop.org/wiki/Software/systemd/APIFileSystems/  \n2. https://www.freedesktop.org/software/systemd/man/systemd-fstab-generator.html  \n3. NIST SP 800-53 Rev. 5: CM-7",
    "python_script": "\nimport psutil\nimport fileinput\nimport os\nimport tempfile\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if /dev/shm is mounted as a separate tmpfs partition.\"\"\"\n    for disk in psutil.disk_partitions():\n        if disk.mountpoint == '/dev/shm' and disk.fstype == 'tmpfs':\n            # Check for required mount options (subset, focusing on key ones)\n            required_options = ['rw', 'nosuid', 'nodev', 'noexec']\n            if all(option in disk.opts for option in required_options):\n                return False  # Not vulnerable\n    return True  # Vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring /dev/shm is mounted as tmpfs with required options in /etc/fstab.\"\"\"\n    fstab_path = '/etc/fstab'\n    required_mount_line = f'tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime,size=2G 0 0'\n    \n    # Check if the required line already exists in /etc/fstab\n    with open(fstab_path, 'r') as file:\n        if required_mount_line in file.readlines():\n            print(f\"Required tmpfs mount for /dev/shm already exists in {fstab_path}.\")\n            return\n    \n    # Append the required mount line to /etc/fstab\n    with open(fstab_path, 'a') as file:\n        file.write(required_mount_line + '\\n')\n    print(f\"Appended required tmpfs mount for /dev/shm to {fstab_path}.\")\n\n    # Inform about the need for a reboot to apply changes\n    print(\"To apply the changes, please reboot your system or manually mount /dev/shm using: `mount -a`\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"/dev/shm is not mounted as a separate tmpfs partition. Remediation required.\")\n        remediate_vuln()\n    else:\n        print(\"/dev/shm is correctly mounted as a separate tmpfs partition. No action required.\")\n"
  },
  {
    "name": "Ensure nodev option set on /dev/shm partition",
    "id": "1.1.2.2.2",
    "type": "Automated",
    "start_page": 77,
    "end_page": 78,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /dev/shm filesystem is not intended to support devices, set this option to ensure that users cannot attempt to create special devices in /dev/shm partitions.",
    "audit_details": "IF - a separate partition exists for /dev/shm, verify that the nodev option is set.",
    "audit_code": "# findmnt -kn /dev/shm | grep -v 'nodev'\nNothing should be returned",
    "remediation_details": "IF - a separate partition exists for /dev/shm. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information.",
    "remediation_code": "tmpfs /dev/shm  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n\n# mount -o remount /dev/shm\n\n**Note:** It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications.",
    "python_script": "\nimport subprocess\nimport os\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nodev option is set on /dev/shm partition\"\"\"\n    mount_output = subprocess.check_output(['findmnt', '-kn', '/dev/shm']).decode('utf-8')\n    return 'nodev' in mount_output\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting nodev option on /dev/shm partition\"\"\"\n    fstab_path = '/etc/fstab'\n    \n    # Check if /dev/shm has a separate partition\n    if not subprocess.check_output(['findmnt', '-k', '/dev/shm']).decode('utf-8').strip():\n        print(\"No separate partition found for /dev/shm. Skipping remediation.\")\n        return\n    \n    # Read fstab content\n    with open(fstab_path, 'r') as file:\n        fstab_lines = file.readlines()\n    \n    # Check and update the /dev/shm entry in fstab\n    updated = False\n    for i, line in enumerate(fstab_lines):\n        if line.startswith('tmpfs /dev/shm'):\n            options = re.split(r'\\s+', line.strip())[3]\n            if 'nodev' not in options:\n                fstab_lines[i] = re.sub(r'(defaults.*)', r'\\1,nodev', line)\n                updated = True\n            break\n    else:\n        # If no tmpfs /dev/shm entry found, add a new one with recommended settings\n        new_line = \"tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0\\n\"\n        fstab_lines.append(new_line)\n        updated = True\n    \n    # Write updated fstab content only if changes were made\n    if updated:\n        with open(fstab_path, 'w') as file:\n            file.writelines(fstab_lines)\n        print(f\"Updated {fstab_path} with nodev option for /dev/shm partition.\")\n    \n    # Remount /dev/shm with updated options\n    subprocess.check_call(['mount', '-o', 'remount', '/dev/shm'])\n    print(\"Remounted /dev/shm partition with updated options.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure nosuid option set on /dev/shm partition",
    "id": "1.1.2.2.3",
    "type": "Automated",
    "start_page": 79,
    "end_page": 80,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Setting this option on a file system prevents users from introducing privileged programs onto the system and allowing non-root users to execute them.",
    "audit_details": "- IF - a separate partition exists for /dev/shm, verify that the nosuid option is set.",
    "audit_code": "# findmnt -kn /dev/shm | grep -v 'nosuid'\nNothing should be returned\n",
    "remediation_details": "- IF - a separate partition exists for /dev/shm.\nEdit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /dev/shm partition. See the fstab(5) manual page for more information.\n\n_Example:_\n\ntmpfs /dev/shm  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n\nRun the following command to remount /dev/shm with the configured options:\n\n# mount -o remount /dev/shm\n\nNote: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications.",
    "remediation_code": "# mount -o remount /dev/shm\n\nNote: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications.\n\nReferences:\n\n1. NIST SP 800-53 Rev. 5: AC-3, MP-2\n\nAdditional Information:\n\nSome distributions mount /dev/shm through other means and require /dev/shm to be added to /etc/fstab even though it is already being mounted on boot. Others may configure /dev/shm in other locations and may override /etc/fstab configuration. Consult the documentation appropriate for your distribution.",
    "python_script": "\nimport mountpy\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure nosuid option set on /dev/shm partition\"\"\"\n    # Get mount info for /dev/shm\n    mount_info = mountpy.mounts().get('/dev/shm')\n    \n    # If no separate partition exists, vulnerability is not applicable\n    if mount_info is None:\n        return False\n    \n    # Check if nosuid option is set\n    options = mount_info.options\n    if 'nosuid' in options:\n        return False\n    else:\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure nosuid option set on /dev/shm partition\"\"\"\n    # Get mount info for /dev/shm\n    mount_info = mountpy.mounts().get('/dev/shm')\n    \n    # If no separate partition exists, vulnerability is not applicable\n    if mount_info is None:\n        print(\"No separate partition exists for /dev/shm, no remediation needed.\")\n        return\n    \n    # Edit /etc/fstab to add nosuid option\n    fstab_path = '/etc/fstab'\n    try:\n        with open(fstab_path, 'r+') as fstab_file:\n            lines = fstab_file.readlines()\n            fstab_file.seek(0)\n            updated = False\n            for line in lines:\n                if line.startswith(mount_info.device + ' ' + mount_info.path):\n                    # Add nosuid option if not already present\n                    if 'nosuid' not in line:\n                        updated_line = re.sub(r'(defaults,?)', r'\\1nosuid,', line)\n                        if updated_line == line:\n                            updated_line = line.strip() + ',nosuid\\n'\n                        fstab_file.write(updated_line)\n                        print(f\"Added nosuid option to {fstab_path} for /dev/shm partition.\")\n                    else:\n                        print(\"nosuid option already set in /etc/fstab for /dev/shm partition.\")\n                    updated = True\n                else:\n                    fstab_file.write(line)\n            if not updated:\n                print(\"No matching entry found in /etc/fstab for /dev/shm partition.\")\n            fstab_file.truncate()\n    except Exception as e:\n        print(f\"Error updating {fstab_path}: {str(e)}\")\n    \n    # Remount /dev/shm with updated options (using subprocess for simplicity)\n    import subprocess\n    try:\n        subprocess.run(['mount', '-o', 'remount', '/dev/shm'], check=True)\n        print(\"Remounted /dev/shm with updated options.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error remounting /dev/shm: {str(e)}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure noexec option set on /dev/shm partition",
    "id": "1.1.2.2.4",
    "type": "Automated",
    "start_page": 81,
    "end_page": 82,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Setting this option on a file system prevents users from executing programs from shared memory. This deters users from introducing potentially malicious software on the system.",
    "audit_details": "- IF - a separate partition exists for /dev/shm, verify that the noexec option is set.",
    "audit_code": "# findmnt -kn /dev/shm | grep -v 'noexec'\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /dev/shm.\nEdit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /dev/shm partition.\n\n_Example:_\n\ntmpfs /dev/shm  tmpfs   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n\nRun the following command to remount /dev/shm with the configured options:\n\n# mount -o remount /dev/shm\n\n**Note: It is recommended to use tmpfs as the device/filesystem type as /dev/shm is used as shared memory space by applications.**",
    "remediation_code": "# mount -o remount /dev/shm",
    "python_script": "\nimport mountpy\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Check if /dev/shm partition has the noexec option set.\n    \n    Returns:\n        bool: True if noexec option is set, False otherwise.\n    \"\"\"\n    mount_info = mountpy.mounts()[next((i for i, mount in enumerate(mountpy.mounts()) if mount.msg == '/dev/shm'), None)]\n    return 'noexec' in mount_info.opts\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Add noexec to the mounting options for /dev/shm in /etc/fstab and remount.\n    \"\"\"\n    fstab_path = '/etc/fstab'\n    \n    # Read fstab file\n    with open(fstab_path, 'r+') as fstab:\n        lines = fstab.readlines()\n        shm_line = next((line for line in lines if line.startswith('tmpfs /dev/shm')), None)\n        \n        if shm_line:\n            # Update existing line if noexec option is missing\n            if 'noexec' not in shm_line:\n                updated_line = re.sub(r'(defaults,?)', r'\\1noexec,', shm_line)\n                if updated_line == shm_line:  # Append noexec if substitution failed\n                    updated_line = shm_line.strip() + ',noexec\\n'\n                lines[lines.index(shm_line)] = updated_line\n                # Write updates back to fstab\n                fstab.seek(0)\n                fstab.writelines(lines)\n                fstab.truncate()\n        else:\n            # Add new line if /dev/shm entry is missing (tmpfs recommended)\n            new_line = 'tmpfs /dev/shm tmpfs defaults,rw,nosuid,nodev,noexec,relatime 0 0\\n'\n            lines.append(new_line)\n            with open(fstab_path, 'w') as fstab_write:\n                fstab_write.writelines(lines)\n        \n        # Remount /dev/shm with updated options\n        print(\"Remounting /dev/shm with updated options...\")\n        subprocess.run(['mount', '-o', 'remount', '/dev/shm'], check=True)\n\nif __name__ == '__main__':\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"/dev/shm already has the noexec option set.\")\n"
  },
  {
    "name": "Ensure nodev option set on /home partition",
    "id": "1.1.2.3.2",
    "type": "Automated",
    "start_page": 86,
    "end_page": 87,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /home filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /home.",
    "audit_details": "IF - a separate partition exists for /home, verify that the nodev option is set. Run the following command to verify that the nodev mount option is set. Example:\n```\n# findmnt -kn /home | grep -v nodev\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /home | grep -v nodev\nNothing should be returned",
    "remediation_details": "IF - a separate partition exists for /home. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /home partition. Example:\n```\n<device> /home  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /home with the configured options:\n```\n# mount -o remount /home\n```",
    "remediation_code": "Edit /etc/fstab and add nodev to /home mount options.\nRun: # mount -o remount /home",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the nodev option is set on the /home partition.\n    \n    Returns:\n    bool: True if the nodev option is set, False otherwise.\n    \"\"\"\n    try:\n        output = subprocess.check_output([\"findmnt\", \"-kn\", \"/home\"])\n        return b\"nodev\" in output\n    except subprocess.CalledProcessError as e:\n        print(f\"Error during audit: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding the nodev option to the /home partition in /etc/fstab and remounting /home.\n    \"\"\"\n    # Check if /home is a separate partition\n    if subprocess.call([\"findmnt\", \"-kn\", \"/home\"]) == 0:\n        # Parse /etc/fstab to modify the /home entry\n        with open(\"/etc/fstab\", \"r+\") as fstab:\n            lines = fstab.readlines()\n            fstab.seek(0)\n            nodev_added = False\n            for line in lines:\n                if \"/home\" in line and \"nodev\" not in line:\n                    # Add nodev to the options field\n                    fields = line.split()\n                    options_field = fields[3].split(\",\")\n                    if \"nodev\" not in options_field:\n                        options_field.append(\"nodev\")\n                        fields[3] = \",\".join(options_field)\n                        new_line = \"\\t\".join(fields)\n                        print(f\"Edited /etc/fstab: Added nodev to /home mount options.\")\n                    else:\n                        new_line = line\n                        nodev_added = True  # nodev already present, no need for remount\n                    fstab.write(new_line)\n                else:\n                    fstab.write(line)\n            fstab.truncate()\n        \n        if not nodev_added:\n            # Remount /home with the new options\n            subprocess.call([\"mount\", \"-o\", \"remount\", \"/home\"])\n            print(\"Remounted /home with updated options.\")\n    else:\n        print(\"/home is not a separate partition; no action taken.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /home partition",
    "id": "1.1.2.3.3",
    "type": "Automated",
    "start_page": 88,
    "end_page": 89,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /home filesystem is only intended for user file storage, set this option to ensure that users cannot create setuid files in /home.",
    "audit_details": "- IF - a separate partition exists for /home, verify that the nosuid option is set.\nRun the following command to verify that the nosuid mount option is set.\n_Example:_\n```\n# findmnt -kn /home | grep -v nosuid\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /home | grep -v nosuid\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /home.\nEdit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /home partition.\n_Example:_\n```\n<device> /home  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /home with the configured options:\n```\n# mount -o remount /home\n```\n",
    "remediation_code": "# mount -o remount /home",
    "python_script": "\nimport subprocess\nimport fileinput\nimport psutil\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the nosuid option is set on the /home partition.\n\n    Returns:\n        bool: True if the nosuid option is set, False otherwise.\n    \"\"\"\n    # Check if a separate partition exists for /home\n    home_mount = next((m for m in psutil.disk_partitions() if m.mountpoint == '/home'), None)\n    if home_mount is None:\n        print(\"No separate partition found for /home.\")\n        return False  # or raise an exception, depending on the desired behavior\n\n    # Verify if the nosuid option is set\n    for opt in home_mount.opts.split(','):\n        if opt == 'nosuid':\n            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding the nosuid option to the /home partition's mounting options.\n    \"\"\"\n    # Edit the /etc/fstab file to add nosuid to the mounting options for the /home partition\n    fstab_file = '/etc/fstab'\n    modified = False\n    for line in fileinput.input(fstab_file, inplace=True):\n        if line.startswith('/') and '/home' in line:\n            fields = line.split()\n            if len(fields) > 3:  # Ensure we have enough fields\n                opts = fields[3].split(',')\n                if 'nosuid' not in opts:\n                    opts.append('nosuid')\n                    fields[3] = ','.join(opts)\n                    modified = True\n            print(' '.join(fields), end='')\n        else:\n            print(line, end='')\n    if modified:\n        print(f\"Added 'nosuid' option to the /home partition in {fstab_file}.\")\n\n    # Remount the /home partition with the updated options\n    subprocess.run(['mount', '-o', 'remount', '/home'])\n    print(\"Remounted /home with the configured options.\")\n"
  },
  {
    "name": "Ensure nodev option set on /var partition",
    "id": "1.1.2.4.2",
    "type": "Automated",
    "start_page": 94,
    "end_page": 95,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var.",
    "audit_details": "**- IF - a separate partition exists for /var, verify that the nodev option is set.** Run the following command to verify that the nodev mount option is set. \n_Example:_\n```\n# findmnt -kn /var | grep -v nodev\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var | grep -v nodev",
    "remediation_details": "**- IF - a separate partition exists for /var.** Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var partition.\n_Example:_\n```\n<device> /var  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var with the configured options:\n```\n# mount -o remount /var\n```",
    "remediation_code": "# mount -o remount /var",
    "python_script": "import psutil\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nodev option is set on /var partition\"\"\"\n    var_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/var'), None)\n    if var_mount:\n        # nodev is set if it's in the options string\n        return 'nodev' in var_mount.opts\n    return True  # No separate partition, consider as compliant\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nodev option to /var partition in /etc/fstab and remount\"\"\"\n    var_mount = next((disk for disk in psutil.disk_partitions() if disk.mountpoint == '/var'), None)\n    if var_mount:\n        fstab_path = '/etc/fstab'\n        with open(fstab_path, 'r+') as file:\n            lines = file.readlines()\n            file.seek(0)  # Reset file pointer\n            edited = False\n            for line in lines:\n                if line.startswith(var_mount.device) and '/var' in line:\n                    # Add nodev if it's not already there\n                    if 'nodev' not in line:\n                        options_index = line.find('defaults')  # Assuming defaults is always present\n                        if options_index != -1:\n                            new_line = line[:options_index + 8] + ',nodev' + line[options_index + 8:]\n                            file.write(new_line)\n                            print(f\"Added 'nodev' to /var mounting options in {fstab_path}\")\n                            edited = True\n                        else:\n                            print(\"Could not parse /etc/fstab line for /var to add nodev, manual edit required.\")\n                    else:\n                        print(\"/var already has the nodev option set in /etc/fstab\")\n                else:\n                    file.write(line)\n            file.truncate()  # Remove remaining content if file was shortened\n            if edited:\n                # Attempt a more Pythonic remount, falling back to subprocess if needed\n                try:\n                    # Pythonic approach not readily available, using subprocess\n                    subprocess.check_call(['mount', '-o', 'remount', '/var'])\n                    print(\"Remounted /var with updated options\")\n                except Exception as e:\n                    print(f\"Failed to remount /var Pythonically: {e}\")\n                    # Fallback to original subprocess command for remount\n                    subprocess.check_call(['mount', '-o', 'remount', '/var'])\n                    print(\"Remounted /var with updated options (fallback)\")\n    else:\n        print(\"No separate /var partition found, no remediation needed\")"
  },
  {
    "name": "Ensure nosuid option set on /var partition",
    "id": "1.1.2.4.3",
    "type": "Automated",
    "start_page": 96,
    "end_page": 97,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create setuid files in /var.",
    "audit_details": "- IF - a separate partition exists for /var, verify that the nosuid option is set.\nRun the following command to verify that the nosuid mount option is set.\n_Example:_\n```\n# findmnt -kn /var | grep -v nosuid\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /var | grep -v nosuid",
    "remediation_details": "- IF - a separate partition exists for /var.\nEdit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the\n```\n/var partition.\n```\n_Example:_\n```\n<device> /var  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var with the configured options:\n```\n# mount -o remount /var\n```\n",
    "remediation_code": "<device> /var  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /var",
    "python_script": "\nimport subprocess\nimport fileinput\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var partition\"\"\"\n    # Check if a separate partition exists for /var and if nosuid option is set\n    result = subprocess.run(['findmnt', '-kn', '/var'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if result.returncode!= 0:\n        print(\"Error auditing /var partition:\", result.stderr.decode().strip())\n        sys.exit(1)\n    \n    # If the output is not empty, it means nosuid option is not set (or an error occurred)\n    return result.stdout.decode().strip()!= \"\"\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting nosuid option on /var partition\"\"\"\n    if not audit_vuln():  # If the vulnerability doesn't exist, exit early\n        print(\"No vulnerability found. nosuid option is already set on /var partition.\")\n        return\n    \n    # Edit /etc/fstab to add nosuid option for /var partition\n    with fileinput.input('/etc/fstab', inplace=True) as file:\n        for line in file:\n            if line.strip().startswith('/var'):\n                fields = line.split()\n                if 'nosuid' not in fields[3]:\n                    fields[3] += ',nosuid'  # Add nosuid option\n                    print('\\t'.join(fields), end='\\n')  # Print the updated line\n                    print(\"Added nosuid option to /var partition in /etc/fstab.\")\n            else:\n                print(line, end='')  # Print unchanged lines\n    \n    # Remount /var with updated options\n    subprocess.run(['mount', '-o', 'remount', '/var'])\n    print(\"Remounted /var partition with updated options.\")\n"
  },
  {
    "name": "Ensure nodev option set on /var/tmp partition",
    "id": "1.1.2.5.2",
    "type": "Automated",
    "start_page": 101,
    "end_page": 102,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/tmp filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var/tmp.",
    "audit_details": "- IF - a separate partition exists for /var/tmp, verify that the nodev option is set. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /var/tmp | grep -v nodev Nothing should be returned",
    "audit_code": "# findmnt -kn /var/tmp | grep -v nodev\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /var/tmp. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/tmp partition. Example: <device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0 Run the following command to remount /var/tmp with the configured options: # mount -o remount /var/tmp",
    "remediation_code": "<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /var/tmp",
    "python_script": "\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if nodev option is set for /var/tmp partition.\n    \n    Returns:\n        bool: True if nodev option is set, False otherwise.\n    \"\"\"\n    try:\n        # Use findmnt with -k (kernel mount info) and -n (no-header) options\n        output = subprocess.check_output([\"findmnt\", \"-kn\", \"/var/tmp\"]).decode(\"utf-8\")\n        # Check if nodev option is present in the output\n        return \"nodev\" in output\n    except subprocess.CalledProcessError:\n        # If findmnt command fails, assume audit failed\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by adding nodev option to /var/tmp partition in /etc/fstab and remount.\n    \"\"\"\n    # Check if a separate partition exists for /var/tmp\n    if not subprocess.call([\"mountpoint\", \"/var/tmp\"]) == 0:\n        print(\"No separate partition found for /var/tmp, no remediation needed.\")\n        return\n\n    # Edit /etc/fstab to add nodev option\n    fstab_path = \"/etc/fstab\"\n    with open(fstab_path, \"r+\") as file:\n        lines = file.readlines()\n        file.seek(0)\n        nodev_added = False\n        for line in lines:\n            if \"/var/tmp\" in line:\n                # Add nodev to the mounting options if not already present\n                if \"nodev\" not in line:\n                    options_field = line.split()[3]\n                    new_options = f\"{options_field},nodev\" if options_field else \"nodev\"\n                    line = re.sub(r\"(\\S+)\\s+/var/tmp\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\", \n                                  rf\"\\1 /var/tmp \\2 {new_options} \\5\", line)\n                    print(f\"Added nodev option to /var/tmp entry in {fstab_path}\")\n                nodev_added = True\n            file.write(line)\n        if not nodev_added:\n            print(f\"No /var/tmp entry found in {fstab_path} to modify.\")\n            return\n\n    # Remount /var/tmp with updated options\n    subprocess.check_call([\"mount\", \"-o\", \"remount\", \"/var/tmp\"])\n    print(\"Remounted /var/tmp with updated options.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Audit failed. Starting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"Audit passed. No remediation needed.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /var/tmp partition",
    "id": "1.1.2.5.3",
    "type": "Automated",
    "start_page": 103,
    "end_page": 104,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot create setuid files in /var/tmp.",
    "audit_details": "**- IF - a separate partition exists for /var/tmp, verify that the nosuid option is set.** Run the following command to verify that the nosuid mount option is set. _Example:_\n```\n# findmnt -kn /var/tmp | grep -v nosuid\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /var/tmp | grep -v nosuid\nNothing should be returned",
    "remediation_details": "**- IF - a separate partition exists for /var/tmp.** Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the \n```\n/var/tmp partition.\n```\n_Example:_\n```\n<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/tmp with the configured options:\n```\n# mount -o remount /var/tmp\n```\n",
    "remediation_code": "# mount -o remount /var/tmp",
    "python_script": "\nimport subprocess\nimport fileinput\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the nosuid option is set on the /var/tmp partition.\n    \n    Returns:\n    bool: True if nosuid option is set, False otherwise.\n    \"\"\"\n    # Use findmnt to get mount options for /var/tmp\n    output = subprocess.check_output(['findmnt', '-kn', '/var/tmp']).decode('utf-8')\n    \n    # Check if nosuid is in the mount options\n    return 'nosuid' in output\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding the nosuid option to /etc/fstab for /var/tmp and remounting.\n    \"\"\"\n    fstab_path = '/etc/fstab'\n    \n    # Backup /etc/fstab before editing\n    os.system(f\"cp {fstab_path} {fstab_path}.bak\")\n    print(f\"Created backup of {fstab_path} as {fstab_path}.bak\")\n    \n    # Edit /etc/fstab to add nosuid option for /var/tmp\n    with fileinput.input(files=[fstab_path], inplace=True) as file:\n        for line in file:\n            if '/var/tmp' in line:\n                # Check if nosuid is already present to avoid duplicates\n                if 'nosuid' not in line:\n                    line = line.replace('defaults', 'defaults,nosuid,nodev,noexec,relatime') if 'defaults' in line else f\"{line.strip()},defaults,nosuid,nodev,noexec,relatime\\n\"\n                    print(f\"Updated /var/tmp mount options in {fstab_path}: {line.strip()}\")\n            print(line, end='')\n    \n    # Remount /var/tmp with the updated options\n    os.system(\"mount -o remount /var/tmp\")\n    print(\"Remounted /var/tmp with updated options\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"/var/tmp already has the nosuid option set.\")\n"
  },
  {
    "name": "Ensure noexec option set on /var/tmp partition",
    "id": "1.1.2.5.4",
    "type": "Automated",
    "start_page": 105,
    "end_page": 106,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/tmp filesystem is only intended for temporary file storage, set this option to ensure that users cannot run executable binaries from /var/tmp.",
    "audit_details": "- IF - a separate partition exists for /var/tmp, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. _Example:_\n```\n# findmnt -kn /var/tmp | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/tmp | grep -v noexec\nNothing should be returned",
    "remediation_details": "- IF - a separate partition exists for /var/tmp. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/tmp partition. _Example:_\n```\n<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/tmp with the configured options:\n```\n# mount -o remount /var/tmp\n```",
    "remediation_code": "Edit the /etc/fstab file to set noexec option:\n<device> /var/tmp  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\nRun the command to remount:\n# mount -o remount /var/tmp",
    "python_script": "\nimport psutil\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /var/tmp partition.\"\"\"\n    # Check if a separate partition exists for /var/tmp\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/var/tmp':\n            # Verify if noexec mount option is set\n            if 'noexec' not in partition.opts:\n                return False  # Vulnerability found\n            break  # Partition found and noexec set, or no separate partition\n    return True  # No separate partition or noexec is set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting noexec option on /var/tmp partition if needed.\"\"\"\n    # Identify the /var/tmp partition's filesystem details\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/var/tmp':\n            fstab_line = f\"{partition.device} {partition.mountpoint} {partition.fstype} defaults,rw,nosuid,nodev,noexec,relatime 0 0\"\n            break\n    else:\n        print(\"No separate /var/tmp partition found. No remediation applied.\")\n        return\n\n    # Edit /etc/fstab to add noexec option\n    with open(\"/etc/fstab\", 'r+') as fstab_file:\n        lines = fstab_file.readlines()\n        fstab_file.seek(0)\n        updated = False\n        for line in lines:\n            if line.startswith(f\"{partition.device} {partition.mountpoint}\"):\n                fstab_file.write(fstab_line + '\\n')\n                updated = True\n            else:\n                fstab_file.write(line)\n        if not updated:\n            fstab_file.write(fstab_line + '\\n')  # Append if not found\n        fstab_file.truncate()\n    print(f\"Updated /etc/fstab for {partition.mountpoint} with noexec option.\")\n\n    # Remount /var/tmp with the updated options\n    subprocess.run(['mount', '-o', 'remount', '/var/tmp'])\n    print(f\"Remounted {partition.mountpoint} with updated options.\")\n"
  },
  {
    "name": "Ensure nodev option set on /var/log partition",
    "id": "1.1.2.6.2",
    "type": "Automated",
    "start_page": 110,
    "end_page": 111,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/log filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var/log.",
    "audit_details": "**- IF - a separate partition exists for /var/log, verify that the nodev option is set.** Run the following command to verify that the nodev mount option is set. _Example:_ \n```\n# findmnt -kn /var/log | grep -v nodev\nNothing should be returned\n```\n",
    "audit_code": "# findmnt -kn /var/log | grep -v nodev\nNothing should be returned",
    "remediation_details": "**- IF - a separate partition exists for /var/log.** Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the \n```\n/var/log partition.\n```\n_Example:_ \n```\n<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/log with the configured options:\n```\n# mount -o remount /var/log\n```\n",
    "remediation_code": "Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the\n/var/log partition and run `# mount -o remount /var/log`.",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the nodev option is set on /var/log partition.\n    \n    Returns:\n    bool: True if nodev option is set or no separate partition exists, False otherwise.\n    \"\"\"\n    # Check if a separate partition exists for /var/log and if nodev option is set\n    output = subprocess.check_output(['findmnt', '-kn', '/var/log']).decode('utf-8')\n    if 'nodev' in output:\n        return True\n    elif '/var/log' not in output:  # No separate partition\n        return True\n    else:\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by adding the nodev option to /var/log partition's mounting options in /etc/fstab and remounting.\n    \"\"\"\n    # Check if a separate partition exists for /var/log\n    output = subprocess.check_output(['findmnt', '-kn', '/var/log']).decode('utf-8')\n    if '/var/log' in output:\n        print(\"Found separate /var/log partition. Proceeding with remediation...\")\n        \n        # Parse the existing mounting options for /var/log\n        options_match = re.search(r'(\\w+)\\s+/\\s+var/log\\s+(\\w+)\\s+([\\w,]+)', output)\n        if options_match:\n            device, fstype, options = options_match.groups()\n            new_options = f\"{options},nodev\" if 'nodev' not in options else options\n            \n            # Backup /etc/fstab\n            subprocess.run(['cp', '/etc/fstab', '/etc/fstab.backup'])\n            print(\"Backed up /etc/fstab to /etc/fstab.backup.\")\n            \n            # Edit /etc/fstab to add nodev option\n            with open('/etc/fstab', 'r+') as file:\n                content = file.read()\n                new_content = re.sub(fr\"({device}\\s+/var/log\\s+{fstype}\\s+)[\\w,]+\", fr\"\\1{new_options}\", content)\n                file.seek(0)\n                file.write(new_content)\n                file.truncate()\n            print(f\"Updated /etc/fstab with nodev option for /var/log partition.\")\n            \n            # Remount /var/log with new options\n            subprocess.run(['mount', '-o', 'remount', '/var/log'])\n            print(\"Remounted /var/log with updated options.\")\n        else:\n            print(\"Failed to parse existing mounting options for /var/log. Remediation not applied.\")\n    else:\n        print(\"No separate /var/log partition found. No remediation needed.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"/var/log partition either has nodev option set or does not exist as a separate partition. No action required.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /var/log partition",
    "id": "1.1.2.6.3",
    "type": "Automated",
    "start_page": 112,
    "end_page": 113,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/log filesystem is only intended for log files, set this option to ensure that users cannot create setuid files in /var/log.",
    "audit_details": "- IF - a separate partition exists for /var/log, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. _Example:_ \n```\n# findmnt -kn /var/log | grep -v nosuid\nNothing should be returned\n```\n",
    "audit_code": "findmnt -kn /var/log | grep -v nosuid",
    "remediation_details": "- IF - a separate partition exists for /var/log. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/log partition. _Example:_ \n```\n<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0\n0\n```\nRun the following command to remount /var/log with the configured options:\n```\n# mount -o remount /var/log\n```\n",
    "remediation_code": "echo '<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0' >> /etc/fstab && mount -o remount /var/log",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var/log partition.\"\"\"\n    # Get mount options for /var/log\n    mount_output = subprocess.check_output(['findmnt', '-kn', '/var/log']).decode('utf-8')\n    \n    # Check if nosuid is present in the options\n    return 'nosuid' not in mount_output\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nosuid option to /var/log partition in /etc/fstab and remounting.\"\"\"\n    # Get the current fstab line for /var/log\n    with open('/etc/fstab', 'r') as fstab:\n        lines = [line for line in fstab.readlines() if line.startswith('/var/log')]\n        if not lines:\n            print(\"No separate partition found for /var/log. Skipping remediation.\")\n            return\n        \n        fstab_line = lines[0].strip()\n        \n    # Add nosuid to the mounting options if it's not already there\n    if 'nosuid' not in fstab_line:\n        new_options_match = re.search(r'(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+([\\S,]+)', fstab_line)\n        if new_options_match:\n            device, mount_point, fstype, options = new_options_match.groups()\n            new_options = f\"{options},nosuid\" if options else \"defaults,nosuid,rw,nodev,noexec,relatime\"\n            new_fstab_line = f\"{device} {mount_point} {fstype} {new_options} 0 0\"\n            with open('/etc/fstab', 'w') as fstab:\n                fstab.write(fstab_line.replace(fstab_line, new_fstab_line, 1))\n            print(f\"Updated /etc/fstab with nosuid option for /var/log partition.\")\n    \n    # Remount /var/log with the new options\n    subprocess.check_call(['mount', '-o', 'remount', '/var/log'])\n    print(\"Remounted /var/log with updated options.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability present. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure noexec option set on /var/log partition",
    "id": "1.1.2.6.4",
    "type": "Automated",
    "start_page": 114,
    "end_page": 115,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/log filesystem is only intended for log files, set this option to ensure that users cannot run executable binaries from /var/log.",
    "audit_details": "- IF - a separate partition exists for /var/log, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example:\n```\n# findmnt -kn /var/log | grep -v noexec\nNothing should be returned\n```",
    "audit_code": "# findmnt -kn /var/log | grep -v noexec",
    "remediation_details": "- IF - a separate partition exists for /var/log. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/log partition.\n\nExample:\n```\n<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n```\nRun the following command to remount /var/log with the configured options:\n```\n# mount -o remount /var/log\n```",
    "remediation_code": "<device> /var/log  <fstype>   defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /var/log",
    "python_script": "\nimport psutil\nimport fileinput\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if noexec option is set on /var/log partition.\"\"\"\n    log_partition = next((p for p in psutil.disk_partitions() if p.mountpoint == '/var/log'), None)\n    if log_partition:\n        if 'noexec' not in log_partition.opts:\n            return True  # Vulnerability present\n    return False  # No separate partition or noexec option already set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting noexec option on /var/log partition.\"\"\"\n    log_partition = next((p for p in psutil.disk_partitions() if p.mountpoint == '/var/log'), None)\n    if log_partition:\n        with fileinput.input('/etc/fstab', inplace=True) as file:\n            for line in file:\n                if log_partition.device in line:\n                    if 'noexec' not in line:\n                        updated_line = line.strip() + ',noexec\\n'\n                        print(f\"Updated fstab line for {log_partition.mountpoint}: {updated_line.strip()}\")\n                    else:\n                        print(f\"Noexec option already set for {log_partition.mountpoint}\")\n                    print(updated_line, end='')\n                else:\n                    print(line, end='')\n        subprocess.run(['mount', '-o', 'remount', log_partition.mountpoint])\n        print(f\"Remounted {log_partition.mountpoint} with updated options\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure nodev option set on /var/log/audit partition",
    "id": "1.1.2.7.2",
    "type": "Automated",
    "start_page": 119,
    "end_page": 120,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nodev mount option specifies that the filesystem cannot contain special devices.",
    "rationale": "Since the /var/log/audit filesystem is not intended to support devices, set this option to ensure that users cannot create a block or character special devices in /var/log/audit.",
    "audit_details": "- IF - a separate partition exists for /var/log/audit, verify that the nodev option is set. Run the following command to verify that the nodev mount option is set. Example: # findmnt -kn /var/log/audit | grep -v nodev Nothing should be returned",
    "audit_code": "# findmnt -kn /var/log/audit | grep -v nodev",
    "remediation_details": "- IF - a separate partition exists for /var/log/audit. Edit the /etc/fstab file and add nodev to the fourth field (mounting options) for the /var/log/audit partition. Example: <device> /var/log/audit  <fstype>  defaults,rw,nosuid,nodev,noexec,relatime 0 0\nRun the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit",
    "remediation_code": "<device> /var/log/audit  <fstype>  defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /var/log/audit",
    "python_script": "\nimport psutil\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nodev option is set on /var/log/audit partition\"\"\"\n    # Check if /var/log/audit is a separate partition\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/var/log/audit':\n            # Verify nodev mount option\n            if 'nodev' in partition.opts:\n                return True  # nodev option is set\n            else:\n                return False  # nodev option is not set\n    return True  # No separate partition, assume compliant by default\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring nodev option is set on /var/log/audit partition\"\"\"\n    # Check if /var/log/audit is a separate partition\n    for partition in psutil.disk_partitions():\n        if partition.mountpoint == '/var/log/audit':\n            # Edit /etc/fstab to add nodev option\n            with open(\"/etc/fstab\", 'r+') as fstab_file:\n                lines = fstab_file.readlines()\n                fstab_file.seek(0)\n                updated = False\n                for line in lines:\n                    if partition.device in line and partition.mountpoint in line:\n                        # Append nodev to mount options if not already present\n                        if 'nodev' not in line:\n                            line_parts = line.split()\n                            line_parts[3] += ',nodev' if 'defaults' in line_parts[3] else ',nodev,defaults'\n                            line = '\\t'.join(line_parts)\n                            print(f\"Appended 'nodev' to mount options for {partition.mountpoint} in /etc/fstab.\")\n                        updated = True\n                    fstab_file.write(line)\n                if not updated:\n                    print(f\"No matching entry found in /etc/fstab for {partition.mountpoint} to update.\")\n                fstab_file.truncate()\n            \n            # Remount /var/log/audit with updated options\n            subprocess.run(['mount', '-o', 'remount', '/var/log/audit'])\n            print(f\"Remounted {partition.mountpoint} with updated options.\")\n            return\n    print(\"/var/log/audit is not a separate partition, no remediation applied.\")\n\n# Example usage\nif not audit_vuln():\n    print(\"Vulnerability found. Running remediation...\")\n    remediate_vuln()\nelse:\n    print(\"/var/log/audit partition is configured with nodev option or is not a separate partition.\")\n"
  },
  {
    "name": "Ensure nosuid option set on /var/log/audit partition",
    "id": "1.1.2.7.3",
    "type": "Automated",
    "start_page": 121,
    "end_page": 122,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nosuid mount option specifies that the filesystem cannot contain setuid files.",
    "rationale": "Since the /var/log/audit filesystem is only intended for variable files such as logs, set this option to ensure that users cannot create setuid files in /var/log/audit.",
    "audit_details": "- IF - a separate partition exists for /var/log/audit, verify that the nosuid option is set. Run the following command to verify that the nosuid mount option is set. Example: # findmnt -kn /var/log/audit | grep -v nosuid Nothing should be returned",
    "audit_code": "# findmnt -kn /var/log/audit | grep -v nosuid",
    "remediation_details": "- IF - a separate partition exists for /var/log/audit. Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/log/audit partition. Example: <device> /var/log/audit  <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0 Run the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit",
    "remediation_code": "Edit the /etc/fstab file and add nosuid to the fourth field (mounting options) for the /var/log/audit partition. After editing, use: # mount -o remount /var/log/audit",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nosuid option is set on /var/log/audit partition.\"\"\"\n    # Execute findmnt command to get mount options for /var/log/audit\n    try:\n        output = subprocess.check_output([\"findmnt\", \"-kn\", \"/var/log/audit\"]).decode(\"utf-8\")\n    except subprocess.CalledProcessError:\n        # If command fails, assume /var/log/audit doesn't have a separate partition or isn't mounted\n        return True  # or raise an exception depending on your policy\n    \n    # Check if nosuid is present in the mount options\n    return \"nosuid\" in output\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding nosuid option to /var/log/audit partition in /etc/fstab and remount.\"\"\"\n    fstab_path = \"/etc/fstab\"\n    mount_point = \"/var/log/audit\"\n    option_to_add = \"nosuid\"\n    \n    # Backup original /etc/fstab (good practice before editing system files)\n    subprocess.run(f\"cp {fstab_path} {fstab_path}.backup\", shell=True, check=True)\n    print(f\"Created backup of {fstab_path} as {fstab_path}.backup\")\n    \n    # Read /etc/fstab, find the line for /var/log/audit, and add nosuid if not already present\n    with open(fstab_path, \"r+\") as fstab_file:\n        lines = fstab_file.readlines()\n        fstab_file.seek(0)  # Return to the beginning of the file\n        \n        for line in lines:\n            if mount_point in line:\n                # Check if nosuid is already present\n                if not re.search(r\"\\bnosuid\\b\", line):\n                    # Add nosuid to the options\n                    new_line = re.sub(r\"(\\w+)\\s+(/var/log/audit)\\s+(\\w+)\", \n                                       rf\"\\g<1> {mount_point} \\g<3>,{option_to_add}\", line)\n                    print(f\"Added 'nosuid' to mount options for {mount_point} in {fstab_path}\")\n                else:\n                    new_line = line\n                    print(f\"'nosuid' is already set for {mount_point} in {fstab_path}\")\n            else:\n                new_line = line\n            \n            fstab_file.write(new_line)\n        \n        # Truncate the file to remove any remaining content from the original file\n        fstab_file.truncate()\n    \n    # Remount /var/log/audit with the updated options\n    subprocess.run(f\"mount -o remount {mount_point}\", shell=True, check=True)\n    print(f\"Remounted {mount_point} with updated options\")\n"
  },
  {
    "name": "Ensure noexec option set on /var/log/audit partition",
    "id": "1.1.2.7.4",
    "type": "Automated",
    "start_page": 123,
    "end_page": 124,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The noexec mount option specifies that the filesystem cannot contain executable binaries.",
    "rationale": "Since the /var/log/audit filesystem is only intended for audit logs, set this option to ensure that users cannot run executable binaries from /var/log/audit.",
    "audit_details": "- IF - a separate partition exists for /var/log/audit, verify that the noexec option is set. Run the following command to verify that the noexec mount option is set. Example: # findmnt -kn /var/log/audit | grep -v noexec Nothing should be returned",
    "audit_code": "# findmnt -kn /var/log/audit | grep -v noexec",
    "remediation_details": "- IF - a separate partition exists for /var/log/audit. Edit the /etc/fstab file and add noexec to the fourth field (mounting options) for the /var/log/audit partition. Example: <device> /var/log/audit  <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0 Run the following command to remount /var/log/audit with the configured options: # mount -o remount /var/log/audit",
    "remediation_code": "<device> /var/log/audit  <fstype> defaults,rw,nosuid,nodev,noexec,relatime 0 0\n# mount -o remount /var/log/audit",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if noexec option is set for /var/log/audit partition\"\"\"\n    try:\n        # Use findmnt with JSON output for easier parsing\n        output = subprocess.check_output([\"findmnt\", \"-J\", \"/var/log/audit\"])\n        # Parse JSON output\n        mounts = subprocess JSONDecoder().decode(output.decode())[\"filesystems\"]\n        for mount in mounts:\n            if mount[\"target\"] == \"/var/log/audit\":\n                # Check if noexec is in the options list\n                return \"noexec\" in mount[\"opts\"]\n        # If no separate partition is found, return True (assuming it's not vulnerable)\n        return True\n    except (subprocess.CalledProcessError, KeyError, IndexError):\n        # If an error occurs, assume the worst (vulnerable)\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Add noexec option to /var/log/audit partition in /etc/fstab and remount\"\"\"\n    fstab_path = \"/etc/fstab\"\n    # Check if /etc/fstab exists and is writable\n    if not os.access(fstab_path, os.W_OK):\n        print(f\"Error: {fstab_path} is not writable. Skipping remediation.\")\n        return\n\n    try:\n        with open(fstab_path, \"r+\") as fstab_file:\n            lines = fstab_file.readlines()\n            # Find the line for /var/log/audit partition\n            audit_line = next((line for line in lines if line.startswith(\"/var/log/audit\")), None)\n            if audit_line:\n                # Add noexec to the options if it's not already there\n                if \"noexec\" not in audit_line:\n                    opts_index = audit_line.find(\"defaults\")  # Assuming defaults is present\n                    if opts_index!= -1:\n                        new_opts = audit_line[opts_index:].strip() + \",noexec\"\n                        new_line = audit_line[:opts_index] + new_opts + \"\\n\"\n                        lines[lines.index(audit_line)] = new_line\n                        fstab_file.seek(0)\n                        fstab_file.write(\"\".join(lines))\n                        fstab_file.truncate()\n                        print(\"Added noexec option to /var/log/audit partition in /etc/fstab.\")\n                    else:\n                        print(\"Warning: Unable to add noexec option (defaults not found).\")\n                else:\n                    print(\"noexec option is already set for /var/log/audit partition in /etc/fstab.\")\n            else:\n                print(\"Warning: Separate partition for /var/log/audit not found in /etc/fstab.\")\n\n        # Remount /var/log/audit with updated options\n        subprocess.run([\"mount\", \"-o\", \"remount\", \"/var/log/audit\"], check=True)\n        print(\"Remounted /var/log/audit with updated options.\")\n    except (subprocess.CalledProcessError, IOError) as e:\n        print(f\"Error during remediation: {e}\")\n"
  },
  {
    "name": "Ensure AppArmor is installed",
    "id": "1.3.1.1",
    "type": "Automated",
    "start_page": 137,
    "end_page": 138,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "AppArmor provides Mandatory Access Controls.",
    "rationale": "Without a Mandatory Access Control system installed only the default Discretionary Access Control system will be available.",
    "audit_details": "Run the following command to verify that apparmor is installed:\n```\n# dpkg-query -s apparmor &>/dev/null && echo \"apparmor is installed\" \napparmor is installed\n```\nRun the following command to verify that apparmor-utils is installed:\n```\n# dpkg-query -s apparmor-utils &>/dev/null && echo \"apparmor-utils is installed\" \napparmor-utils is installed\n```",
    "audit_code": "# dpkg-query -s apparmor &>/dev/null && echo \"apparmor is installed\" \napparmor is installed\n# dpkg-query -s apparmor-utils &>/dev/null && echo \"apparmor-utils is installed\" \napparmor-utils is installed",
    "remediation_details": "Install AppArmor.\n\n```\n# apt install apparmor apparmor-utils\n```",
    "remediation_code": "# apt install apparmor apparmor-utils",
    "python_script": "\nimport apt\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits if AppArmor and apparmor-utils are installed.\"\"\"\n    cache = apt.Cache()\n    return not (cache['apparmor'].is_installed and cache['apparmor-utils'].is_installed)\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the vulnerability by installing AppArmor and apparmor-utils if not already installed.\"\"\"\n    cache = apt.Cache()\n    packages_to_install = [pkg for pkg in ['apparmor', 'apparmor-utils'] if not cache[pkg].is_installed]\n    \n    if packages_to_install:\n        print(f\"Installing missing packages: {', '.join(packages_to_install)}\")\n        cache.update()\n        cache.open(None)\n        cache.commit(packages_to_install, None)\n        print(f\"Successfully installed {', '.join(packages_to_install)}\")\n    else:\n        print(\"AppArmor and apparmor-utils are already installed.\")\n\nif __name__ == \"__main__\":\n    if sys.argv[1] == \"audit\":\n        result = audit_vuln()\n        print(f\"Vulnerable: {result}\")\n    elif sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        print(\"Usage: python script_name.py [audit|remediate]\")\n"
  },
  {
    "name": "Ensure AppArmor is enabled in the bootloader configuration",
    "id": "1.3.1.2",
    "type": "Automated",
    "start_page": 139,
    "end_page": 140,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure AppArmor to be enabled at boot time and verify that it has not been overwritten by the bootloader boot parameters.\n\n_Note: This recommendation is designed around the grub bootloader, if LILO or another_bootloader is in use in your environment enact equivalent settings._",
    "rationale": "AppArmor must be enabled at boot time in your bootloader configuration to ensure that the controls it provides are not overridden.",
    "audit_details": "Run the following commands to verify that all linux lines have the apparmor=1 and\\nsecurity=apparmor parameters set:\\n# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"apparmor=1\"\\nNothing should be returned\\n# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"security=apparmor\"\\nNothing should be returned",
    "audit_code": "# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"apparmor=1\"\\n# grep \"^\\s*linux\" /boot/grub/grub.cfg | grep -v \"security=apparmor\"",
    "remediation_details": "Edit /etc/default/grub and add the apparmor=1 and security=apparmor parameters to the GRUB_CMDLINE_LINUX= line\\n\\nGRUB_CMDLINE_LINUX=\"apparmor=1 security=apparmor\"\\n\\nRun the following command to update the grub2 configuration:\\n\\n# update-grub",
    "remediation_code": "# update-grub",
    "python_script": "\nimport re\nfrom typing import bool, None\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit: Check if AppArmor is enabled in the bootloader configuration.\n    \n    Returns:\n        bool: True if AppArmor is enabled, False otherwise.\n    \"\"\"\n    try:\n        with open('/boot/grub/grub.cfg', 'r') as f:\n            linux_lines = [line for line in f.readlines() if line.lstrip().startswith('linux')]\n            for line in linux_lines:\n                if not re.search(r'apparmor=1', line) or not re.search(r'security=apparmor', line):\n                    return False\n            return True\n    except FileNotFoundError:\n        print(\"Error: /boot/grub/grub.cfg not found.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate: Enable AppArmor in the bootloader configuration.\n    \"\"\"\n    try:\n        with open('/etc/default/grub', 'r+') as f:\n            content = f.readlines()\n            grub_cmdline_linux_found = False\n            for i, line in enumerate(content):\n                if line.lstrip().startswith('GRUB_CMDLINE_LINUX='):\n                    grub_cmdline_linux_found = True\n                    # Append parameters if not already present\n                    if 'apparmor=1' not in line:\n                        content[i] = line.strip() + ' apparmor=1'\n                    if 'security=apparmor' not in line:\n                        content[i] = line.strip() + ' security=apparmor'\n                    break\n            # Add GRUB_CMDLINE_LINUX if it doesn't exist\n            if not grub_cmdline_linux_found:\n                content.append('GRUB_CMDLINE_LINUX=\"apparmor=1 security=apparmor\"\\n')\n            f.seek(0)\n            f.writelines(content)\n            f.truncate()\n        print(\"Updated /etc/default/grub with AppArmor parameters.\")\n    except FileNotFoundError:\n        print(\"Error: /etc/default/grub not found. Cannot remediate.\")\n        return\n    except Exception as e:\n        print(f\"Error remediating: {e}\")\n        return\n    \n    # Update grub configuration\n    try:\n        subprocess.run(['update-grub'], check=True)\n        print(\"Successfully ran `update-grub` command.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to run `update-grub`: {e}\")\n"
  },
  {
    "name": "Ensure all AppArmor Profiles are in enforce or complain mode",
    "id": "1.3.1.3",
    "type": "Automated",
    "start_page": 141,
    "end_page": 142,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "AppArmor profiles define what resources applications are able to access.",
    "rationale": "Security configuration requirements vary from site to site. Some sites may mandate a policy that is stricter than the default policy, which is perfectly acceptable. This item is intended to ensure that any policies that exist on the system are activated.",
    "audit_details": "Run the following command and verify that profiles are loaded, and are in either enforce or complain mode:\n\n```\n# apparmor_status | grep profiles\n```\n\nReview output and ensure that profiles are loaded, and in either enforce or complain mode:\n```\n37 profiles are loaded.\n35 profiles are in enforce mode.\n2 profiles are in complain mode.\n4 processes have profiles defined.\n```\n\nRun the following command and verify no processes are unconfined\n\n```\n# apparmor_status | grep processes\n```\n\nReview the output and ensure no processes are unconfined:\n```\n4 processes have profiles defined.\n4 processes are in enforce mode.\n0 processes are in complain mode.\n0 processes are unconfined but have a profile defined.\n```\n\n",
    "audit_code": "# apparmor_status | grep profiles\n# apparmor_status | grep processes",
    "remediation_details": "Run the following command to set all profiles to enforce mode:\n\n```\n# aa-enforce /etc/apparmor.d/*\n```\n\n_OR_\nRun the following command to set all profiles to complain mode:\n\n```\n# aa-complain /etc/apparmor.d/*\n```\n\n_Note: Any unconfined processes may need to have a profile created or activated for them and then be restarted_",
    "remediation_code": "# aa-enforce /etc/apparmor.d/*\n# aa-complain /etc/apparmor.d/*",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit AppArmor profiles and processes\"\"\"\n    output = subprocess.check_output(['apparmor_status']).decode('utf-8')\n    \n    # Verify profiles are loaded and in enforce or complain mode\n    profiles_loaded = bool(re.search(r'\\d+ profiles are loaded', output))\n    enforce_or_complain = bool(re.search(r'\\d+ profiles are in (enforce|complain) mode', output))\n    \n    # Verify no processes are unconfined\n    unconfined_processes = re.search(r'(\\d+) processes are unconfined but have a profile defined', output)\n    no_unconfined = (unconfined_processes.group(1) == '0') if unconfined_processes else False\n    \n    return all([profiles_loaded, enforce_or_complain, no_unconfined])\n\ndef remediate_vuln(mode: str = 'enforce') -> None:\n    \"\"\"Remediate AppArmor vulnerability by setting all profiles to enforce or complain mode\"\"\"\n    if mode not in ['enforce', 'complain']:\n        raise ValueError(\"Mode must be either 'enforce' or 'complain'\")\n    \n    command = f\"aa-{mode} /etc/apparmor.d/*\"\n    subprocess.run(command, shell=True)\n    print(f\"Set all AppArmor profiles to {mode} mode.\")\n\n# Example usage:\nif not audit_vuln():\n    print(\"Vulnerability found. Remediating...\")\n    remediate_vuln('enforce')  # or 'complain'\nelse:\n    print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure bootloader password is set",
    "id": "1.4.1",
    "type": "Automated",
    "start_page": 146,
    "end_page": 148,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting the boot loader password will require that anyone rebooting the system must enter a password before being able to set command line boot parameters",
    "rationale": "Requiring a boot password upon execution of the boot loader will prevent an unauthorized user from entering boot parameters or changing the boot partition. This prevents users from weakening security (e.g. turning off AppArmor at boot time).",
    "audit_details": "Run the following commands and verify output matches:\n```\n# grep \"^set superusers\" /boot/grub/grub.cfg\nset superusers=\"<username>\"\n# awk -F. '/^\\s*password/ {print $1\".\"$2\".\"$3}' /boot/grub/grub.cfg\npassword_pbkdf2 <username> grub.pbkdf2.sha512\n```",
    "audit_code": "# grep \"^set superusers\" /boot/grub/grub.cfg\nset superusers=\"<username>\"\n# awk -F. '/^\\s*password/ {print $1\".\"$2\".\"$3}' /boot/grub/grub.cfg\npassword_pbkdf2 <username> grub.pbkdf2.sha512",
    "remediation_details": "Create an encrypted password with grub-mkpasswd-pbkdf2:\n```\n# grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64\nEnter password: <password>\nReenter password: <password>\nPBKDF2 hash of your password is <encrypted-password>\n```\nAdd the following into a custom /etc/grub.d configuration file:\n```\ncat <<EOF\nexec tail -n +2 $0\nset superusers=\"<username>\"\npassword_pbkdf2 <username> <encrypted-password>\nEOF\n```\nThe superuser/user information and password should not be contained in the \n```\n/etc/grub.d/00_header file as this file could be overwritten in a package update.\n```\nIf there is a requirement to be able to boot/reboot without entering the password, edit \n```\n/etc/grub.d/10_linux and add --unrestricted to the line CLASS=\n```\nExample:\n```\nCLASS=\"--class gnu-linux --class gnu --class os --unrestricted\"\n```\nRun the following command to update the grub2 configuration:\n```\n# update-grub\n```",
    "remediation_code": "# grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64\nEnter password: <password>\nReenter password: <password>\nPBKDF2 hash of your password is <encrypted-password>\ncat <<EOF\nexec tail -n +2 $0\nset superusers=\"<username>\"\npassword_pbkdf2 <username> <encrypted-password>\nEOF\n# update-grub\n",
    "python_script": "\nimport subprocess\nimport getpass\nimport os\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit bootloader password configuration\"\"\"\n    grub_cfg_path = pathlib.Path(\"/boot/grub/grub.cfg\")\n    \n    # Check if superuser is set\n    with open(grub_cfg_path, 'r') as file:\n        for line in file:\n            if line.startswith(\"set superusers\"):\n                superuser_set = True\n                break\n        else:\n            superuser_set = False\n    \n    # Verify password is set for superuser\n    password_set = False\n    with open(grub_cfg_path, 'r') as file:\n        for line in file:\n            if line.strip().startswith(\"password_pbkdf2\"):\n                password_set = True\n                break\n    \n    return superuser_set and password_set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate bootloader password configuration\"\"\"\n    username = input(\"Enter the desired superuser username: \")\n    password = getpass.getpass(\"Enter the password for the superuser: \")\n    confirm_password = getpass.getpass(\"Re-enter the password for confirmation: \")\n    \n    if password!= confirm_password:\n        print(\"Passwords do not match. Exiting.\")\n        return\n    \n    # Create encrypted password\n    encrypted_password_cmd = f\"grub-mkpasswd-pbkdf2 --iteration-count=600000 --salt=64\"\n    process = subprocess.Popen(encrypted_password_cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    output, error = process.communicate(input=f\"{password}\\n{password}\".encode())\n    if process.returncode!= 0:\n        print(f\"Error creating encrypted password: {error.decode()}\")\n        return\n    encrypted_password = output.decode().splitlines()[-1]\n    \n    print(f\"Created encrypted password for {username}.\")\n    \n    # Add custom configuration to /etc/grub.d/\n    custom_cfg_path = pathlib.Path(f\"/etc/grub.d/99_{username}_superuser\")\n    with open(custom_cfg_path, 'w') as file:\n        file.write(f\"exec tail -n +2 $0\\nset superusers=\\\"{username}\\\"\\npassword_pbkdf2 {username} {encrypted_password}\\n\")\n    os.chmod(custom_cfg_path, 0o755)  # Ensure execute permissions\n    \n    print(f\"Added custom configuration at {custom_cfg_path}.\")\n    \n    # Optionally, allow unrestricted booting\n    allow_unrestricted = input(\"Allow unrestricted booting? (y/N): \")\n    if allow_unrestricted.lower() == 'y':\n        linux_cfg_path = pathlib.Path(\"/etc/grub.d/10_linux\")\n        with open(linux_cfg_path, 'r+') as file:\n            content = file.read()\n            if \"CLASS=\" in content:\n                content = content.replace(\"CLASS=\", \"CLASS=\\\"--class gnu-linux --class gnu --class os --unrestricted\\\"\\n\", 1)\n                file.seek(0)\n                file.write(content)\n                file.truncate()\n        \n        print(\"Enabled unrestricted booting.\")\n    \n    # Update Grub2 configuration\n    update_grub_cmd = \"update-grub\"\n    subprocess.run(update_grub_cmd, shell=True, check=True)\n    \n    print(\"Updated Grub2 configuration.\")\n"
  },
  {
    "name": "Ensure access to bootloader config is configured",
    "id": "1.4.2",
    "type": "Automated",
    "start_page": 149,
    "end_page": 150,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The grub configuration file contains information on boot settings and passwords for unlocking boot options.",
    "rationale": "Setting the permissions to read and write for root only prevents non-root users from seeing the boot parameters or changing them. Non-root users who read the boot parameters may be able to identify weaknesses in security upon boot and be able to exploit them.",
    "audit_details": "Run the following command and verify Uid and Gid are both 0/root and Access is 0600 or more restrictive.\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)'\n/boot/grub/grub.cfg\nAccess: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)'\n/boot/grub/grub.cfg\nAccess: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "Run the following commands to set permissions on your grub configuration:\n```\n# chown root:root /boot/grub/grub.cfg\n# chmod u-x,go-rwx /boot/grub/grub.cfg\n```\n",
    "remediation_code": "# chown root:root /boot/grub/grub.cfg\n# chmod u-x,go-rwx /boot/grub/grub.cfg",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the vulnerability: Ensure access to bootloader config is configured\"\"\"\n    file_path = '/boot/grub/grub.cfg'\n    file_stat = os.stat(file_path)\n    \n    # Check Uid and Gid are both 0/root\n    if file_stat.st_uid!= 0 or file_stat.st_gid!= 0:\n        return True\n    \n    # Check Access is 0600 or more restrictive\n    expected_mode = stat.S_IRUSR | stat.S_IWUSR  # 0600\n    if file_stat.st_mode & ~expected_mode!= 0:\n        return True\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability: Ensure access to bootloader config is configured\"\"\"\n    file_path = '/boot/grub/grub.cfg'\n    \n    # Set owner to root:root\n    try:\n        os.chown(file_path, 0, 0)\n        print(f\"Set owner of '{file_path}' to root:root.\")\n    except OSError as e:\n        print(f\"Failed to set owner: {e}\")\n    \n    # Set permissions to 0600\n    try:\n        os.chmod(file_path, stat.S_IRUSR | stat.S_IWUSR)\n        print(f\"Set permissions of '{file_path}' to 0600 (-rw-------).\")\n    except OSError as e:\n        print(f\"Failed to set permissions: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure address space layout randomization is enabled",
    "id": "1.5.1",
    "type": "Automated",
    "start_page": 152,
    "end_page": 155,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Address space layout randomization (ASLR) is an exploit mitigation technique which randomly arranges the address space of key data areas of a process.",
    "rationale": "Randomly placing virtual memory regions will make it difficult to write memory page exploits as the memory placement will be consistently shifting.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n#### \u2022 kernel.randomize_va_space is set to 2\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(kernel.randomize_va_space=2)\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in \".conf:\n#### \u2022 kernel.randomize_va_space = 2\n### Example:\n# printf \"%s\\n\" \"kernel.randomize_va_space = 2\" >> /etc/sysctl.d/60kernel_sysctl.conf\n\nRun the following command to set the active kernel parameter:\n```\n# sysctl -w kernel.randomize_va_space=2\n```\n### Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "# printf \"%s\\n\" \"kernel.randomize_va_space = 2\" >> /etc/sysctl.d/60kernel_sysctl.conf\n# sysctl -w kernel.randomize_va_space=2\n",
    "python_script": "\nimport subprocess\nimport os\nimport re\n\n# Function to audit the vulnerability\ndef audit_vuln() -> bool:\n    # Check running configuration\n    running_config_check = subprocess.run(['sysctl', 'kernel.randomize_va_space'], stdout=subprocess.PIPE, text=True)\n    running_config_set_correctly = running_config_check.stdout.strip().endswith(\"= 2\")\n\n    # Check durable settings (files)\n    file_check_passed = False\n    for root, dirs, files in os.walk('/etc/sysctl.d'):\n        for file in files:\n            if file.endswith('.conf'):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'r') as f:\n                    for line in f.readlines():\n                        line = line.strip()\n                        if re.match(r'^kernel\\.randomize_va_space\\s*=\\s*2$', line):\n                            file_check_passed = True\n                            break\n                if file_check_passed:\n                    break\n        if file_check_passed:\n            break\n\n    # Also, check /etc/sysctl.conf for completeness\n    if not file_check_passed:\n        file_path = '/etc/sysctl.conf'\n        if os.path.exists(file_path):\n            with open(file_path, 'r') as f:\n                for line in f.readlines():\n                    line = line.strip()\n                    if re.match(r'^kernel\\.randomize_va_space\\s*=\\s*2$', line):\n                        file_check_passed = True\n                        break\n\n    audit_passed = running_config_set_correctly and file_check_passed\n    if audit_passed:\n        print(\" - Running configuration and file settings are correct for kernel.randomize_va_space.\")\n    else:\n        if not running_config_set_correctly:\n            print(f\" - Running configuration check failed. kernel.randomize_va_space is set to {running_config_check.stdout.strip().split('=')[1].strip()}, expected '2'.\")\n        if not file_check_passed:\n            print(\" - File setting check failed. kernel.randomize_va_space is not set to 2 in any.conf file.\")\n    return audit_passed\n\n# Function to remediate the vulnerability\ndef remediate_vuln() -> None:\n    # Set in a configuration file\n    config_file = '/etc/sysctl.d/60kernel_sysctl.conf'\n    if not os.path.exists(config_file):\n        with open(config_file, 'w') as f:\n            f.write(\"kernel.randomize_va_space = 2\")\n        print(f\"Created {config_file} with kernel.randomize_va_space = 2\")\n    else:\n        found_and_correct = False\n        lines = []\n        with open(config_file, 'r+') as f:\n            for line in f.readlines():\n                if re.match(r'^kernel\\.randomize_va_space\\s*=\\s*2$', line.strip()):\n                    found_and_correct = True\n                    lines.append(line)\n                elif re.match(r'^kernel\\.randomize_va_space\\s*=\\s*\\S+$', line):\n                    lines.append(\"kernel.randomize_va_space = 2\\n\")\n                else:\n                    lines.append(line)\n            if not found_and_correct:\n                lines.append(\"kernel.randomize_va_space = 2\\n\")\n            f.seek(0)\n            f.writelines(lines)\n            f.truncate()\n        if found_and_correct:\n            print(f\"kernel.randomize_va_space is already set correctly in {config_file}.\")\n        else:\n            print(f\"Updated/Added kernel.randomize_va_space = 2 in {config_file}.\")\n\n    # Apply the change to the active kernel parameter\n    subprocess.run(['sysctl', '-w', 'kernel.randomize_va_space=2'], stdout=subprocess.PIPE, text=True)\n    print(\"Applied kernel.randomize_va_space = 2 to the running configuration.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Audit Passed. No remediation needed.\")\n    else:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ptrace_scope is restricted",
    "id": "1.5.2",
    "type": "Automated",
    "start_page": 156,
    "end_page": 159,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The ptrace() system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers.",
    "rationale": "If one application is compromised, it would be possible for an attacker to attach to other running processes (e.g. Bash, Firefox, SSH sessions, GPG agent, etc) to extract additional credentials and continue to expand the scope of their attack. Enabling restricted mode will limit the ability of a compromised process to PTRACE_ATTACH on other processes running under the same user. With restricted mode, ptrace will continue to work with root user.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: kernel.yama.ptrace_scope is set to 1\n\nNote: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"kernel.yama.ptrace_scope=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2} /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\/\\.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: kernel.yama.ptrace_scope = 1\n\nExample:\n# printf \"%s\\n\" \"kernel.yama.ptrace_scope = 1\" >> /etc/sysctl.d/60kernel_sysctl.conf\n\nRun the following command to set the active kernel parameter: # sysctl -w kernel.yama.ptrace_scope=1\n\nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "# sysctl -w kernel.yama.ptrace_scope=1",
    "python_script": "\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the vulnerability: Ensure ptrace_scope is restricted.\n    \n    Returns:\n        bool: True if the vulnerability is not present (i.e., ptrace_scope is restricted), False otherwise.\n    \"\"\"\n    # Check running configuration\n    current_value = subprocess.run(['sysctl', '-n', 'kernel.yama.ptrace_scope'], \n                                   stdout=subprocess.PIPE, text=True).stdout.strip()\n    if current_value!= '1':\n        print(f\"- 'kernel.yama.ptrace_scope' is incorrectly set to '{current_value}' in the running configuration and should have a value of: '1'\")\n        # Check durable settings in configuration files\n        config_files = subprocess.run(['systemd-sysctl', '--cat-config'], \n                                      stdout=subprocess.PIPE, text=True).stdout.splitlines()\n        config_files = [line.strip() for line in config_files if line.strip()]\n        for file in config_files:\n            if os.path.isfile(file):\n                with open(file, 'r') as f:\n                    for line in f:\n                        if line.strip().startswith('kernel.yama.ptrace_scope='):\n                            if line.strip().split('=')[1]!= '1':\n                                print(f\"- 'kernel.yama.ptrace_scope' is incorrectly set to '{line.strip().split('=')[1]}' in '{file}' and should have a value of: '1'\")\n                                return False\n        print(\"- 'kernel.yama.ptrace_scope' is not set in an included file ** Note: May be set in a file that's ignored by load procedure **\")\n        return False\n    print(f\"- 'kernel.yama.ptrace_scope' is correctly set to '{current_value}' in the running configuration\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability: Ensure ptrace_scope is restricted.\n    \"\"\"\n    # Append the required setting to a configuration file\n    config_file = '/etc/sysctl.d/60kernel_sysctl.conf'\n    with open(config_file, 'a') as f:\n        f.write('kernel.yama.ptrace_scope = 1\\n')\n    print(f\"Appended 'kernel.yama.ptrace_scope = 1' to '{config_file}'\")\n    \n    # Update the active kernel parameter\n    subprocess.run(['sysctl', '-w', 'kernel.yama.ptrace_scope=1'])\n    print(\"Updated active kernel parameter: kernel.yama.ptrace_scope=1\")\n\nif __name__ == '__main__':\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure core dumps are restricted",
    "id": "1.5.3",
    "type": "Automated",
    "start_page": 160,
    "end_page": 162,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A core dump is the memory of an executable program. It is generally used to determine why a program aborted. It can also be used to glean confidential information from a core file. The system provides the ability to set a soft limit for core dumps, but this can be overridden by the user.",
    "rationale": "Setting a hard limit on core dumps prevents users from overriding the soft variable. If core dumps are required, consider setting limits for user groups (see limits.conf(5) ). In addition, setting the fs.suid_dumpable variable to 0 will prevent setuid programs from dumping core.",
    "audit_details": "Run the following command and verify output matches:\n# grep -Ps -- '^\\\b*\\h*hard\\h+core\\h+0\\b' /etc/security/limits.conf\n/etc/security/limits.d/*\n* hard core 0\n\nRun the following script to verify fs.suid_dumpable = 0: Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n### \u2022 fs.suid_dumpable is set to 0\n\n## Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"fs.suid_dumpable=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\b*([^#\n\r]+|#\\s*/[^#\n\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\s*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\s*$l_kpname\\s*=\\s*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\s*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Add the following line to /etc/security/limits.conf or a /etc/security/limits.d/* file:\n* hard core 0\n\n## Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n### \u2022 fs.suid_dumpable = 0\n\n## Example:\n# printf \"%s\\n\" \"fs.suid_dumpable = 0\" >> /etc/sysctl.d/60-fs_sysctl.conf\n\nRun the following command to set the active kernel parameter:\n# sysctl -w fs.suid_dumpable=0\n\n## Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten -IF- systemd-coredump is installed: edit /etc/systemd/coredump.conf and add/modify the following lines:\nStorage=none\nProcessSizeMax=0\n\nRun the command:\nsystemctl daemon-reload",
    "remediation_code": "None",
    "python_script": "\nimport pathlib\nimport subprocess\nimport configparser\n\ndef audit_vuln() -> bool:\n    # 1. Verify `hard core 0` is set in `/etc/security/limits.conf` or `/etc/security/limits.d/*`\n    limits_conf = pathlib.Path('/etc/security/limits.conf')\n    limits_d_dir = pathlib.Path('/etc/security/limits.d/')\n    \n    hard_core_set = False\n    if limits_conf.exists():\n        with open(limits_conf, 'r') as f:\n            for line in f.readlines():\n                if line.strip() == '* hard core 0':\n                    hard_core_set = True\n                    break\n                    \n    if not hard_core_set and limits_d_dir.exists():\n        for file in limits_d_dir.iterdir():\n            if file.is_file():\n                with open(file, 'r') as f:\n                    for line in f.readlines():\n                        if line.strip() == '* hard core 0':\n                            hard_core_set = True\n                            break\n            if hard_core_set:\n                break\n                \n    # 2. Check if `fs.suid_dumpable = 0` is set in the running kernel configuration and in a config file\n    fs_suid_dumpable_set = subprocess.run(['sysctl', 'fs.suid_dumpable'], stdout=subprocess.PIPE, text=True)\n    fs_suid_dumpable_set = fs_suid_dumpable_set.stdout.strip().endswith('= 0')\n    \n    sysctl_conf = pathlib.Path('/etc/sysctl.conf')\n    sysctl_d_dir = pathlib.Path('/etc/sysctl.d/')\n    fs_suid_dumpable_config_set = False\n    \n    if sysctl_conf.exists():\n        with open(sysctl_conf, 'r') as f:\n            for line in f.readlines():\n                if line.strip() == 'fs.suid_dumpable = 0':\n                    fs_suid_dumpable_config_set = True\n                    break\n                    \n    if not fs_suid_dumpable_config_set and sysctl_d_dir.exists():\n        for file in sysctl_d_dir.iterdir():\n            if file.is_file() and file.suffix == '.conf':\n                with open(file, 'r') as f:\n                    for line in f.readlines():\n                        if line.strip() == 'fs.suid_dumpable = 0':\n                            fs_suid_dumpable_config_set = True\n                            break\n            if fs_suid_dumpable_config_set:\n                break\n                \n    return hard_core_set and fs_suid_dumpable_set and fs_suid_dumpable_config_set\n\n\ndef remediate_vuln() -> None:\n    # 1. Add `* hard core 0` to `/etc/security/limits.conf` or a file in `/etc/security/limits.d/`\n    limits_d_dir = pathlib.Path('/etc/security/limits.d/')\n    limits_d_dir.mkdir(parents=True, exist_ok=True)\n    file_to_edit = limits_d_dir / '99-core_limits.conf'\n    with open(file_to_edit, 'w') as f:\n        f.write('* hard core 0\\n')\n    print(f\"Added '* hard core 0' to {file_to_edit}\")\n    \n    # 2. Set `fs.suid_dumpable = 0` in `/etc/sysctl.conf` or a file in `/etc/sysctl.d/` and apply the change\n    sysctl_d_dir = pathlib.Path('/etc/sysctl.d/')\n    sysctl_d_dir.mkdir(parents=True, exist_ok=True)\n    file_to_edit = sysctl_d_dir / '60-fs_sysctl.conf'\n    with open(file_to_edit, 'w') as f:\n        f.write('fs.suid_dumpable = 0\\n')\n    print(f\"Set 'fs.suid_dumpable = 0' in {file_to_edit}\")\n    \n    subprocess.run(['sysctl', '-w', 'fs.suid_dumpable=0'])\n    print(\"Applied 'fs.suid_dumpable=0' to the running kernel configuration\")\n    \n    # 3. (conditionally) Modify `/etc/systemd/coredump.conf` if `systemd-coredump` is installed\n    systemd_coredumpInstalled = pathlib.Path('/usr/lib/systemd/systemd-coredump').exists()\n    if systemd_coredumpInstalled:\n        coredump_conf = pathlib.Path('/etc/systemd/coredump.conf')\n        config = configparser.ConfigParser()\n        config.read(coredump_conf)\n        \n        if not config.has_section('Coredump'):\n            config.add_section('Coredump')\n            \n        config.set('Coredump', 'Storage', 'none')\n        config.set('Coredump', 'ProcessSizeMax', '0')\n        \n        with open(coredump_conf, 'w') as configfile:\n            config.write(configfile)\n        print(f\"Modified {coredump_conf} with 'Storage=none' and 'ProcessSizeMax=0'\")\n        \n        subprocess.run(['systemctl', 'daemon-reload'])\n        print(\"Reloaded systemd daemon\")\n"
  },
  {
    "name": "Ensure prelink is not installed",
    "id": "1.5.4",
    "type": "Automated",
    "start_page": 163,
    "end_page": 164,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "prelink is a program that modifies ELF shared libraries and ELF dynamically linked binaries in such a way that the time needed for the dynamic linker to perform relocations at startup significantly decreases.",
    "rationale": "The prelinking feature can interfere with the operation of AIDE, because it changes binaries. Prelinking can also increase the vulnerability of the system if a malicious user is able to compromise a common library such as libc.",
    "audit_details": "Verify prelink is not installed:\n\n# dpkg-query -s prelink &>/dev/null && echo \"prelink is installed\"\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s prelink &>/dev/null && echo \"prelink is installed\"",
    "remediation_details": "Run the following command to restore binaries to normal:\n\n# prelink -ua\n\nUninstall prelink using the appropriate package manager or manual installation:\n\n# apt purge prelink",
    "remediation_code": "# prelink -ua\n\n# apt purge prelink",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if prelink is installed\"\"\"\n    try:\n        # Use subprocess to run dpkg-query, if prelink is installed, returncode will be 0\n        subprocess.check_output(['dpkg-query', '-s', 'prelink'])\n        return True\n    except subprocess.CalledProcessError:\n        # If prelink is not installed, dpkg-query will return a non-zero exit code\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Restore binaries to normal and uninstall prelink\"\"\"\n    if audit_vuln():  # Only remediate if prelink is installed\n        # Restore binaries to normal using prelink -ua\n        subprocess.run(['prelink', '-ua'])\n        print(\"Restored binaries to normal.\")\n        \n        # Uninstall prelink using apt purge\n        subprocess.run(['apt', 'purge', '-y', 'prelink'])\n        print(\"Uninstalled prelink using apt purge.\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"audit\":\n        result = audit_vuln()\n        print(f\"Prelink installed: {result}\")\n    elif len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        print(\"Usage: python script_name.py [audit|remediate]\")\n"
  },
  {
    "name": "Ensure Automatic Error Reporting is not enabled",
    "id": "1.5.5",
    "type": "Automated",
    "start_page": 165,
    "end_page": 166,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Apport Error Reporting Service automatically generates crash reports for debugging",
    "rationale": "Apport collects potentially sensitive data, such as core dumps, stack traces, and log files. They can contain passwords, credit card numbers, serial numbers, and other private material.",
    "audit_details": "Run the following command to verify that the Apport Error Reporting Service is not enabled:\n```\n# dpkg-query -s apport &> /dev/null && grep -Psi -'^\th*enabled\th*=\th*[^0]\b' /etc/default/apport\n```\nNothing should be returned\nRun the following command to verify that the apport service is not active:\n```\n# systemctl is-active apport.service | grep '^active'\n```\nNothing should be returned",
    "audit_code": "# dpkg-query -s apport &> /dev/null && grep -Psi -'^\th*enabled\th*=\th*[^0]\b' /etc/default/apport\n# systemctl is-active apport.service | grep '^active'",
    "remediation_details": "Edit /etc/default/apport and add or edit the enabled parameter to equal 0:\n```\nenabled=0\n```\nRun the following commands to stop and mask the apport service\n```\n# systemctl stop apport.service\n# systemctl mask apport.service\n```\n**- OR -**\nRun the following command to remove the apport package:\n```\n# apt purge apport\n```",
    "remediation_code": "# systemctl stop apport.service\n# systemctl mask apport.service\n# apt purge apport",
    "python_script": "\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    # 1. Check Apport package and enabled parameter\n    try:\n        # Using subprocess for the initial check, aiming to replace with Pythonic alternatives where directly possible\n        subprocess.check_output(['dpkg-query', '-s', 'apport'], stderr=subprocess.DEVNULL)\n        with open('/etc/default/apport', 'r') as file:\n            for line in file:\n                if line.strip().lower().startswith('enabled') and line.strip().split('=')[1].strip()!= '0':\n                    print(\"Apport enabled parameter is not set to 0.\")\n                    return True  # Vulnerability present\n    except subprocess.CalledProcessError:\n        pass  # Apport package not found, consider not vulnerable regarding this check\n\n    # 2. Check if Apport service is active\n    service_status = subprocess.check_output(['systemctl', 'is-active', 'apport.service']).decode('utf-8').strip()\n    if service_status == 'active':\n        print(\"Apport service is active.\")\n        return True  # Vulnerability present\n\n    return False  # No vulnerability found from these checks\n\ndef remediate_vuln() -> None:\n    # **Preferred Approach**\n    # Stop Apport service\n    subprocess.run(['systemctl', 'stop', 'apport.service'])\n    print(\"Stopped apport.service.\")\n    \n    # Mask Apport service\n    subprocess.run(['systemctl', 'mask', 'apport.service'])\n    print(\"Masked apport.service.\")\n    \n    # Remove Apport package\n    subprocess.run(['apt', 'purge', 'apport', '-y'])  # Assuming -y for non-interactive\n    print(\"Purged Apport package.\")\n    \n    # **Alternative Approach (Commented Out)**\n    # with open('/etc/default/apport', 'r+') as file:\n    #     content = file.readlines()\n    #     file.seek(0)\n    #     for line in content:\n    #         if not line.strip().lower().startswith('enabled'):\n    #             file.write(line)\n    #         else:\n    #             file.write('enabled=0\\n')\n    #     file.truncate()\n    # print(\"Edited /etc/default/apport to set enabled=0.\")\n    # subprocess.run(['systemctl', 'stop', 'apport.service'])\n    # print(\"Stopped apport.service.\")\n    # subprocess.run(['systemctl', 'mask', 'apport.service'])\n    # print(\"Masked apport.service.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure message of the day is configured properly",
    "id": "1.6.1",
    "type": "Automated",
    "start_page": 168,
    "end_page": 169,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \"uname -a\" command once they have logged in.",
    "audit_details": "Run the following command and verify that the contents match site policy:\n\n# cat /etc/motd\n\nRun the following command and verify no results are returned:\n\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/motd",
    "audit_code": "# cat /etc/motd\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/motd",
    "remediation_details": "Edit the /etc/motd file with the appropriate contents according to your site policy, remove any instances of \\m, \\r, \\s, \\v or references to the OS platform\n\n- OR -\n\n- IF - the motd is not used, this file can be removed. Run the following command to remove the motd file:\n\n# rm /etc/motd",
    "remediation_code": "# rm /etc/motd",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits /etc/motd for compliance.\n    \n    Checks if /etc/motd contains OS information.\n    \n    Returns:\n    bool: True if vulnerable, False otherwise.\n    \"\"\"\n    motd_path = \"/etc/motd\"\n    if not os.path.exists(motd_path):\n        # If the file doesn't exist, it's not vulnerable\n        return False\n    \n    with open(motd_path, 'r') as file:\n        motd_content = file.read()\n    \n    os_info_patterns = [r'\\\\v', r'\\\\r', r'\\\\m', r'\\\\s']\n    os_release_id = subprocess.run(['grep', '^ID=', '/etc/os-release'], stdout=subprocess.PIPE, text=True)\n    if os_release_id.stdout:\n        os_info_patterns.append(os_release_id.stdout.split('=')[1].strip().strip('\"'))\n    \n    for pattern in os_info_patterns:\n        if pattern in motd_content:\n            # Vulnerable if any pattern is found\n            return True\n    \n    # Not vulnerable if no patterns are found\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate /etc/motd vulnerability.\n    \n    Offers two remediation strategies: editing the file to remove OS information\n    or removing the file if not used. Defaults to editing to uphold site policy.\n    \"\"\"\n    motd_path = \"/etc/motd\"\n    \n    # Default site policy message (TO BE CUSTOMIZED)\n    site_policy_message = \"Authorized access only. All activities are monitored and recorded.\"\n    \n    if os.path.exists(motd_path):\n        with open(motd_path, 'r+') as file:\n            motd_content = file.read()\n            os_info_patterns = [r'\\\\v', r'\\\\r', r'\\\\m', r'\\\\s']\n            os_release_id = subprocess.run(['grep', '^ID=', '/etc/os-release'], stdout=subprocess.PIPE, text=True)\n            if os_release_id.stdout:\n                os_info_patterns.append(os_release_id.stdout.split('=')[1].strip().strip('\"'))\n            \n            for pattern in os_info_patterns:\n                motd_content = motd_content.replace(pattern, '')\n            \n            # Write new content, ensuring site policy is included\n            file.seek(0)\n            file.write(site_policy_message + '\\n' + motd_content)\n            file.truncate()\n        print(f\"Edited '{motd_path}' to remove OS information and ensure site policy compliance.\")\n    else:\n        # If the file doesn't exist, no action is needed, but for completeness...\n        print(f\"No '{motd_path}' file found. No action taken.\")\n    \n    # Optional removal strategy (uncomment to use, but beware: this will permanently remove the file without backup)\n    # if os.path.exists(motd_path):\n    #     os.remove(motd_path)\n    #     print(f\"Removed '{motd_path}' as per remediation strategy.\")\n"
  },
  {
    "name": "Ensure local login warning banner is configured properly",
    "id": "1.6.2",
    "type": "Automated",
    "start_page": 170,
    "end_page": 171,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals.\n\nUnix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture\n\\r - operating system release \\s - operating system name \\v - operating system version\n\n- or the operating system's name",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \" uname -a \" command once they have logged in.",
    "audit_details": "Run the following command and verify that the contents match site policy:\n\n```\n# cat /etc/issue\n```\n\nRun the following command and verify no results are returned:\n```\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue\n```\nPage 169",
    "audit_code": "# cat /etc/issue\n\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue",
    "remediation_details": "Edit the /etc/issue file with the appropriate contents according to your site policy, remove any instances of \\m, \\r, \\s, \\v or references to the OS platform\n_Example:_\n```\n# echo \"Authorized users only. All activity may be monitored and reported.\" >/etc/issue\n```\n",
    "remediation_code": "# echo \"Authorized users only. All activity may be monitored and reported.\" >/etc/issue",
    "python_script": "\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if /etc/issue matches site policy and does not contain OS info.\"\"\"\n    # Manual verification of site policy compliance is required\n    print(\"Manually verify /etc/issue contents match your site's security policy.\")\n    \n    # Check for OS information patterns in /etc/issue\n    with open(\"/etc/issue\", 'r') as file:\n        issue_content = file.read()\n        patterns = [r\"\\\\(v|r|m|s)\", re.escape(get_os_name())]\n        for pattern in patterns:\n            if re.search(pattern, issue_content, re.IGNORECASE):\n                print(f\"OS information pattern found in /etc/issue: {pattern}\")\n                return False\n    return True\n\ndef remediate_vuln(custom_message: str = \"Authorized users only. All activity may be monitored and reported.\"):\n    \"\"\"Remediate vulnerability by editing /etc/issue with a custom or default message.\"\"\"\n    # Remove existing OS info patterns and write new message\n    with open(\"/etc/issue\", 'w') as file:\n        file.write(custom_message)\n    print(f\"Successfully wrote custom message to /etc/issue: '{custom_message}'\")\n\ndef get_os_name() -> str:\n    \"\"\"Retrieve the OS name from /etc/os-release.\"\"\"\n    with open(\"/etc/os-release\", 'r') as file:\n        for line in file:\n            if line.startswith(\"ID=\"):\n                return line.split(\"=\")[1].strip().strip('\"')\n    return \"\"\n\n# Example usage\nif __name__ == \"__main__\":\n    audit_result = audit_vuln()\n    if not audit_result:\n        remediate_vuln()  # Uses default message, or pass a custom message as an argument\n"
  },
  {
    "name": "Ensure remote login warning banner is configured properly",
    "id": "1.6.3",
    "type": "Automated",
    "start_page": 172,
    "end_page": 173,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services. Unix-based systems have typically displayed information about the OS release and patch level upon logging in to the system. This information can be useful to developers who are developing software for a particular OS platform. If mingetty(8) supports the following options, they display operating system information: \\m - machine architecture \\r - operating system release \\s - operating system name \\v - operating system version",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place. Displaying OS and patch level information in login banners also has the side effect of providing detailed system information to attackers attempting to target specific exploits of a system. Authorized users can easily get this information by running the \"uname -a\" command once they have logged in.",
    "audit_details": "Run the following command and verify that the contents match site policy:\n# cat /etc/issue.net\n\nRun the following command and verify no results are returned:\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue.net",
    "audit_code": "# cat /etc/issue.net\n\n# grep -E -i \"(\\\\v|\\\\r|\\\\m|\\\\s|$(grep '^ID=' /etc/os-release | cut -d= f2 | sed -e 's/\"//g'))\" /etc/issue.net",
    "remediation_details": "Edit the /etc/issue.net file with the appropriate contents according to your site policy, remove any instances of \\m, \\r, \\s, \\v or references to the OS platform.\nExample:\n# echo \"Authorized users only. All activity may be monitored and reported.\" >/etc/issue.net",
    "remediation_code": "# echo \"Authorized users only. All activity may be monitored and reported.\" >/etc/issue.net",
    "python_script": "\nimport os\nimport re\n\n# Site policy example (update according to your organization's policy)\nSITE_POLICY_CONTENTS = \"Authorized users only. All activity may be monitored and reported.\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability related to /etc/issue.net contents\"\"\"\n    issue_net_path = \"/etc/issue.net\"\n    if not os.path.exists(issue_net_path):\n        print(f\"File {issue_net_path} does not exist.\")\n        return True  # Considered vulnerable if file does not exist\n\n    with open(issue_net_path, 'r') as file:\n        contents = file.read()\n\n    # Simplified site policy match (update for more complex matching if needed)\n    if contents.strip()!= SITE_POLICY_CONTENTS:\n        print(f\"Contents of {issue_net_path} do not match site policy.\")\n        return True\n\n    # Check for specific strings\n    vulnerable_strings = [r'\\\\v', r'\\\\r', r'\\\\m', r'\\\\s']\n    try:\n        with open(\"/etc/os-release\", 'r') as os_release:\n            for line in os_release:\n                if line.startswith(\"ID=\"):\n                    os_id = line.split(\"=\")[1].strip().strip('\"')\n                    vulnerable_strings.append(re.escape(os_id))\n                    break\n    except FileNotFoundError:\n        print(\"Could not find /etc/os-release to determine OS ID.\")\n\n    for string in vulnerable_strings:\n        if re.search(string, contents, re.IGNORECASE):\n            print(f\"Vulnerable string '{string}' found in {issue_net_path}.\")\n            return True\n\n    print(f\"No issues found with {issue_net_path}.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability by updating /etc/issue.net contents\"\"\"\n    issue_net_path = \"/etc/issue.net\"\n    \n    # Backup original file\n    backup_path = f\"{issue_net_path}.ori\"\n    try:\n        with open(issue_net_path, 'r') as original, open(backup_path, 'w') as backup:\n            backup.write(original.read())\n        print(f\"Backed up {issue_net_path} to {backup_path}.\")\n    except Exception as e:\n        print(f\"Failed to backup {issue_net_path}: {e}\")\n\n    # Update contents\n    try:\n        with open(issue_net_path, 'w') as updated_file:\n            updated_file.write(SITE_POLICY_CONTENTS)\n        print(f\"Updated contents of {issue_net_path} to match site policy.\")\n    except Exception as e:\n        print(f\"Failed to update {issue_net_path}: {e}\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure access to /etc/motd is configured",
    "id": "1.6.4",
    "type": "Automated",
    "start_page": 174,
    "end_page": 175,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/motd file are displayed to users after login and function as a message of the day for authenticated users.",
    "rationale": "- IF - the /etc/motd file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information.",
    "audit_details": "Run the following command and verify that if /etc/motd exists, Access is 644 or more restrictive, Uid and Gid are both 0/root:\n```\n# [ -e /etc/motd ] && stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/%G)' /etc/motd\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)\n -- OR -Nothing is returned\n``",
    "audit_code": "# [ -e /etc/motd ] && stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/%G)' /etc/motd",
    "remediation_details": "Run the following commands to set mode, owner, and group on /etc/motd:\n```\n# chown root:root $(readlink -e /etc/motd)\n# chmod u-x,go-wx $(readlink -e /etc/motd)\n```\n**- OR -**\nRun the following command to remove the /etc/motd file:\n```\n# rm /etc/motd\n``",
    "remediation_code": "# chown root:root $(readlink -e /etc/motd)\n# chmod u-x,go-wx $(readlink -e /etc/motd)\n# rm /etc/motd",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit /etc/motd access configuration\"\"\"\n    motd_path = '/etc/motd'\n    if not os.path.exists(motd_path):\n        return True  # File does not exist, considered compliant\n    \n    motd_stat = os.stat(motd_path)\n    access_mode = stat.filemode(motd_stat.st_mode)\n    uid = motd_stat.st_uid\n    gid = motd_stat.st_gid\n    \n    if (access_mode!= '-rw-r--r--' and not access_mode.startswith('-rw-------')) or uid!= 0 or gid!= 0:\n        return False  # Non-compliant access mode, Uid, or Gid\n    \n    return True  # Compliant\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate /etc/motd access configuration\"\"\"\n    motd_path = '/etc/motd'\n    \n    # Attempt to configure access before considering removal\n    if os.path.exists(motd_path):\n        try:\n            os.chown(motd_path, 0, 0)  # Set owner and group to root\n            print(f\"Set owner and group of `{motd_path}` to root.\")\n            \n            # Set access mode to 644 if it's not already more restrictive\n            if not stat.S_ISREG(os.stat(motd_path).st_mode) or stat.filemode(os.stat(motd_path).st_mode) not in ['-rw-r--r--', '-rw-------']:\n                os.chmod(motd_path, 0o644)\n                print(f\"Set access mode of `{motd_path}` to 644.\")\n            return\n        except OSError as e:\n            print(f\"Error configuring `{motd_path}` access: {e}\")\n    \n    # If the file does not exist or access configuration failed, consider removal (with caution)\n    if os.path.exists(motd_path):\n        try:\n            os.remove(motd_path)\n            print(f\"Removed `{motd_path}` as access configuration could not be ensured.\")\n        except OSError as e:\n            print(f\"Error removing `{motd_path}`: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"/etc/motd access configuration is not compliant. Remediation required.\")\n        remediate_vuln()\n    else:\n        print(\"/etc/motd access configuration is compliant. No action required.\")\n"
  },
  {
    "name": "Ensure access to /etc/issue is configured",
    "id": "1.6.5",
    "type": "Automated",
    "start_page": 176,
    "end_page": 177,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue file are displayed to users prior to login for local terminals.",
    "rationale": "IF the /etc/issue file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information.",
    "audit_details": "Run the following command and verify Access is 644 or more restrictive and Uid and Gid are both 0/root:\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue",
    "remediation_details": "Run the following commands to set mode, owner, and group on /etc/issue:\n```\n# chown root:root $(readlink -e /etc/issue)\n# chmod u-x,go-wx $(readlink -e /etc/issue)\n```\n",
    "remediation_code": "# chown root:root $(readlink -e /etc/issue)\n# chmod u-x,go-wx $(readlink -e /etc/issue)",
    "python_script": "\nimport os\nimport shutil\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit access to /etc/issue.\"\"\"\n    issue_path = os.path.realpath('/etc/issue')\n    issue_stat = os.stat(issue_path)\n    \n    # Check access mode (644 or more restrictive)\n    desired_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    if issue_stat.st_mode & ~stat.S_IFMT!= desired_mode:\n        print(f\"Access mode of {issue_path} is not 644 or more restrictive. Current mode: {stat.filemode(issue_stat.st_mode)}\")\n        return False\n    \n    # Verify UID and GID are both 0 (root)\n    if issue_stat.st_uid!= 0 or issue_stat.st_gid!= 0:\n        print(f\"Owner or Group of {issue_path} is not root:root. Current Owner: {issue_stat.st_uid}, Group: {issue_stat.st_gid}\")\n        return False\n    \n    print(f\"Access to {issue_path} is configured correctly: 644, Uid: 0, Gid: 0\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate access to /etc/issue.\"\"\"\n    issue_path = os.path.realpath('/etc/issue')\n    \n    # Set owner and group to root\n    try:\n        shutil.chown(issue_path, user='root', group='root')\n        print(f\"Set owner and group of {issue_path} to root:root.\")\n    except Exception as e:\n        print(f\"Failed to set owner/group of {issue_path}: {e}\")\n    \n    # Set mode to 644\n    desired_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    try:\n        os.chmod(issue_path, desired_mode)\n        print(f\"Set mode of {issue_path} to 644 (rw-r--r--).\")\n    except Exception as e:\n        print(f\"Failed to set mode of {issue_path}: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        # You may want to audit again after remediation for verification\n        audit_vuln()\n"
  },
  {
    "name": "Ensure access to /etc/issue.net is configured",
    "id": "1.6.6",
    "type": "Automated",
    "start_page": 178,
    "end_page": 179,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The contents of the /etc/issue.net file are displayed to users prior to login for remote connections from configured services.",
    "rationale": "IF the /etc/issue.net file does not have the correct access configured, it could be modified by unauthorized users with incorrect or misleading information.",
    "audit_details": "Run the following command and verify Access is 644 or more restrictive and Uid and Gid are both 0/root:\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue.net\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root)  Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/issue.net",
    "remediation_details": "Run the following commands to set mode, owner, and group on /etc/issue.net:\n```\n# chown root:root $(readlink -e /etc/issue.net)\n# chmod u-x,go-wx $(readlink -e /etc/issue.net)\n```\n",
    "remediation_code": "# chown root:root $(readlink -e /etc/issue.net)\n# chmod u-x,go-wx $(readlink -e /etc/issue.net)",
    "python_script": "\nimport os\nimport stat\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure access to /etc/issue.net is configured.\"\"\"\n    file_path = Path('/etc/issue.net')\n    if not file_path.exists():\n        print(f\"File '{file_path}' does not exist.\")\n        return False\n\n    file_stat = file_path.stat()\n    if file_stat.st_mode!= stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH:\n        print(f\"Permissions of '{file_path}' are not 644 or more restrictive.\")\n        return False\n\n    if file_stat.st_uid!= 0 or file_stat.st_gid!= 0:\n        print(f\"Ownership of '{file_path}' is not root:root.\")\n        return False\n\n    print(f\"All checks passed for '{file_path}'.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Configure access to /etc/issue.net.\"\"\"\n    file_path = Path('/etc/issue.net')\n    if not file_path.exists():\n        print(f\"File '{file_path}' does not exist, cannot remediate.\")\n        return\n\n    # Set ownership to root:root\n    try:\n        file_path.chown(0, 0)\n        print(f\"Set ownership of '{file_path}' to root:root.\")\n    except PermissionError:\n        print(f\"Failed to set ownership of '{file_path}' to root:root: Permission denied.\")\n\n    # Set permissions to 644 (or more restrictive if already set)\n    desired_perms = stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH\n    current_perms = stat.S_IMODE(file_path.stat().st_mode)\n    if (current_perms & 0o777)!= desired_perms:\n        try:\n            file_path.chmod(desired_perms)\n            print(f\"Set permissions of '{file_path}' to 644.\")\n        except PermissionError:\n            print(f\"Failed to set permissions of '{file_path}' to 644: Permission denied.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        audit_vuln()  # Re-audit after remediation\n"
  },
  {
    "name": "Ensure GDM login banner is configured",
    "id": "1.7.2",
    "type": "Automated",
    "start_page": 183,
    "end_page": 186,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems.",
    "rationale": "Warning messages inform users who are attempting to login to the system of their legal status regarding the system and must include the name of the organization that owns the system and any monitoring policies that are in place.",
    "audit_details": " - IF - GDM is installed: Run the following script to verify that the text banner on the login screen is enabled and set: \n\n```bash\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_gdmfile=\"$(grep -Prils '^\n*banner-message-enable\\b' /etc/dconf/db/*.d)\"\n   if [ -n \"$l_gdmfile\" ]; then\n     # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n     l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n     # Check if banner message is enabled\n     if grep -Pisq '^\n*banner-message-enable=true\\b' \"$l_gdmfile\"; then\n      l_output=\"$l_output\\n - The \\\"banner-message-enable\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option is not enabled\"\n     fi\n     l_lsbt=\"$(grep -Pios '^\n*banner-message-text=.*$' \"$l_gdmfile\")\"\n     if [ -n \"$l_lsbt\" ]; then\n      l_output=\"$l_output\\n - The \\\"banner-message-text\\\" option is set in \\\"$l_gdmfile\\\"\\n - banner-message-text is set to:\\n - \\\"$l_lsbt\\\"\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"banner-message-text\\\" option is not set\"\n     fi\n     if grep -Pq \"^\n*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n      l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist\"\n     fi\n     if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n      l_output=\"$l_output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n     else\n      l_output2=\"$l_output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - The \\\"banner-message-enable\\\" option isn't configured\"\n   fi\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n- Audit result:\\n *** PASS ***\\n\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "audit_code": "```bash\n#!/usr/bin/env bash\n{...}   # The provided audit script.",
    "remediation_details": " - IF - GDM is installed: Run the following script to set and enable the text banner message on the login screen:\n\n```bash\n#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_gdmprofile=\"gdm\" # Set this to desired profile name IaW Local site policy\n   l_bmessage=\"'Authorized uses only. All activity may be monitored and reported'\" # Set to desired banner message\n   if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n     echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n     echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfiledb:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n   fi\n   if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n     echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\\"\"\n     mkdir /etc/dconf/db/$l_gdmprofile.d/\n   fi\n   if ! grep -Piq '^\n*banner-message-enable\\h*=\\h*true\\b' /etc/dconf/db/$l_gdmprofile.d/*; then\n     echo \"creating gdm keyfile for machine-wide settings\"\n     if ! grep -Piq -- '^\n*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*; then\n      l_kfile=\"/etc/dconf/db/$l_gdmprofile.d/01-banner-message\"\n      echo -e \"\\n[org/gnome/login-screen]\\nbanner-message-enable=true\" >> \"$l_kfile\"\n     else\n      l_kfile=\"$(grep -Pil -- '^\n*banner-message-enable\\h*=\\h*' /etc/dconf/db/$l_gdmprofile.d/*)\"\n      ! grep -Pq '^\n*\\[org\\/gnome\\/login-screen\\]' \"$l_kfile\" && sed -ri '/^\\s*bannermessage-enable/ i\\[org/gnome/login-screen]' \"$l_kfile\"\n      ! grep -Pq '^\n*banner-message-enable\\h*=\\h*true\\b' \"$l_kfile\" && sed -ri 's/^\\s*(banner-message-enable\\s*=\\s*)(\\S+)(\\s*.*$)/\\1true \\3/' \"$l_kfile\"\n     fi\n   fi\n   if ! grep -Piq '^\\h*banner-message-text=[\\'\\\"]+\\S+' \"$l_kfile\"; then\n     sed -ri \"/^\\s*banner-message-enable/ a\\nbanner-message-text=$l_bmessage\" \"$l_kfile\"\n   fi\n   dconf update\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n - Recommendation is Not Applicable\\n - No remediation required\\n\"\n  fi\n}",
    "remediation_code": "```bash\n#!/usr/bin/env bash\n{...}   # The provided remediation script.",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit GDM login banner configuration\"\"\"\n    # Check if GDM is installed\n    gdm_installed = subprocess.run(['dpkg', '-s', 'gdm'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n    if not gdm_installed:\n        print(\" - GNOME Desktop Manager isn't installed\")\n        return True  # Not Applicable, consider as PASS\n\n    # Verify text banner configuration\n    gdm_profile = 'gdm'\n    banner_config_file = f'/etc/dconf/db/{gdm_profile}.d/*'\n    banner_enabled = subprocess.run(['grep', '-Piq', '^\\\\s*banner-message-enable=true', banner_config_file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n    banner_text_set = subprocess.run(['grep', '-Piq', '^\\\\s*banner-message-text=', banner_config_file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n\n    if banner_enabled and banner_text_set:\n        print(\" - The \\\"banner-message-enable\\\" option is enabled\")\n        print(\" - The \\\"banner-message-text\\\" option is set\")\n        return True  # PASS\n    else:\n        print(\" - Reason(s) for audit failure:\")\n        if not banner_enabled:\n            print(\" - The \\\"banner-message-enable\\\" option is not enabled\")\n        if not banner_text_set:\n            print(\" - The \\\"banner-message-text\\\" option is not set\")\n        return False  # FAIL\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate GDM login banner configuration\"\"\"\n    # Check if GDM is installed\n    gdm_installed = subprocess.run(['dpkg', '-s', 'gdm'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0\n    if not gdm_installed:\n        print(\" - GNOME Desktop Manager isn't installed - No remediation required\")\n        return\n\n    gdm_profile = 'gdm'\n    banner_message = \"'Authorized uses only. All activity may be monitored and reported'\"\n\n    # Create profile if necessary\n    profile_file = f'/etc/dconf/profile/{gdm_profile}'\n    if not os.path.exists(profile_file):\n        print(f\"Creating profile \\\"{gdm_profile}\\\"\")\n        with open(profile_file, 'w') as f:\n            f.write(\"user-db:user\\nsystem-db:gdm\\nfiledb:/usr/share/gdm/greeter-dconf-defaults\")\n\n    # Create dconf database directory if necessary\n    db_dir = f'/etc/dconf/db/{gdm_profile}.d/'\n    if not os.path.exists(db_dir):\n        print(f\"Creating dconf database directory \\\"{db_dir}\\\"\")\n        os.makedirs(db_dir)\n\n    # Update dconf configuration\n    keyfile = f'/etc/dconf/db/{gdm_profile}.d/01-banner-message'\n    if not os.path.exists(keyfile):\n        print(\"Creating gdm keyfile for machine-wide settings\")\n        with open(keyfile, 'w') as f:\n            f.write(\"[org/gnome/login-screen]\\nbanner-message-enable=true\")\n\n    with open(keyfile, 'a+') as f:\n        if not subprocess.run(['grep', '-Piq', '^\\\\s*banner-message-text=', keyfile], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0:\n            print(\"Setting banner-message-text\")\n            f.write(f'\\nbanner-message-text={banner_message}')\n\n    subprocess.run(['dconf', 'update'])\n"
  },
  {
    "name": "Ensure GDM disable-user-list option is enabled",
    "id": "1.7.3",
    "type": "Automated",
    "start_page": 187,
    "end_page": 190,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GDM is the GNOME Display Manager which handles graphical login for GNOME based systems. The disable-user-list option controls if a list of users is displayed on the login screen",
    "rationale": "Displaying the user list eliminates half of the Userid/Password equation that an unauthorized person would need to log on.",
    "audit_details": "- IF - GDM is installed: Run the following script and to verify that the disable-user-list option is enabled or GNOME isn't installed:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  if [ -n \"$l_pkgoutput\" ]; then\n   output=\"\" output2=\"\"\n   l_gdmfile=\"$(grep -Pril '^\\\\h*disable-user-list\\\\h*=\\\\h*true\\b' /etc/dconf/db)\"\n   if [ -n \"$l_gdmfile\" ]; then\n     output=\"$output\\n - The \\\"disable-user-list\\\" option is enabled in \\\"$l_gdmfile\\\"\"\n     l_gdmprofile=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<< \"$l_gdmfile\")\"\n     if grep -Pq \"^\\h*system-db:$l_gdmprofile\" /etc/dconf/profile/\"$l_gdmprofile\"; then\n      output=\"$output\\n - The \\\"$l_gdmprofile\\\" exists\"\n     else\n      output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" doesn't exist\"\n     fi\n     if [ -f \"/etc/dconf/db/$l_gdmprofile\" ]; then\n      output=\"$output\\n - The \\\"$l_gdmprofile\\\" profile exists in the dconf database\"\n     else\n      output2=\"$output2\\n - The \\\"$l_gdmprofile\\\" profile doesn't exist in the dconf database\"\n     fi\n   else\n     output2=\"$output2\\n - The \\\"disable-user-list\\\" option is not enabled\"\n   fi\n   if [ -z \"$output2\" ]; then\n     echo -e \"$l_pkgoutput\\n- Audit result:\\n  *** PASS: ***\\n$output\\n\"\n   else\n     echo -e \"$l_pkgoutput\\n- Audit Result:\\n  *** FAIL: ***\\n$output2\\n\"\n     [ -n \"$output\" ] && echo -e \"$output\\n\"\n   fi\n  else\n   echo -e \"\\n\\n - GNOME Desktop Manager isn't installed\\n Recommendation is Not Applicable\\n- Audit result:\\n *** PASS ***\\n\"\n  fi\n}",
    "remediation_details": "- IF - GDM is installed: Run the following script to enable the disable-user-list option: Note: the l_gdm_profile variable in the script can be changed if a different profile name is desired in accordance with local site policy.",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_gdmprofile=\"gdm\"\n  if [ ! -f \"/etc/dconf/profile/$l_gdmprofile\" ]; then\n   echo \"Creating profile \\\"$l_gdmprofile\\\"\"\n   echo -e \"user-db:user\\nsystem-db:$l_gdmprofile\\nfiledb:/usr/share/$l_gdmprofile/greeter-dconf-defaults\" > /etc/dconf/profile/$l_gdmprofile\n  fi\n  if [ ! -d \"/etc/dconf/db/$l_gdmprofile.d/\" ]; then\n   echo \"Creating dconf database directory \\\"/etc/dconf/db/$l_gdmprofile.d/\\",
    "python_script": "\nimport os\nimport pathlib\nimport subprocess\n\n# Constants\nGDM_PROFILES_DIR = '/etc/dconf/profile/'\nGDM_DB_DIR = '/etc/dconf/db/'\nGDM_PROFILE_NAME = 'gdm'  # Default profile name, can be adjusted according to site policy\nDISABLE_USER_LIST.Option = 'disable-user-list=true'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if GDM's disable-user-list option is enabled.\"\"\"\n    # Check if GDM is installed\n    if not is_gdm_installed():\n        print(\"GNOME Desktop Manager isn't installed. Recommendation is Not Applicable.\")\n        return True  # PASS, as per the original audit script logic\n\n    # Check if the disable-user-list option is enabled\n    profile_dir = find_gdm_profile_dir()\n    if not profile_dir:\n        return False  # FAIL, no suitable profile found\n\n    if is_disable_user_list_enabled(profile_dir):\n        print(f\"The 'disable-user-list' option is enabled in {profile_dir}\")\n        return True  # PASS\n    else:\n        print(\"The 'disable-user-list' option is not enabled\")\n        return False  # FAIL\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by enabling GDM's disable-user-list option.\"\"\"\n    # Create the dconf profile if it doesn't exist\n    profile_path = pathlib.Path(GDM_PROFILES_DIR + GDM_PROFILE_NAME)\n    if not profile_path.exists():\n        print(f\"Creating profile '{GDM_PROFILE_NAME}'\")\n        with open(profile_path, 'w') as f:\n            f.write(f\"user-db:user\\nsystem-db:{GDM_PROFILE_NAME}\\nfiledb:/usr/share/gdm/greeter-dconf-defaults\")\n\n    # Ensure the dconf database directory exists\n    db_dir = pathlib.Path(GDM_DB_DIR + GDM_PROFILE_NAME + '.d/')\n    if not db_dir.exists():\n        print(f\"Creating dconf database directory '{db_dir}'\")\n        db_dir.mkdir(parents=True, exist_ok=True)\n\n    # Explicitly enable the disable-user-list option (missing in the original remediation script)\n    print(\"Enabling the 'disable-user-list' option\")\n    enable_disable_user_list_option(GDM_PROFILE_NAME)\n\ndef is_gdm_installed():\n    \"\"\"Check if GDM is installed.\"\"\"\n    try:\n        subprocess.run(['dpkg', '-s', 'gdm3'], check=True, stdout=subprocess.DEVNULL)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\ndef find_gdm_profile_dir():\n    \"\"\"Find an existing GDM profile directory.\"\"\"\n    for entry in os.listdir(GDM_PROFILES_DIR):\n        if entry.startswith('gdm'):\n            return os.path.join(GDM_PROFILES_DIR, entry)\n    return None\n\ndef is_disable_user_list_enabled(profile_dir):\n    \"\"\"Check if the disable-user-list option is enabled in the given profile directory.\"\"\"\n    dconf_db_path = GDM_DB_DIR + os.path.basename(profile_dir) + '.d/'\n    for file in os.listdir(dconf_db_path):\n        if file.endswith('.keyfile'):\n            with open(os.path.join(dconf_db_path, file), 'r') as f:\n                if DISABLE_USER_LIST_OPTION in f.read():\n                    return True\n    return False\n\ndef enable_disable_user_list_option(profile_name):\n    \"\"\"Enable the disable-user-list option for the given profile.\"\"\"\n    dconf_db_path = GDM_DB_DIR + profile_name + '.d/'\n    with open(os.path.join(dconf_db_path, '00_gdm_settings.keyfile'), 'a') as f:\n        f.write(DISABLE_USER_LIST_OPTION + '\\n')\n    subprocess.run(['dconf', 'update'], check=True)\n"
  },
  {
    "name": "Ensure GDM screen locks when the user is idle",
    "id": "1.7.4",
    "type": "Automated",
    "start_page": 191,
    "end_page": 193,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GNOME Desktop Manager can make the screen lock automatically whenever the user is idle for some amount of time.",
    "rationale": "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.",
    "audit_details": "Run the following commands to verify that the screen locks when the user is idle:\n```\n# gsettings get org.gnome.desktop.screensaver lock-delay\nuint32 5\n# gsettings get org.gnome.desktop.session idle-delay\nuint32 900\n```\n**Notes:**\n  - `lock-delay=uint32 {n} - should be 5 seconds or less and follow local site policy`\n\n  - `idle-delay=uint32 {n} - Should be 900 seconds (15 minutes) or less, not 0` (disabled) and follow local site policy",
    "audit_code": "# gsettings get org.gnome.desktop.screensaver lock-delay\n# gsettings get org.gnome.desktop.session idle-delay",
    "remediation_details": "Run the following commands to enable screen locks when the user is idle:\n```\n# gsettings set org.gnome.desktop.screensaver lock-delay 5\n# gsettings set org.gnome.desktop.session idle-delay 900\n```\n**- OR-**\n\n1. Create or edit the user profile in the /etc/dconf/profile/ and verify it includes the following:\n```\nuser-db:user\nsystem-db:{NAME_OF_DCONF_DATABASE}\n```\n**Note:** `local is the name of a dconf database used in the examples.`\n\n2. Create the directory /etc/dconf/db/local.d/ if it doesn't already exist:\n3. Create the key file /etc/dconf/db/local.d/00-screensaver to provide information for the local database:\n\n_Example key file:_\n```\n# Specify the dconf path\n[org/gnome/desktop/session]\n# Number of seconds of inactivity before the screen goes blank\n# Set to 0 seconds if you want to deactivate the screensaver.\nidle-delay=uint32 180\n# Specify the dconf path\n[org/gnome/desktop/screensaver]\n# Number of seconds after the screen is blank before locking the screen\nlock-delay=uint32 0\n```\n**Note: You must include the uint32 along with the integer key values as shown.**\n\n4. Run the following command to update the system databases:\n```\n# dconf update\n```\n5. Users must log out and back in again before the system-wide settings take effect.\n\n**Note: Users must log out and back in again before the system-wide settings take effect.**",
    "remediation_code": "# gsettings set org.gnome.desktop.screensaver lock-delay 5\n# gsettings set org.gnome.desktop.session idle-delay 900\n\n# dconf update",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure GDM screen locks when the user is idle.\n    \n    Returns:\n    bool: True if compliant, False otherwise.\n    \"\"\"\n    # Define compliant values\n    max_lock_delay = 5\n    max_idle_delay = 900\n    \n    # Execute gsettings commands and capture outputs\n    lock_delay_cmd = \"gsettings get org.gnome.desktop.screensaver lock-delay\"\n    idle_delay_cmd = \"gsettings get org.gnome.desktop.session idle-delay\"\n    \n    lock_delay_output = subprocess.check_output(lock_delay_cmd, shell=True).decode('utf-8').strip()\n    idle_delay_output = subprocess.check_output(idle_delay_cmd, shell=True).decode('utf-8').strip()\n    \n    # Parse outputs to extract numeric values\n    lock_delay_value = int(lock_delay_output.split()[1])\n    idle_delay_value = int(idle_delay_output.split()[1])\n    \n    # Check compliance\n    if lock_delay_value <= max_lock_delay and 0 < idle_delay_value <= max_idle_delay:\n        return True\n    else:\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the screen lock delay and idle delay to compliant values.\n    \"\"\"\n    # Define remediation values\n    remediation_lock_delay = 5\n    remediation_idle_delay = 900\n    \n    # Directly use gsettings to set compliant values\n    set_lock_delay_cmd = f\"gsettings set org.gnome.desktop.screensaver lock-delay {remediation_lock_delay}\"\n    set_idle_delay_cmd = f\"gsettings set org.gnome.desktop.session idle-delay {remediation_idle_delay}\"\n    \n    # Execute remediation commands\n    subprocess.check_call(set_lock_delay_cmd, shell=True)\n    print(f\"Set lock delay to {remediation_lock_delay} seconds.\")\n    \n    subprocess.check_call(set_idle_delay_cmd, shell=True)\n    print(f\"Set idle delay to {remediation_idle_delay} seconds.\")\n\n    # **Note:** For system-wide changes via dconf (alternative method not implemented here for simplicity):\n    #   - You would create/update files in /etc/dconf/db/local.d/ as specified in the remediation details.\n    #   - Then, run `dconf update` command (as root, potentially using `subprocess` with elevated privileges).\n    #   # Example (not implemented):\n    #   # dconf_update_cmd = \"dconf update\"\n    #   # subprocess.check_call(dconf_update_cmd, shell=True)\n\nif __name__ == \"__main__\":\n    compliant = audit_vuln()\n    print(f\"Compliant: {compliant}\")\n    if not compliant:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure GDM screen locks cannot be overridden",
    "id": "1.7.5",
    "type": "Automated",
    "start_page": 194,
    "end_page": 196,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "GNOME Desktop Manager can lock down specific settings by using the lockdown mode in dconf to prevent users from changing specific settings.\n\nTo lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.",
    "rationale": "Setting a lock-out value reduces the window of opportunity for unauthorized user access to another user's session that has been left unattended.\n\nWithout locking down the system settings, user settings take precedence over the system settings.",
    "audit_details": "Run the following script to verify that the screen lock cannot be overridden:\n```bash\n#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is\nNot Applicable\n  # Determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query > /dev/null 2>&1; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm > /dev/null 2>&1; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space-separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists\non the system\\n - checking configuration\"\n  done\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   # Check if the idle-delay is locked\n   if grep -Psrilq '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"idle-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not set so it cannot be locked\"\n   fi\n   # Check if the lock-delay is locked\n   if grep -Psrilq '^\\h*lock-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"lock-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not set so it cannot be locked\"\n   fi\n  else\n   l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n Recommendation is not applicable\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't installed, recommendation is\nNot Applicable\n  # Determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query > /dev/null 2>&1; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm > /dev/null 2>&1; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space-separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" > /dev/null 2>&1 && l_pkgoutput=\"$l_pkgoutput\\n - Package: \\\"$l_pn\\\" exists\non the system\\n - checking configuration\"\n  done\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   l_output=\"\" l_output2=\"\"\n   # Check if the idle-delay is locked\n   if grep -Psrilq '^\\h*idle-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/session\\/idle-delay\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"idle-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"idle-delay\\\" is not set so it cannot be locked\"\n   fi\n   # Check if the lock-delay is locked\n   if grep -Psrilq '^\\h*lock-delay\\h*=\\h*uint32\\h+\\d+\\b' /etc/dconf/db/*/; then\n     if grep -Prilq '\\/org\\/gnome\\/desktop\\/screensaver\\/lock-delay\\b' /etc/dconf/db/*/locks;\nthen\n      l_output=\"$l_output\\n - \\\"lock-delay\\\" is locked\"\n     else\n      l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not locked\"\n     fi\n   else\n     l_output2=\"$l_output2\\n - \\\"lock-delay\\\" is not set so it cannot be locked\"\n   fi\n  else\n   l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n Recommendation is not applicable\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  [ -n \"$l_pkgoutput\" ] && echo -e \"\\n$l_pkgoutput\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "To prevent the user from overriding these settings, create the file\n```bash\n    /etc/dconf/db/local.d/locks/screensaver with the following content:\n# Lock desktop screensaver settings\n/org/gnome/desktop/session/idle-delay\n/org/gnome/desktop/screensaver/lock-delay\n```\n\n2. Update the system databases:\n```bash\n# dconf update\n```\n\n### Note: Users must log out and back in again before the system-wide settings take effect.",
    "remediation_code": "# dconf update",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    # Check if GDM is installed\n    gdm_installed = subprocess.run(['dpkg-query', '-s', 'gdm'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if gdm_installed.returncode!= 0:\n        print(\"GNOME Desktop Manager package is not installed on the system. Recommendation is not applicable\")\n        return True  # Not Applicable is considered a pass in this context\n\n    # Check if idle-delay and lock-delay are locked\n    locked_settings = []\n    unlocked_settings = []\n    settings_to_check = [\n        ('/org/gnome/desktop/session/idle-delay', 'idle-delay'),\n        ('/org/gnome/desktop/screensaver/lock-delay', 'lock-delay')\n    ]\n\n    for dconf_path, setting_name in settings_to_check:\n        if os.path.exists(f\"/etc/dconf/db/*/locks/{dconf_path}\"):\n            locked_settings.append(setting_name)\n        else:\n            # Also, verify if the setting is present to provide a more informative message\n            setting_present = subprocess.run(['grep', '-Psrilq', f'^\\h*{setting_name}\\h*=', '/etc/dconf/db/*/'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if setting_present.returncode == 0:\n                unlocked_settings.append(setting_name)\n            else:\n                unlocked_settings.append(f\"{setting_name} is not set so it cannot be locked\")\n\n    if unlocked_settings:\n        for setting in unlocked_settings:\n            print(f\"- {setting} is not locked\")\n        return False\n    else:\n        for setting in locked_settings:\n            print(f\"- \\\"{setting}\\\" is locked\")\n        return True\n\ndef remediate_vuln() -> None:\n    lock_file_path = \"/etc/dconf/db/local.d/locks/screensaver\"\n    lock_file_content = \"# Lock desktop screensaver settings\\n/org/gnome/desktop/session/idle-delay\\n/org/gnome/desktop/screensaver/lock-delay\"\n\n    # Create the lock file with the specified content\n    if not os.path.exists(lock_file_path):\n        with open(lock_file_path, 'w') as f:\n            f.write(lock_file_content)\n        print(f\"Created lock file at {lock_file_path} with required settings.\")\n    else:\n        print(f\"Lock file at {lock_file_path} already exists. Verifying content...\")\n        with open(lock_file_path, 'r') as f:\n            if f.read()!= lock_file_content:\n                print(f\"Content mismatch in {lock_file_path}. Overwriting with correct settings.\")\n                with open(lock_file_path, 'w') as f:\n                    f.write(lock_file_content)\n            else:\n                print(f\"Lock file at {lock_file_path} already contains the correct settings.\")\n\n    # Update the system databases\n    subprocess.run(['dconf', 'update'])\n    print(\"Updated system databases with dconf update.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(\"Auditing...\")\n    audit_passed = audit_vuln()\n    if not audit_passed:\n        print(\"\\nRemediation required. Applying fixes...\")\n        remediate_vuln()\n        print(\"\\nRe-auditing after remediation...\")\n        audit_vuln()\n"
  },
  {
    "name": "Ensure GDM autorun-never is enabled",
    "id": "1.7.8",
    "type": "Automated",
    "start_page": 206,
    "end_page": 210,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM.",
    "rationale": "Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.",
    "audit_details": "- IF - GDM is installed: Run the following script to verify that autorun-never is set to true for GDM:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n  # Check if GNOME Desktop Manager is installed. If package isn't\ninstalled, recommendation is Not Applicable\\n  # determine system's package manager\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package:\\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n   echo -e \"$l_pkgoutput\"\n  done\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_kfile=\"$(grep -Prils -- '^\n*autorun-never\\b' /etc/dconf/db/*.d)\"\n   # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n   if [ -f \"$l_kfile\" ]; then\n     l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<<\\n\"$l_kfile\")\"\n   fi\n   # If the profile name exist, continue checks\n   if [ -n \"$l_gpname\" ]; then\n     l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n     # Check if profile file exists\n     if grep -Pq -- \"^\\n*system-db:$l_gpname\\b\" /etc/dconf/profile/*;\nthen\n      l_output=\"$l_output\\n - dconf database profile file \\\"$(grep -Pl -- \"^\\n*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\" exists\"\n     else\n      l_output2=\"$l_output2\\n - dconf database profile isn't set\"\n     fi\n     # Check if the dconf database file exists\n     if [ -f \"/etc/dconf/db/$l_gpname\" ]; then\n      l_output=\"$l_output\\n - The dconf database \\\"$l_gpname\\\" exists\"\n     else\n      l_output2=\"$l_output2\\n - The dconf database \\\"$l_gpname\\\" doesn't exist\"\n     fi\n     # check if the dconf database directory exists\n     if [ -d \"$l_gpdir\" ]; then\n      l_output=\"$l_output\\n - The dconf directory \\\"$l_gpdir\\\" exitst\"\n     else\n      l_output2=\"$l_output2\\n - The dconf directory \\\"$l_gpdir\\\" doesn't exist\"\n     fi\n     # check autorun-never setting\n     if grep -Pqrs -- '^\nh*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then\n      l_output=\"$l_output\\n - \\\"autorun-never\\\" is set to true in: \"$l_kfile\"\"\n     else\n      l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set correctly\"\n     fi\n   else\n     # Settings don't exist. Nothing further to check\n     l_output2=\"$l_output2\\n - \\\"autorun-never\\\" is not set\"\n   fi\n  else\n   l_output=\"$l_output\\n - GNOME Desktop Manager package is not installed on the system\\n - Recommendation is not applicable\"\n  fi\n  # Report results. If no failures output in l_output2, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "- IF - GDM is installed: Run the following script to set autorun-never to true for GDM users:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_pkgoutput=\"\" l_output=\"\" l_output2=\"\"\n  l_gpname=\"local\" # Set to desired dconf profile name (default is local)\n  # Check if GNOME Desktop Manager is installed. If package isn't\ninstalled, recommendation is Not Applicable\\n  # determine system's package manager\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package:\\\"$l_pn\\\" exists on the system\\n - checking configuration\"\n  done\n  echo -e \"$l_pkgoutput\"\n  # Check configuration (If applicable)\n  if [ -n \"$l_pkgoutput\" ]; then\n   echo -e \"$l_pkgoutput\"\n   # Look for existing settings and set variables if they exist\n   l_kfile=\"$(grep -Prils -- '^\nh*autorun-never\\b' /etc/dconf/db/*.d)\"\n   # Set profile name based on dconf db directory ({PROFILE_NAME}.d)\n   if [ -f \"$l_kfile\" ]; then\n     l_gpname=\"$(awk -F\\/ '{split($(NF-1),a,\".\");print a[1]}' <<<\\n\"$l_kfile\")\"\n     echo \" - updating dconf profile name to \\\"$l_gpname\\\"\"\n   fi\n   [ ! -f \"$l_kfile\" ] && l_kfile=\"/etc/dconf/db/$l_gpname.d/00-mediaautorun\"\n   # Check if profile file exists\n   if grep -Pq -- \"^\\n*system-db:$l_gpname\\b\" /etc/dconf/profile/*; then\n     echo -e \"\\n - dconf database profile exists in: \\\"$(grep -Pl -\"^\\n*system-db:$l_gpname\\b\" /etc/dconf/profile/*)\\\"\"\n   else\n     [ ! -f \"/etc/dconf/profile/user\" ] &&\nl_gpfile=\"/etc/dconf/profile/user\" || l_gpfile=\"/etc/dconf/profile/user2\"\n     echo -e \" - creating dconf database profile\"\n     {\n      echo -e \"\\nuser-db:user\"\n      echo \"system-db:$l_gpname\"\n     } >> \"$l_gpfile\"\n   fi\n   # create dconf directory if it doesn't exists\n   l_gpdir=\"/etc/dconf/db/$l_gpname.d\"\n   if [ -d \"$l_gpdir\" ]; then\n     echo \" - The dconf database directory \\\"$l_gpdir\\\" exists\"\n   else\n     echo \" - creating dconf database directory \\\"$l_gpdir\\\"\"\n     mkdir \"$l_gpdir\"\n   fi\n   # check autorun-never setting\n   if grep -Pqs -- '^\nh*autorun-never\\h*=\\h*true\\b' \"$l_kfile\"; then\n     echo \" - \\\"autorun-never\\\" is set to true in: \\\"$l_kfile\\\"\"\n   else\n     echo \" - creating or updating \\\"autorun-never\\\" entry in \\\"$l_kfile\\\"\"\n     if grep -Psq -- '^\nh*autorun-never' \"$l_kfile\"; then\n      sed -ri 's/(^\\s*autorun-never\\s*=\\s*)(\\S+)(\\s*.*)$/\\1true \\3/' \"$l_kfile\"\n     else\n      ! grep -Psq -- '\\^\\h*\\[org\\/gnome\\/desktop\\/media-handling\\]\\b'\n\"$l_kfile\" && echo '[org/gnome/desktop/media-handling]' >> \"$l_kfile\"\n      sed -ri '/^\\s*\\[org\\/gnome\\/desktop\\/media-handling\\]/a\\nautorun-never=true' \"$l_kfile\"\n     fi\n   fi\n  else\n   echo -e \"\\n - GNOME Desktop Manager package is not installed on the\nsystem\\n - Recommendation is not applicable\"\n  fi\n  # update dconf database\n  dconf update\n}",
    "python_script": "\nimport os\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if GDM autorun-never is enabled\"\"\"\n    # Check if GDM is installed\n    if not is_gdm_installed():\n        print(\" - GNOME Desktop Manager package is not installed on the system\")\n        print(\" - Recommendation is not applicable\")\n        return True  # Not applicable, consider as passed\n\n    # Check if autorun-never is set to true\n    kfile = find_dconf_db_file()\n    if kfile and is_autorun_never_enabled(kfile):\n        print(f\" - \\\"autorun-never\\\" is set to true in: \\\"{kfile}\\\"\")\n        return True\n    else:\n        print(f\" - \\\"autorun-never\\\" is not set correctly in: \\\"{kfile}\\\"\" if kfile else \" - \\\"autorun-never\\\" setting not found\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate GDM autorun-never setting\"\"\"\n    # Check if GDM is installed\n    if not is_gdm_installed():\n        print(\" - GNOME Desktop Manager package is not installed on the system\")\n        print(\" - Recommendation is not applicable\")\n        return\n\n    gpname = \"local\"  # Default dconf profile name\n    kfile = find_dconf_db_file()\n    if not kfile:\n        # Create dconf profile and database if missing\n        create_dconf_profile(gpname)\n        kfile = f\"/etc/dconf/db/{gpname}.d/00-mediaautorun\"\n        print(f\" - creating or updating dconf database file: \\\"{kfile}\\\"\")\n\n    # Update autorun-never setting\n    if not is_autorun_never_enabled(kfile):\n        update_autorun_never_setting(kfile)\n        print(f\" - created or updated \\\"autorun-never\\\" entry in: \\\"{kfile}\\\"\")\n\n    # Update dconf database\n    subprocess.run([\"dconf\", \"update\"])\n    print(\" - updated dconf database\")\n\n# Helper functions\ndef is_gdm_installed() -> bool:\n    \"\"\"Check if GDM is installed\"\"\"\n    return subprocess.run([\"dpkg\", \"-s\", \"gdm\"] + [\"gdm3\"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).returncode == 0\n\ndef find_dconf_db_file() -> str:\n    \"\"\"Find the dconf db file containing autorun-never setting\"\"\"\n    for root, dirs, files in os.walk(\"/etc/dconf/db/\"):\n        for file in files:\n            filepath = os.path.join(root, file)\n            with open(filepath, \"r\") as f:\n                if re.search(r\"^.*autorun-never\\b\", f.read()):\n                    return filepath\n    return \"\"\n\ndef is_autorun_never_enabled(kfile: str) -> bool:\n    \"\"\"Check if autorun-never is set to true in the given file\"\"\"\n    with open(kfile, \"r\") as f:\n        content = f.read()\n        return re.search(r\"^.*autorun-never\\s*=\\s*true\\b\", content) is not None\n\ndef create_dconf_profile(gpname: str) -> None:\n    \"\"\"Create dconf profile and database if missing\"\"\"\n    gpdir = f\"/etc/dconf/db/{gpname}.d\"\n    if not os.path.exists(gpdir):\n        os.makedirs(gpdir, exist_ok=True)\n        print(f\" - creating dconf database directory: \\\"{gpdir}\\\"\")\n\n    profile_file = \"/etc/dconf/profile/user\"\n    if not os.path.exists(profile_file):\n        with open(profile_file, \"w\") as f:\n            f.write(f\"user-db:user\\nsystem-db:{gpname}\\n\")\n        print(f\" - creating dconf database profile: \\\"{profile_file}\\\"\")\n\ndef update_autorun_never_setting(kfile: str) -> None:\n    \"\"\"Update autorun-never setting in the given file\"\"\"\n    with open(kfile, \"r+\") as f:\n        content = f.read()\n        if re.search(r\"^.*autorun-never\\b\", content):\n            updated_content = re.sub(r\"(^.*autorun-never\\s*=\\s*)(\\S+)(.*)\", r\"\\1true\\3\", content)\n            f.seek(0)\n            f.write(updated_content)\n            f.truncate()\n        else:\n            f.write(\"\\n[org/gnome/desktop/media-handling]\\n\")\n            f.write(\"autorun-never=true\\n\")\n"
  },
  {
    "name": "Ensure GDM autorun-never is not overridden",
    "id": "1.7.9",
    "type": "Automated",
    "start_page": 211,
    "end_page": 213,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The autorun-never setting allows the GNOME Desktop Display Manager to disable autorun through GDM. By using the lockdown mode in dconf, you can prevent users from changing specific settings. To lock down a dconf key or subpath, create a locks subdirectory in the keyfile directory. The files inside this directory contain a list of keys or subpaths to lock. Just as with the keyfiles, you may add any number of files to this directory.",
    "rationale": "Malware on removable media may taking advantage of Autorun features when the media is inserted into a system and execute.",
    "audit_details": "Run the following script to verify that autorun-never=true cannot be overridden:\n#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't\ninstalled, recommendation is Not Applicable\\n  # determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package:\\",
    "audit_code": "#!/usr/bin/env bash\n{\n  # Check if GNOME Desktop Manager is installed. If package isn't\ninstalled, recommendation is Not Applicable\n  # determine system's package manager\n  l_pkgoutput=\"\"\n  if command -v dpkg-query &> /dev/null; then\n   l_pq=\"dpkg-query -s\"\n  elif command -v rpm &> /dev/null; then\n   l_pq=\"rpm -q\"\n  fi\n  # Check if GDM is installed\n  l_pcl=\"gdm gdm3\" # Space separated list of packages to check\n  for l_pn in $l_pcl; do\n   $l_pq \"$l_pn\" &> /dev/null && l_pkgoutput=\"$l_pkgoutput\\n - Package:\\",
    "remediation_details": "1. To prevent the user from overriding these settings, create the file\n/etc/dconf/db/local.d/locks/00-media-autorun with the following content:\n[org/gnome/desktop/media-handling]\nautorun-never=true\n\n2. Update the systems databases:\n# dconf update\n",
    "remediation_code": "1. To prevent the user from overriding these settings, create the file\n/etc/dconf/db/local.d/locks/00-media-autorun with the following content:\n[org/gnome/desktop/media-handling]\nautorun-never=true\n\n2. Update the systems databases:\n# dconf update\n",
    "python_script": "\nimport os\nimport subprocess\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if GDM autorun-never is not overridden.\n    \n    Returns:\n    bool: True if the system is vulnerable, False otherwise.\n    \"\"\"\n    \n    # Check if GDM is installed (Debian 11 / Ubuntu 22.04 use dpkg)\n    gdm_installed = subprocess.run(['dpkg-query', '-s', 'gdm'], \n                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if gdm_installed.returncode!= 0:\n        # If GDM is not installed, the recommendation is Not Applicable\n        return False\n    \n    # Verify if the lock file exists and has the correct content\n    lock_file = Path('/etc/dconf/db/local.d/locks/00-media-autorun')\n    if lock_file.exists():\n        content = lock_file.read_text()\n        if '[org/gnome/desktop/media-handling]\\nautorun-never=true' in content:\n            return False  # Not vulnerable\n    \n    return True  # Vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by creating the lock file and updating dconf.\n    \"\"\"\n    \n    # Create the lock file with the specified content\n    lock_file = Path('/etc/dconf/db/local.d/locks/00-media-autorun')\n    lock_file.parent.mkdir(exist_ok=True)  # Ensure the directory exists\n    lock_file.write_text('[org/gnome/desktop/media-handling]\\nautorun-never=true')\n    print(f\"Created lock file '{lock_file}' with autorun-never=true.\")\n    \n    # Update the system's dconf database\n    subprocess.run(['dconf', 'update'])\n    print(\"Updated the system's dconf database.\")\n"
  },
  {
    "name": "Ensure XDCMP is not enabled",
    "id": "1.7.10",
    "type": "Automated",
    "start_page": 214,
    "end_page": 216,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "X Display Manager Control Protocol (XDMCP) is designed to provide authenticated access to display management services for remote displays",
    "rationale": "XDMCP is inherently insecure.\n\n  - XDMCP is not a ciphered protocol. This may allow an attacker to capture keystrokes entered by a user\n\n  - XDMCP is vulnerable to man-in-the-middle attacks. This may allow an attacker to steal the credentials of legitimate users by impersonating the XDMCP server.",
    "audit_details": "Run the following script and verify the output:\n```\n#!/usr/bin/env bash\n{\n  while IFS= read -r l_file; do\n   awk '/\\[xdmcp\\]/{ f = 1;next } /\\[/{ f = 0 } f {if (/^\\s*Enable\\s*=\\s*true/) print \"The file: \\\"'",
    "audit_code": "#!/usr/bin/env bash\n{\n  while IFS= read -r l_file; do\n   awk '/\\[xdmcp\\]/{ f = 1;next } /\\[/{ f = 0 } f {if (/^\\s*Enable\\s*=\\s*true/) print \"The file: \\\"'",
    "remediation_details": "Edit all files returned by the audit and remove or commend out the Enable=true line in the [xdmcp] block:\n_Example file:_\n```\n# GDM configuration storage\n#\n# See /usr/share/gdm/gdm.schemas for a list of available options.\n[daemon]\n# Uncomment the line below to force the login screen to use Xorg\n#WaylandEnable=false\n# Enabling automatic login\n# AutomaticLoginEnable = true\n# AutomaticLogin = user1\n# Enabling timed login\n# TimedLoginEnable = true\n# TimedLogin = user1\n# TimedLoginDelay = 10\n[security]\n[xdmcp]\n# Enable=true <- **This line should be removed or commented out**\n[chooser]\n[debug]\n# Uncomment the line below to turn on debugging\n# More verbose logs\n# Additionally lets the X server dump core if it crashes\n#Enable=true\n```\n**Default Value:**\nfalse (This is denoted by no Enabled= entry in the [xdmcp] block",
    "remediation_code": "# GDM configuration storage\n#\n# See /usr/share/gdm/gdm.schemas for a list of available options.\n[daemon]\n# Uncomment the line below to force the login screen to use Xorg\n#WaylandEnable=false\n# Enabling automatic login\n# AutomaticLoginEnable = true\n# AutomaticLogin = user1\n# Enabling timed login\n# TimedLoginEnable = true\n# TimedLogin = user1\n# TimedLoginDelay = 10\n[security]\n[xdmcp]\n# Enable=true <- **This line should be removed or commented out**\n[chooser]\n[debug]\n# Uncomment the line below to turn on debugging\n# More verbose logs\n# Additionally lets the X server dump core if it crashes\n#Enable=true",
    "python_script": "\nimport os\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if XDMCP is enabled in GDM configuration files.\"\"\"\n    vuln_found = False\n    config_dirs = ['/etc/gdm3/']  # Default GDM config directory for Debian/Ubuntu\n    xdmcp_block = False\n\n    for dir_path in config_dirs:\n        for filename in os.listdir(dir_path):\n            if filename.endswith(\".conf\") or filename == \"gdm.schemas\":\n                file_path = os.path.join(dir_path, filename)\n                try:\n                    with open(file_path, 'r') as file:\n                        for line in file:\n                            line = line.strip()\n                            if line.startswith('[xdmcp]'):\n                                xdmcp_block = True\n                            elif line.startswith('[') and xdmcp_block:\n                                xdmcp_block = False\n                            elif xdmcp_block and line.startswith('Enable=true'):\n                                print(f\"XDMCP is enabled in: {file_path}\")\n                                vuln_found = True\n                                xdmcp_block = False  # Reset for next file/block\n                except PermissionError:\n                    print(f\"Permission denied for file: {file_path}\")\n\n    return vuln_found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate XDMCP enablement in GDM configuration files.\"\"\"\n    config_dirs = ['/etc/gdm3/']  # Default GDM config directory for Debian/Ubuntu\n    xdmcp_block = False\n    modified_files = 0\n\n    for dir_path in config_dirs:\n        for filename in os.listdir(dir_path):\n            if filename.endswith(\".conf\") or filename == \"gdm.schemas\":\n                file_path = os.path.join(dir_path, filename)\n                temp_file_path = file_path + '.tmp'\n                \n                try:\n                    with open(file_path, 'r') as original, open(temp_file_path, 'w') as modified:\n                        for line in original:\n                            line = line.strip()\n                            if line.startswith('[xdmcp]'):\n                                xdmcp_block = True\n                                modified.write(line + '\\n')\n                            elif line.startswith('[') and xdmcp_block:\n                                xdmcp_block = False\n                                modified.write(line + '\\n')\n                            elif xdmcp_block and line.startswith('Enable=true'):\n                                # Comment out the line to disable XDMCP\n                                modified.write('# ' + line + '\\n')\n                                modified_files += 1\n                            else:\n                                modified.write(line + '\\n')\n                    # Replace original file with modified one\n                    os.replace(temp_file_path, file_path)\n                    if modified_files > 0:\n                        print(f\"Disabled XDMCP in: {file_path}\")\n                        modified_files = 0  # Reset counter for next file\n                except PermissionError:\n                    print(f\"Permission denied for file: {file_path}\")\n"
  },
  {
    "name": "Ensure dhcp server services are not in use",
    "id": "2.1.3",
    "type": "Automated",
    "start_page": 225,
    "end_page": 227,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Dynamic Host Configuration Protocol (DHCP) is a service that allows machines to be dynamically assigned IP addresses. There are two versions of the DHCP protocol DHCPv4 and DHCPv6. At startup the server may be started for one or the other via the -4 or -6 arguments.",
    "rationale": "Unless a system is specifically set up to act as a DHCP server, it is recommended that this package be removed to reduce the potential attack surface.",
    "audit_details": "Run the following commands to verify isc-dhcp-server is not installed: `# dpkg-query -s isc-dhcp-server &>/dev/null && echo \"isc-dhcp-server is installed\"` Nothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify isc-dhcp-server.service and isc-dhcp-server6.service are not enabled:\n`# systemctl is-enabled isc-dhcp-server.service isc-dhcp-server6.service 2>/dev/null | grep 'enabled'` Nothing should be returned.\n\nRun the following command to verify isc-dhcp-server.service and isc-dhcp-server6.service are not active:\n`# systemctl is-active isc-dhcp-server.service isc-dhcp-server6.service 2>/dev/null | grep '^active'` Nothing should be returned.\n\n**Note: If the package is required for a dependency**\n\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s isc-dhcp-server &>/dev/null && echo \"isc-dhcp-server is installed\"",
    "remediation_details": "Run the following commands to stop isc-dhcp-server.service and isc-dhcp-server6.service and remove the isc-dhcp-server package: `# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service` `# apt purge isc-dhcp-server`\n\n**- OR -**\n\n**- IF - the isc-dhcp-server package is required as a dependency:**\nRun the following commands to stop and mask isc-dhcp-server.service and isc-dhcp-server6.service:\n`# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service` `# systemctl mask isc-dhcp-server isc-dhcp-server6.service`",
    "remediation_code": "# systemctl stop isc-dhcp-server.service isc-dhcp-server6.service\n# apt purge isc-dhcp-server",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if isc-dhcp-server package is installed and its services are enabled/active.\"\"\"\n    # Check if isc-dhcp-server package is installed\n    installed = subprocess.run(['dpkg-query', '-s', 'isc-dhcp-server'], \n                               stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n    if installed.returncode == 0:\n        # Package is installed, check service status\n        services = ['isc-dhcp-server.service', 'isc-dhcp-server6.service']\n        for service in services:\n            enabled = subprocess.run(['systemctl', 'is-enabled', service], \n                                     stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n            active = subprocess.run(['systemctl', 'is-active', service], \n                                    stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n            if b'enabled' in enabled.stdout or b'active' in active.stdout:\n                return True  # Vulnerability found\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate isc-dhcp-server vulnerability by stopping and removing/purging the service/package.\"\"\"\n    services = ['isc-dhcp-server.service', 'isc-dhcp-server6.service']\n\n    # Attempt to purge the package (assuming it's not required by dependencies)\n    try:\n        subprocess.run(['apt', 'purge', '-y', 'isc-dhcp-server'], check=True)\n        print(\"Purged isc-dhcp-server package.\")\n    except subprocess.CalledProcessError:\n        # Package is likely required by dependencies, stop and mask services instead\n        for service in services:\n            subprocess.run(['systemctl', 'stop', service], check=True)\n            print(f\"Stopped {service}.\")\n            subprocess.run(['systemctl', 'mask', service], check=True)\n            print(f\"Masked {service}.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure dns server services are not in use",
    "id": "2.1.4",
    "type": "Automated",
    "start_page": 228,
    "end_page": 229,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Domain Name System (DNS) is a hierarchical naming system that maps names to IP addresses for computers, services and other resources connected to a network.",
    "rationale": "Unless a system is specifically designated to act as a DNS server, it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify bind9 is not installed:\n\n# dpkg-query -s bind9 &>/dev/null && echo \"bind9 is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify bind9.service is not enabled:\n# systemctl is-enabled bind9.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the bind9.service is not active:\n# systemctl is-active bind9.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s bind9 &>/dev/null && echo \"bind9 is installed\"\n\n# systemctl is-enabled bind9.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active bind9.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop bind9.service and remove the bind9 package:\n# systemctl stop bind9.service\n# apt purge bind9\n\n- OR -\n\n- IF - the bind9 package is required as a dependency:\nRun the following commands to stop and mask bind9.service:\n# systemctl stop bind9.service\n# systemctl mask bind9.service",
    "remediation_code": "# systemctl stop bind9.service\n# apt purge bind9\n\n# systemctl stop bind9.service\n# systemctl mask bind9.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if bind9 is installed, and if so, check its service status.\n    Returns True if vulnerable (installed and/or service issues), False otherwise.\n    \"\"\"\n    # Check if bind9 is installed\n    installed = subprocess.call([\"dpkg-query\", \"-s\", \"bind9\"], stdout=subprocess.DEVNULL) == 0\n    \n    if not installed:\n        # Not installed, not vulnerable\n        return False\n    \n    # Installed, check service status\n    enabled = subprocess.call([\"systemctl\", \"is-enabled\", \"bind9.service\"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0\n    active = subprocess.call([\"systemctl\", \"is-active\", \"bind9.service\"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0\n    \n    # Vulnerable if service is enabled or active\n    return enabled or active\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by either removing bind9 or stopping and masking its service if it's a dependency.\n    \"\"\"\n    # Check dependency requirement (simplified, in a real scenario, this might involve more complex checks or inputs)\n    dependency_required = input(\"Is bind9 required as a dependency? (y/n): \") == \"y\"\n\n    if not dependency_required:\n        # Stop bind9 service\n        subprocess.call([\"systemctl\", \"stop\", \"bind9.service\"])\n        print(\"Stopped bind9.service.\")\n        \n        # Purge bind9 package\n        subprocess.call([\"apt\", \"purge\", \"bind9\", \"-y\"])\n        print(\"Purged bind9 package.\")\n    else:\n        # Stop bind9 service\n        subprocess.call([\"systemctl\", \"stop\", \"bind9.service\"])\n        print(\"Stopped bind9.service.\")\n        \n        # Mask bind9 service\n        subprocess.call([\"systemctl\", \"mask\", \"bind9.service\"])\n        print(\"Masked bind9.service.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure dnsmasq services are not in use",
    "id": "2.1.5",
    "type": "Automated",
    "start_page": 230,
    "end_page": 232,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "dnsmasq is a lightweight tool that provides DNS caching, DNS forwarding and DHCP (Dynamic Host Configuration Protocol) services.",
    "rationale": "Unless a system is specifically designated to act as a DNS caching, DNS forwarding and/or DHCP server, it is recommended that the package be removed to reduce the potential attack surface.",
    "audit_details": "Run one of the following commands to verify dnsmasq is not installed:\n\n```# dpkg-query -s dnsmasq &>/dev/null && echo \"dnsmasq is installed\"```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify dnsmasq.service is not enabled:\n```\n# systemctl is-enabled dnsmasq.service 2>/dev/null | grep 'enabled' \nNothing should be returned\n```\nRun the following command to verify the dnsmasq.service is not active:\n```\n# systemctl is-active dnsmasq.service 2>/dev/null | grep '^active' \nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s dnsmasq &>/dev/null && echo \"dnsmasq is installed\"\n\n# systemctl is-enabled dnsmasq.service 2>/dev/null | grep 'enabled'\n# systemctl is-active dnsmasq.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop dnsmasq.service and remove dnsmasq package:\n```\n# systemctl stop dnsmasq.service\n# apt purge dnsmasq\n```\n\n**- OR -**\n\n**- IF - the dnsmasq package is required as a dependency:**\nRun the following commands to stop and mask the dnsmasq.service:\n```\n# systemctl stop dnsmasq.service\n# systemctl mask dnsmasq.service\n```",
    "remediation_code": "# systemctl stop dnsmasq.service\n# apt purge dnsmasq\n\n# systemctl stop dnsmasq.service\n# systemctl mask dnsmasq.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if dnsmasq is not in use.\"\"\"\n    # Primary check: dnsmasq is not installed\n    if not is_package_installed('dnsmasq'):\n        return True  # Passed: not installed\n\n    # Secondary checks (if installed for dependencies)\n    if (is_service_enabled('dnsmasq.service') or \n            is_service_active('dnsmasq.service')):\n        return False  # Failed: service enabled or active\n    return True  # Passed: service not enabled or active\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability if dnsmasq is in use.\"\"\"\n    if is_package_installed('dnsmasq'):\n        # Attempt to stop the service ( silent fail if not running )\n        subprocess.run([\"systemctl\", \"stop\", \"dnsmasq.service\"])\n        print(\"Stopped `dnsmasq` systemd service.\")\n        \n        # Check if dependent packages exist before purging\n        depends = get_package_dependencies('dnsmasq')\n        if depends:\n            print(\"Found dependencies, stopping and masking service instead of purging.\")\n            subprocess.run([\"systemctl\", \"mask\", \"dnsmasq.service\"])\n            print(\"Masked `dnsmasq` systemd service.\")\n        else:\n            subprocess.run([\"apt\", \"purge\", \"dnsmasq\", \"-y\"])\n            print(\"Purged `dnsmasq` package.\")\n\n\n# Helper Functions\ndef is_package_installed(package_name: str) -> bool:\n    \"\"\"Check if a package is installed.\"\"\"\n    return subprocess.run([\"dpkg-query\", \"-s\", package_name]).returncode == 0\n\n\ndef is_service_enabled(service_name: str) -> bool:\n    \"\"\"Check if a systemd service is enabled.\"\"\"\n    return \"enabled\" in subprocess.run([\"systemctl\", \"is-enabled\", service_name], \n                                       stdout=subprocess.PIPE, text=True).stdout\n\n\ndef is_service_active(service_name: str) -> bool:\n    \"\"\"Check if a systemd service is active.\"\"\"\n    return \"active\" in subprocess.run([\"systemctl\", \"is-active\", service_name], \n                                      stdout=subprocess.PIPE, text=True).stdout\n\n\ndef get_package_dependencies(package_name: str) -> list:\n    \"\"\"Retrieve a list of packages that depend on the given package.\"\"\"\n    # This is a simplified approach and might not catch all dependency scenarios\n    depends = subprocess.run([\"apt-rdepends\", \"-r\", \"--state-follow=\" + package_name, \n                              \"--format= none\"], stdout=subprocess.PIPE, text=True).stdout\n    return [line.strip() for line in depends.split('\\n') if line.strip() and not line.startswith(package_name)]\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"audit\":\n        audit_result = audit_vuln()\n        print(f\"Audit Result: {'PASS' if audit_result else 'FAIL'}\")\n    elif len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        print(\"Usage: python script_name.py [audit|remediate]\")\n"
  },
  {
    "name": "Ensure ftp server services are not in use",
    "id": "2.1.6",
    "type": "Automated",
    "start_page": 233,
    "end_page": 235,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The File Transfer Protocol (FTP) provides networked computers with the ability to transfer files.",
    "rationale": "FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be deleted to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify vsftpd is not installed:\n```\n# dpkg-query -s vsftpd &>/dev/null && echo \"vsftpd is installed\"\n```\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify vsftpd service is not enabled:\n```\n# systemctl is-enabled vsftpd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify the vsftpd service is not active:\n```\n# systemctl is-active vsftpd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note:**\n\n  - Other ftp server packages may exist. They should also be audited, if not required and authorized by local site policy\n\n  - If the package is required for a dependency:\n\n`o` Ensure the dependent package is approved by local site policy\n`o` Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s vsftpd &>/dev/null && echo \"vsftpd is installed\"\n# systemctl is-enabled vsftpd.service 2>/dev/null | grep 'enabled'\n# systemctl is-active vsftpd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop vsftpd.service and remove the vsftpd package:\n```\n# systemctl stop vsftpd.service\n# apt purge vsftpd\n```\n**- OR -**\n\n**- IF - the vsftpd package is required as a dependency:**\nRun the following commands to stop and mask the vsftpd.service:\n```\n# systemctl stop vsftpd.service\n# systemctl mask vsftpd.service\n```\n**Note: Other ftp server packages may exist. If not required and authorized by local site policy, they should also be removed. If the package is required for a dependency, the service should be stopped and masked.",
    "remediation_code": "# systemctl stop vsftpd.service\n# apt purge vsftpd\n# systemctl stop vsftpd.service\n# systemctl mask vsftpd.service",
    "python_script": "\nimport subprocess\nimport apt\nimport systemd.daemon\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure ftp server services are not in use\"\"\"\n    \n    # Check if vsftpd package is installed\n    cache = apt.Cache()\n    if cache['vsftpd'].is_installed:\n        print(\"vsftpd package is installed.\")\n        \n        # Check if vsftpd service is enabled\n        if systemd.daemon.get_unit_attributes('vsftpd.service')['LoadState'] == 'loaded':\n            print(\"vsftpd service is enabled.\")\n            \n            # Check if vsftpd service is active\n            if systemd.daemon.get_unit_attributes('vsftpd.service')['ActiveState'] == 'active':\n                print(\"vsftpd service is active.\")\n                return True  # Vulnerability found\n    \n    return False  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure ftp server services are not in use\"\"\"\n    \n    cache = apt.Cache()\n    if cache['vsftpd'].is_installed:\n        # If package is not required, remove it\n        if input(\"Is vsftpd required as a dependency? (y/n): \").lower()!= 'y':\n            subprocess.run(['systemctl', 'stop', 'vsftpd.service'])\n            print(\"Stopped vsftpd service.\")\n            cache['vsftpd'].mark_delete(auto_fix=True)\n            cache.commit()\n            print(\"Removed vsftpd package.\")\n        else:\n            # If package is required as a dependency, stop and mask the service\n            subprocess.run(['systemctl', 'stop', 'vsftpd.service'])\n            print(\"Stopped vsftpd service.\")\n            subprocess.run(['systemctl', 'mask', 'vsftpd.service'])\n            print(\"Masked vsftpd service.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure ldap server services are not in use",
    "id": "2.1.7",
    "type": "Automated",
    "start_page": 236,
    "end_page": 238,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP server, it is recommended that the software be removed to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify slapd is not installed:\n```\n# dpkg-query -s slapd &>/dev/null && echo \"slapd is installed\"\n```\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify slapd.service is not enabled:\n```\n# systemctl is-enabled slapd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify slapd.service is not active:\n```\n# systemctl is-active slapd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "Run the following command to verify slapd is not installed:\n```\n# dpkg-query -s slapd &>/dev/null && echo \"slapd is installed\"\n```\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify slapd.service is not enabled:\n```\n# systemctl is-enabled slapd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify slapd.service is not active:\n```\n# systemctl is-active slapd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n",
    "remediation_details": "Run the following commands to stop slapd.service and remove the slapd package:\n```\n# systemctl stop slapd.service\n# apt purge slapd\n```\n**- OR -**\n\n**- IF - the slapd package is required as a dependency:**\nRun the following commands to stop and mask slapd.service:\n```\n# systemctl stop slapd.service\n# systemctl mask slapd.service\n```",
    "remediation_code": "Run the following commands to stop slapd.service and remove the slapd package:\n```\n# systemctl stop slapd.service\n# apt purge slapd\n```\n**- OR -**\n\n**- IF - the slapd package is required as a dependency:**\nRun the following commands to stop and mask slapd.service:\n```\n# systemctl stop slapd.service\n# systemctl mask slapd.service\n```",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the system for LDAP server service usage\"\"\"\n    # Check if slapd is installed\n    try:\n        pkg_resources.get_distribution('slapd')\n        print(\"slapd is installed\")\n        # If installed, check if the service is enabled or active\n        if (subprocess.run(['systemctl', 'is-enabled', 'slapd.service'], \n                            stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.decode('utf-8').strip() == 'enabled' or\n            subprocess.run(['systemctl', 'is-active', 'slapd.service'], \n                           stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.decode('utf-8').strip() == 'active'):\n            return False  # Vulnerable: Service is enabled or active\n        else:\n            return True  # Not vulnerable: Service is not enabled or active\n    except pkg_resources.DistributionNotFound:\n        return True  # Not vulnerable: slapd is not installed\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the LDAP server service vulnerability\"\"\"\n    try:\n        pkg_resources.get_distribution('slapd')\n        print(\"slapd is installed, remediating...\")\n        \n        # Check if systemd is managing the service\n        if subprocess.run(['which', 'systemctl'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).returncode == 0:\n            # Stop the service\n            subprocess.run(['systemctl', 'stop', 'slapd.service'])\n            print(\"Stopped slapd.service\")\n            \n            # Check if the package is required as a dependency\n            dependencies = subprocess.run(['apt-cache', 'rdepends', 'slapd'], \n                                         stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout.decode('utf-8')\n            if dependencies.strip():  # Package has dependencies\n                # Mask the service to prevent automatic start\n                subprocess.run(['systemctl', 'mask', 'slapd.service'])\n                print(\"Masked slapd.service\")\n            else:  # No dependencies, remove the package\n                subprocess.run(['apt', 'purge', '-y', 'slapd'])\n                print(\"Removed slapd package\")\n        else:\n            print(\"Systemd not found, cannot remediate using systemctl. Please manually stop and remove slapd.\")\n    except pkg_resources.DistributionNotFound:\n        print(\"slapd is not installed, no remediation needed.\")\n"
  },
  {
    "name": "Ensure message access server services are not in use",
    "id": "2.1.8",
    "type": "Automated",
    "start_page": 239,
    "end_page": 242,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "dovecot-imapd and dovecot-pop3d are an open source IMAP and POP3 server for Linux-based systems.",
    "rationale": "Unless POP3 and/or IMAP servers are to be provided by this system, it is recommended that the package be removed to reduce the potential attack surface. Note: Several IMAP/POP3 servers exist and can use other service names. These should also be audited and the packages removed if not required.",
    "audit_details": "Run the following command to verify dovecot-imapd and dovecot-pop3d are not installed: # dpkg-query -s dovecot-imapd &>/dev/null && echo \"dovecot-imapd is installed\" Nothing should be returned. # dpkg-query -s dovecot-pop3d &>/dev/null && echo \"dovecot-pop3d is installed\" Nothing should be returned. - OR - - IF - a package is installed and is required for dependencies: Run the following commands to verify dovecot.socket and dovecot.service are not enabled: # systemctl is-enabled dovecot.socket dovecot.service 2>/dev/null | grep 'enabled' Nothing should be returned Run the following command to verify dovecot.socket and dovecot.service are not active: # systemctl is-active dovecot.socket dovecot.service 2>/dev/null | grep '^active' Nothing should be returned Note: If the package is required for a dependency - Ensure the dependent package is approved by local site policy - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s dovecot-imapd &>/dev/null && echo \"dovecot-imapd is installed\" # dpkg-query -s dovecot-pop3d &>/dev/null && echo \"dovecot-pop3d is installed\" # systemctl is-enabled dovecot.socket dovecot.service 2>/dev/null | grep 'enabled' # systemctl is-active dovecot.socket dovecot.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run one of the following commands to remove dovecot-imapd and dovecot-pop3d: Run the following commands to stop dovecot.socket and dovecot.service, and remove the dovecot-imapd and dovecot-pop3d packages: # systemctl stop dovecot.socket dovecot.service # apt purge dovecot-imapd dovecot-pop3d - OR - - IF - a package is installed and is required for dependencies: Run the following commands to stop and mask dovecot.socket and dovecot.service: # systemctl stop dovecot.socket dovecot.service # systemctl mask dovecot.socket dovecot.service",
    "remediation_code": "# systemctl stop dovecot.socket dovecot.service # apt purge dovecot-imapd dovecot-pop3d # systemctl stop dovecot.socket dovecot.service # systemctl mask dovecot.socket dovecot.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    # Check if packages are installed\n    packages = ['dovecot-imapd', 'dovecot-pop3d']\n    installed_packages = [pkg for pkg in packages if pkg in pkg_resources.working_set]\n    \n    if not installed_packages:\n        print(\"Neither dovecot-imapd nor dovecot-pop3d is installed.\")\n        return False\n    \n    # If installed, check service and socket status\n    for service in ['dovecot.socket', 'dovecot.service']:\n        enabled = subprocess.run(['systemctl', 'is-enabled', service], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        active = subprocess.run(['systemctl', 'is-active', service], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        \n        if b'enabled' in enabled.stdout or b'active' in active.stdout:\n            print(f\"Vulnerability found: {service} is {'enabled' if b'enabled' in enabled.stdout else 'active'}.\")\n            return True\n    \n    print(\"No vulnerabilities found related to dovecot services.\")\n    return False\n\ndef remediate_vuln() -> None:\n    services = ['dovecot.socket', 'dovecot.service']\n    packages = ['dovecot-imapd', 'dovecot-pop3d']\n    \n    # Stop services if active\n    for service in services:\n        status = subprocess.run(['systemctl', 'is-active', service], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if b'active' in status.stdout:\n            subprocess.run(['systemctl', 'stop', service])\n            print(f\"Stopped {service}.\")\n    \n    # Mask services (assuming dependency check is affirmative or not applicable)\n    for service in services:\n        subprocess.run(['systemctl', 'mask', service])\n        print(f\"Masked {service}.\")\n    \n    # Purge packages\n    subprocess.run(['apt', 'purge', '-y'] + packages)\n    print(f\"Purged {', '.join(packages)}.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure network file system services are not in use",
    "id": "2.1.9",
    "type": "Automated",
    "start_page": 243,
    "end_page": 245,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Network File System (NFS) is one of the first and most widely distributed file systems in the UNIX environment. It provides the ability for systems to mount file systems of other servers through the network.",
    "rationale": "If the system does not export NFS shares, it is recommended that the nfs-kernel server package be removed to reduce the remote attack surface.",
    "audit_details": "Run the following command to verify nfs-kernel-server is not installed:\n# dpkg-query -s nfs-kernel-server &>/dev/null && echo \"nfs-kernel-server is installed\"\nNothing should be returned.\n- OR -\n- IF - package is required for dependencies:\nRun the following command to verify that the nfs-server.service is not enabled:\n# systemctl is-enabled nfs-server.service 2>/dev/null | grep 'enabled'\nNothing should be returned\nRun the following command to verify the nfs-server.service is not active:\n# systemctl is-active nfs-server.service 2>/dev/null | grep '^active'\nNothing should be returned\nNote: If the package is required for a dependency\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s nfs-kernel-server &>/dev/null && echo \"nfs-kernel-server is installed\"\n# systemctl is-enabled nfs-server.service 2>/dev/null | grep 'enabled'\n# systemctl is-active nfs-server.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following command to stop nfs-server.service and remove nfs-kernel server package:\n# systemctl stop nfs-server.service\n# apt purge nfs-kernel-server\n- OR -\n- IF - the nfs-kernel-server package is required as a dependency:\nRun the following commands to stop and mask the nfs-server.service:\n# systemctl stop nfs-server.service\n# systemctl mask nfs-server.service",
    "remediation_code": "# systemctl stop nfs-server.service\n# apt purge nfs-kernel-server\n# systemctl stop nfs-server.service\n# systemctl mask nfs-server.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the vulnerability by checking if nfs-kernel-server is installed,\n    and if the nfs-server.service is enabled or active.\n    \n    Returns:\n        bool: True if the system is vulnerable, False otherwise.\n    \"\"\"\n    # Check if nfs-kernel-server is installed\n    installed_check = subprocess.run(['dpkg-query', '-s', 'nfs-kernel-server'], \n                                      stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if installed_check.returncode == 0:\n        # If installed, check service status\n        enabled_check = subprocess.run(['systemctl', 'is-enabled', 'nfs-server.service'], \n                                        stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        active_check = subprocess.run(['systemctl', 'is-active', 'nfs-server.service'], \n                                       stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        return b'enabled' in enabled_check.stdout or b'active' in active_check.stdout\n    else:\n        # Not installed, not vulnerable\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediates the vulnerability by stopping and either removing nfs-kernel-server\n    if possible, or masking the nfs-server.service if the package is a dependency.\n    \"\"\"\n    # Check if nfs-kernel-server is installed\n    installed_check = subprocess.run(['dpkg-query', '-s', 'nfs-kernel-server'], \n                                      stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    if installed_check.returncode == 0:\n        try:\n            # Attempt to remove nfs-kernel-server\n            subprocess.run(['apt', 'purge', 'nfs-kernel-server'], check=True)\n            print(\"Removed nfs-kernel-server package.\")\n        except subprocess.CalledProcessError:\n            # If removal fails (likely due to dependency), stop and mask the service\n            subprocess.run(['systemctl', 'stop', 'nfs-server.service'])\n            print(\"Stopped nfs-server.service.\")\n            subprocess.run(['systemctl', 'mask', 'nfs-server.service'])\n            print(\"Masked nfs-server.service.\")\n    else:\n        print(\"nfs-kernel-server is not installed. No action required.\")\n\n# Example usage:\nif audit_vuln():\n    print(\"Vulnerability detected. Remediating...\")\n    remediate_vuln()\nelse:\n    print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure nis server services are not in use",
    "id": "2.1.10",
    "type": "Automated",
    "start_page": 246,
    "end_page": 248,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Network Information Service (NIS) (formally known as Yellow Pages) is a clientserver directory service protocol for distributing system configuration files. The NIS server is a collection of programs that allow for the distribution of configuration files. The NIS client (ypbind) was used to bind a machine to an NIS server and receive the distributed configuration files.",
    "rationale": "ypserv.service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that ypserv.service be removed and other, more secure services be used",
    "audit_details": "Run the following command to verify ypserv is not installed:\n\n# dpkg-query -s ypserv &>/dev/null && echo \"ypserv is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify ypserv.service is not enabled:\n# systemctl is-enabled ypserv.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify ypserv.service is not active:\n# systemctl is-active ypserv.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s ypserv &>/dev/null && echo \"ypserv is installed\"\n\n# systemctl is-enabled ypserv.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active ypserv.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop ypserv.service and remove ypserv package:\n# systemctl stop ypserv.service\n# apt purge ypserv\n\n- OR -\n\n- IF - the ypserv package is required as a dependency:\nRun the following commands to stop and mask ypserv.service:\n# systemctl stop ypserv.service\n# systemctl mask ypserv.service",
    "remediation_code": "# systemctl stop ypserv.service\n# apt purge ypserv\n\n# systemctl stop ypserv.service\n# systemctl mask ypserv.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for ypserv vulnerability.\n    \n    Returns:\n        bool: True if vulnerability is found, False otherwise.\n    \"\"\"\n    # Check if ypserv is installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'ypserv'], stderr=subprocess.DEVNULL)\n        print(\"ypserv is installed\")\n        \n        # If installed, check service status\n        if (subprocess.run(['systemctl', 'is-enabled', 'ypserv.service'], \n                           stdout=subprocess.PIPE, stderr=subprocess.DEVNULL).stdout.strip().decode('utf-8') == 'enabled' or\n            subprocess.run(['systemctl', 'is-active', 'ypserv.service'], \n                           stdout=subprocess.PIPE, stderr=subprocess.DEVNULL).stdout.strip().decode('utf-8') == 'active'):\n            return True  # Vulnerability found\n    except subprocess.CalledProcessError:\n        pass  # ypserv not installed or service not found\n    \n    return False  # No vulnerability found\n\n\ndef remediate_vuln(dependency_required: bool = False) -> None:\n    \"\"\"\n    Remediate ypserv vulnerability.\n    \n    Args:\n        dependency_required (bool, optional): If True, assumes ypserv is required for dependencies. Defaults to False.\n    \"\"\"\n    if not dependency_required:\n        # Attempt to stop the service\n        try:\n            subprocess.check_call(['systemctl', 'stop', 'ypserv.service'])\n            print(\"Stopped ypserv.service\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to stop ypserv.service: {e}\")\n        \n        # Purge the package\n        try:\n            subprocess.check_call(['apt', 'purge', 'ypserv'])\n            print(\"Purged ypserv package\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to purge ypserv package: {e}\")\n    \n    else:\n        # Stop the service\n        try:\n            subprocess.check_call(['systemctl', 'stop', 'ypserv.service'])\n            print(\"Stopped ypserv.service (dependency required)\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to stop ypserv.service (dependency required): {e}\")\n        \n        # Mask the service\n        try:\n            subprocess.check_call(['systemctl', 'mask', 'ypserv.service'])\n            print(\"Masked ypserv.service due to dependency\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to mask ypserv.service (dependency required): {e}\")\n\n\nif __name__ == \"__main__\":\n    vulnerability_found = audit_vuln()\n    if vulnerability_found:\n        # Assuming dependency check is external to this script for simplicity\n        # Pass True if ypserv is required for dependencies\n        remediate_vuln()  # Change to remediate_vuln(True) if dependency is required\n    else:\n        print(\"No ypserv vulnerability found\")\n"
  },
  {
    "name": "Ensure rpcbind services are not in use",
    "id": "2.1.12",
    "type": "Automated",
    "start_page": 252,
    "end_page": 254,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The rpcbind utility maps RPC services to the ports on which they listen. RPC processes notify rpcbind when they start, registering the ports they are listening on and the RPC program numbers they expect to serve. The client system then contacts rpcbind on the server with a particular RPC program number. The rpcbind.service redirects the client to the proper port number so it can communicate with the requested service.\n\nPortmapper is an RPC service, which always listens on tcp and udp 111, and is used to map other RPC services (such as nfs, nlockmgr, quotad, mountd, etc.) to their corresponding port number on the server. When a remote host makes an RPC call to that server, it first consults with portmap to determine where the RPC server is listening.",
    "rationale": "A small request (~82 bytes via UDP) sent to the Portmapper generates a large response (7x to 28x amplification), which makes it a suitable tool for DDoS attacks. If rpcbind is not required, it is recommended to remove rpcbind package to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify rpcbind package is not installed:\n\n# dpkg-query -s rpcbind &>/dev/null && echo \"rpcbind is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the rpcbind package is required as a dependency:\nRun the following command to verify rpcbind.socket and rpcbind.service are not enabled:\n# systemctl is-enabled rpcbind.socket rpcbind.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify rpcbind.socket and rpcbind.service are not active:\n# systemctl is-active rpcbind.socket rpcbind.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s rpcbind &>/dev/null && echo \"rpcbind is installed\"\n\n# systemctl is-enabled rpcbind.socket rpcbind.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active rpcbind.socket rpcbind.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop rpcbind.socket and rpcbind.service, and remove the rpcbind package:\n# systemctl stop rpcbind.socket rpcbind.service\n# apt purge rpcbind\n\n- OR -\n\n- IF - the rpcbind package is required as a dependency:\nRun the following commands to stop and mask the rpcbind.socket and rpcbind.service:\n# systemctl stop rpcbind.socket rpcbind.service\n# systemctl mask rpcbind.socket rpcbind.service",
    "remediation_code": "# systemctl stop rpcbind.socket rpcbind.service\n# apt purge rpcbind\n\n# systemctl stop rpcbind.socket rpcbind.service\n# systemctl mask rpcbind.socket rpcbind.service",
    "python_script": "\nimport apt\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit rpcbind vulnerability\"\"\"\n    # Check if rpcbind package is installed\n    cache = apt.Cache()\n    if cache['rpcbind'].is_installed:\n        print(\"rpcbind is installed\")\n        # Check if rpcbind.socket and rpcbind.service are enabled and active\n        for unit in ['rpcbind.socket', 'rpcbind.service']:\n            if subprocess.run(['systemctl', 'is-enabled', unit], stderr=subprocess.DEVNULL).returncode == 0:\n                print(f\"{unit} is enabled\")\n            if subprocess.run(['systemctl', 'is-active', unit], stderr=subprocess.DEVNULL).returncode == 0:\n                print(f\"{unit} is active\")\n        return False  # Vulnerability found\n    return True  # No vulnerability found\n\ndef remediate_vuln(dependency_required: bool = False) -> None:\n    \"\"\"Remediate rpcbind vulnerability\"\"\"\n    # Stop rpcbind.socket and rpcbind.service\n    for unit in ['rpcbind.socket', 'rpcbind.service']:\n        subprocess.run(['systemctl', 'stop', unit])\n        print(f\"Stopped {unit}\")\n    \n    if dependency_required:\n        # Mask rpcbind.socket and rpcbind.service if dependency required\n        for unit in ['rpcbind.socket', 'rpcbind.service']:\n            subprocess.run(['systemctl', 'mask', unit])\n            print(f\"Masked {unit}\")\n    else:\n        # Remove rpcbind package if not required\n        subprocess.run(['apt', 'purge', '-y', 'rpcbind'])\n        print(\"Removed rpcbind package\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"--remediate\":\n        dependency_required = input(\"Is rpcbind required as a dependency? (y/n): \") == \"y\"\n        remediate_vuln(dependency_required)\n    else:\n        vulnerable = not audit_vuln()\n        print(f\"System {'is' if vulnerable else 'is not'} vulnerable\")\n"
  },
  {
    "name": "Ensure rsync services are not in use",
    "id": "2.1.13",
    "type": "Automated",
    "start_page": 255,
    "end_page": 257,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The rsync service can be used to synchronize files between systems over network links.",
    "rationale": "rsync.service presents a security risk as the rsync protocol is unencrypted. The rsync package should be removed to reduce the attack area of the system.",
    "audit_details": "Run the following command to verify rsync is not installed:\n\n# dpkg-query -s rsync &>/dev/null && echo \"rsync is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the rsync package is required as a dependency:\nRun the following command to verify rsync.service is not enabled:\n# systemctl is-enabled rsync.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify rsync.service is not active:\n# systemctl is-active rsync.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n - Ensure the dependent package is approved by local site policy\n\n - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s rsync &>/dev/null && echo \"rsync is installed\"\n\n# systemctl is-enabled rsync.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active rsync.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop rsync.service, and remove the rsync package:\n\n# systemctl stop rsync.service\n# apt purge rsync\n\n- OR -\n\n- IF - the rsync package is required as a dependency:\nRun the following commands to stop and mask rsync.service:\n\n# systemctl stop rsync.service\n# systemctl mask rsync.service",
    "remediation_code": "# systemctl stop rsync.service\n# apt purge rsync\n\n# systemctl stop rsync.service\n# systemctl mask rsync.service",
    "python_script": ""
  },
  {
    "name": "Ensure samba file server services are not in use",
    "id": "2.1.14",
    "type": "Automated",
    "start_page": 258,
    "end_page": 260,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Samba daemon allows system administrators to configure their Linux systems to share file systems and directories with Windows desktops. Samba will advertise the file systems and directories via the Server Message Block (SMB) protocol. Windows desktop users will be able to mount these directories and file systems as letter drives on their systems.",
    "rationale": "If there is no need to mount directories and file systems to Windows systems, then this service should be deleted to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify samba is not installed:\n\n# dpkg-query -s samba &>/dev/null && echo \"samba is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify smbd.service is not enabled:\n# systemctl is-enabled smbd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the smbd.service is not active:\n# systemctl is-active smbd.service 2>/dev/null | grep '^active'\nNothing should be returned",
    "audit_code": "# dpkg-query -s samba &>/dev/null && echo \"samba is installed\"\n\n# systemctl is-enabled smbd.service 2>/dev/null | grep 'enabled'\n\n# systemctl is-active smbd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop smbd.service and remove samba package:\n# systemctl stop smbd.service\n# apt purge samba\n\n- OR -\n\n- IF - the samba package is required as a dependency:\nRun the following commands to stop and mask the smbd.service:\n# systemctl stop smbd.service\n# systemctl mask smbd.service",
    "remediation_code": "# systemctl stop smbd.service\n# apt purge samba\n\n# systemctl stop smbd.service\n# systemctl mask smbd.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if Samba file server services are in use.\"\"\"\n    # Check if samba package is installed\n    try:\n        pkg_resources.require('samba')\n        print(\"Samba package is installed. Proceeding to check service status...\")\n    except pkg_resources.ResolutionError:\n        # Package not installed, vulnerability not present\n        return True\n\n    # Check if smbd.service is enabled and active\n    for cmd in [\"is-enabled\", \"is-active\"]:\n        result = subprocess.run(f\"systemctl {cmd} smbd.service\", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if result.returncode == 0 and (b\"enabled\" in result.stdout or b\"active\" in result.stdout):\n            # Service is either enabled or active, vulnerability present\n            return False\n\n    # No indicators of vulnerability found\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the Samba file server services vulnerability.\"\"\"\n    # Stop smbd.service\n    subprocess.run(\"systemctl stop smbd.service\", shell=True)\n    print(\"Stopped smbd.service.\")\n\n    # Attempt to purge samba package\n    try:\n        subprocess.check_call(\"apt purge samba -y\", shell=True)\n        print(\"Purged samba package.\")\n    except subprocess.CalledProcessError:\n        # Purge failed, likely due to dependencies; mask the service instead\n        subprocess.run(\"systemctl mask smbd.service\", shell=True)\n        print(\"Masked smbd.service due to inability to purge samba package.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found related to Samba file server services.\")\n"
  },
  {
    "name": "Ensure snmp services are not in use",
    "id": "2.1.15",
    "type": "Automated",
    "start_page": 261,
    "end_page": 263,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Simple Network Management Protocol (SNMP) is a widely used protocol for monitoring the health and welfare of network equipment, computer equipment and devices like UPSs.\n\nNet-SNMP is a suite of applications used to implement SNMPv1 (RFC 1157), SNMPv2 (RFCs 1901-1908), and SNMPv3 (RFCs 3411-3418) using both IPv4 and IPv6.\n\nSupport for SNMPv2 classic (a.k.a. \"SNMPv2 historic\" - RFCs 1441-1452) was dropped with the 4.0 release of the UCD-snmp package.\n\nThe Simple Network Management Protocol (SNMP) server is used to listen for SNMP commands from an SNMP management system, execute the commands or collect the information and then send results back to the requesting system.",
    "rationale": "The SNMP server can communicate using SNMPv1, which transmits data in the clear and does not require authentication to execute commands. SNMPv3 replaces the simple/clear text password sharing used in SNMPv2 with more securely encoded parameters. If the the SNMP service is not required, the snmpd package should be removed to reduce the attack surface of the system.\n\n**Note: If SNMP is required:**\n\n  - The server should be configured for SNMP v3 only. User Authentication and Message Encryption should be configured.\n\n  - If SNMP v2 is absolutely necessary, modify the community strings' values.",
    "audit_details": "Run the following command to verify snmpd is not installed:\n\n```\n# dpkg-query -s snmpd &>/dev/null && echo \"snmpd is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify the snmpd.service is not enabled:\n```\n# systemctl is-enabled snmpd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify the snmpd.service is not active:\n```\n# systemctl is-active snmpd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s snmpd &>/dev/null && echo \"snmpd is installed\"\n# systemctl is-enabled snmpd.service 2>/dev/null | grep 'enabled'\n# systemctl is-active snmpd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop snmpd.service and remove the snmpd package:\n```\n# systemctl stop snmpd.service\n# apt purge snmpd\n```\n**- OR - If the package is required for dependencies:**\nRun the following commands to stop and mask the snmpd.service:\n```\n# systemctl stop snmpd.service\n# systemctl mask snmpd.service\n```",
    "remediation_code": "# systemctl stop snmpd.service\n# apt purge snmpd\n# systemctl stop snmpd.service\n# systemctl mask snmpd.service",
    "python_script": "```python\nimport subprocess\nimport pkg_resources\nimport systemd\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure snmp services are not in use.\n    \n    Returns:\n    bool: True if the system is vulnerable (snmpd is installed, enabled, or active), False otherwise.\n    \"\"\"\n    # Check if snmpd is installed\n    if pkg_resources.is_installed(\"snmpd\"):\n        print(\"snmpd is installed\")\n        installed = True\n    else:\n        installed = False\n    \n    # Check if snmpd.service is enabled\n    try:\n        subprocess.check_output([\"systemctl\", \"is-enabled\", \"snmpd.service\"]).decode().strip() == \"enabled\"\n        print(\"snmpd.service is enabled\")\n        enabled = True\n    except subprocess.CalledProcessError:\n        enabled = False\n    \n    # Check if snmpd.service is active\n    try:\n        systemd.journal.JournalHandler().get_unit_sysstate('snmpd.service') == 'active'\n        print(\"snmpd.service is active\")\n        active = True\n    except (systemd.journal.JournalException, AttributeError):\n        active = False\n    \n    return installed or enabled or active\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the snmp vulnerability by stopping and either removing or masking the snmpd service.\n    \"\"\"\n    # Stop snmpd.service\n    subprocess.run([\"systemctl\", \"stop\", \"snmpd.service\"])\n    print(\"Stopped snmpd.service\")\n    \n    # Attempt to remove snmpd package (if not dependency-critical)\n    try:\n        subprocess.run([\"apt\", \"purge\", \"-y\", \"snmpd\"])\n        print(\"Removed snmpd package via apt\")\n    except subprocess.CalledProcessError:\n        # If removal fails (likely dependency), mask the service instead\n        subprocess.run([\"systemctl\", \"mask\", \"snmpd.service\"])\n        print(\"Masked snmpd.service due to dependency\")\n```\n**Usage:**\n```python\nif audit_vuln():\n    print(\"System is vulnerable. Remediating...\")\n    remediate_vuln()\nelse:\n    print(\"System is not vulnerable.\")\n```\n**Note:** Ensure you run this script with sufficient privileges (e.g., `sudo`) to execute `systemctl` and `apt` commands effectively."
  },
  {
    "name": "Ensure tftp server services are not in use",
    "id": "2.1.16",
    "type": "Automated",
    "start_page": 264,
    "end_page": 266,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Trivial File Transfer Protocol (TFTP) is a simple protocol for exchanging files between two TCP/IP machines. TFTP servers allow connections from a TFTP Client for sending and receiving files.",
    "rationale": "Unless there is a need to run the system as a TFTP server, it is recommended that the package be removed to reduce the potential attack surface. TFTP does not have built-in encryption, access control or authentication. This makes it very easy for an attacker to exploit TFTP to gain access to files.",
    "audit_details": "Run the following command to verify tftpd-hpa is not installed:\n\n```\n# dpkg-query -s tftpd-hpa &>/dev/null && echo \"tftpd-hpa is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - the package is required for dependencies:**\nRun the following command to verify tftpd-hpa.service is not enabled:\n```\n# systemctl is-enabled tftpd-hpa.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify the tftpd-hpa.service is not active:\n```\n# systemctl is-active tftpd-hpa.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n\n  - Ensure the dependent package is approved by local site policy\n\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "\n# dpkg-query -s tftpd-hpa &>/dev/null && echo \"tftpd-hpa is installed\"\n\n# systemctl is-enabled tftpd-hpa.service 2>/dev/null | grep 'enabled'\n# systemctl is-active tftpd-hpa.service 2>/dev/null | grep '^active'\n",
    "remediation_details": "Run the following commands to stop tftpd-hpa.service, and remove the tftpd-hpa package:\n```\n# systemctl stop tftpd-hpa.service\n# apt purge tftpd-hpa\n```\n\n**- OR -**\n\n**- IF - the tftpd-hpa package is required as a dependency:**\nRun the following commands to stop and mask tftpd-hpa.service:\n```\n# systemctl stop tftpd-hpa.service\n# systemctl mask tftpd-hpa.service\n```",
    "remediation_code": "\n# systemctl stop tftpd-hpa.service\n# apt purge tftpd-hpa\n\n# systemctl stop tftpd-hpa.service\n# systemctl mask tftpd-hpa.service\n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for tftpd-hpa vulnerability\"\"\"\n    # Check if tftpd-hpa is installed\n    installed_cmd = [\"dpkg-query\", \"-s\", \"tftpd-hpa\"]\n    installed_output = subprocess.run(installed_cmd, capture_output=True, text=True)\n    if installed_output.returncode == 0:\n        print(\"tftpd-hpa is installed\")\n        \n        # Check if tftpd-hpa.service is enabled or active\n        enabled_cmd = [\"systemctl\", \"is-enabled\", \"tftpd-hpa.service\"]\n        enabled_output = subprocess.run(enabled_cmd, capture_output=True, text=True)\n        active_cmd = [\"systemctl\", \"is-active\", \"tftpd-hpa.service\"]\n        active_output = subprocess.run(active_cmd, capture_output=True, text=True)\n        \n        if \"enabled\" in enabled_output.stdout or \"active\" in active_output.stdout:\n            return True  # Vulnerable\n    \n    return False  # Not vulnerable\n\ndef remediate_vuln(dependency_required: bool = False) -> None:\n    \"\"\"Remediate tftpd-hpa vulnerability\"\"\"\n    if not dependency_required:\n        # Stop and purge tftpd-hpa\n        subprocess.run([\"systemctl\", \"stop\", \"tftpd-hpa.service\"], check=True)\n        print(\"Stopped tftpd-hpa.service\")\n        subprocess.run([\"apt\", \"purge\", \"tftpd-hpa\", \"-y\"], check=True)\n        print(\"Purged tftpd-hpa package\")\n    else:\n        # Stop and mask tftpd-hpa.service\n        subprocess.run([\"systemctl\", \"stop\", \"tftpd-hpa.service\"], check=True)\n        print(\"Stopped tftpd-hpa.service\")\n        subprocess.run([\"systemctl\", \"mask\", \"tftpd-hpa.service\"], check=True)\n        print(\"Masked tftpd-hpa.service\")\n\n# Example usage\nif __name__ == \"__main__\":\n    vulnerable = audit_vuln()\n    if vulnerable:\n        print(\"System is vulnerable. Remediating...\")\n        remediate_vuln()  # Set dependency_required=True if applicable\n    else:\n        print(\"System is not vulnerable.\")\n"
  },
  {
    "name": "Ensure web proxy server services are not in use",
    "id": "2.1.17",
    "type": "Automated",
    "start_page": 267,
    "end_page": 269,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Squid is a standard proxy server used in many distributions and environments.",
    "rationale": "Unless a system is specifically set up to act as a proxy server, it is recommended that the squid package be removed to reduce the potential attack surface. Note: Several HTTP proxy servers exist. These should be checked and removed unless required.",
    "audit_details": "Run the following command to verify squid is not installed:\n\n# dpkg-query -s squid &>/dev/null && echo \"squid is installed\"\n\nNothing should be returned.\n\n- OR -\n\n- IF - the package is required for dependencies:\nRun the following command to verify squid.service is not enabled:\n# systemctl is-enabled squid.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n\nRun the following command to verify the squid.service is not active:\n# systemctl is-active squid.service 2>/dev/null | grep '^active'\nNothing should be returned\n\nNote: If the package is required for a dependency\n\n- Ensure the dependent package is approved by local site policy\n- Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s squid &>/dev/null && echo \"squid is installed\"\n\n# systemctl is-enabled squid.service 2>/dev/null | grep 'enabled'\n# systemctl is-active squid.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop squid.service and remove the squid package:\n# systemctl stop squid.service\n# apt purge squid\n\n- OR - If the squid package is required as a dependency:\nRun the following commands to stop and mask the squid.service:\n# systemctl stop squid.service\n# systemctl mask squid.service",
    "remediation_code": "# systemctl stop squid.service\n# apt purge squid\n\n# systemctl stop squid.service\n# systemctl mask squid.service",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if Squid is installed, enabled, or active.\n    \n    Returns:\n        bool: True if vulnerability is present, False otherwise.\n    \"\"\"\n    # Check if Squid is installed\n    try:\n        pkg_resources.get_distribution('squid')\n        print(\"Squid package is installed.\")\n        installed = True\n    except pkg_resources.DistributionNotFound:\n        installed = False\n\n    # Check if Squid service is enabled (if installed)\n    enabled = False\n    if installed:\n        result = subprocess.run(['systemctl', 'is-enabled', 'squid.service'], \n                                stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n        enabled = result.stdout.decode().strip() == 'enabled'\n        if enabled:\n            print(\"Squid service is enabled.\")\n\n    # Check if Squid service is active (if installed)\n    active = False\n    if installed:\n        result = subprocess.run(['systemctl', 'is-active', 'squid.service'], \n                                stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n        active = result.stdout.decode().strip() == 'active'\n        if active:\n            print(\"Squid service is active.\")\n\n    # Vulnerability is present if Squid is installed and either enabled or active\n    return installed and (enabled or active)\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by stopping and either removing or masking Squid.\n    \"\"\"\n    # Check if Squid is installed before attempting remediation\n    try:\n        pkg_resources.get_distribution('squid')\n    except pkg_resources.DistributionNotFound:\n        print(\"Squid package is not installed. No remediation necessary.\")\n        return\n\n    # Stop Squid service\n    subprocess.run(['systemctl', 'stop', 'squid.service'])\n    print(\"Stopped Squid service.\")\n\n    # Attempt to remove Squid package\n    try:\n        subprocess.run(['apt', 'purge', 'squid', '-y'], check=True)\n        print(\"Removed Squid package.\")\n    except subprocess.CalledProcessError:\n        # If removal fails, assume Squid is required as a dependency\n        print(\"Failed to remove Squid package. Proceeding with masking service.\")\n        \n        # Mask Squid service\n        subprocess.run(['systemctl', 'mask', 'squid.service'])\n        print(\"Masked Squid service.\")\n\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Proceeding with remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure web server services are not in use",
    "id": "2.1.18",
    "type": "Automated",
    "start_page": 270,
    "end_page": 273,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Web servers provide the ability to host web site content.",
    "rationale": "Unless there is a local site approved requirement to run a web server service on the system, web server packages should be removed to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify apache2 is not installed:\n\n```\n# dpkg-query -s apache2 &>/dev/null && echo \"apache2 is installed\"\n```\n\nNothing should be returned.\nRun the following command to verify nginx is not installed:\n\n```\n# dpkg-query -s nginx &>/dev/null && echo \"nginx is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following command to verify apache2.socket, apache2.service, and nginx.service are not enabled:\n```\n# systemctl is-enabled apache2.socket apache2.service nginx.service\n2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify apache2.socket, apache2.service, and nginx.service are not active:\n```\n# systemctl is-active apache2.socket apache2.service nginx.service\n2>/dev/null | grep '^active'\nNothing should be returned\n```\n\n**Note:**\n\n  - Other web server packages may exist. They should also be audited, if not required and authorized by local site policy\n\n  - If the package is required for a dependency:\n\n`o` Ensure the dependent package is approved by local site policy\n`o` Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "Run the following command to verify apache2 is not installed:\n\n```\n# dpkg-query -s apache2 &>/dev/null && echo \"apache2 is installed\"\n```\n\nNothing should be returned.\nRun the following command to verify nginx is not installed:\n\n```\n# dpkg-query -s nginx &>/dev/null && echo \"nginx is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following command to verify apache2.socket, apache2.service, and nginx.service are not enabled:\n```\n# systemctl is-enabled apache2.socket apache2.service nginx.service\n2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify apache2.socket, apache2.service, and nginx.service are not active:\n```\n# systemctl is-active apache2.socket apache2.service nginx.service\n2>/dev/null | grep '^active'\nNothing should be returned\n```\n",
    "remediation_details": "Run the following commands to stop apache2.socket, httpd.service, and nginx.service, and remove apache2 and nginx packages:\n```\n# systemctl stop apache2.socket httpd.service nginx.service\n# apt purge apache2 nginx\n```\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following commands to stop and mask apache2.socket, apache2.service, and nginx.service:\n```\n# systemctl stop apache2.socket apache2.service nginx.service\n# systemctl mask apache2.socket apache2.service nginx.service\n```\n\n**Note:** Other web server packages may exist. If not required and authorized by local site policy, they should also be removed. If the package is required for a dependency, the service and socket should be stopped and masked.",
    "remediation_code": "Run the following commands to stop apache2.socket, httpd.service, and nginx.service, and remove apache2 and nginx packages:\n```\n# systemctl stop apache2.socket httpd.service nginx.service\n# apt purge apache2 nginx\n```\n\n**- OR -**\n\n**- IF - a package is installed and is required for dependencies:**\nRun the following commands to stop and mask apache2.socket, apache2.service, and nginx.service:\n```\n# systemctl stop apache2.socket apache2.service nginx.service\n# systemctl mask apache2.socket apache2.service nginx.service\n```\n**References:**\n\n1. NIST SP 800-53 Rev. 5: CM-7\n\n**Additional Information:**\n\nSeveral httpd servers exist and can use other service names. apache2 and nginx are example services that provide an HTTP server. These and other services should also be audited.\n\n**CIS Controls:**\n\n**Controls**\n\n**Control** **IG 1 IG 2 IG 3**\n**Version**\n\n4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software\n\nv8 Uninstall or disable unnecessary services on enterprise assets and software,    -    \n such as an unused file sharing service, web application module, or service\n function.\n\n9.2 Ensure Only Approved Ports, Protocols and Services\n\nv7 Are Running    -    \n Ensure that only network ports, protocols, and services listening on a system\n with validated business needs, are running on each system.\n\n|Controls Version|Control|IG 1|IG 2|IG 3|\n|---|---|---|---|---|\n|v8|4.8 Uninstall or Disable Unnecessary Services on Enterprise Assets and Software Uninstall or disable unnecessary services on enterprise assets and software, such as an unused file sharing service, web application module, or service function.||\u25cf|\u25cf|\n|v7|9.2 Ensure Only Approved Ports, Protocols and Services Are Running Ensure that only network ports, protocols, and services listening on a system with validated business needs, are running on each system.||\u25cf|\u25cf| \n\n**MITRE ATT&CK Mappings:**\n\n|MITRE ATT&CK Mappings:|Col2|Col3|\n|---|---|---|\n|Techniques / Sub- techniques|Tactics|Mitigations|\n|T1203, T1203.000, T1210, T1210.000, T1543, T1543.002|TA0008|M1042|",
    "python_script": "\nimport subprocess\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for web server vulnerabilities.\"\"\"\n    # Check if apache2 and nginx are installed\n    cache = apt.Cache()\n    installed_packages = [pkg.name for pkg in cache if pkg.is_installed]\n    if 'apache2' in installed_packages or 'nginx' in installed_packages:\n        # Check if services are enabled or active\n        services_to_check = ['apache2.socket', 'apache2.service', 'nginx.service']\n        for service in services_to_check:\n            if subprocess.run(['systemctl', 'is-enabled', service], stdout=subprocess.DEVNULL).returncode == 0:\n                print(f\"Service {service} is enabled.\")\n                return True\n            if subprocess.run(['systemctl', 'is-active', service], stdout=subprocess.DEVNULL).returncode == 0:\n                print(f\"Service {service} is active.\")\n                return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate web server vulnerabilities.\"\"\"\n    cache = apt.Cache()\n    services_to_stop = ['apache2.socket', 'apache2.service', 'nginx.service']\n    \n    # Stop services\n    for service in services_to_stop:\n        if subprocess.run(['systemctl', 'is-active', service], stdout=subprocess.DEVNULL).returncode == 0:\n            subprocess.run(['systemctl', 'stop', service])\n            print(f\"Stopped {service} service.\")\n    \n    # Check if packages should be removed or services masked\n    packages_to_check = ['apache2', 'nginx']\n    for pkg in packages_to_check:\n        if pkg in [p.name for p in cache if p.is_installed]:\n            # Assuming no dependency check for simplicity; in a real scenario, this should be considered\n            if input(f\"Is {pkg} required for dependencies? (y/n): \").lower()!= 'y':\n                # Remove package\n                subprocess.run(['apt', 'purge', '-y', pkg])\n                print(f\"Removed {pkg} package.\")\n            else:\n                # Mask services\n                for service in services_to_stop:\n                    if pkg in service:\n                        subprocess.run(['systemctl', 'mask', service])\n                        print(f\"Masked {service} service.\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"No web server vulnerability found.\")\n"
  },
  {
    "name": "Ensure xinetd services are not in use",
    "id": "2.1.19",
    "type": "Automated",
    "start_page": 274,
    "end_page": 276,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The X Window System provides a Graphical User Interface (GUI) where users can have multiple windows in which to run programs and various add on. The X Windows system is typically used on workstations where users login, but not on servers where users typically do not login.",
    "rationale": "Unless your organization specifically requires graphical login access via X Windows, remove it to reduce the potential attack surface.",
    "audit_details": "Run the following command to verify the xinetd package is not installed:\n```\n# dpkg-query -s xinetd &>/dev/null && echo \"xinetd is installed\"\n```\nNothing should be returned.\n**-OR-**\n**-IF- the xinetd package is required as a dependency:**\nRun the following command to verify xinetd.service is not enabled:\n```\n# systemctl is-enabled xinetd.service 2>/dev/null | grep 'enabled'\nNothing should be returned\n```\nRun the following command to verify xinetd.service is not active:\n```\n# systemctl is-active xinetd.service 2>/dev/null | grep '^active'\nNothing should be returned\n```\n**Note: If the package is required for a dependency**\n  - Ensure the dependent package is approved by local site policy\n  - Ensure stopping and masking the service and/or socket meets local site policy",
    "audit_code": "# dpkg-query -s xinetd &>/dev/null && echo \"xinetd is installed\"\n# systemctl is-enabled xinetd.service 2>/dev/null | grep 'enabled'\n# systemctl is-active xinetd.service 2>/dev/null | grep '^active'",
    "remediation_details": "Run the following commands to stop xinetd.service, and remove the xinetd package:\n```\n# systemctl stop xinetd.service\n# apt purge xinetd\n```\n**-OR-**\n**-IF- the xinetd package is required as a dependency:**\nRun the following commands to stop and mask the xinetd.service:\n```\n# systemctl stop xinetd.service\n# systemctl mask xinetd.service\n```",
    "remediation_code": "# systemctl stop xinetd.service\n# apt purge xinetd\n# systemctl stop xinetd.service\n# systemctl mask xinetd.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for xinetd vulnerability\"\"\"\n    # Check if xinetd is installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'xinetd'], stderr=subprocess.DEVNULL)\n        print(\"xinetd is installed\")\n    except subprocess.CalledProcessError:\n        # Not installed, vulnerability not present\n        return True\n\n    # If installed, check service status\n    enabled = subprocess.run(['systemctl', 'is-enabled', 'xinetd.service'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    active = subprocess.run(['systemctl', 'is-active', 'xinetd.service'], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    \n    if b'enabled' in enabled.stdout and b'active' in active.stdout:\n        # Service is both enabled and active, vulnerability present\n        return False\n    else:\n        # Either not enabled or not active (or both), consider vulnerability not present for this check\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate xinetd vulnerability\"\"\"\n    if audit_vuln():\n        print(\"No remediation necessary\")\n        return\n\n    # Attempt to stop the service\n    try:\n        subprocess.check_call(['systemctl', 'stop', 'xinetd.service'])\n        print(\"Stopped xinetd.service\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to stop xinetd.service: {e}\")\n\n    # Determine remediation path based on dependency requirement (for this example, assume no dependency requirement indicated)\n    dependency_required = False  # TODO: Implement check for dependency requirement if needed\n    if dependency_required:\n        try:\n            subprocess.check_call(['systemctl', 'mask', 'xinetd.service'])\n            print(\"Masked xinetd.service due to dependency requirement\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to mask xinetd.service: {e}\")\n    else:\n        try:\n            subprocess.check_call(['apt', 'purge', '-y', 'xinetd'])\n            print(\"Purged xinetd package\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to purge xinetd package: {e}\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == 'remediate':\n        remediate_vuln()\n    else:\n        audit Outcome = audit_vuln()\n        print(f\"Vulnerability Present: {not audit_outcome}\")\n"
  },
  {
    "name": "Ensure mail transfer agent is configured for local-only mode",
    "id": "2.1.21",
    "type": "Automated",
    "start_page": 279,
    "end_page": 281,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Mail Transfer Agents (MTA), such as sendmail and Postfix, are used to listen for incoming mail and transfer the messages to the appropriate user or mail server. If the system is not intended to be a mail server, it is recommended that the MTA be configured to only process local mail.",
    "rationale": "The software for all Mail Transfer Agents is complex and most have a long history of security issues. While it is important to ensure that the system can process local mail messages, it is not necessary to have the MTA's daemon listening on a port unless the server is intended to be a mail server that receives and processes mail from other systems.",
    "audit_details": "Run the following script to verify that the MTA is not listening on any non-loopback address ( 127.0.0.1 or ::1\n#!/usr/bin/env bash\n{\nl_output=\"\"\nl_output2=\"\"\na_port_list=(\"25\" \"465\" \"587\")\n# Check if inet_interfaces is not set to all\nif [ \"$(postconf -n inet_interfaces)\" != \"inet_interfaces = all\" ]; then\n  for l_port_number in \"${a_port_list[@]}\"; do\n    if ss -plntu | grep -P -- ':'\"$l_port_number\"'\\b' | grep -Pvq -'\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):'\"$l_port_number\"'\\b'; then\n      l_output2=\"$l_output2\\n - Port \"$l_port_number\" is listening on\na non-loopback network interface\"\n    else\n      l_output=\"$l_output\\n - Port \"$l_port_number\" is not listening\non a non-loopback network interface\"\n    fi\n  done\nelse\n  l_output2=\"$l_output2\\n - Postfix is bound to all interfaces\"\nfi\nunset a_port_list\n# Provide output from checks\nif [ -z \"$l_output2\" ]; then\n  echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\nelse\n  # If error output (l_output2) is not empty, we fail. Also output anything\nthat's correctly configured\necho -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit\nfailure:\\n$l_output2\\n\"\n  [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\nfi\n}",
    "audit_code": "#!/usr/bin/env bash\n{\nl_output=\"\"\nl_output2=\"\"\na_port_list=(\"25\" \"465\" \"587\")\n# Check if inet_interfaces is not set to all\nif [ \"$(postconf -n inet_interfaces)\" != \"inet_interfaces = all\" ]; then\n  for l_port_number in \"${a_port_list[@]}\"; do\n    if ss -plntu | grep -P -- ':'\"$l_port_number\"'\\b' | grep -Pvq -'\\h+(127\\.0\\.0\\.1|\\[?::1\\]?):'\"$l_port_number\"'\\b'; then\n      l_output2=\"$l_output2\\n - Port \"$l_port_number\" is listening on\na non-loopback network interface\"\n    else\n      l_output=\"$l_output\\n - Port \"$l_port_number\" is not listening\non a non-loopback network interface\"\n    fi\n  done\nelse\n  l_output2=\"$l_output2\\n - Postfix is bound to all interfaces\"\nfi\nunset a_port_list\n# Provide output from checks\nif [ -z \"$l_output2\" ]; then\n  echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\nelse\n  # If error output (l_output2) is not empty, we fail. Also output anything\nthat's correctly configured\necho -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit\nfailure:\\n$l_output2\\n\"\n  [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\nfi\n}",
    "remediation_details": "Edit /etc/postfix/main.cf and add the following line to the RECEIVING MAIL section.\nIf the line already exists, change it to look like the line below:\n\ninet_interfaces = loopback-only\n\nRun the following command to restart postfix:\n# systemctl restart postfix\n\n**Note:**  - This recommendation is designed around the postfix mail server.\n\n- Depending on your environment you may have an alternative MTA installed such as exim4. If this is the case consult the documentation for your installed MTA to configure the recommended state.",
    "remediation_code": "Edit /etc/postfix/main.cf and add the following line to the RECEIVING MAIL section.\nIf the line already exists, change it to look like the line below:\n\ninet_interfaces = loopback-only\n\nRun the following command to restart postfix:\n# systemctl restart postfix\n",
    "python_script": "\nimport subprocess\nimport re\nimport configparser\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the MTA (Postfix) is configured for local-only mode.\n    \n    Returns:\n    bool: True if audit passes (MTA is local-only), False otherwise.\n    \"\"\"\n    # Check if inet_interfaces is not set to all\n    output = subprocess.check_output(['postconf', '-n', 'inet_interfaces']).decode('utf-8')\n    if output.strip() != \"inet_interfaces = all\":\n        port_list = [\"25\", \"465\", \"587\"]\n        for port in port_list:\n            # Use ss command to check if port is listening on non-loopback interface\n            ss_output = subprocess.check_output(['ss', '-plntu']).decode('utf-8')\n            if re.search(rf\":{port}\\b.*(?<!127\\.0\\.0\\.1|::1):{port}\\b\", ss_output):\n                print(f\" - Port {port} is listening on a non-loopback network interface\")\n                return False\n            else:\n                print(f\" - Port {port} is not listening on a non-loopback network interface\")\n    else:\n        print(\" - Postfix is bound to all interfaces\")\n        return False\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by configuring Postfix for local-only mode.\n    \"\"\"\n    config = configparser.ConfigParser()\n    config.read('/etc/postfix/main.cf')\n    \n    # Add or modify inet_interfaces to loopback-only\n    if 'smtpd' in config.sections():\n        if 'inet_interfaces' in config['smtpd']:\n            if config['smtpd']['inet_interfaces'].strip() != \"loopback-only\":\n                config['smtpd']['inet_interfaces'] = \"loopback-only\"\n        else:\n            config['smtpd']['inet_interfaces'] = \"loopback-only\"\n    else:\n        config['smtpd'] = {'inet_interfaces': \"loopback-only\"}\n    \n    with open('/etc/postfix/main.cf', 'w') as configfile:\n        config.write(configfile)\n    print(\" - Updated /etc/postfix/main.cf with inet_interfaces = loopback-only\")\n    \n    # Restart Postfix service\n    subprocess.run(['systemctl', 'restart', 'postfix'])\n    print(\" - Restarted Postfix service\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure NIS Client is not installed",
    "id": "2.2.1",
    "type": "Automated",
    "start_page": 286,
    "end_page": 287,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Network Information Service (NIS), formerly known as Yellow Pages, is a clientserver directory service protocol used to distribute system configuration files. The NIS client was used to bind a machine to an NIS server and receive the distributed configuration files.",
    "rationale": "The NIS service is inherently an insecure system that has been vulnerable to DOS attacks, buffer overflows and has poor authentication for querying NIS maps. NIS generally has been replaced by such protocols as Lightweight Directory Access Protocol (LDAP). It is recommended that the service be removed.",
    "audit_details": "Verify nis is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s nis &>/dev/null && echo \"nis is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s nis &>/dev/null && echo \"nis is installed\"",
    "remediation_details": "Uninstall nis:\n\n```\n# apt purge nis\n```\n",
    "remediation_code": "# apt purge nis",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if NIS is installed.\"\"\"\n    result = subprocess.run(['dpkg-query', '-s', 'nis'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    return result.returncode == 0\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by uninstalling NIS if it's present.\"\"\"\n    if audit_vuln():\n        result = subprocess.run(['apt', 'purge', '-y', 'nis'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if result.returncode == 0:\n            print(\"Uninstalled NIS package.\")\n        else:\n            print(f\"Failed to uninstall NIS: {result.stderr.decode().strip()}\")\n    else:\n        print(\"NIS is not installed, no action needed.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(\"Vulnerability present:\", audit_vuln())\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure rsh client is not installed",
    "id": "2.2.2",
    "type": "Automated",
    "start_page": 288,
    "end_page": 289,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The rsh-client package contains the client commands for the rsh services.",
    "rationale": "These legacy clients contain numerous security exposures and have been replaced with the more secure SSH package. Even if the server is removed, it is best to ensure the clients are also removed to prevent users from inadvertently attempting to use these commands and therefore exposing their credentials. Note that removing the rsh-client package removes the clients for rsh, rcp and rlogin.",
    "audit_details": "Verify rsh-client is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s rsh-client &>/dev/null && echo \"rsh-client is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s rsh-client &>/dev/null && echo \"rsh-client is installed\"",
    "remediation_details": "Uninstall rsh:\n\n```\n# apt purge rsh-client\n```\n",
    "remediation_code": "# apt purge rsh-client",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the rsh-client package is installed.\n    \n    Returns:\n    bool: True if rsh-client is installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to query the package status, capturing output and error\n        output = subprocess.check_output(['dpkg-query', '-s', 'rsh-client'], stderr=subprocess.STDOUT)\n        \n        # If 'Status: install ok installed' is found in the output, the package is installed\n        return b'Status: install ok installed' in output\n    except FileNotFoundError:\n        # Handle the case where dpkg-query is not found (should not occur on Debian/Ubuntu)\n        print(\"Error: dpkg-query command not found.\")\n        return False\n    except subprocess.CalledProcessError as e:\n        # If an error occurs during the command execution, print the error and return False\n        print(f\"Error auditing rsh-client: {e.output.decode().strip()}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by uninstalling the rsh-client package.\n    \"\"\"\n    try:\n        # Attempt to purge the rsh-client package\n        subprocess.check_call(['apt', 'purge', '-y', 'rsh-client'])\n        print(\"Successfully uninstalled rsh-client package.\")\n    except FileNotFoundError:\n        # Handle the case where the apt command is not found (should not occur on Debian/Ubuntu)\n        print(\"Error: apt command not found. Cannot remediate.\")\n    except subprocess.CalledProcessError as e:\n        # If an error occurs during the uninstallation, print the error\n        print(f\"Error remediating rsh-client: {e.output.decode().strip()}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"rsh-client is installed. Initiating remediation...\")\n        remediate_vuln()\n    else:\n        print(\"rsh-client is not installed. System is compliant.\")\n"
  },
  {
    "name": "Ensure talk client is not installed",
    "id": "2.2.3",
    "type": "Automated",
    "start_page": 290,
    "end_page": 291,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The talk software makes it possible for users to send and receive messages across systems through a terminal session. The talk client, which allows initialization of talk sessions, is installed by default.",
    "rationale": "The software presents a security risk as it uses unencrypted protocols for communication.",
    "audit_details": "Verify talk is not installed. The following command may provide the needed information:\n\n```\n# dpkg-query -s talk &>/dev/null && echo \"talk is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s talk &>/dev/null && echo \"talk is installed\"",
    "remediation_details": "Uninstall talk:\n\n```\n# apt purge talk\n```\n",
    "remediation_code": "# apt purge talk",
    "python_script": "\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if the talk client is not installed.\"\"\"\n    cache = apt.Cache()\n    return cache['talk'].installed is False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by uninstalling the talk client if it's installed.\"\"\"\n    cache = apt.Cache()\n    if cache['talk'].installed:\n        print(\"Uninstalling `talk` package...\")\n        cache['talk'].mark_delete()\n        try:\n            cache.commit()\n            print(\"Successfully uninstalled `talk` package.\")\n        except Exception as e:\n            print(f\"Failed to uninstall `talk`: {e}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Initiating remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure telnet client is not installed",
    "id": "2.2.4",
    "type": "Automated",
    "start_page": 292,
    "end_page": 293,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The telnet package contains the telnet client, which allows users to start connections to other systems via the telnet protocol.",
    "rationale": "The telnet protocol is insecure and unencrypted. The use of an unencrypted transmission medium could allow an unauthorized user to steal credentials. The ssh package provides an encrypted session and stronger security and is included in most Linux distributions.",
    "audit_details": "Verify telnet is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s telnet &>/dev/null && echo \"telnet is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s telnet &>/dev/null && echo \"telnet is installed\"",
    "remediation_details": "Uninstall telnet:\n\n```\n# apt purge telnet\n```\n\n",
    "remediation_code": "# apt purge telnet",
    "python_script": "\nimport subprocess\nimport pkg_resources\nimport distro  # Not strictly necessary for this script but included for awareness\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system for the presence of the telnet client.\n    \n    Returns:\n        bool: True if telnet is not installed, False otherwise.\n    \"\"\"\n    try:\n        pkg_resources.require('telnet')\n        print(\"telnet is installed\")\n        return False\n    except pkg_resources.ResolutionError:\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Uninstalls the telnet client if present.\n    \"\"\"\n    if not audit_vuln():  # Check again within remediation, for educational purposes\n        try:\n            # Using subprocess for system command execution; consider security implications for user input\n            subprocess.check_call(['apt', 'purge', '-y', 'telnet'])  # -y for yes to all prompts\n            print(\"Successfully uninstalled telnet client.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to uninstall telnet: {e}\")\n    else:\n        print(\"telnet is already uninstalled.\")\n\nif __name__ == \"__main__\":\n    # Example usage\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"System is not vulnerable (telnet not installed).\")\n"
  },
  {
    "name": "Ensure ldap client is not installed",
    "id": "2.2.5",
    "type": "Automated",
    "start_page": 294,
    "end_page": 295,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Lightweight Directory Access Protocol (LDAP) was introduced as a replacement for NIS/YP. It is a service that provides a method for looking up information from a central database.",
    "rationale": "If the system will not need to act as an LDAP client, it is recommended that the software be removed to reduce the potential attack surface.",
    "audit_details": "Verify that ldap-utils is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s ldap-utils &>/dev/null && echo \"ldap-utils is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s ldap-utils &>/dev/null && echo \"ldap-utils is installed\"",
    "remediation_details": "Uninstall ldap-utils:\n\n```\n# apt purge ldap-utils\n```",
    "remediation_code": "# apt purge ldap-utils",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if ldap-utils is installed.\"\"\"\n    try:\n        # Using dpkg to check package status, exit_code 0 means installed\n        subprocess.check_output(['dpkg', '-s', 'ldap-utils'])\n        print(\"ldap-utils is installed\")\n        return True\n    except subprocess.CalledProcessError:\n        # Non-zero exit code indicates ldap-utils is not installed\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by uninstalling ldap-utils.\"\"\"\n    try:\n        # Attempt to purge ldap-utils using apt\n        subprocess.check_call(['apt', 'purge', '-y', 'ldap-utils'])\n        print(\"Purged ldap-utils using apt\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to purge ldap-utils: {e}\")\n\n# Example usage (call the functions)\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ftp client is not installed",
    "id": "2.2.6",
    "type": "Automated",
    "start_page": 296,
    "end_page": 297,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "FTP (File Transfer Protocol) is a traditional and widely used standard tool for transferring files between a server and clients over a network, especially where no authentication is necessary (permits anonymous users to connect to a server).",
    "rationale": "FTP does not protect the confidentiality of data or authentication credentials. It is recommended SFTP be used if file transfer is required. Unless there is a need to run the system as a FTP server (for example, to allow anonymous downloads), it is recommended that the package be removed to reduce the potential attack surface.",
    "audit_details": "Verify ftp is not installed. Use the following command to provide the needed information:\n\n```\n# dpkg-query -s ftp &>/dev/null && echo \"ftp is installed\"\n```\n\nNothing should be returned.",
    "audit_code": "# dpkg-query -s ftp &>/dev/null && echo \"ftp is installed\"",
    "remediation_details": "Run the following command to uninstall ftp:\n\n```\n# apt purge ftp\n```\n",
    "remediation_code": "# apt purge ftp",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the ftp client is installed.\n    \n    Returns:\n        bool: True if ftp is installed, False otherwise.\n    \"\"\"\n    try:\n        # Attempt to query the package status\n        subprocess.check_output(['dpkg-query', '-s', 'ftp'], stderr=subprocess.DEVNULL)\n        # If no exception was raised, ftp is likely installed\n        return True\n    except subprocess.CalledProcessError:\n        # If an exception was raised, ftp is not installed\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by uninstalling the ftp client.\n    \"\"\"\n    try:\n        # Attempt to purge the ftp package\n        subprocess.check_call(['apt', 'purge', '-y', 'ftp'])\n        print(\"Removed ftp package.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to remove ftp package: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found: ftp is installed.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found: ftp is not installed.\")\n"
  },
  {
    "name": "Ensure a single time synchronization daemon is in use",
    "id": "2.3.1.1",
    "type": "Automated",
    "start_page": 300,
    "end_page": 303,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "System time should be synchronized between all systems in an environment. This is typically done by establishing an authoritative time server or set of servers and having all systems synchronize their clocks to them.\n\nNotes:\n\n - On virtual systems where host-based time synchronization is available consult your virtualization software documentation and verify that host-based synchronization is in use and follows local site policy. In this scenario, this section should be skipped.\n\n - Only one time synchronization method should be in use on the system. Configuring multiple time synchronization methods could lead to unexpected or unreliable results.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and ensures log files have consistent time records across the enterprise, which aids in forensic investigations.",
    "audit_details": "On physical systems, and virtual systems where host-based time synchronization is not available. One of the two time synchronization daemons should be available; chrony or systemd-timesyncd. Run the following script to verify that a single time synchronization daemon is available on the system:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  service_not_enabled_chk()\n  {\n    l_out2=\"\"\n    if systemctl is-enabled \"$l_service_name\" 2>/dev/null | grep -q 'enabled'; then\n      l_out2=\"$l_out2\\n - Daemon: \"$l_service_name\" is enabled on the system\"\n    fi\n    if systemctl is-active \"$l_service_name\" 2>/dev/null | grep -q '^active'; then\n      l_out2=\"$l_out2\\n - Daemon: \"$l_service_name\" is active on the system\"\n    fi\n  }  \n  l_service_name=\"systemd-timesyncd.service\" # Check systemd-timesyncd daemon\n  service_not_enabled_chk\n  if [ -n \"$l_out2\" ]; then\n    l_timesyncd=\"y\"\n    l_out_tsd=\"$l_out2\"\n  else\n    l_timesyncd=\"n\"\n    l_out_tsd=\"\\n - Daemon: \"$l_service_name\" is not enabled and not active on the system\"\n  fi\n  l_service_name=\"chrony.service\" # Check chrony\n  service_not_enabled_chk\n  if [ -n \"$l_out2\" ]; then\n    l_chrony=\"y\"\n    l_out_chrony=\"$l_out2\"\n  else\n    l_chrony=\"n\"\n    l_out_chrony=\"\\n - Daemon: \"$l_service_name\" is not enabled and not active on the system\"\n  fi\n  l_status=\"$l_timesyncd$l_chrony\"\n  case \"$l_status\" in\n    yy)\n      l_output2=\" - More than one time sync daemon is in use on the system$l_out_tsd$l_out_chrony\"\n      ;;\n    nn)\n      l_output2=\" - No time sync daemon is in use on the system$l_out_tsd$l_out_chrony\"\n      ;;\n    yn|ny)\n      l_output=\" - Only one time sync daemon is in use on the system$l_out_tsd$l_out_chrony\"\n      ;;\n    *)\n      l_output2=\" - Unable to determine time sync daemon(s) status\"\n      ;;\n  esac\n  if [ -z \"$l_output2\" ]; then\n    echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n    echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure *:\\n$l_output2\\n\"\n  fi\n}",
    "remediation_details": "On physical systems, and virtual systems where host-based time synchronization is not available. Select one of the two time synchronization daemons; chrony (1) or systemd-timesyncd (2) and following the remediation procedure for the selected daemon.",
    "remediation_code": "1. chrony\n\nRun the following command to install chrony:\n```\n# apt install chrony \n```\nRun the following commands to stop and mask the systemd-timesyncd daemon:\n```\n# systemctl stop systemd-timesyncd.service\n# systemctl mask systemd-timesyncd.service\n```\n\nNote:\n\n  - Subsection: Configure chrony should be followed\n\n  - Subsection: Configure systemd-timesyncd should be skipped\n\n2. systemd-timesyncd\n\nRun the following command to remove the chrony package:\n```\n# apt purge chrony\n# apt autoremove chrony\n```\n\nNote:\n\n  - Subsection: Configure systemd-timesyncd should be followed\n\n  - Subsection: Configure chrony should be skipped\n\nReferences:\n1. NIST SP 800-53 Rev. 5: AU-3, AU-12\n\nCIS Controls:\n\nControls\n\nControl IG 1 IG 2 IG 3\nVersion\n\n8.4 Standardize Time Synchronization\n\nv8 Standardize time synchronization. Configure at least two synchronized time   -   \nsources across enterprise assets, where supported.\n\n6.1 Utilize Three Synchronized Time Sources\n\nv7 Use at least three synchronized time sources from which all servers and   -   \nnetwork devices retrieve time information on a regular basis so that timestamps\nare consistent.\n\nMITRE ATT&CK Mappings:\n\nTechniques / Sub-\n\nTactics Mitigations\ntechniques\n\nT1070, T1070.002, T1562,\n\nTA0005\nT1562.001",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if only one time synchronization daemon is in use.\"\"\"\n    daemons = ['systemd-timesyncd', 'chrony']\n    active_daemons = []\n\n    for daemon in daemons:\n        try:\n            # Check if enabled and active\n            subprocess.check_output(f'systemctl is-enabled {daemon}.service', shell=True)\n            subprocess.check_output(f'systemctl is-active {daemon}.service', shell=True)\n            active_daemons.append(daemon)\n        except subprocess.CalledProcessError:\n            pass  # Daemon not enabled or active, skip\n\n    # Only one daemon should be active for the audit to pass\n    return len(active_daemons) == 1\n\n\ndef remediate_vuln(daemon: str = 'systemd-timesyncd') -> None:\n    \"\"\"Remediate by ensuring only the selected daemon is in use.\"\"\"\n    if daemon not in ['systemd-timesyncd', 'chrony']:\n        print(\"Invalid daemon selection. Please choose 'systemd-timesyncd' or 'chrony'.\")\n        sys.exit(1)\n\n    if daemon == 'systemd-timesyncd':\n        _remediate_systemd_timesyncd()\n    else:\n        _remediate_chrony()\n\n\ndef _remediate_systemd_timesyncd() -> None:\n    # Ensure systemd-timesyncd is enabled and active\n    _manage_service('systemd-timesyncd', enable=True, start=True)\n    \n    # Stop, disable, and mask chrony if installed\n    if _is_package_installed('chrony'):\n        _manage_service('chrony', stop=True, disable=True, mask=True)\n        _remove_package('chrony')\n\n\ndef _remediate_chrony() -> None:\n    # Ensure chrony is installed\n    if not _is_package_installed('chrony'):\n        _install_package('chrony')\n    \n    # Stop, disable, and mask systemd-timesyncd\n    _manage_service('systemd-timesyncd', stop=True, disable=True, mask=True)\n\n\ndef _manage_service(service: str, enable: bool = False, disable: bool = False, start: bool = False, stop: bool = False, mask: bool = False) -> None:\n    actions = []\n    if enable:\n        actions.append(f'systemctl enable {service}.service')\n    if disable:\n        actions.append(f'systemctl disable {service}.service')\n    if start:\n        actions.append(f'systemctl start {service}.service')\n    if stop:\n        actions.append(f'systemctl stop {service}.service')\n    if mask:\n        actions.append(f'systemctl mask {service}.service')\n\n    for action in actions:\n        subprocess.check_call(action, shell=True)\n        print(action)\n\n\ndef _install_package(package: str) -> None:\n    subprocess.check_call(f'apt install -y {package}', shell=True)\n    print(f\"Installed `{package}` package.\")\n\n\ndef _remove_package(package: str) -> None:\n    subprocess.check_call(f'apt purge -y {package} && apt autoremove -y', shell=True)\n    print(f\"Removed `{package}` package and its dependencies.\")\n\n\ndef _is_package_installed(package: str) -> bool:\n    try:\n        subprocess.check_output(f'dpkg -s {package}', shell=True)\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\n\nif __name__ == '__main__':\n    if not audit_vuln():\n        print(\"Audit failed. Starting remediation...\")\n        remediate_vuln('systemd-timesyncd')  # Default to systemd-timesyncd\n    else:\n        print(\"Audit passed. No remediation necessary.\")\n"
  },
  {
    "name": "Ensure systemd-timesyncd configured with authorized timeserver",
    "id": "2.3.2.1",
    "type": "Automated",
    "start_page": 306,
    "end_page": 309,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "NTP=\n\n#### \u2022 A space-separated list of NTP server host names or IP addresses. During\n### runtime this list is combined with any per-interface NTP servers acquired from systemd-networkd.service(8). systemd-timesyncd will contact all configured system or per-interface servers in turn, until one responds. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. This setting defaults to an empty list.\nFallbackNTP=\n\n#### \u2022 A space-separated list of NTP server host names or IP addresses to be used as\n### the fallback NTP servers. Any per-interface NTP servers obtained from systemd-networkd.service(8) take precedence over this setting, as do any servers set via NTP= above. This setting is hence only relevant if no other NTP server information is known. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. If this option is not given, a compiled-in list of NTP servers is used.",
    "rationale": "Time synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations.",
    "audit_details": "Run the following command to verify the NTP and/or FallbackNTP option is set to local site approved authoritative time server(s):\n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"NTP=[^#\\n\\r]+\" \"FallbackNTP=[^#\\n\\r]+\")\n  l_systemd_config_file=\"/etc/systemd/timesyncd.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"NTP=[^#\\n\\r]+\" \"FallbackNTP=[^#\\n\\r]+\")\n  l_systemd_config_file=\"/etc/systemd/timesyncd.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([",
    "remediation_details": "Set NTP and/or FallbackNPT parameters to local site approved authoritative time server(s) in /etc/systemd/timesyncd.conf or a file in /etc/systemd/timesyncd.conf.d/ ending in .conf in the [Time] section: Example file:\n[Time]\nNTP=time.nist.gov # Uses the generic name for NIST's time servers \nFallbackNTP=time-a-g.nist.gov time-b-g.nist.gov time-c-g.nist.gov # Space\nseparated list of NIST time servers\n\nExample script to create systemd drop-in file:\n#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/timesyncd.conf.d/ ] && mkdir\n/etc/systemd/timesyncd.conf.d/\n  printf '%s\\n' \"[Time]\" \"NTP=time.nist.gov\" \"FallbackNTP=time-a-g.nist.gov\ntime-b-g.nist.gov time-c-g.nist.gov\" >> /etc/systemd/timesyncd.conf.d/60timesyncd.conf\n}\n\nNote: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n```\n# systemctl reload-or-restart systemd-journald\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/timesyncd.conf.d/ ] && mkdir\n/etc/systemd/timesyncd.conf.d/\n  printf '%s\\n' \"[Time]\" \"NTP=time.nist.gov\" \"FallbackNTP=time-a-g.nist.gov\ntime-b-g.nist.gov time-c-g.nist.gov\" >> /etc/systemd/timesyncd.conf.d/60timesyncd.conf\n}\n",
    "python_script": "\nimport os\nimport configparser\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if NTP and/or FallbackNTP options are set to authorized time servers\"\"\"\n    authorized_servers = [\"time.nist.gov\", \"time-a-g.nist.gov\", \"time-b-g.nist.gov\", \"time-c-g.nist.gov\"]\n    config_files = [\"/etc/systemd/timesyncd.conf\"]\n    config_files.extend([f for f in os.listdir(\"/etc/systemd/timesyncd.conf.d/\") if f.endswith(\".conf\")])\n\n    for file in config_files:\n        file_path = os.path.join(\"/etc/systemd/timesyncd.conf.d/\", file) if file != \"/etc/systemd/timesyncd.conf\" else file\n        config = configparser.ConfigParser()\n        config.read(file_path)\n\n        for section in config.sections():\n            if section == \"Time\":\n                for option in [\"NTP\", \"FallbackNTP\"]:\n                    value = config.get(section, option, fallback=None)\n                    if value:\n                        servers = [s.strip() for s in value.split()]\n                        if not all(s in authorized_servers for s in servers):\n                            print(f\"Found unauthorized time server(s) in {file_path}: {', '.join(servers)}\")\n                            return True\n\n    print(\"No unauthorized time servers found.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting NTP and/or FallbackNTP parameters to authorized time servers\"\"\"\n    drop_in_file = \"/etc/systemd/timesyncd.conf.d/60timesyncd.conf\"\n    authorized_servers = [\"time.nist.gov\", \"time-a-g.nist.gov\", \"time-b-g.nist.gov\", \"time-c-g.nist.gov\"]\n\n    # Create drop-in directory if it doesn't exist\n    if not os.path.exists(\"/etc/systemd/timesyncd.conf.d/\"):\n        os.makedirs(\"/etc/systemd/timesyncd.conf.d/\")\n        print(\"Created directory /etc/systemd/timesyncd.conf.d/\")\n\n    # Write authorized servers to drop-in file\n    with open(drop_in_file, \"w\") as f:\n        f.write(\"[Time]\\n\")\n        f.write(f\"NTP={authorized_servers[0]}\\n\")\n        f.write(f\"FallbackNTP={' '.join(authorized_servers[1:])}\\n\")\n    print(f\"Wrote authorized time servers to {drop_in_file}\")\n\n    # Update systemd-timesyncd service\n    os.system(\"systemctl reload-or-restart systemd-timesyncd\")\n    print(\"Updated systemd-timesyncd service\")\n"
  },
  {
    "name": "Ensure chrony is running as user _chrony",
    "id": "2.3.3.2",
    "type": "Automated",
    "start_page": 317,
    "end_page": 318,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The chrony package is installed with a dedicated user account _chrony. This account is granted the access required by the chronyd service",
    "rationale": "The chronyd service should run with only the required privlidges",
    "audit_details": "**- IF -** `chrony is in use on the system, run the following command to verify the chronyd` service is being run as the _chrony user:\n\n```\n# ps -ef | awk '(/[c]hronyd/ && $1!=\"_chrony\") { print $1 }'\n```\n\nNothing should be returned",
    "audit_code": "# ps -ef | awk '(/[c]hronyd/ && $1!=\"_chrony\") { print $1 }'",
    "remediation_details": "Add or edit the user line to /etc/chrony/chrony.conf or a file ending in .conf in\n```\n/etc/chrony/conf.d/:\n```\n```\nuser _chrony\n```\n\n\n**- OR -** If another time synchronization service is in use on the system, run the following command to remove chrony from the system:\n```\n# apt purge chrony\n# apt autoremove chrony\n``",
    "remediation_code": "Add or edit the user line to /etc/chrony/chrony.conf or a file ending in .conf in /etc/chrony/conf.d/: user _chrony \n\n# apt purge chrony\n# apt autoremove chrony\n",
    "python_script": "\nimport psutil\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if chronyd is running as user _chrony.\n    \n    Returns:\n        bool: True if vulnerable (not running as _chrony), False otherwise.\n    \"\"\"\n    for proc in psutil.process_iter(['pid', 'name', 'username']):\n        if proc.info['name'] == 'chronyd' and proc.info['username']!= '_chrony':\n            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by ensuring chronyd runs as _chrony.\n    If chrony is not needed, it will be removed.\n    \"\"\"\n    # Check if chrony is in use (simplified, assuming presence of chronyd indicates use)\n    chronyd_running = any(p.info['name'] == 'chronyd' for p in psutil.process_iter(['name']))\n    \n    if chronyd_running:\n        # Attempt to edit the config to set the user to _chrony\n        config_files = ['/etc/chrony/chrony.conf'] + [f for f in os.listdir('/etc/chrony/conf.d/') if f.endswith('.conf')]\n        config_files = [f if f.startswith('/') else '/etc/chrony/conf.d/' + f for f in config_files]\n        \n        for config_file in config_files:\n            try:\n                with open(config_file, 'r+') as file:\n                    content = file.readlines()\n                    user_line_found = False\n                    for i, line in enumerate(content):\n                        if line.strip().startswith('user'):\n                            content[i] = 'user _chrony\\n'\n                            user_line_found = True\n                            break\n                    if not user_line_found:\n                        content.append('user _chrony\\n')\n                    file.seek(0)\n                    file.writelines(content)\n                    file.truncate()\n                print(f\"Updated {config_file} to set user to _chrony.\")\n                break\n            except Exception as e:\n                print(f\"Error updating {config_file}: {e}\")\n    else:\n        # Remove chrony if not in use\n        try:\n            subprocess.run(['apt', 'purge', '-y', 'chrony'], check=True)\n            subprocess.run(['apt', 'autoremove', '-y', 'chrony'], check=True)\n            print(\"Removed chrony package and its dependencies.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error removing chrony: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure chrony is enabled and running",
    "id": "2.3.3.3",
    "type": "Automated",
    "start_page": 319,
    "end_page": 320,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "chrony is a daemon for synchronizing the system clock across the network",
    "rationale": "chrony needs to be enabled and running in order to synchronize the system to a timeserver.\n\nTime synchronization is important to support time sensitive security mechanisms and to ensure log files have consistent time records across the enterprise to aid in forensic investigations",
    "audit_details": "IF chrony is in use on the system, run the following commands:\nRun the following command to verify that the chrony service is enabled:\n```\n# systemctl is-enabled chrony.service\nenabled\n```\nRun the following command to verify that the chrony service is active:\n```\n# systemctl is-active chrony.service\nactive\n```\n",
    "audit_code": "# systemctl is-enabled chrony.service\nenabled\n\n# systemctl is-active chrony.service\nactive\n",
    "remediation_details": "IF chrony is in use on the system, run the following commands:\nRun the following command to unmask chrony.service:\n```\n# systemctl unmask chrony.service\n```\nRun the following command to enable and start chrony.service:\n```\n# systemctl --now enable chrony.service\n```\n\nOR\nIf another time synchronization service is in use on the system, run the following command to remove chrony:\n```\n# apt purge chrony\n# apt autoremove chrony\n```\n",
    "remediation_code": "# systemctl unmask chrony.service\n\n# systemctl --now enable chrony.service\n\n# apt purge chrony\n# apt autoremove chrony\n",
    "python_script": "\nimport subprocess\nimport dbus\n\n# DBus setup for systemd interaction\nsystemd_bus = dbus.SystemBus()\nsystemd_manager = systemd_bus.get_object('org.freedesktop.systemd1', '/org/freedesktop/systemd1')\nsystemd_manager_iface = dbus.Interface(systemd_manager, dbus_interface='org.freedesktop.systemd1.Manager')\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if chrony is enabled and running.\"\"\"\n    try:\n        # Check if chrony is enabled\n        enabled = subprocess.check_output(['systemctl', 'is-enabled', 'chrony.service']).decode().strip() == 'enabled'\n        \n        # Check if chrony is active\n        active = subprocess.check_output(['systemctl', 'is-active', 'chrony.service']).decode().strip() == 'active'\n        \n        return enabled and active\n    except FileNotFoundError:\n        print(\"systemctl command not found. Is systemd installed?\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring chrony is enabled and running, or remove it if not in use.\"\"\"\n    try:\n        # Check if chrony service exists\n        systemd_manager_iface.GetUnit('chrony.service')\n        \n        # Unmask chrony.service if masked\n        masked = systemd_manager_iface.GetUnitFileState('chrony.service') == 'masked'\n        if masked:\n            subprocess.run(['systemctl', 'unmask', 'chrony.service'])\n            print(\"Unmasked chrony.service.\")\n        \n        # Enable and start chrony.service if not already enabled or active\n        enabled = subprocess.check_output(['systemctl', 'is-enabled', 'chrony.service']).decode().strip() == 'enabled'\n        active = subprocess.check_output(['systemctl', 'is-active', 'chrony.service']).decode().strip() == 'active'\n        if not enabled or not active:\n            subprocess.run(['systemctl', '--now', 'enable', 'chrony.service'])\n            print(\"Enabled and started chrony.service.\")\n    \n    except dbus.exceptions.DBusException:\n        # If chrony service does not exist, or assuming it's not in use, attempt to remove it\n        try:\n            subprocess.run(['apt', 'purge', '-y', 'chrony'])\n            print(\"Purged chrony package.\")\n            subprocess.run(['apt', 'autoremove', '-y', 'chrony'])\n            print(\"Removed chrony (if was dependent package).\")\n        except FileNotFoundError:\n            print(\"APT command not found. Is this a Debian-based system?\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure cron daemon is enabled and active",
    "id": "2.4.1.1",
    "type": "Automated",
    "start_page": 323,
    "end_page": 324,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The cron daemon is used to execute batch jobs on the system.",
    "rationale": "While there may not be user jobs that need to be run on the system, the system does have maintenance jobs that may include security monitoring that have to run, and cron is used to execute them.",
    "audit_details": "IF cron is installed on the system: Run the following command to verify cron is enabled:\n```\n# systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $2}'\nenabled\n```\nRun the following command to verify that cron is active:\n```\n# systemctl list-units | awk '$1~/^crond?\\.service/{print $3}'\nactive\n```",
    "audit_code": "# systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $2}'\nenabled\n# systemctl list-units | awk '$1~/^crond?\\.service/{print $3}'\nactive",
    "remediation_details": "IF cron is installed on the system: Run the following commands to unmask, enable, and start cron:\n```\n# systemctl unmask \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n# systemctl --now enable \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n```",
    "remediation_code": "# systemctl unmask \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"\n# systemctl --now enable \"$(systemctl list-unit-files | awk '$1~/^crond?\\.service/{print $1}')\"",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit whether the cron daemon is enabled and active.\n    \n    Returns:\n        bool: True if the vulnerability is present (cron is not enabled or active), False otherwise.\n    \"\"\"\n    try:\n        # Check if cron is enabled\n        enabled_output = subprocess.check_output(['systemctl', 'list-unit-files']).decode('utf-8')\n        cron_service = next((line.split()[0] for line in enabled_output.split('\\n') if line.startswith('cron') or line.startswith('crond')), None)\n        if cron_service is None or 'enabled' not in subprocess.check_output(['systemctl', 'list-unit-files', cron_service]).decode('utf-8'):\n            return True  # Vulnerability present: not enabled\n\n        # Check if cron is active\n        active_output = subprocess.check_output(['systemctl', 'list-units']).decode('utf-8')\n        if 'active' not in subprocess.check_output(['systemctl', 'list-units', cron_service]).decode('utf-8'):\n            return True  # Vulnerability present: not active\n\n        return False  # No vulnerability found\n    except Exception as e:\n        print(f\"Error auditing vulnerability: {e}\")\n        return True  # Assume vulnerability present in case of error\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by enabling and starting the cron daemon.\n    \"\"\"\n    try:\n        # Get the cron service name\n        enabled_output = subprocess.check_output(['systemctl', 'list-unit-files']).decode('utf-8')\n        cron_service = next((line.split()[0] for line in enabled_output.split('\\n') if line.startswith('cron') or line.startswith('crond')), None)\n        if cron_service is None:\n            print(\"Cron service not found. Cannot remediate.\")\n            return\n\n        # Unmask the cron service (if necessary)\n        mask_status = subprocess.check_output(['systemctl', 'is-masked', cron_service]).decode('utf-8').strip()\n        if mask_status == 'masked':\n            subprocess.check_call(['systemctl', 'unmask', cron_service])\n            print(f\"Unmasked `{cron_service}` systemd service.\")\n\n        # Enable and start the cron service\n        subprocess.check_call(['systemctl', '--now', 'enable', cron_service])\n        print(f\"Enabled and started `{cron_service}` systemd service.\")\n    except Exception as e:\n        print(f\"Error remediating vulnerability: {e}\")\n\n\nif __name__ == '__main__':\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/crontab are configured",
    "id": "2.4.1.2",
    "type": "Automated",
    "start_page": 325,
    "end_page": 326,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/crontab file is used by cron to control its own jobs. The commands in this item make sure that root is the user and group owner of the file and that only the owner can access the file.",
    "rationale": "This file contains information on what system jobs are run by cron. Write access to these files could provide unprivileged users with the ability to elevate their privileges. Read access to these files could provide users with the ability to gain insight on system jobs that run on the system and could provide them a way to gain unauthorized privileged access.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other :\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/crontab\nAccess: (600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/crontab",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following commands to set ownership and permissions on /etc/crontab:\n```\n# chown root:root /etc/crontab\n# chmod og-rwx /etc/crontab\n```\n",
    "remediation_code": "# chown root:root /etc/crontab\n# chmod og-rwx /etc/crontab",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure permissions on /etc/crontab are configured\"\"\"\n    crontab_file = \"/etc/crontab\"\n    if not os.path.exists(crontab_file):\n        # cron not installed or file not present, consider vulnerability not present\n        return False\n\n    file_stat = os.stat(crontab_file)\n    if (file_stat.st_uid!= 0 or  # root user\n            file_stat.st_gid!= 0 or  # root group\n            file_stat.st_mode!= stat.S_IRUSR | stat.S_IWUSR):  # 600 permissions\n        return True  # Vulnerability present\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure permissions on /etc/crontab are configured\"\"\"\n    crontab_file = \"/etc/crontab\"\n    if not os.path.exists(crontab_file):\n        print(f\"Skipping remediation for '{crontab_file}'; file not found (cron possibly not installed).\")\n        return\n\n    try:\n        # Set ownership to root:root\n        os.chown(crontab_file, pwd.getpwnam('root').pw_uid, grp.getgrnam('root').gr_gid)\n        print(f\"Set ownership of '{crontab_file}' to root:root.\")\n        \n        # Set permissions to 600 (-rw-------)\n        os.chmod(crontab_file, stat.S_IRUSR | stat.S_IWUSR)\n        print(f\"Set permissions of '{crontab_file}' to 600 (-rw-------).\")\n    except OSError as e:\n        print(f\"Error remediating vulnerability for '{crontab_file}': {e.strerror}\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.hourly are configured",
    "id": "2.4.1.3",
    "type": "Automated",
    "start_page": 327,
    "end_page": 328,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This directory contains system cron jobs that need to run on an hourly basis. The files in this directory cannot be manipulated by the crontab command, but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other:\n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.hourly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.hourly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following commands to set ownership and permissions on the /etc/cron.hourly directory:\n# chown root:root /etc/cron.hourly/\n# chmod og-rwx /etc/cron.hourly/\n",
    "remediation_code": "# chown root:root /etc/cron.hourly/\n# chmod og-rwx /etc/cron.hourly/",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure permissions on /etc/cron.hourly are configured\"\"\"\n    dir_path = '/etc/cron.hourly'\n    if not os.path.exists(dir_path):\n        return False  # not vulnerable if directory doesn't exist (e.g., cron not installed)\n\n    dir_stat = os.stat(dir_path)\n    expected_mode = stat.S_IRWXU  # 700 (drwx------)\n    expected_uid = 0  # root\n    expected_gid = 0  # root\n\n    is_vulnerable = (\n        dir_stat.st_uid!= expected_uid or\n        dir_stat.st_gid!= expected_gid or\n        dir_stat.st_mode & expected_mode!= dir_stat.st_mode\n    )\n    return is_vulnerable\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure permissions on /etc/cron.hourly are configured\"\"\"\n    dir_path = '/etc/cron.hourly'\n    if not os.path.exists(dir_path):\n        print(f\"Skipping remediation: {dir_path} does not exist\")\n        return\n\n    expected_mode = stat.S_IRWXU  # 700 (drwx------)\n    expected_uid = 0  # root\n    expected_gid = 0  # root\n\n    dir_stat = os.stat(dir_path)\n    if dir_stat.st_uid!= expected_uid or dir_stat.st_gid!= expected_gid:\n        os.chown(dir_path, expected_uid, expected_gid)\n        print(f\"Set ownership of {dir_path} to root:root\")\n\n    if dir_stat.st_mode & expected_mode!= dir_stat.st_mode:\n        os.chmod(dir_path, expected_mode)\n        print(f\"Set permissions of {dir_path} to 700 (drwx------)\")\n\n\n# Example usage:\nif __name__ == '__main__':\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.daily are configured",
    "id": "2.4.1.4",
    "type": "Automated",
    "start_page": 329,
    "end_page": 330,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.daily directory contains system cron jobs that need to run daily. The files in this directory cannot be manipulated by the crontab command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: ``` # stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.daily/ Access: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root) ```",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.daily/",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following commands to set ownership and permissions on the /etc/cron.daily directory: ``` # chown root:root /etc/cron.daily/ # chmod og-rwx /etc/cron.daily/ ```",
    "remediation_code": "# chown root:root /etc/cron.daily/ # chmod og-rwx /etc/cron.daily/",
    "python_script": "\nimport os\nimport stat\nimport pwd\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions on /etc/cron.daily\"\"\"\n    cron_daily_path = '/etc/cron.daily/'\n    if not os.path.exists(cron_daily_path):\n        # Assume cron is not installed if /etc/cron.daily/ doesn't exist\n        print(f\"Skipping audit: {cron_daily_path} does not exist (cron likely not installed).\")\n        return True  # Not vulnerable by default if cron isn't installed\n\n    file_stats = os.stat(cron_daily_path)\n    uid = file_stats.st_uid\n    gid = file_stats.st_gid\n    perms = stat.filemode(file_stats.st_mode)\n\n    if uid == 0 and gid == 0 and perms == 'drwx------':\n        return True  # Audit passed, no vulnerability found\n    else:\n        print(f\"Vulnerability found: {cron_daily_path} has incorrect ownership or permissions (Uid: {uid}, Gid: {gid}, Perms: {perms}).\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions vulnerability on /etc/cron.daily\"\"\"\n    cron_daily_path = '/etc/cron.daily/'\n    root_uid = pwd.getpwnam('root').pw_uid\n    root_gid = pwd.getpwnam('root').pw_gid\n\n    if not os.path.exists(cron_daily_path):\n        print(f\"Skipping remediation: {cron_daily_path} does not exist (cron likely not installed).\")\n        return\n\n    os.chown(cron_daily_path, root_uid, root_gid)\n    print(f\"Set ownership of {cron_daily_path} to root:root.\")\n\n    os.chmod(cron_daily_path, 0o700)\n    print(f\"Changed permissions of {cron_daily_path} to drwx------ (0700).\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.weekly are configured",
    "id": "2.4.1.5",
    "type": "Automated",
    "start_page": 331,
    "end_page": 332,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.weekly directory contains system cron jobs that need to run on a weekly basis. The files in this directory cannot be manipulated by the crontab command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "IF cron is installed on the system:\nRun the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: \n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.weekly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.weekly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "IF cron is installed on the system:\nRun the following commands to set ownership and permissions on the\n/etc/cron.weekly directory:\n# chown root:root /etc/cron.weekly/\n# chmod og-rwx /etc/cron.weekly/\n",
    "remediation_code": "# chown root:root /etc/cron.weekly/\n# chmod og-rwx /etc/cron.weekly/",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\nimport subprocess\n\ndef is_cron_installed() -> bool:\n    \"\"\"Check if cron is installed by verifying the existence of the cron daemon.\"\"\"\n    try:\n        # Using dpkg for Debian-based systems (Debian 11, Ubuntu 22.04)\n        output = subprocess.check_output(['dpkg', '-s', 'cron'])\n        return 'Status: install ok installed' in output.decode('utf-8')\n    except (subprocess.CalledProcessError, FileNotFoundError):\n        # Fall back to checking for the cron daemon's presence (less reliable)\n        return os.path.exists('/usr/sbin/cron')\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability regarding /etc/cron.weekly permissions and ownership.\"\"\"\n    if not is_cron_installed():\n        print(\"Cron is not installed. Nothing to audit.\")\n        return True  # Assuming no vulnerability if cron is not installed\n    \n    cron_weekly_path = '/etc/cron.weekly/'\n    stat_info = os.stat(cron_weekly_path)\n    \n    # Verify ownership\n    root_uid = pwd.getpwnam('root').pw_uid\n    root_gid = grp.getgrnam('root').gr_gid\n    if stat_info.st_uid != root_uid or stat_info.st_gid != root_gid:\n        print(f\"Ownership of {cron_weekly_path} is not set to root:root.\")\n        return False\n    \n    # Verify permissions\n    expected_perms = stat.S_IRWXU  # 700 in octal\n    if stat_info.st_mode & 0o777 != expected_perms:\n        print(f\"Permissions of {cron_weekly_path} are not correctly set (expected: drwx------).\")\n        return False\n    \n    print(f\"All checks passed for {cron_weekly_path}.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability regarding /etc/cron.weekly permissions and ownership.\"\"\"\n    if not is_cron_installed():\n        print(\"Cron is not installed. No remediation needed.\")\n        return\n    \n    cron_weekly_path = '/etc/cron.weekly/'\n    root_uid = pwd.getpwnam('root').pw_uid\n    root_gid = grp.getgrnam('root').gr_gid\n    \n    # Set ownership to root:root\n    try:\n        os.chown(cron_weekly_path, root_uid, root_gid)\n        print(f\"Set ownership of {cron_weekly_path} to root:root.\")\n    except OSError as e:\n        print(f\"Failed to set ownership: {e}\")\n    \n    # Set permissions to 700 (drwx------)\n    try:\n        os.chmod(cron_weekly_path, stat.S_IRWXU)  # 700 in octal\n        print(f\"Set permissions of {cron_weekly_path} to drwx------.\")\n    except OSError as e:\n        print(f\"Failed to set permissions: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    audit_result = audit_vuln()\n    if not audit_result:\n        remediate_vuln()\n        print(\"Re-running audit after remediation:\")\n        audit_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.monthly are configured",
    "id": "2.4.1.6",
    "type": "Automated",
    "start_page": 333,
    "end_page": 334,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.monthly directory contains system cron jobs that need to run monthly. The files in this directory cannot be manipulated by the crontab command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: \n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.monthly/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.monthly/",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following commands to set ownership and permissions on the /etc/cron.monthly directory:\n# chown root:root /etc/cron.monthly/\n# chmod og-rwx /etc/cron.monthly/",
    "remediation_code": "# chown root:root /etc/cron.monthly/\n# chmod og-rwx /etc/cron.monthly/",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if /etc/cron.monthly has correct permissions, owner, and group.\"\"\"\n    cron_monthly_path = \"/etc/cron.monthly\"\n    if not os.path.exists(cron_monthly_path):\n        # If the directory doesn't exist, consider it not vulnerable\n        return True\n\n    stat_info = os.stat(cron_monthly_path)\n    expected_permissions = stat.S_IRWXU  # 700 in octal\n    actual_permissions = stat_info.st_mode & 0o777  # Mask to get the last 9 bits (rwxrwxrwx)\n\n    # Check if owner and group are both root\n    owner_root = stat_info.st_uid == pwd.getpwnam(\"root\").pw_uid\n    group_root = stat_info.st_gid == grp.getgrnam(\"root\").gr_gid\n\n    # Return True if all conditions are met, False otherwise\n    return (actual_permissions == expected_permissions and \n            owner_root and \n            group_root)\n\ndef remediate_vuln() -> None:\n    \"\"\"Set correct ownership and permissions for /etc/cron.monthly.\"\"\"\n    cron_monthly_path = \"/etc/cron.monthly\"\n    if not os.path.exists(cron_monthly_path):\n        print(f\"Skipping remediation for non-existent directory: {cron_monthly_path}\")\n        return\n\n    # Set ownership to root:root\n    root_uid = pwd.getpwnam(\"root\").pw_uid\n    root_gid = grp.getgrnam(\"root\").gr_gid\n    os.chown(cron_monthly_path, root_uid, root_gid)\n    print(f\"Set ownership of '{cron_monthly_path}' to root:root\")\n\n    # Set permissions to 700 (rwx------)\n    expected_permissions = stat.S_IRWXU  # 700 in octal\n    os.chmod(cron_monthly_path, expected_permissions)\n    print(f\"Set permissions of '{cron_monthly_path}' to 700 (rwx------)\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"/etc/cron.monthly is secure.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/cron.d are configured",
    "id": "2.4.1.7",
    "type": "Automated",
    "start_page": 335,
    "end_page": 336,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/cron.d directory contains system cron jobs that need to run in a similar manner to the hourly, daily weekly and monthly jobs from /etc/crontab, but require more granular control as to when they run. The files in this directory cannot be manipulated by the crontab command but are instead edited by system administrators using a text editor. The commands below restrict read/write and search access to user and group root, preventing regular users from accessing this directory.",
    "rationale": "Granting write access to this directory for non-privileged users could provide them the means for gaining unauthorized elevated privileges. Granting read access to this directory could give an unprivileged user insight in how to gain elevated privileges or circumvent auditing controls.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command and verify Uid and Gid are both 0/root and Access does not grant permissions to group or other: \n```\n# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.d/\nAccess: (700/drwx------) Uid: ( 0/ root) Gid: ( 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/cron.d/",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following commands to set ownership and permissions on the /etc/cron.d directory:\n```\n# chown root:root /etc/cron.d/\n# chmod og-rwx /etc/cron.d/\n```",
    "remediation_code": "# chown root:root /etc/cron.d/\n# chmod og-rwx /etc/cron.d/",
    "python_script": "\nimport os\nimport stat\nimport shutil\nimport pkgutil  # for checking if cron is installed\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions on /etc/cron.d\"\"\"\n    cron_installed = pkgutil.find_loader('cron') is not None\n    if not cron_installed:\n        print(\"Cron is not installed on the system. No audit performed.\")\n        return False\n\n    dir_path = '/etc/cron.d'\n    dir_stat = os.stat(dir_path)\n\n    # Check ownership (Uid and Gid should be 0/root)\n    if dir_stat.st_uid!= 0 or dir_stat.st_gid!= 0:\n        print(f\"Ownership issue: Uid: ({dir_stat.st_uid}/{dir_stat.st_uid}) Gid: ({dir_stat.st_gid}/{dir_stat.st_gid})\")\n        return False\n\n    # Check permissions (Access should be 700/drwx------)\n    if not (dir_stat.st_mode & 0o777) == 0o700:\n        print(f\"Permission issue: Access: ({stat.filemode(dir_stat.st_mode)})\")\n        return False\n\n    print(f\"Ownership and permissions for {dir_path} are correctly configured: Uid: (0/root) Gid: (0/root) Access: (drwx------)\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions on /etc/cron.d\"\"\"\n    cron_installed = pkgutil.find_loader('cron') is not None\n    if not cron_installed:\n        print(\"Cron is not installed on the system. No remediation performed.\")\n        return\n\n    dir_path = '/etc/cron.d'\n\n    # Change ownership to root:root\n    try:\n        shutil.chown(dir_path, user='root', group='root')\n        print(f\"Changed ownership of {dir_path} to root:root\")\n    except PermissionError:\n        print(f\"Failed to change ownership of {dir_path} to root:root - Permission denied\")\n\n    # Change permissions to 700 (drwx------)\n    try:\n        os.chmod(dir_path, 0o700)\n        print(f\"Changed permissions of {dir_path} to drwx------ (700)\")\n    except PermissionError:\n        print(f\"Failed to change permissions of {dir_path} to drwx------ (700) - Permission denied\")\n\n\nif __name__ == \"__main__\":\n    audit_vuln()\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure crontab is restricted to authorized users",
    "id": "2.4.1.8",
    "type": "Automated",
    "start_page": 337,
    "end_page": 340,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "crontab is the program used to install, deinstall, or list the tables used to drive the cron daemon. Each user can have their own crontab, and though these are files in /var/spool/cron/crontabs, they are not intended to be edited directly. If the /etc/cron.allow file exists, then you must be listed (one user per line) therein in order to be allowed to use this command. If the /etc/cron.allow file does not exist but the /etc/cron.deny file does exist, then you must not be listed in the /etc/cron.deny file in order to use this command. If neither of these files exists, then depending on site-dependent configuration parameters, only the super user will be allowed to use this command, or all users will be able to use this command. If both files exist then /etc/cron.allow takes precedence. Which means that /etc/cron.deny is not considered and your user must be listed in /etc/cron.allow in order to be able to use the crontab. Regardless of the existence of any of these files, the root administrative user is always allowed to set up a crontab. The files /etc/cron.allow and /etc/cron.deny, if they exist, must be either worldreadable, or readable by group crontab. If they are not, then cron will deny access to all users until the permissions are fixed. There is one file for each user's crontab under the /var/spool/cron/crontabs directory. Users are not allowed to edit the files under that directory directly to ensure that only users allowed by the system to run periodic tasks can add them, and only syntactically correct crontabs will be written there. This is enforced by having the directory writable only by the crontab group and configuring crontab command with the setgid bid set for that specific group. **Note:** - Even though a given user is not listed in cron.allow, cron jobs can still be run as that user - The files /etc/cron.allow and /etc/cron.deny, if they exist, only controls administrative access to the crontab command for scheduling and modifying cron jobs",
    "rationale": "On many systems, only the system administrator is authorized to schedule cron jobs. Using the cron.allow file to control who can run cron jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit_details": "**- IF - cron is installed on the system:** Run the following command to verify /etc/cron.allow: - Exists - Is mode 0640 or more restrictive - Is owned by the user root - Is group owned by the group root \n# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.allow Access: (640/-rw-r-----) Owner: (root) Group: (root) Run the following command to verify either cron.deny doesn't exist or is: - Mode 0640 or more restrictive - Owned by the user root - Group owned by the group root \n# [ -e \"/etc/cron.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.deny else Verify either nothing is returned or returned value is: Access: (640/-rw-r-----) Owner: (root) Group: (root)",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.allow\n # [ -e \"/etc/cron.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/cron.deny",
    "remediation_details": "**- IF - cron is installed on the system:** Run the following script to: - Create /etc/cron.allow if it doesn't exist - Change owner to user root - Change group owner to group root - Change mode to 640 or more restrictive \n#!/usr/bin/env bash\n{\n  [ ! -e \"/etc/cron.allow\" ] && touch /etc/cron.allow\n  chown root:root /etc/cron.allow\n  chmod u-x,g-wx,o-rwx /etc/cron.allow\n}\n**- IF -** `/etc/cron.deny exists, run the following commands to:` - Change owner to user root - Change group owner to group root - Change mode to 640 or more restrictive \n# [ -e \"/etc/cron.deny\" ] && chown root:root /etc/cron.deny\n# [ -e \"/etc/cron.deny\" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -e \"/etc/cron.allow\" ] && touch /etc/cron.allow\n  chown root:root /etc/cron.allow\n  chmod u-x,g-wx,o-rwx /etc/cron.allow\n}\n# [ -e \"/etc/cron.deny\" ] && chown root:root /etc/cron.deny\n# [ -e \"/etc/cron.deny\" ] && chmod u-x,g-wx,o-rwx /etc/cron.deny",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit cron.allow and cron.deny for proper configuration.\"\"\"\n    cron_allow_path = \"/etc/cron.allow\"\n    cron_deny_path = \"/etc/cron.deny\"\n    desired_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n\n    # Check if cron.allow exists with correct permissions and ownership\n    if not os.path.exists(cron_allow_path):\n        print(f\"/etc/cron.allow does not exist. ( Audit Failed )\")\n        return False\n    if oct(stat.S_IMODE(os.stat(cron_allow_path).st_mode))!= oct(desired_mode):\n        print(f\"Permissions for {cron_allow_path} are not 640 or more restrictive. ( Audit Failed )\")\n        return False\n    if pwd.getpwuid(os.stat(cron_allow_path).st_uid).pw_name!= \"root\":\n        print(f\"Owner of {cron_allow_path} is not root. ( Audit Failed )\")\n        return False\n    if grp.getgrgid(os.stat(cron_allow_path).st_gid).gr_name!= \"root\":\n        print(f\"Group of {cron_allow_path} is not root. ( Audit Failed )\")\n        return False\n\n    # If cron.deny exists, check its permissions and ownership\n    if os.path.exists(cron_deny_path):\n        if oct(stat.S_IMODE(os.stat(cron_deny_path).st_mode))!= oct(desired_mode):\n            print(f\"Permissions for {cron_deny_path} are not 640 or more restrictive. ( Audit Failed )\")\n            return False\n        if pwd.getpwuid(os.stat(cron_deny_path).st_uid).pw_name!= \"root\":\n            print(f\"Owner of {cron_deny_path} is not root. ( Audit Failed )\")\n            return False\n        if grp.getgrgid(os.stat(cron_deny_path).st_gid).gr_name!= \"root\":\n            print(f\"Group of {cron_deny_path} is not root. ( Audit Failed )\")\n            return False\n\n    print(\"Audit successful: cron.allow and cron.deny are properly configured.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate configuration issues with cron.allow and cron.deny.\"\"\"\n    cron_allow_path = \"/etc/cron.allow\"\n    cron_deny_path = \"/etc/cron.deny\"\n    desired_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n\n    # Create cron.allow if it doesn't exist\n    if not os.path.exists(cron_allow_path):\n        open(cron_allow_path, 'w').close()  # Create file\n        print(f\"Created {cron_allow_path}.\")\n\n    # Set owner, group, and mode for cron.allow\n    os.chown(cron_allow_path, pwd.getpwnam(\"root\").pw_uid, grp.getgrnam(\"root\").gr_gid)\n    print(f\"Set owner and group of {cron_allow_path} to root:root.\")\n    os.chmod(cron_allow_path, desired_mode)\n    print(f\"Set permissions of {cron_allow_path} to 640.\")\n\n    # If cron.deny exists, set its owner, group, and mode\n    if os.path.exists(cron_deny_path):\n        os.chown(cron_deny_path, pwd.getpwnam(\"root\").pw_uid, grp.getgrnam(\"root\").gr_gid)\n        print(f\"Set owner and group of {cron_deny_path} to root:root.\")\n        os.chmod(cron_deny_path, desired_mode)\n        print(f\"Set permissions of {cron_deny_path} to 640.\")\n"
  },
  {
    "name": "Ensure at is restricted to authorized users",
    "id": "2.4.2.1",
    "type": "Automated",
    "start_page": 342,
    "end_page": 345,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "at allows fairly complex time specifications, extending the POSIX.2 standard. It accepts times of the form HH:MM to run a job at a specific time of day. (If that time is already past, the next day is assumed.) You may also specify midnight, noon, or teatime (4pm) and you can have a time-of-day suffixed with AM or PM for running in the morning or the evening. You can also say what day the job will be run, by giving a date in the form month-name day with an optional year, or giving a date of the form MMDD[CC]YY, MM/DD/[CC]YY, DD.MM.[CC]YY or [CC]YY-MM-DD. The specification of a date must follow the specification of the time of day. You can also give times like now + count time-units, where the time-units can be minutes, hours, days, or weeks and you can tell at to run the job today by suffixing the time with today and to run the job tomorrow by suffixing the time with tomorrow. The /etc/at.allow and /etc/at.deny files determine which user can submit commands for later execution via at or batch. The format of the files is a list of usernames, one on each line. Whitespace is not permitted. If the file /etc/at.allow exists, only usernames mentioned in it are allowed to use at. If /etc/at.allow does not exist, /etc/at.deny is checked, every username not mentioned in it is then allowed to use at. An empty /etc/at.deny means that every user may use at. If neither file exists, only the superuser is allowed to use at.",
    "rationale": "On many systems, only the system administrator is authorized to schedule at jobs. Using the at.allow file to control who can run at jobs enforces this policy. It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user ID to the system and forget to add it to the deny files.",
    "audit_details": "**-IF- at is installed on the system:** Run the following command to verify /etc/at.allow:\n\n  - Exists\n\n  - Is mode 0640 or more restrictive\n\n  - Is owned by the user root\n\n  - Is group owned by the group daemon or group root\n```\n# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.allow\nAccess: (640/-rw-r-----) Owner: (root) Group: (daemon)\n-ORAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n```\nVerify mode is 640 or more restrictive, owner is root, and group is daemon or root Run the following command to verify at.deny doesn't exist, -OR- is:\n\n  - Mode 0640 or more restrictive\n\n  - Owned by the user root\n\n  - Group owned by the group daemon or group root\n```\n# [ -e \"/etc/at.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.deny\nAccess: (640/-rw-r-----) Owner: (root) Group: (daemon)\n-ORAccess: (640/-rw-r-----) Owner: (root) Group: (root)\n-ORNothing is returned\n```\nIf a value is returned, Verify mode is 640 or more restrictive, owner is root, and group is daemon or root.",
    "audit_code": "# stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.allow\n# [ -e \"/etc/at.deny\" ] && stat -Lc 'Access: (%a/%A) Owner: (%U) Group: (%G)' /etc/at.deny",
    "remediation_details": "**-IF- at is installed on the system:** Run the following script to:\n\n  - `/etc/at.allow:`\n\n`o` Create the file if it doesn't exist\n`o` Change owner or user root\n`o` If group daemon exists, change to group daemon, else change group to root\n`o` Change mode to 640 or more restrictive\n\n  - **-IF-** `/etc/at.deny exists:`\n\n`o` Change owner or user root\n`o` If group daemon exists, change to group daemon, else change group to root\n`o` Change mode to 640 or more restrictive\n```\n#!/usr/bin/env bash\n{\n  grep -Pq -- '^daemon\\b' /etc/group && l_group=\"daemon\" || l_group=\"root\"\n  [ ! -e \"/etc/at.allow\" ] && touch /etc/at.allow\n  chown root:\"$l_group\" /etc/at.allow\n  chmod u-x,g-wx,o-rwx /etc/at.allow\n  [ -e \"/etc/at.deny\" ] && chown root:\"$l_group\" /etc/at.deny\n  [ -e \"/etc/at.deny\" ] && chmod u-x,g-wx,o-rwx /etc/at.deny\n}\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  grep -Pq -- '^daemon\\b' /etc/group && l_group=\"daemon\" || l_group=\"root\"\n  [ ! -e \"/etc/at.allow\" ] && touch /etc/at.allow\n  chown root:\"$l_group\" /etc/at.allow\n  chmod u-x,g-wx,o-rwx /etc/at.allow\n  [ -e \"/etc/at.deny\" ] && chown root:\"$l_group\" /etc/at.deny\n  [ -e \"/etc/at.deny\" ] && chmod u-x,g-wx,o-rwx /etc/at.deny\n}",
    "python_script": "\nimport os\nimport stat\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit at vulnerability\"\"\"\n    if not is_at_installed():\n        return True  # at is not installed, consider it not vulnerable\n\n    allow_file = \"/etc/at.allow\"\n    deny_file = \"/etc/at.deny\"\n\n    if not os.path.exists(allow_file):\n        return False  # /etc/at.allow does not exist\n\n    if not check_file_permissions(allow_file, 0o640, \"root\", get_daemon_or_root_group()):\n        return False\n\n    if os.path.exists(deny_file) and not check_file_permissions(deny_file, 0o640, \"root\", get_daemon_or_root_group()):\n        return False\n\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate at vulnerability\"\"\"\n    if not is_at_installed():\n        return  # at is not installed, nothing to remediate\n\n    allow_file = \"/etc/at.allow\"\n    deny_file = \"/etc/at.deny\"\n    daemon_or_root_group = get_daemon_or_root_group()\n\n    if not os.path.exists(allow_file):\n        open(allow_file, 'w').close()  # Create empty file\n        print(f\"Created {allow_file} file.\")\n    \n    os.chown(allow_file, 0, grp.getgrnam(daemon_or_root_group).gr_gid)\n    os.chmod(allow_file, 0o640)\n    print(f\"Set ownership to root:{daemon_or_root_group} and mode to 0640 for {allow_file}.\")\n\n    if os.path.exists(deny_file):\n        os.chown(deny_file, 0, grp.getgrnam(daemon_or_root_group).gr_gid)\n        os.chmod(deny_file, 0o640)\n        print(f\"Set ownership to root:{daemon_or_root_group} and mode to 0640 for {deny_file}.\")\n\ndef is_at_installed():\n    \"\"\"Check if at is installed\"\"\"\n    return os.path.exists(\"/usr/bin/at\")\n\ndef check_file_permissions(file_path, mode, owner, group):\n    \"\"\"Check file permissions, owner, and group\"\"\"\n    file_stat = os.stat(file_path)\n    return (file_stat.st_mode & 0o777) == mode and file_stat.st_uid == 0 and grp.getgrgid(file_stat.st_gid).gr_name == group\n\ndef get_daemon_or_root_group():\n    \"\"\"Get daemon or root group\"\"\"\n    try:\n        grp.getgrnam(\"daemon\")\n        return \"daemon\"\n    except KeyError:\n        return \"root\"\n"
  },
  {
    "name": "Ensure ip forwarding is disabled",
    "id": "3.3.1",
    "type": "Automated",
    "start_page": 380,
    "end_page": 383,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The net.ipv4.ip_forward and net.ipv6.conf.all.forwarding flags are used to tell the system whether it can forward packets or not.",
    "rationale": "Setting net.ipv4.ip_forward and net.ipv6.conf.all.forwarding to 0 ensures that a system with multiple interfaces (for example, a hard proxy), will never be able to forward packets, and therefore, never serve as a router.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n#### \u2022 net.ipv4.ip_forward is set to 0\n \u2022 net.ipv6.conf.all.forwarding is set to 0\n\n### Note:\n#### \u2022 kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n#### \u2022 IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.ip_forward=0\" \"net.ipv6.conf.all.forwarding=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n#### \u2022 net.ipv4.ip_forward = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv4.ip_forward = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.ip_forward=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n - IF - IPv6 is enabled on the system: Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n#### \u2022 net.ipv6.conf.all.forwarding = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv6.conf.all.forwarding = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash \n{\n  sysctl -w net.ipv6.conf.all.forwarding=0\n  sysctl -w net.ipv6.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the system for the vulnerability\"\"\"\n    params = [(\"net.ipv4.ip_forward\", \"0\"), (\"net.ipv6.conf.all.forwarding\", \"0\")]\n    audit_pass = True\n    ipv6_enabled = subprocess.run([\"grep\", \"-Pq\", \"^\\\\h*0\\\\b\", \"/sys/module/ipv6/parameters/disable\"], capture_output=True).returncode!= 0\n\n    for param, value in params:\n        if (param.startswith(\"net.ipv6.\") and not ipv6_enabled):\n            print(f\" - IPv6 is disabled on the system, \\\"{param}\\\" is not applicable\")\n            continue\n\n        # Check running configuration\n        output = subprocess.run([\"sysctl\", param], capture_output=True, text=True)\n        if output.stdout.strip().split(\"=\")[1]!= value:\n            print(f\" - \\\"{param}\\\" is incorrectly set to {output.stdout.strip().split('=')[1]} in the running configuration and should have a value of: \\\"{value}\\\"\")\n            audit_pass = False\n\n        # Check durable setting (files)\n        files = subprocess.run([\"/usr/lib/systemd/systemd-sysctl\", \"--cat-config\"], capture_output=True, text=True).stdout.splitlines()\n        files += [\"/etc/default/ufw\"]  # Account for systems with UFW\n        param_found = False\n        for file in files:\n            if file.strip().startswith(\"#\"):\n                file = file.strip().lstrip(\"#\")\n            elif file.strip().endswith(\".conf\"):\n                file = file.strip()\n            else:\n                continue\n\n            with open(file, \"r\") as f:\n                for line in f.readlines():\n                    if line.strip().startswith(param + \"=\"):\n                        param_found = True\n                        if line.strip().split(\"=\")[1]!= value:\n                            print(f\" - \\\"{param}\\\" is incorrectly set to {line.strip().split('=')[1]} in \\\"{file}\\\" and should have a value of: \\\"{value}\\\"\")\n                            audit_pass = False\n                        else:\n                            print(f\" - \\\"{param}\\\" is correctly set to \\\"{value}\\\" in \\\"{file}\\\"\")\n                        break\n\n        if not param_found:\n            print(f\" - \\\"{param}\\\" is not set in an included file ** Note: \\\"{param}\\\" May be set in a file that's ignored by load procedure **\")\n            audit_pass = False\n\n    return audit_pass\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability\"\"\"\n    params = [(\"net.ipv4.ip_forward\", \"0\")]\n    ipv6_enabled = subprocess.run([\"grep\", \"-Pq\", \"^\\\\h*0\\\\b\", \"/sys/module/ipv6/parameters/disable\"], capture_output=True).returncode!= 0\n    if ipv6_enabled:\n        params.append((\"net.ipv6.conf.all.forwarding\", \"0\"))\n\n    for param, value in params:\n        # Set active kernel parameter\n        subprocess.run([\"sysctl\", \"-w\", f\"{param}={value}\"])\n        if param.startswith(\"net.ipv4.\"):\n            subprocess.run([\"sysctl\", \"-w\", \"net.ipv4.route.flush=1\"])\n        elif param.startswith(\"net.ipv6.\"):\n            subprocess.run([\"sysctl\", \"-w\", \"net.ipv6.route.flush=1\"])\n\n        # Set durable parameter in /etc/sysctl.d/\n        conf_file = f\"/etc/sysctl.d/60{param.replace('.', '_')}_sysctl.conf\"\n        with open(conf_file, \"w\") as f:\n            f.write(f\"{param} = {value}\")\n        print(f\" - Created \\\"{conf_file}\\\" with \\\"{param} = {value}\\\"\")\n"
  },
  {
    "name": "Ensure packet redirect sending is disabled",
    "id": "3.3.2",
    "type": "Automated",
    "start_page": 384,
    "end_page": 387,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "ICMP Redirects are used to send routing information to other hosts. As a host itself does not act as a router (in a host only configuration), there is no need to send redirects.",
    "rationale": "An attacker could use a compromised host to send invalid ICMP redirects to other router devices in an attempt to corrupt routing and have users access a system set up by the attacker as opposed to a valid system.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n \u2022 net.ipv4.conf.all.send_redirects is set to 0\n \u2022 net.ipv4.conf.default.send_redirects is set to 0\n\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.send_redirects=0\" \"net.ipv4.conf.default.send_redirects=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$\\(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"\\${l_out//# /}\"\n      else\n        l_kpar=\"\\$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"\\$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"\\${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_ufwscf\")\n   fi\n   if (( \\\\${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"\\${l_fkpname// /}\"; l_fkpvalue=\"\\${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"\\$(printf '%s' \"\\${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"\\$(printf '%s' \"\\${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"\\${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"\\${l_kpname// /}\"; l_kpvalue=\"\\${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"\\${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in \".conf:\n\n \u2022 net.ipv4.conf.all.send_redirects = 0\n \u2022 net.ipv4.conf.default.send_redirects = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv4.conf.all.send_redirects = 0\"\n\"net.ipv4.conf.default.send_redirects = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.send_redirects=0\n  sysctl -w net.ipv4.conf.default.send_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport sysctl\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit kernel parameters for vulnerability.\"\"\"\n    params = {\n        \"net.ipv4.conf.all.send_redirects\": \"0\",\n        \"net.ipv4.conf.default.send_redirects\": \"0\"\n    }\n    \n    audit_pass = True\n    for param, value in params.items():\n        # Check running configuration\n        with open(f\"/proc/sys/{param}\", 'r') as f:\n            if f.read().strip()!= value:\n                print(f\" - \\\"{param}\\\" is incorrectly set to {f.read().strip()} in the running configuration and should have a value of: \\\"{value}\\\"\")\n                audit_pass = False\n        \n        # Check durable setting (files)\n        found_in_file = False\n        for root, dirs, files in os.walk(\"/etc/sysctl.d/\"):\n            for file in files:\n                if file.endswith(\".conf\"):\n                    filepath = os.path.join(root, file)\n                    with open(filepath, 'r') as f:\n                        for line in f.readlines():\n                            if line.strip().startswith(param + \"=\"):\n                                if line.strip().split('=')[1]!= value:\n                                    print(f\" - \\\"{param}\\\" is incorrectly set to {line.strip().split('=')[1]} in \\\"{filepath}\\\" and should have a value of: \\\"{value}\\\"\")\n                                    audit_pass = False\n                                found_in_file = True\n                                break\n                        if found_in_file:\n                            break\n                    if found_in_file:\n                        break\n            if found_in_file:\n                break\n        if not found_in_file:\n            print(f\" - \\\"{param}\\\" is not set in an included file ** Note: \\\"{param}\\\" May be set in a file that's ignored by load procedure **\")\n            audit_pass = False\n    \n    return audit_pass\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability by setting kernel parameters.\"\"\"\n    params = {\n        \"net.ipv4.conf.all.send_redirects\": \"0\",\n        \"net.ipv4.conf.default.send_redirects\": \"0\"\n    }\n    \n    # Set active kernel parameters\n    for param, value in params.items():\n        sysctl.set_param(param, value)\n        print(f\"Set \\\"{param}\\\" to \\\"{value}\\\" in the running kernel configuration.\")\n    \n    # Write settings to a conf file (using /etc/sysctl.d/60netipv4_sysctl.conf as an example)\n    conf_file = \"/etc/sysctl.d/60netipv4_sysctl.conf\"\n    with open(conf_file, 'a+') as f:\n        for param, value in params.items():\n            if f.read().find(param) == -1:  # Check if param is already in the file\n                f.write(f\"{param} = {value}\\n\")\n                print(f\"Appended \\\"{param} = {value}\\\" to \\\"{conf_file}\\\".\")\n    \n    # Flush routes to apply the changes immediately\n    sysctl.set_param(\"net.ipv4.route.flush\", \"1\")\n    print(\"Flushed IPv4 routes to apply the configuration changes.\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        if audit_vuln():\n            print(\"\\n- Audit Result:\\n ** PASS **\")\n        else:\n            print(\"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure (listed above)\")\n"
  },
  {
    "name": "Ensure bogus icmp responses are ignored",
    "id": "3.3.3",
    "type": "Automated",
    "start_page": 388,
    "end_page": 391,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting net.ipv4.icmp_ignore_bogus_error_responses to 1 prevents the kernel from logging bogus responses (RFC-1122 non-compliant) from broadcast reframes, keeping file systems from filling up with useless log messages.",
    "rationale": "Some routers (and some attackers) will send responses that violate RFC-1122 and attempt to fill up a log file system with many useless error messages.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n\u2022 net.ipv4.icmp_ignore_bogus_error_responses is set to 1\n\nNote: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that 'correct' setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.icmp_ignore_bogus_error_responses=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in `.conf`:\n\n\u2022 net.ipv4.icmp_ignore_bogus_error_responses = 1\n\nExample:\n# printf '%s\\n' \"net.ipv4.icmp_ignore_bogus_error_responses = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.icmp_ignore_bogus_error_responses=1\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport sysctl\nimport os\n\n# Define the parameter and its desired value\nPARAM_NAME = \"net.ipv4.icmp_ignore_bogus_error_responses\"\nPARAM_VALUE = \"1\"\n\n# Define the configuration file to use for remediation\nCONFIG_FILE = \"/etc/sysctl.d/60-netipv4_sysctl.conf\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the vulnerability.\"\"\"\n    # Check running kernel configuration\n    current_value = sysctl.get(PARAM_NAME)\n    if current_value!= PARAM_VALUE:\n        print(f\"- `{PARAM_NAME}` is incorrectly set to `{current_value}` in the running configuration and should have a value of: `{PARAM_VALUE}`\")\n        config_file_status = check_config_files()\n        if config_file_status:\n            print(config_file_status)\n        return False\n    \n    # If we reach here, the running config is correct; now check durable config\n    config_file_status = check_config_files(only_if_correct=True)\n    if config_file_status:\n        print(config_file_status)\n    \n    print(f\"- `{PARAM_NAME}` is correctly set to `{PARAM_VALUE}` in the running configuration\")\n    return True\n\ndef check_config_files(only_if_correct=False) -> str:\n    \"\"\"Check configuration files for the parameter setting.\"\"\"\n    config_files = [f for f in os.listdir(\"/etc/sysctl.d\") if f.endswith(\".conf\")]\n    config_files.append(\"/etc/sysctl.conf\")  # Also check the main config file\n    \n    output = \"\"\n    for file in config_files:\n        file_path = os.path.join(\"/etc/sysctl.d\", file) if file!= \"/etc/sysctl.conf\" else \"/etc/sysctl.conf\"\n        with open(file_path, 'r') as f:\n            for line in f.readlines():\n                if line.strip().startswith(PARAM_NAME):\n                    value = line.split(\"=\")[1].strip()\n                    if (only_if_correct and value!= PARAM_VALUE) or (not only_if_correct):\n                        output += f\"- `{PARAM_NAME}` is {'incorrectly' if value!= PARAM_VALUE else 'correctly'} set to `{value}` in `{file_path}`\\n\"\n    \n    if output and not only_if_correct:\n        output += \"- **Note:** The parameter may be set in a file that's ignored by the load procedure.\\n\"\n    \n    return output\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability.\"\"\"\n    # Set the parameter in a configuration file\n    if not os.path.exists(CONFIG_FILE):\n        open(CONFIG_FILE, 'w').close()  # Create the file if it doesn't exist\n    with open(CONFIG_FILE, 'a') as f:\n        f.write(f\"{PARAM_NAME} = {PARAM_VALUE}\\n\")\n    print(f\"Added configuration to `{CONFIG_FILE}`\")\n    \n    # Apply the change to the active kernel parameters\n    sysctl.set(PARAM_NAME, PARAM_VALUE)\n    print(f\"Updated `{PARAM_NAME}` to `{PARAM_VALUE}` in the running kernel configuration\")\n    sysctl.flush_routes()  # equivalence to `sysctl -w net.ipv4.route.flush=1`\n    print(\"Flushed IPv4 routes\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        if audit_vuln():\n            print(\"- Audit Result: **PASS**\")\n        else:\n            print(\"- Audit Result: **FAIL**\")\n"
  },
  {
    "name": "Ensure broadcast icmp requests are ignored",
    "id": "3.3.4",
    "type": "Automated",
    "start_page": 392,
    "end_page": 395,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting net.ipv4.icmp_echo_ignore_broadcasts to 1 will cause the system to ignore all ICMP echo and timestamp requests to broadcast and multicast addresses.",
    "rationale": "Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for your network could be used to trick your host into starting (or participating) in a Smurf attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast messages with a spoofed source address. All hosts receiving this message and responding would send echo-reply messages back to the spoofed address, which is probably not routable. If many hosts respond to the packets, the amount of traffic on the network could be significantly multiplied.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: \n\n\u2022 net.ipv4.icmp_echo_ignore_broadcasts is set to 1\n\nNote: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that 'correct' setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.icmp_echo_ignore_broadcasts=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2} /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: \n\n\u2022 net.ipv4.icmp_echo_ignore_broadcasts = 1\n\nExample:\n# printf '%s\\n' \"net.ipv4.icmp_echo_ignore_broadcasts = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=1\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport subprocess\nimport pathlib\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the vulnerability\"\"\"\n    param_name = \"net.ipv4.icmp_echo_ignore_broadcasts\"\n    desired_value = \"1\"\n\n    # Check running configuration\n    output = subprocess.check_output(['sysctl', param_name]).decode('utf-8')\n    current_value = output.split('=')[1].strip()\n    if current_value!= desired_value:\n        print(f\" - \\\"{param_name}\\\" is incorrectly set to \\\"{current_value}\\\" in the running configuration and should have a value of: \\\"{desired_value}\\\"\")\n        return False\n\n    # Check durable setting (files)\n    config_dirs = [pathlib.Path('/etc/sysctl.d'), pathlib.Path('/etc')]\n    for dir in config_dirs:\n        for file in dir.glob('*.conf'):\n            try:\n                with file.open('r') as f:\n                    for line in f:\n                        if line.startswith(param_name + '='):\n                            file_value = line.split('=')[1].strip()\n                            if file_value!= desired_value:\n                                print(f\" - \\\"{param_name}\\\" is incorrectly set to \\\"{file_value}\\\" in \\\"{file}\\\" and should have a value of: \\\"{desired_value}\\\"\")\n                                return False\n            except PermissionError:\n                print(f\" - Permission denied reading \\\"{file}\\\"\")\n\n    print(f\" - \\\"{param_name}\\\" is correctly set to \\\"{desired_value}\\\" in the running configuration\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability\"\"\"\n    param_name = \"net.ipv4.icmp_echo_ignore_broadcasts\"\n    desired_value = \"1\"\n\n    # Set parameter in running configuration\n    subprocess.check_call(['sysctl', '-w', f'{param_name}={desired_value}'])\n    print(f\"Set \\\"{param_name}\\\" to \\\"{desired_value}\\\" in the running configuration\")\n\n    # Set parameter in configuration file\n    config_file = pathlib.Path('/etc/sysctl.d/60-netipv4_sysctl.conf')\n    if not config_file.exists():\n        with config_file.open('w') as f:\n            f.write(f'{param_name} = {desired_value}\\n')\n        print(f\"Created \\\"{config_file}\\\" with \\\"{param_name} = {desired_value}\\\"\")\n    else:\n        with config_file.open('r+') as f:\n            content = f.readlines()\n            param_found = False\n            for i, line in enumerate(content):\n                if line.startswith(param_name + '='):\n                    content[i] = f'{param_name} = {desired_value}\\n'\n                    param_found = True\n                    break\n            if not param_found:\n                content.append(f'{param_name} = {desired_value}\\n')\n            f.seek(0)\n            f.writelines(content)\n            f.truncate()\n        print(f\"Updated \\\"{config_file}\\\" with \\\"{param_name} = {desired_value}\\\"\")\n\n    # Flush routing cache\n    subprocess.check_call(['sysctl', '-w', 'net.ipv4.route.flush=1'])\n    print(\"Flushed routing cache\")\n"
  },
  {
    "name": "Ensure icmp redirects are not accepted",
    "id": "3.3.5",
    "type": "Automated",
    "start_page": 396,
    "end_page": 399,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables.",
    "rationale": "ICMP redirect messages are packets that convey routing information and tell your host (acting as a router) to send packets via an alternate path. It is a way of allowing an outside routing device to update your system routing tables. By setting net.ipv4.conf.all.accept_redirects, net.ipv4.conf.default.accept_redirects, net.ipv6.conf.all.accept_redirects, and net.ipv6.conf.default.accept_redirects to 0, the system will not accept any ICMP redirect messages, and therefore, won't allow outsiders to update the system's routing tables.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n\u2022 net.ipv4.conf.all.accept_redirects is set to 0\n\u2022 net.ipv4.conf.default.accept_redirects is set to 0\n\u2022 net.ipv6.conf.all.accept_redirects is set to 0\n\u2022 net.ipv6.conf.default.accept_redirects is set to 0\n\n### Note:\n\n\u2022 kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n\u2022 IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.accept_redirects=0\" \"net.ipv4.conf.default.accept_redirects=0\"\n\"net.ipv6.conf.all.accept_redirects=0\" \"net.ipv6.conf.default.accept_redirects=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n#### \u2022 net.ipv4.conf.all.accept_redirects = 0\n \u2022 net.ipv4.conf.default.accept_redirects = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv4.conf.all.accept_redirects = 0\"\n\"net.ipv4.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_redirects=0\n  sysctl -w net.ipv4.conf.default.accept_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n- IF - IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n#### \u2022 net.ipv6.conf.all.accept_redirects = 0\n \u2022 net.ipv6.conf.default.accept_redirects = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv6.conf.all.accept_redirects = 0\"\n\"net.ipv6.conf.default.accept_redirects = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n\nRun the following script to set the active kernel parameters:\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_redirects=0\n  sysctl -w net.ipv6.conf.default.accept_redirects=0\n  sysctl -w net.ipv6.route.flush=1\n}\n\nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_redirects=0\n  sysctl -w net.ipv4.conf.default.accept_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": ""
  },
  {
    "name": "Ensure secure icmp redirects are not accepted",
    "id": "3.3.6",
    "type": "Automated",
    "start_page": 400,
    "end_page": 403,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Secure ICMP redirects are the same as ICMP redirects, except they come from gateways listed on the default gateway list. It is assumed that these gateways are known to your system, and that they are likely to be secure.",
    "rationale": "It is still possible for even known gateways to be compromised. Setting `net.ipv4.conf.all.secure_redirects` and `net.ipv4.conf.default.secure_redirects` to 0 protects the system from routing table updates by possibly compromised known gateways.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n#### \u2022 net.ipv4.conf.all.secure_redirects is set to 0\n\n \u2022 net.ipv4.conf.default.secure_redirects is set to 0\n\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that 'correct' setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.secure_redirects=0\" \"net.ipv4.conf.default.secure_redirects=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in `.conf`:\n\n#### \u2022 net.ipv4.conf.all.secure_redirects = 0\n\n \u2022 net.ipv4.conf.default.secure_redirects = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv4.conf.all.secure_redirects = 0\"\n\"net.ipv4.conf.default.secure_redirects = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.secure_redirects=0\n  sysctl -w net.ipv4.conf.default.secure_redirects=0\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport sysctl\nimport os\n\n# Define the kernel parameters and their desired values\nKERNEL_PARAMETERS = {\n    \"net.ipv4.conf.all.secure_redirects\": \"0\",\n    \"net.ipv4.conf.default.secure_redirects\": \"0\"\n}\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the vulnerability by checking kernel parameters in the running configuration and files.\"\"\"\n    audit_passed = True\n    for param, value in KERNEL_PARAMETERS.items():\n        # Check running configuration\n        current_value = sysctl.get_param(param)\n        if current_value!= value:\n            print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{current_value}\\\" in the running configuration and should have a value of: \\\"{value}\\\"\")\n            audit_passed = False\n\n        # Check durable configuration files (considering file precedence)\n        config_files = [\"/etc/sysctl.conf\"] + [f for f in os.listdir(\"/etc/sysctl.d/\") if f.endswith(\".conf\")]\n        config_files.sort()  # Simulate file precedence\n        param_found = False\n        for file in config_files:\n            file_path = os.path.join(\"/etc/sysctl.d/\", file) if file!= \"/etc/sysctl.conf\" else file\n            with open(file_path, \"r\") as f:\n                for line in f.readlines():\n                    if line.strip().startswith(param + \"=\"):\n                        file_value = line.split(\"=\")[1].strip()\n                        if file_value!= value:\n                            print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{file_value}\\\" in \\\"{file_path}\\\" and should have a value of: \\\"{value}\\\"\")\n                            audit_passed = False\n                        param_found = True\n                        break\n            if param_found:\n                break\n        if not param_found:\n            print(f\"- \\\"{param}\\\" is not set in an included file ** Note: \\\"{param}\\\" May be set in a file that's ignored by load procedure **\")\n            audit_passed = False\n\n    return audit_passed\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by setting kernel parameters in a durable configuration file and applying the changes.\"\"\"\n    # Create a new file in /etc/sysctl.d/ to ensure the settings are not overridden\n    config_file = \"/etc/sysctl.d/60netipv4_sysctl.conf\"\n    with open(config_file, \"a+\") as f:\n        for param, value in KERNEL_PARAMETERS.items():\n            f.write(f\"{param} = {value}\\n\")\n            print(f\"Added \\\"{param} = {value}\\\" to \\\"{config_file}\\\"\")\n\n    # Apply the changes to the active kernel parameters\n    for param, value in KERNEL_PARAMETERS.items():\n        sysctl.set_param(param, value)\n        print(f\"Set \\\"{param}\\\" to \\\"{value}\\\" in the running kernel configuration\")\n    sysctl.route_flush()  # Flush the routing table\n    print(\"Flushed the routing table\")\n"
  },
  {
    "name": "Ensure reverse path filtering is enabled",
    "id": "3.3.7",
    "type": "Automated",
    "start_page": 404,
    "end_page": 407,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 forces the Linux kernel to utilize reverse path filtering on a received packet to determine if the packet was valid. Essentially, with reverse path filtering, if the return packet does not go out the same interface that the corresponding source packet came from, the packet is dropped (and logged if log_martians is set).",
    "rationale": "Setting net.ipv4.conf.all.rp_filter and net.ipv4.conf.default.rp_filter to 1 is a good way to deter attackers from sending your system bogus packets that cannot be responded to. One instance where this feature breaks down is if asymmetrical routing is employed. This would occur when using dynamic routing protocols (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you will not be able to enable this feature without breaking the routing.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n\u2022 net.ipv4.conf.all.rp_filter is set to 1\n\u2022 net.ipv4.conf.default.rp_filter is set to 1\n\n### Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.rp_filter=1\" \"net.ipv4.conf.default.rp_filter=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in ``.conf:\n\n\u2022 net.ipv4.conf.all.rp_filter = 1\n\u2022 net.ipv4.conf.default.rp_filter = 1\n\n### Example:\n# printf '%s\\n' \"net.ipv4.conf.all.rp_filter = 1\" \"net.ipv4.conf.default.rp_filter = 1\" >> /etc/sysctl.d/60-netipv4_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.rp_filter=1\n  sysctl -w net.ipv4.conf.default.rp_filter=1\n  sysctl -w net.ipv4.route.flush=1\n}",
    "python_script": "\nimport os\nimport sysctl\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the system to ensure reverse path filtering is enabled.\n    \n    Returns:\n        bool: True if the vulnerability is not present (settings are correct), False otherwise.\n    \"\"\"\n    params_correct = True\n    \n    # Check running configuration\n    for param, expected_value in {\n        \"net.ipv4.conf.all.rp_filter\": \"1\",\n        \"net.ipv4.conf.default.rp_filter\": \"1\"\n    }.items():\n        current_value = sysctl.get(param)\n        if current_value != expected_value:\n            print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{current_value}\\\" in the running configuration and should have a value of: \\\"{expected_value}\\\"\")\n            params_correct = False\n    \n    # Check durable settings (files), considering precedence\n    config_files = [\"/etc/sysctl.conf\"] + [f for f in os.listdir(\"/etc/sysctl.d/\") if f.endswith(\".conf\")]\n    for file in config_files:\n        file_path = os.path.join(\"/etc/sysctl.d/\", file) if file != \"/etc/sysctl.conf\" else file\n        with open(file_path, \"r\") as f:\n            for line in f.readlines():\n                line = line.strip()\n                if line.startswith(\"#\") or not line:\n                    continue\n                param, value = line.split(\"=\")\n                param = param.strip()\n                value = value.strip()\n                if param in [\"net.ipv4.conf.all.rp_filter\", \"net.ipv4.conf.default.rp_filter\"]:\n                    if value != \"1\":\n                        print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{value}\\\" in \\\"{file_path}\\\" and should have a value of: \\\"1\\\"\")\n                        params_correct = False\n    \n    # If IPv6 is disabled, some parameters may not be applicable\n    if not os.path.exists(\"/sys/module/ipv6/parameters/disable\") or open(\"/sys/module/ipv6/parameters/disable\").read().strip() != \"0\":\n        print(\"- IPv6 is disabled on the system, some parameters may not be applicable\")\n    \n    if params_correct:\n        print(\"- Audit Result: **PASS**\")\n    else:\n        print(\"- Audit Result: **FAIL**\")\n        print(\"- Reason(s) for audit failure (listed above)\")\n    return params_correct\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the required kernel parameters.\n    \"\"\"\n    params = {\n        \"net.ipv4.conf.all.rp_filter\": \"1\",\n        \"net.ipv4.conf.default.rp_filter\": \"1\"\n    }\n    \n    # Set kernel parameters in /etc/sysctl.d/ (creating a new file if necessary)\n    config_file = \"/etc/sysctl.d/60-netipv4_sysctl.conf\"\n    with open(config_file, \"a+\") as f:\n        for param, value in params.items():\n            line = f\"{param} = {value}\\n\"\n            if line not in f.readlines():\n                f.write(line)\n                print(f\"Added \\\"{line.strip()}\\\" to \\\"{config_file}\\\"\")\n    \n    # Apply the changes to the running configuration\n    for param, value in params.items():\n        sysctl.set(param, value)\n        print(f\"Set \\\"{param}\\\" to \\\"{value}\\\" in the running configuration\")\n    \n    # Flush IPv4 routes\n    os.system(\"sysctl -w net.ipv4.route.flush=1\")\n    print(\"Flushed IPv4 routes\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"No remediation necessary\")\n    else:\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure source routed packets are not accepted",
    "id": "3.3.8",
    "type": "Automated",
    "start_page": 408,
    "end_page": 412,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "In networking, source routing allows a sender to partially or fully specify the route packets take through a network. In contrast, non-source routed packets travel a path determined by routers in the network. In some cases, systems may not be routable or reachable from some locations (e.g. private addresses vs. Internet routable), and so source routed packets would need to be used.",
    "rationale": "Setting net.ipv4.conf.all.accept_source_route,\nnet.ipv4.conf.default.accept_source_route,\nnet.ipv6.conf.all.accept_source_route and\nnet.ipv6.conf.default.accept_source_route to 0 disables the system from accepting source routed packets. Assume this system was capable of routing packets to Internet routable addresses on one interface and private addresses on another interface. Assume that the private addresses were not routable to the Internet routable addresses and vice versa. Under normal routing circumstances, an attacker from the Internet routable addresses could not use the system as a way to reach the private address systems. If, however, source routed packets were allowed, they could be used to gain access to the private address systems as the route could be specified, rather than rely on routing protocols that did not allow this routing.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n  - `net.ipv4.conf.all.accept_source_route is set to 0`\n  - `net.ipv4.conf.default.accept_source_route is set to 0`\n  - `net.ipv6.conf.all.accept_source_route is set to 0`\n  - `net.ipv6.conf.default.accept_source_route is set to 0`\n\n**Note:**\n\n  - kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n  - IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.accept_source_route=0\"\n\"net.ipv4.conf.default.accept_source_route=0\" \"net.ipv6.conf.all.accept_source_route=0\"\n\"net.ipv6.conf.default.accept_source_route=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  {\n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$\"l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n  - `net.ipv4.conf.all.accept_source_route = 0`\n  - `net.ipv4.conf.default.accept_source_route = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.conf.all.accept_source_route = 0\"\n\"net.ipv4.conf.default.accept_source_route = 0\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n```\nRun the following script to set the active kernel parameters:\n```\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_source_route=0\n  sysctl -w net.ipv4.conf.default.accept_source_route=0\n  sysctl -w net.ipv4.route.flush=1\n}\n```\n**- IF - IPv6 is enabled on the system:**\nSet the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n  - `net.ipv6.conf.all.accept_source_route = 0`\n  - `net.ipv6.conf.default.accept_source_route = 0`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv6.conf.all.accept_source_route = 0\"\n\"net.ipv6.conf.default.accept_source_route = 0\" >> /etc/sysctl.d/60netipv6_sysctl.conf\n```\nRun the following command to set the active kernel parameters:\n```\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_source_route=0\n  sysctl -w net.ipv6.conf.default.accept_source_route=0\n  sysctl -w net.ipv6.route.flush=1\n}\n```\n**Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "# Setting active kernel parameters\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.accept_source_route=0\n  sysctl -w net.ipv4.conf.default.accept_source_route=0\n  sysctl -w net.ipv4.route.flush=1\n}\n\n# IF IPv6 is enabled on the system\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_source_route=0\n  sysctl -w net.ipv6.conf.default.accept_source_route=0\n  sysctl -w net.ipv6.route.flush=1\n}",
    "python_script": ""
  },
  {
    "name": "Ensure suspicious packets are logged",
    "id": "3.3.9",
    "type": "Automated",
    "start_page": 413,
    "end_page": 416,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "When enabled, this feature logs packets with un-routable source addresses to the kernel log.",
    "rationale": "Setting net.ipv4.conf.all.log_martians and net.ipv4.conf.default.log_martians to 1 enables this feature. Logging these packets allows an administrator to investigate the possibility that an attacker is sending spoofed packets to their system.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file: net.ipv4.conf.all.log_martians is set to 1, net.ipv4.conf.default.log_martians is set to 1. Note: kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.conf.all.log_martians=1\" \"net.ipv4.conf.default.log_martians=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_file\" )\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=( [\"$l_kpar\"]=\"$l_ufwscf\" )\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf: net.ipv4.conf.all.log_martians = 1, net.ipv4.conf.default.log_martians = 1. Example: # printf '%s\\n' \"net.ipv4.conf.all.log_martians = 1\" \"net.ipv4.conf.default.log_martians = 1\" >> /etc/sysctl.d/60netipv4_sysctl.conf. Run the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.conf.all.log_martians=1\n  sysctl -w net.ipv4.conf.default.log_martians=1\n  sysctl -w net.ipv4.route.flush=1\n}\nNote: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten\nDefault Value:\n net.ipv4.conf.all.log_martians = 0\n net.ipv4.conf.default.log_martians = 0\nReferences:\n1. NIST SP 800-53 Rev. 5: AU-3\nAdditional Information:\nOn systems with Uncomplicated Firewall, additional settings may be configured in /etc/ufw/sysctl.conf\nThe settings in /etc/ufw/sysctl.conf will override settings in /etc/sysctl.conf\nThis behavior can be changed by updating the IPT_SYSCTL parameter in /etc/default/ufw.",
    "python_script": "\nimport os\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if suspicious packets are logged.\"\"\"\n    params = {\n        \"net.ipv4.conf.all.log_martians\": \"1\",\n        \"net.ipv4.conf.default.log_martians\": \"1\"\n    }\n    \n    audit_pass = True\n    for param, value in params.items():\n        # Check running configuration\n        running_config_value = subprocess.check_output([\"sysctl\", param]).decode(\"utf-8\").split(\"=\")[1].strip()\n        if running_config_value!= value:\n            print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{running_config_value}\\\" in the running configuration and should have a value of: \\\"{value}\\\"\")\n            audit_pass = False\n        \n        # Check durable settings in files, considering precedence\n        files_checked = []\n        for root, dirs, files in os.walk(\"/etc/sysctl.d/\"):\n            for file in files:\n                if file.endswith(\".conf\"):\n                    file_path = os.path.join(root, file)\n                    files_checked.append(file_path)\n                    with open(file_path, 'r') as f:\n                        for line in f.readlines():\n                            if line.strip().startswith(param):\n                                file_config_value = line.split(\"=\")[1].strip()\n                                if file_config_value!= value:\n                                    print(f\"- \\\"{param}\\\" is incorrectly set to \\\"{file_config_value}\\\" in \\\"{file_path}\\\" and should have a value of: \\\"{value}\\\"\")\n                                    audit_pass = False\n        \n        # If parameter not found in any file\n        if not any(param in open(file).read() for file in files_checked):\n            print(f\"- \\\"{param}\\\" is not set in an included file ** Note: \\\"{param}\\\" May be set in a file that's ignored by load procedure **\")\n            audit_pass = False\n    \n    if audit_pass:\n        print(\"- Audit Result: ** PASS **\")\n    else:\n        print(\"- Audit Result: ** FAIL **\")\n        print(\"- Reason(s) for audit failure (listed above)\")\n    \n    return audit_pass\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate to ensure suspicious packets are logged.\"\"\"\n    params = {\n        \"net.ipv4.conf.all.log_martians\": \"1\",\n        \"net.ipv4.conf.default.log_martians\": \"1\"\n    }\n    config_file = \"/etc/sysctl.d/99Logging Martian Packets.conf\"\n    \n    # Write parameters to config file\n    with open(config_file, 'w') as f:\n        for param, value in params.items():\n            f.write(f\"{param} = {value}\\n\")\n    print(f\"Created/Updated \\\"{config_file}\\\" with required settings.\")\n    \n    # Apply changes to running kernel configuration\n    for param, value in params.items():\n        subprocess.run([\"sysctl\", \"-w\", f\"{param}={value}\"])\n        print(f\"Set \\\"{param}\\\" to \\\"{value}\\\" in the running kernel configuration.\")\n    \n    # Flush routes to ensure changes take effect\n    subprocess.run([\"sysctl\", \"-w\", \"net.ipv4.route.flush=1\"])\n    print(\"Flushed IPv4 routes to apply changes immediately.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure tcp syn cookies is enabled",
    "id": "3.3.10",
    "type": "Automated",
    "start_page": 417,
    "end_page": 420,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "When tcp_syncookies is set, the kernel will handle TCP SYN packets normally until the half-open connection queue is full, at which time, the SYN cookie functionality kicks in. SYN cookies work by not using the SYN queue at all. Instead, the kernel simply replies to the SYN with a SYN|ACK, but will include a specially crafted TCP sequence number that encodes the source and destination IP address and port number and the time the packet was sent. A legitimate connection would send the ACK packet of the three way handshake with the specially crafted sequence number. This allows the system to verify that it has received a valid response to a SYN cookie and allow the connection, even though there is no corresponding SYN in the queue.",
    "rationale": "Attackers use SYN flood attacks to perform a denial of service attacked on a system by sending many SYN packets without completing the three way handshake. This will quickly use up slots in the kernel's half-open connection queue and prevent legitimate connections from succeeding. Setting net.ipv4.tcp_syncookies to 1 enables SYN cookies, allowing the system to keep accepting valid connections, even if under a denial of service attack.",
    "audit_details": "Run the following script to verify the following kernel parameter is set in the running configuration and correctly loaded from a kernel parameter configuration file: `net.ipv4.tcp_syncookies is set to 1`",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv4.tcp_syncookies=1\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po '^\\h*$l_kpname\\b' \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\//.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([\"$l_kpar\"]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- '^\\h*$l_kpname\\h*=\\h*\\H+' \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in .conf:\n\n  - `net.ipv4.tcp_syncookies = 1`\n\n_Example:_\n```\n# printf '%s\\n' \"net.ipv4.tcp_syncookies = 1\" >> /etc/sysctl.d/60netipv4_sysctl.conf\n```\nRun the following script to set the active kernel parameters:\n```\n#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.tcp_syncookie=1\n  sysctl -w net.ipv4.route.flush=1\n}\n```\n**Note: If these settings appear in a canonically later file, or later in the same file, these settings will be overwritten",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv4.tcp_syncookies=1\n  sysctl -w net.ipv4.route.flush=1\n}\n",
    "python_script": "\nimport os\nimport sys\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if tcp_syn_cookies is enabled.\"\"\"\n    # Check running configuration\n    output = subprocess.check_output(['sysctl', 'net.ipv4.tcp_syncookies']).decode('utf-8')\n    running_config_ok = output.split('=')[1].strip() == '1'\n\n    # Verify setting is loaded from a configuration file\n    config_file_ok = False\n    for file in ['/etc/sysctl.conf'] + [f for f in os.listdir('/etc/sysctl.d/') if f.endswith('.conf')]:\n        file_path = os.path.join('/etc/sysctl.d/', file) if file!= '/etc/sysctl.conf' else file\n        with open(file_path, 'r') as f:\n            if 'net.ipv4.tcp_syncookies = 1' in f.read():\n                config_file_ok = True\n                break\n\n    if running_config_ok and config_file_ok:\n        print(f\" - 'net.ipv4.tcp_syncookies' is correctly set to '1' in the running configuration and '/{file_path}'\")\n        return True\n    else:\n        if not running_config_ok:\n            print(f\" - 'net.ipv4.tcp_syncookies' is incorrectly set to '{output.split('=')[1].strip()}' in the running configuration and should have a value of: '1'\")\n        if not config_file_ok:\n            print(f\" - 'net.ipv4.tcp_syncookies' is not set in an included file. **Note:** May be set in a file that's ignored by load procedure.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by enabling tcp_syn_cookies.\"\"\"\n    config_file = '/etc/sysctl.d/60netipv4_sysctl.conf'\n    if not os.path.exists(config_file):\n        with open(config_file, 'w') as f:\n            f.write('net.ipv4.tcp_syncookies = 1')\n        print(f\"Created '{config_file}' with 'net.ipv4.tcp_syncookies = 1'\")\n\n    # Ensure the setting is not overwritten by a later file\n    sysctl_files = sorted([f for f in os.listdir('/etc/sysctl.d/') if f.endswith('.conf')], reverse=True)\n    if config_file.split('/')[-1] not in sysctl_files[0]:\n        print(\"Warning: The created file might not have the highest precedence. Consider placing the setting in a file with higher precedence.\")\n\n    # Apply the setting to the active kernel parameters\n    subprocess.check_call(['sysctl', '-w', 'net.ipv4.tcp_syncookies=1'])\n    subprocess.check_call(['sysctl', '-w', 'net.ipv4.route.flush=1'])\n    print(\"Applied 'net.ipv4.tcp_syncookies=1' and flushed routes to the active kernel parameters.\")\n\nif __name__ == '__main__':\n    if sys.argv[1] == 'audit':\n        if audit_vuln():\n            print(\"\\n- Audit Result:\\n ** PASS **\")\n        else:\n            print(\"\\n- Audit Result:\\n ** FAIL **\")\n    elif sys.argv[1] == 'remediate':\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ipv6 router advertisements are not accepted",
    "id": "3.3.11",
    "type": "Automated",
    "start_page": 421,
    "end_page": 424,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This setting disables the system's ability to accept IPv6 router advertisements.",
    "rationale": "It is recommended that systems do not accept router advertisements as they could be tricked into routing traffic to compromised machines. Setting hard routes within the system (usually a single default route to a trusted router) protects the system from bad routes. Setting net.ipv6.conf.all.accept_ra and net.ipv6.conf.default.accept_ra to 0 disables the system's ability to accept IPv6 router advertisements.",
    "audit_details": "Run the following script to verify the following kernel parameters are set in the running configuration and correctly loaded from a kernel parameter configuration file:\n\n#### \u2022 net.ipv6.conf.all.accept_ra is set to 0\n\n \u2022 net.ipv6.conf.default.accept_ra is set to 0\n\n### Note:\n#### \u2022 kernel parameters are loaded by file and parameter order precedence. The following script observes this precedence as part of the auditing procedure. The parameters being checked may be set correctly in a file. If that file is superseded, the parameter is overridden by an incorrect setting later in that file, or in a canonically later file, that \"correct\" setting will be ignored both by the script and by the system during a normal kernel parameter load sequence.\n\n#### \u2022 IPv6 kernel parameters only apply to systems where IPv6 is enabled",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"net.ipv6.conf.all.accept_ra=0\" \"net.ipv6.conf.default.accept_ra=0\")\n  l_ufwscf=\"$([ -f /etc/default/ufw ] && awk -F= '/^\\s*IPT_SYSCTL=/ {print $2}' /etc/default/ufw)\"\n  kernel_parameter_chk()\n  { \n   l_krp=\"$(sysctl \"$l_kpname\" | awk -F= '{print $2}' | xargs)\" # Check running configuration\n   if [ \"$l_krp\" = \"$l_kpvalue\" ]; then\n     l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_krp\\\" in the running configuration\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_krp\\\" in the running configuration and should have a value of: \\\"$l_kpvalue\\\"\"\n   fi\n   unset A_out; declare -A A_out # Check durable setting (files)\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_kpar=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/lib/systemd/systemd-sysctl --cat-config | grep -Po '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\n   if [ -n \"$l_ufwscf\" ]; then # Account for systems with UFW (Not covered by systemd-sysctl -cat-config)\n     l_kpar=\"$(grep -Po \"^\\h*$l_kpname\\b\" \"$l_ufwscf\" | xargs)\"\n     l_kpar=\"${l_kpar//\\/\\.}\"\n     [ \"$l_kpar\" = \"$l_kpname\" ] && A_out+=([$l_kpar]=\"$l_ufwscf\")\n   fi\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_fkpname l_fkpvalue; do\n      l_fkpname=\"${l_fkpname// /}\"; l_fkpvalue=\"${l_fkpvalue// /}\"\n      if [ \"$l_fkpvalue\" = \"$l_kpvalue\" ]; then\n        l_output=\"$l_output\\n - \\\"$l_kpname\\\" is correctly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is incorrectly set to \\\"$l_fkpvalue\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value of: \\\"$l_kpvalue\\\"\\n\"\n      fi\n     done < <(grep -Po -- \"^\\h*$l_kpname\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_kpname\\\" is not set in an included file\\n  ** Note: \\\"$l_kpname\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_kpname l_kpvalue; do # Assess and check parameters\n   l_kpname=\"${l_kpname// /}\"; l_kpvalue=\"${l_kpvalue// /}\"\n   if ! grep -Pqs '^\\h*0\\b' /sys/module/ipv6/parameters/disable && grep -q '^net.ipv6.' <<< \"$l_kpname\"; then\n     l_output=\"$l_output\\n - IPv6 is disabled on the system, \\\"$l_kpname\\\" is not applicable\"\n   else\n     kernel_parameter_chk\n   fi\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n",
    "remediation_details": "- IF - IPv6 is enabled on the system: Set the following parameters in /etc/sysctl.conf or a file in /etc/sysctl.d/ ending in\n```.conf:\n\n#### \u2022 net.ipv6.conf.all.accept_ra = 0\n\n \u2022 net.ipv6.conf.default.accept_ra = 0\n\n### Example:\n# printf '%s\\n' \"net.ipv6.conf.all.accept_ra = 0\"\n\"net.ipv6.conf.default.accept_ra = 0\" >> /etc/sysctl.d/60-netipv6_sysctl.conf\n\nRun the following script to set the active kernel parameters:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sysctl -w net.ipv6.conf.all.accept_ra=0\n  sysctl -w net.ipv6.conf.default.accept_ra=0\n  sysctl -w net.ipv6.route.flush=1\n}",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit system configuration for vulnerable IPv6 settings.\"\"\"\n    vulnerable = False\n    params = {\n        \"net.ipv6.conf.all.accept_ra\": \"0\",\n        \"net.ipv6.conf.default.accept_ra\": \"0\"\n    }\n    \n    for param, value in params.items():\n        # Check running configuration\n        output = subprocess.check_output([\"sysctl\", param]).decode('utf-8').split(\"=\")[1].strip()\n        if output!= value:\n            print(f\"{param} is incorrectly set to {output} in the running configuration and should have a value of: {value}\")\n            vulnerable = True\n        \n        # Simplified check for config files, focusing on /etc/sysctl.conf for brevity\n        try:\n            with open(\"/etc/sysctl.conf\", 'r') as file:\n                for line in file:\n                    if param in line and not line.startswith(\"#\"):\n                        file_value = line.split(\"=\")[1].strip()\n                        if file_value!= value:\n                            print(f\"{param} is incorrectly set to {file_value} in /etc/sysctl.conf and should have a value of: {value}\")\n                            vulnerable = True\n        except FileNotFoundError:\n            print(f\"Warning: /etc/sysctl.conf not found. Check other config files for {param}.\")\n    \n    return not vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerable IPv6 settings.\"\"\"\n    params = {\n        \"net.ipv6.conf.all.accept_ra\": \"0\",\n        \"net.ipv6.conf.default.accept_ra\": \"0\",\n        \"net.ipv6.route.flush\": \"1\"\n    }\n    \n    for param, value in params.items():\n        subprocess.run([\"sysctl\", \"-w\", f\"{param}={value}\"], check=True)\n        print(f\"Set {param} to {value}.\")\n        \n        # Example of adding to a config file for persistence, appending if not already set\n        with open(\"/etc/sysctl.d/60-netipv6_sysctl.conf\", 'a+') as file:\n            file.seek(0)\n            if f\"{param}={value}\" not in file.read():\n                file.seek(0, 2)  # Move to end of file\n                file.write(f\"{param} = {value}\\n\")\n                print(f\"Added '{param} = {value}' to /etc/sysctl.d/60-netipv6_sysctl.conf.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Starting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"System is already configured as recommended.\")\n"
  },
  {
    "name": "Ensure ufw is installed",
    "id": "4.1.1",
    "type": "Automated",
    "start_page": 427,
    "end_page": 428,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Uncomplicated Firewall (ufw) is a frontend for iptables and is particularly well-suited for host-based firewalls. ufw provides a framework for managing Netfilter, as well as a command-line interface for manipulating the firewall.",
    "rationale": "A firewall utility is required to configure the Linux kernel's Netfilter framework via the iptables or nftables back-end.\n\nThe Linux kernel's Netfilter framework host-based firewall can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host.",
    "audit_details": "Run the following command to verify that Uncomplicated Firewall (UFW) is installed:\n```\n# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\nufw is installed\n```\n",
    "audit_code": "# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\nufw is installed",
    "remediation_details": "Run the following command to install Uncomplicated Firewall (UFW):\n```\napt install ufw\n```\n",
    "remediation_code": "apt install ufw",
    "python_script": "\nimport subprocess\nimport dpkg\n\ndef audit_vuln() -> bool:\n    \"\"\"Audits if Uncomplicated Firewall (UFW) is installed.\"\"\"\n    try:\n        pkg = dpkg.Package('ufw')\n        # If the package exists and is installed, return True\n        return pkg.is_installed\n    except dpkg.DpkgError:\n        # If an error occurs, assume not installed\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediates the vulnerability by installing Uncomplicated Firewall (UFW).\"\"\"\n    # Update package list before installation\n    subprocess.run(['apt', 'update'], check=True)\n    print(\"Updated package list.\")\n    \n    # Install ufw\n    subprocess.run(['apt', 'install', '-y', 'ufw'], check=True)\n    print(\"Installed `ufw` package.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"UFW is not installed. Initiating remediation...\")\n        remediate_vuln()\n    else:\n        print(\"UFW is installed. No action required.\")\n"
  },
  {
    "name": "Ensure iptables-persistent is not installed with ufw",
    "id": "4.1.2",
    "type": "Automated",
    "start_page": 429,
    "end_page": 430,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The iptables-persistent is a boot-time loader for Netfilter rules, iptables plugin",
    "rationale": "Running both ufw and the services included in the iptables-persistent package may lead to conflict",
    "audit_details": "Run the following command to verify that the iptables-persistent package is not installed:\n```\ndpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"\n```\nNothing should be returned",
    "audit_code": "dpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"",
    "remediation_details": "Run the following command to remove the iptables-persistent package:\n```\n# apt purge iptables-persistent\n```",
    "remediation_code": "apt purge iptables-persistent",
    "python_script": ""
  },
  {
    "name": "Ensure ufw service is enabled",
    "id": "4.1.3",
    "type": "Automated",
    "start_page": 431,
    "end_page": 433,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "UncomplicatedFirewall (ufw) is a frontend for iptables. ufw provides a framework for managing Netfilter, as well as a command-line and available graphical user interface for manipulating the firewall.\n\n**Note:**\n\n  - When running ufw enable or starting ufw via its initscript, ufw will flush its chains.\nThis is required so ufw can maintain a consistent state, but it may drop existing\nconnections (e.g. ssh). ufw does support adding rules before enabling the\nfirewall.\n\n  - Run the following command before running ufw enable.\n\n```\n# ufw allow proto tcp from any to any port 22\n```\n\n  - The rules will still be flushed, but the ssh port will be open after enabling the\nfirewall. Please note that once ufw is 'enabled', ufw will not flush the chains when\nadding or removing rules (but will when modifying a rule or changing the default\npolicy)\n\n  - By default, ufw will prompt when enabling the firewall while running under ssh.\nThis can be disabled by using ufw --force enable",
    "rationale": "The ufw service must be enabled and running in order for ufw to protect the system",
    "audit_details": "Run the following command to verify that the ufw daemon is enabled:\n```\n# systemctl is-enabled ufw.service\nenabled\n```\nRun the following command to verify that the ufw daemon is active:\n```\n# systemctl is-active ufw\nactive\n```\nRun the following command to verify ufw is active\n```\n# ufw status\nStatus: active\n```\n",
    "audit_code": "# systemctl is-enabled ufw.service\n# systemctl is-active ufw\n# ufw status",
    "remediation_details": "Run the following command to unmask the ufw daemon:\n```\n# systemctl unmask ufw.service\n```\nRun the following command to enable and start the ufw daemon:\n```\n# systemctl --now enable ufw.service\nactive\n```\nRun the following command to enable ufw:\n```\n# ufw enable\n```\n",
    "remediation_code": "# systemctl unmask ufw.service\n# systemctl --now enable ufw.service\n# ufw enable",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the ufw service is enabled and active.\n    \n    Returns:\n    bool: True if ufw is enabled and active, False otherwise.\n    \"\"\"\n    # Check if ufw service is enabled\n    enabled_check = subprocess.run(['systemctl', 'is-enabled', 'ufw.service'], \n                                   stdout=subprocess.PIPE, \n                                   stderr=subprocess.PIPE, \n                                   text=True)\n    enabled = enabled_check.stdout.strip() == 'enabled'\n\n    # Check if ufw service is active\n    active_check = subprocess.run(['systemctl', 'is-active', 'ufw'], \n                                  stdout=subprocess.PIPE, \n                                  stderr=subprocess.PIPE, \n                                  text=True)\n    active = active_check.stdout.strip() == 'active'\n\n    # Verify ufw status\n    status_check = subprocess.run(['ufw', 'status'], \n                                  stdout=subprocess.PIPE, \n                                  stderr=subprocess.PIPE, \n                                  text=True)\n    ufw_active = 'Status: active' in status_check.stdout\n\n    return enabled and active and ufw_active\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by enabling the ufw service.\n    \"\"\"\n    # Unmask ufw service\n    subprocess.run(['systemctl', 'unmask', 'ufw.service'])\n    print(\"Unmasked ufw.service\")\n\n    # Enable and start ufw service\n    subprocess.run(['systemctl', '--now', 'enable', 'ufw.service'])\n    print(\"Enabled and started ufw.service\")\n\n    # Enable ufw\n    subprocess.run(['ufw', 'enable', '--force'])  # --force to prevent prompt over ssh\n    print(\"Enabled ufw with --force option to prevent ssh prompt\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Remediating ufw vulnerability...\")\n        remediate_vuln()\n    else:\n        print(\"ufw is already enabled and active. No remediation needed.\")\n"
  },
  {
    "name": "Ensure ufw loopback traffic is configured",
    "id": "4.1.4",
    "type": "Automated",
    "start_page": 434,
    "end_page": 435,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6).",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8 for IPv4 and ::1/128 for IPv6) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands and verify output includes the listed rules in order:\n```\n# ufw status verbose\nTo             Action   From\n--             ------   ---Anywhere on lo       ALLOW IN  Anywhere          \nAnywhere          DENY IN   127.0.0.0/8        \nAnywhere (v6) on lo    ALLOW IN  Anywhere (v6)       \nAnywhere (v6)       DENY IN   ::1            \nAnywhere          ALLOW OUT  Anywhere on lo      \nAnywhere (v6)       ALLOW OUT  Anywhere (v6) on lo\n\n```",
    "audit_code": "# ufw status verbose",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# ufw allow in on lo\n# ufw allow out on lo\n# ufw deny in from 127.0.0.0/8\n# ufw deny in from ::1\n\n```",
    "remediation_code": "# ufw allow in on lo\n# ufw allow out on lo\n# ufw deny in from 127.0.0.0/8\n# ufw deny in from ::1",
    "python_script": "\nimport subprocess\n\n### UFW Configuration Auditor and Remediation Script ###\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the system's UFW configuration for the specified vulnerability.\n    \n    Returns:\n        bool: True if the vulnerability is present, False otherwise.\n    \"\"\"\n    # Expected rules in order (IPv4 and IPv6)\n    expected_rules = [\n        \"Anywhere on lo       ALLOW IN  Anywhere\",\n        \"Anywhere          DENY IN   127.0.0.0/8\",\n        \"Anywhere (v6) on lo    ALLOW IN  Anywhere (v6)\",\n        \"Anywhere (v6)       DENY IN   ::1\",\n        \"Anywhere          ALLOW OUT  Anywhere on lo\",\n        \"Anywhere (v6)       ALLOW OUT  Anywhere (v6) on lo\"\n    ]\n    \n    # Execute UFW status command and capture output\n    ufw_status_cmd = \"ufw status verbose\"\n    output = subprocess.check_output(ufw_status_cmd, shell=True).decode('utf-8').splitlines()\n    \n    # Filter relevant rules (assuming 'To' is a key identifier in the output)\n    relevant_output = [line for line in output if line.startswith(\"To\")]\n    \n    # Check if all expected rules are present in the same order\n    if len(expected_rules)!= len(relevant_output):\n        return True  # Vulnerability present (rule count mismatch)\n    \n    for expected, actual in zip(expected_rules, relevant_output):\n        if expected not in actual:\n            return True  # Vulnerability present (rule mismatch)\n    \n    return False  # No vulnerability detected\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the UFW configuration vulnerability by applying the necessary rules.\n    \"\"\"\n    rules_to_apply = {\n        \"allow in on lo\": \"Allow incoming traffic on loopback interface.\",\n        \"allow out on lo\": \"Allow outgoing traffic on loopback interface.\",\n        \"deny in from 127.0.0.0/8\": \"Deny incoming IPv4 loopback network traffic on all non-loopback interfaces.\",\n        \"deny in from ::1\": \"Deny incoming IPv6 loopback network traffic on all non-loopback interfaces.\"\n    }\n    \n    for command, description in rules_to_apply.items():\n        full_cmd = f\"ufw {command}\"\n        subprocess.check_call(full_cmd, shell=True)\n        print(f\"Applied UFW rule: {description}\")\n\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Applying remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected in UFW loopback traffic configuration.\")\n"
  },
  {
    "name": "Ensure ufw firewall rules exist for all open ports",
    "id": "4.1.6",
    "type": "Automated",
    "start_page": 438,
    "end_page": 440,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Services and ports can be accepted or explicitly rejected.\n\nNote:  \n  - Changing firewall settings while connected over network can result in being locked out of the system\n  \n  - The remediation command opens up the port to traffic from all sources. Consult ufw documentation and set any restrictions in compliance with site policy",
    "rationale": "To reduce the attack surface of a system, all services and ports should be blocked unless required.\n  \n  - Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.\n  \n  - Without a firewall rule configured for open ports, the default firewall policy will drop all packets to these ports.\n  \n  - Required ports should have a firewall rule created to allow approved connections in accordance with local site policy.\n  \n  - Unapproved ports should have an explicit deny rule created.",
    "audit_details": "Run the following script to verify a firewall rule exists for all open ports: \n```bash\n#!/usr/bin/env bash\n{\n  unset a_ufwout;unset a_openports\n  while read -r l_ufwport; do\n   [ -n \"$l_ufwport\" ] && a_ufwout+=(\"$l_ufwport\")\n  done < <(ufw status verbose | grep -Po '^\n\\h*\\d+\\b' | sort -u)\n  while read -r l_openport; do\n   [ -n \"$l_openport\" ] && a_openports+=(\"$l_openport\")\n  done < <(ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ &&\n$5!~/\\[?::1\\]?:/) {split($5, a, \":\"); print a[2]}' | sort -u)\n  a_diff=(\"$(printf '%s\\n' \"${a_openports[@]}\" \"${a_ufwout[@]}\"\n\"${a_ufwout[@]}\" | sort | uniq -u)\")\n  if [[ -n \"${a_diff[*]}\" ]]; then\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n- The following port(s) don't\nhave a rule in UFW: $(printf '%s\\n' \\n\"${a_diff[*]}\")\\n- End List\"\n  else\n   echo -e \"\\n - Audit Passed -\\n- All open ports have a rule in UFW\\n\"\n  fi\n}\n```",
    "audit_code": "#!/usr/bin/env bash\n{\n  unset a_ufwout;unset a_openports\n  while read -r l_ufwport; do\n   [ -n \"$l_ufwport\" ] && a_ufwout+=(\"$l_ufwport\")\n  done < <(ufw status verbose | grep -Po '^\n\\h*\\d+\\b' | sort -u)\n  while read -r l_openport; do\n   [ -n \"$l_openport\" ] && a_openports+=(\"$l_openport\")\n  done < <(ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ &&\n$5!~/\\[?::1\\]?:/) {split($5, a, \":\"); print a[2]}' | sort -u)\n  a_diff=(\"$(printf '%s\\n' \"${a_openports[@]}\" \"${a_ufwout[@]}\"\n\"${a_ufwout[@]}\" | sort | uniq -u)\")\n  if [[ -n \"${a_diff[*]}\" ]]; then\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n- The following port(s) don't\nhave a rule in UFW: $(printf '%s\\n' \\n\"${a_diff[*]}\")\\n- End List\"\n  else\n   echo -e \"\\n - Audit Passed -\\n- All open ports have a rule in UFW\\n\"\n  fi\n}",
    "remediation_details": "For each port identified in the audit which does not have a firewall rule, evaluate the service listening on the port and add a rule for accepting or denying inbound connections in accordance with local site policy:\n_Examples:_\n```\n# ufw allow in <port>/<tcp or udp protocol>\n# ufw deny in <port>/<tcp or udp protocol>\n```\nNote: Examples create rules for from any, to any. More specific rules should be considered when allowing inbound traffic e.g only traffic from this network.\n_Example to allow traffic on port 443 using the tcp protocol from the 192.168.1.0 network:_\n```\nufw allow from 192.168.1.0/24 to any proto tcp port 443\n```\n",
    "remediation_code": "# ufw allow in <port>/<tcp or udp protocol>\n# ufw deny in <port>/<tcp or udp protocol>\nufw allow from 192.168.1.0/24 to any proto tcp port 443\n",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if all open ports have UFW rules.\"\"\"\n    # Retrieve open ports (excluding loopback addresses)\n    open_ports_cmd = \"ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ && $5!~/\\\\[?::1\\\\]?:/) {split($5, a, \\\":\\\"); print a[2]}' | sort -u\"\n    open_ports = subprocess.check_output(open_ports_cmd, shell=True).decode().splitlines()\n\n    # Extract allowed ports from UFW status\n    ufw_status_cmd = \"ufw status verbose | grep -Po '^\\\\s*\\\\d+\\\\b' | sort -u\"\n    ufw_allowed_ports = subprocess.check_output(ufw_status_cmd, shell=True).decode().splitlines()\n\n    # Compare lists to identify open ports without UFW rules\n    open_ports_set = set(open_ports)\n    ufw_allowed_ports_set = set(ufw_allowed_ports)\n    ports_without_rules = open_ports_set - ufw_allowed_ports_set\n\n    if ports_without_rules:\n        print(f\"The following port(s) don't have a rule in UFW: {', '.join(ports_without_rules)}\")\n        return False\n    else:\n        print(\"All open ports have a rule in UFW\")\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding UFW rules for open ports without rules.\"\"\"\n    # Identify open ports without UFW rules (same logic as audit_vuln)\n    open_ports_cmd = \"ss -tuln | awk '($5!~/%lo:/ && $5!~/127.0.0.1:/ && $5!~/\\\\[?::1\\\\]?:/) {split($5, a, \\\":\\\"); print a[2]}' | sort -u\"\n    open_ports = subprocess.check_output(open_ports_cmd, shell=True).decode().splitlines()\n\n    ufw_status_cmd = \"ufw status verbose | grep -Po '^\\\\s*\\\\d+\\\\b' | sort -u\"\n    ufw_allowed_ports = subprocess.check_output(ufw_status_cmd, shell=True).decode().splitlines()\n\n    open_ports_set = set(open_ports)\n    ufw_allowed_ports_set = set(ufw_allowed_ports)\n    ports_without_rules = open_ports_set - ufw_allowed_ports_set\n\n    for port in ports_without_rules:\n        # Default to allowing incoming traffic (can be modified to deny if needed)\n        ufw_cmd = f\"ufw allow in {port}/tcp\"  # Assuming TCP, adjust as necessary (e.g., udp)\n        subprocess.check_call(ufw_cmd, shell=True)\n        print(f\"Allowed incoming traffic on port {port}\")\n"
  },
  {
    "name": "Ensure ufw default deny firewall policy",
    "id": "4.1.7",
    "type": "Automated",
    "start_page": 441,
    "end_page": 442,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A default deny policy on connections ensures that any unconfigured network usage will be rejected. **Note: Any port or protocol without a explicit allow before the default deny will be** blocked",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit_details": "Run the following command and verify that the default policy for incoming, outgoing, and routed directions is deny, reject, or disabled:\n\n```\n# ufw status verbose | grep Default:\n```\n\n_Example output:_\n\n```\nDefault: deny (incoming), deny (outgoing), disabled (routed)\n```\n",
    "audit_code": "# ufw status verbose | grep Default:",
    "remediation_details": "Run the following commands to implement a default deny policy:\n```\n# ufw default deny incoming\n# ufw default deny outgoing\n# ufw default deny routed\n```",
    "remediation_code": "# ufw default deny incoming\n# ufw default deny outgoing\n# ufw default deny routed",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the default ufw policy for incoming, outgoing, and routed directions.\n    \n    Returns:\n        bool: True if the vulnerability is present (i.e., any policy is not deny/reject/disabled), False otherwise.\n    \"\"\"\n    policies = subprocess.check_output([\"ufw\", \"status\", \"verbose\"]).decode().splitlines()\n    policy_line = [line for line in policies if line.startswith(\"Default:\")]\n    \n    if not policy_line:\n        return True  # Assume vulnerability present if no policy line found\n    \n    policy_line = policy_line[0].split(\":\")[1].strip().split(\", \")\n    policies_expected = {\n        \"incoming\": \"deny\",\n        \"outgoing\": \"deny\",\n        \"routed\": \"disabled\"\n    }\n    \n    for policy in policy_line:\n        direction, status = policy.split()\n        if direction in policies_expected and policies_expected[direction] not in [status, \"reject\"]:\n            return True  # Vulnerability present\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the default ufw policy to deny for incoming, outgoing, and routed directions.\n    \"\"\"\n    for direction in [\"incoming\", \"outgoing\", \"routed\"]:\n        if direction == \"routed\":\n            policy = \"disabled\"\n        else:\n            policy = \"deny\"\n        \n        subprocess.run([\"ufw\", f\"default\", policy, direction])\n        print(f\"Set ufw default policy for {direction} to {policy}.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure nftables is installed",
    "id": "4.2.1",
    "type": "Automated",
    "start_page": 446,
    "end_page": 447,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "nftables provides a new in-kernel packet classification framework that is based on a network-specific Virtual Machine (VM) and a new nft userspace command line tool. nftables reuses the existing Netfilter subsystems such as the existing hook infrastructure, the connection tracking system, NAT, userspace queuing and logging subsystem. Notes: - nftables is available in Linux kernel 3.13 and newer - Only one firewall utility should be installed and configured - Changing firewall settings while connected over the network can result in being locked out of the system",
    "rationale": "nftables is a subsystem of the Linux kernel that can protect against threats originating from within a corporate network to include malicious mobile code and poorly configured software on a host.",
    "audit_details": "Run the following command to verify that nftables is installed:\n```\n# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"\nnftables is installed\n```",
    "audit_code": "# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"",
    "remediation_details": "Run the following command to install nftables:\n```\n# apt install nftables\n```\n",
    "remediation_code": "# apt install nftables",
    "python_script": "\nimport subprocess\nimport apt\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if nftables is installed.\n    \n    Returns:\n    bool: True if nftables is installed, False otherwise.\n    \"\"\"\n    try:\n        # Using subprocess to check if nftables is installed\n        # The 'dpkg -s' command returns a zero exit code if the package is installed\n        subprocess.check_output(['dpkg', '-s', 'nftables'])\n        return True\n    except subprocess.CalledProcessError:\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by installing nftables.\n    \"\"\"\n    # Initialize the APT cache\n    cache = apt.Cache()\n    \n    # Check if the package is already installed (to avoid unnecessary installation)\n    if not cache['nftables'].is_installed:\n        print(\"Installing nftables package...\")\n        # Update the package index\n        subprocess.run(['apt', 'update'], check=True)\n        \n        # Install the nftables package using APT\n        cache['nftables'].mark_install()\n        cache.commit()\n        print(\"Successfully installed nftables.\")\n    else:\n        print(\"nftables is already installed. No action required.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"nftables is already installed.\")\n"
  },
  {
    "name": "Ensure ufw is uninstalled or disabled with nftables",
    "id": "4.2.2",
    "type": "Automated",
    "start_page": 448,
    "end_page": 449,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Uncomplicated Firewall (UFW) is a program for managing a Netfilter firewall designed to be easy to use.",
    "rationale": "Running both the nftables service and ufw may lead to conflict and unexpected results.",
    "audit_details": "Run the following commands to verify that ufw is either not installed or inactive. Only one of the following needs to pass. Run the following command to verify that ufw is not installed:\n\n```\n# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n```\n\nNothing should be returned\n**-OR-**\nRun the following commands to verify ufw is disabled and ufw.service is not enabled:\n```\n# ufw status\nStatus: inactive\n# systemctl is-enabled ufw.service\nmasked\n```",
    "audit_code": "# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n# ufw status\n# systemctl is-enabled ufw.service",
    "remediation_details": "Run one of the following to either remove ufw **or disable ufw and mask ufw.service:**\nRun the following command to remove ufw:\n\n```\n# apt purge ufw\n```\n\n**-OR-**\nRun the following commands to disable ufw and mask ufw.service:\n```\n# ufw disable\n# systemctl stop ufw.service\n# systemctl mask ufw.service\n```\n**Note:** `ufw disable needs to be run before systemctl mask ufw.service in order to` correctly disable UFW",
    "remediation_code": "# apt purge ufw\n# ufw disable\n# systemctl stop ufw.service\n# systemctl mask ufw.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if ufw is uninstalled or disabled with nftables.\"\"\"\n    # Check if ufw is not installed\n    if subprocess.call([\"dpkg-query\", \"-s\", \"ufw\"], stdout=subprocess.DEVNULL) != 0:\n        return True  # ufw is not installed, audit passes\n\n    # ufw is installed, check if it's disabled and service is not enabled\n    ufw_status = subprocess.check_output([\"ufw\", \"status\"]).decode().strip()\n    if ufw_status == \"Status: inactive\":\n        enable_status = subprocess.check_output([\"systemctl\", \"is-enabled\", \"ufw.service\"]).decode().strip()\n        if enable_status == \"masked\":\n            return True  # ufw is disabled and service is masked, audit passes\n\n    return False  # audit fails\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by either uninstalling ufw or disabling it with nftables.\"\"\"\n    print(\"Choosing to disable ufw and mask ufw.service (uninstallation is also an option but not the default here)\")\n    # Disabling is chosen by default in this script, uncomment the below block to purge instead\n    # subprocess.check_call([\"apt\", \"purge\", \"-y\", \"ufw\"])\n    # print(\"Purged ufw\")\n\n    # Disable ufw\n    subprocess.check_call([\"ufw\", \"disable\"])\n    print(\"Disabled ufw\")\n\n    # Stop ufw.service\n    subprocess.check_call([\"systemctl\", \"stop\", \"ufw.service\"])\n    print(\"Stopped ufw.service\")\n\n    # Mask ufw.service\n    subprocess.check_call([\"systemctl\", \"mask\", \"ufw.service\"])\n    print(\"Masked ufw.service\")\n"
  },
  {
    "name": "Ensure a nftables table exists",
    "id": "4.2.4",
    "type": "Automated",
    "start_page": 452,
    "end_page": 453,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Tables hold chains. Each table only has one address family and only applies to packets of this family. Tables can have one of five families.",
    "rationale": "nftables doesn't have any default tables. Without a table being built, nftables will not filter network traffic.",
    "audit_details": "Run the following command to verify that a nftables table exists:\n\n```\n# nft list tables\n```\n\nReturn should include a list of nftables:\n_Example:_\n\n```\ntable inet filter\n```",
    "audit_code": "# nft list tables",
    "remediation_details": "Run the following command to create a table in nftables:\n\n```\n# nft create table inet <table name>\n```\n\n_Example:_\n\n```\n# nft create table inet filter\n```",
    "remediation_code": "# nft create table inet <table name>",
    "python_script": "\nimport subprocess\n\n# Constants\nTABLE_FAMILY = \"inet\"\nTABLE_NAME = \"filter\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if an nftables table exists\"\"\"\n    try:\n        output = subprocess.check_output([\"nft\", \"list\", \"tables\"]).decode(\"utf-8\")\n        return any(f\"table {TABLE_FAMILY}\" in line for line in output.splitlines())\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing nftables: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Create a new nftables table if none exist\"\"\"\n    if not audit_vuln():\n        try:\n            subprocess.check_call([\"nft\", \"create\", \"table\", TABLE_FAMILY, TABLE_NAME])\n            print(f\"Created `{TABLE_NAME}` nftables table with `{TABLE_FAMILY}` family.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error remediating nftables: {e}\")\n    else:\n        print(f\"nftables table with `{TABLE_FAMILY}` family already exists, no action taken.\")\n```\n**Example Usage:**\n```python\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"No remediation needed.\")\n"
  },
  {
    "name": "Ensure nftables base chains exist",
    "id": "4.2.5",
    "type": "Automated",
    "start_page": 454,
    "end_page": 455,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Chains are containers for rules. They exist in two kinds, base chains and regular chains. A base chain is an entry point for packets from the networking stack, a regular chain may be used as jump target and is used for better rule organization.",
    "rationale": "If a base chain doesn't exist with a hook for input, forward, and delete, packets that would flow through those chains will not be touched by nftables.",
    "audit_details": "Run the following commands and verify that base chains exist for INPUT.\n```\n# nft list ruleset | grep 'hook input'\ntype filter hook input priority 0;\n```\nRun the following commands and verify that base chains exist for FORWARD.\n```\n# nft list ruleset | grep 'hook forward'\ntype filter hook forward priority 0;\n```\nRun the following commands and verify that base chains exist for OUTPUT.\n```\n# nft list ruleset | grep 'hook output'\ntype filter hook output priority 0;\n```\nPage 453",
    "audit_code": "# nft list ruleset | grep 'hook input'\n# nft list ruleset | grep 'hook forward'\n# nft list ruleset | grep 'hook output'",
    "remediation_details": "Run the following command to create the base chains:\n```\n# nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 \\; }\n```\n_Example:_\n```\n# nft create chain inet filter input { type filter hook input priority 0 \\; }\n# nft create chain inet filter forward { type filter hook forward priority 0 \\; }\n# nft create chain inet filter output { type filter hook output priority 0 \\; }\n```\n",
    "remediation_code": "# nft create chain inet <table name> <base chain name> { type filter hook <(input|forward|output)> priority 0 \\; }",
    "python_script": "\nimport subprocess\nimport json\n\n# Constants\nNFTABLES_TABLE = 'inet filter'\nBASE_CHAINS = {\n    'input': 'input',\n    'forward': 'forward',\n    'output': 'output'\n}\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Verify the existence of nftables base chains for INPUT, FORWARD, and OUTPUT.\n    \n    Returns:\n        bool: True if all base chains exist, False otherwise.\n    \"\"\"\n    try:\n        # Run nft list ruleset and parse the output as JSON\n        output = subprocess.check_output(['nft', '-j', 'list', 'ruleset'])\n        ruleset = json.loads(output)\n        \n        # Check if all base chains exist\n        for chain, hook in BASE_CHAINS.items():\n            if not any((rule['expr']['hook'] == hook for rule in ruleset)):\n                return False\n        \n        return True\n    \n    except (subprocess.CalledProcessError, json.JSONDecodeError) as e:\n        print(f\"Error auditing nftables: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Create missing nftables base chains for INPUT, FORWARD, and OUTPUT.\n    \"\"\"\n    try:\n        # Check the current ruleset to identify missing base chains\n        output = subprocess.check_output(['nft', '-j', 'list', 'ruleset'])\n        ruleset = json.loads(output)\n        existing_hooks = [rule['expr']['hook'] for rule in ruleset]\n        \n        for chain, hook in BASE_CHAINS.items():\n            if hook not in existing_hooks:\n                # Construct and execute the nft create chain command\n                cmd = f\"nft create chain {NFTABLES_TABLE} {chain} {{ type filter hook {hook} priority 0 ; }}\"\n                subprocess.check_call(cmd, shell=True)\n                print(f\"Created base chain '{chain}' with hook '{hook}'.\")\n    \n    except (subprocess.CalledProcessError, json.JSONDecodeError) as e:\n        print(f\"Error remediating nftables: {e}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure nftables loopback traffic is configured",
    "id": "4.2.6",
    "type": "Automated",
    "start_page": 456,
    "end_page": 457,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network.",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to the operation of the system. The loopback interface is the only place that loopback network traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands to verify that the loopback interface is configured: Run the following command to verify the loopback interface is configured to accept network traffic:\n\n```\n# nft list ruleset | awk '/hook input/,/}/' | grep 'iif \"lo\" accept'\n```\n\n_Example output:_\n\n```\niif \"lo\" accept\n```\n\nRun the following command to verify network traffic from an iPv4 loopback interface is configured to drop:\n\n```\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip saddr'\n```\n\n_Example output:_\n\n```\nip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop\n```\n\n**-IF- IPv6 is enabled on the system:**\nRun the following command to verify network traffic from an iPv6 loopback interface is configured to drop:\n\n```\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip6 saddr'\n```\n\n_Example output:_\n\n```\nip6 saddr ::1 counter packets 0 bytes 0 drop\n```",
    "audit_code": "# nft list ruleset | awk '/hook input/,/}/' | grep 'iif \"lo\" accept'\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip saddr'\n# nft list ruleset | awk '/hook input/,/}/' | grep 'ip6 saddr'",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# nft add rule inet filter input iif lo accept\n# nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop\n```\n**-IF- IPv6 is enabled on the system:**\nRun the following command to implement the IPv6 loopback rule:\n```\n# nft add rule inet filter input ip6 saddr ::1 counter drop\n```",
    "remediation_code": "# nft add rule inet filter input iif lo accept\n# nft create rule inet filter input ip saddr 127.0.0.0/8 counter drop\n# nft add rule inet filter input ip6 saddr ::1 counter drop",
    "python_script": "\nimport nftables\nimport subprocess\nimport netifaces as ni\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit nftables loopback traffic configuration\"\"\"\n    nft = nftables.Nftables()\n    nft.flush_ruleset()  # Ensure we're working with the current ruleset\n\n    # Check if loopback interface accepts traffic\n    rule_lo_accept = nft.list_ruleset().find(\"iif 'lo' accept\")\n    if rule_lo_accept is None:\n        print(\"Loopback interface does not accept traffic.\")\n        return False\n\n    # Check if IPv4 loopback traffic is dropped\n    rule_ipv4_drop = nft.list_ruleset().find(\"ip saddr 127.0.0.0/8 counter drop\")\n    if rule_ipv4_drop is None:\n        print(\"IPv4 loopback traffic is not dropped.\")\n        return False\n\n    # Check IPv6 configuration if enabled\n    if ni.AF_INET6 in ni.address_families():\n        rule_ipv6_drop = nft.list_ruleset().find(\"ip6 saddr ::1 counter drop\")\n        if rule_ipv6_drop is None:\n            print(\"IPv6 loopback traffic is not dropped.\")\n            return False\n\n    print(\"Loopback traffic configuration is secure.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate nftables loopback traffic configuration\"\"\"\n    nft = nftables.Nftables()\n\n    # Add rule to accept loopback interface traffic\n    nft.add_rule('inet', 'filter', 'input', ['iif', 'lo', 'accept'])\n    print(\"Added rule to accept loopback interface traffic.\")\n\n    # Add rule to drop IPv4 loopback traffic\n    nft.add_rule('inet', 'filter', 'input', ['ip', 'saddr', '127.0.0.0/8', 'counter', 'drop'])\n    print(\"Added rule to drop IPv4 loopback traffic.\")\n\n    # Add rule to drop IPv6 loopback traffic if IPv6 is enabled\n    if ni.AF_INET6 in ni.address_families():\n        nft.add_rule('inet', 'filter', 'input', ['ip6', 'saddr', '::1', 'counter', 'drop'])\n        print(\"Added rule to drop IPv6 loopback traffic.\")\n"
  },
  {
    "name": "Ensure nftables default deny firewall policy",
    "id": "4.2.8",
    "type": "Automated",
    "start_page": 461,
    "end_page": 463,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Base chain policy is the default verdict that will be applied to packets reaching the end of the chain.",
    "rationale": "There are two policies: accept (Default) and drop. If the policy is set to accept, the firewall will accept any packet that is not configured to be denied and the packet will continue transversing the network stack.\nIt is easier to white list acceptable usage than to black list unacceptable usage.\n_Note: Changing firewall settings while connected over network can result in being_ _locked out of the system._",
    "audit_details": "Run the following commands and verify that base chains contain a policy of DROP.\n```\n# nft list ruleset | grep 'hook input'\ntype filter hook input priority 0; policy drop;\n# nft list ruleset | grep 'hook forward'\ntype filter hook forward priority 0; policy drop;\n# nft list ruleset | grep 'hook output'\ntype filter hook output priority 0; policy drop;\n```\nPage 460",
    "audit_code": "# nft list ruleset | grep 'hook input'\n# nft list ruleset | grep 'hook forward'\n# nft list ruleset | grep 'hook output'",
    "remediation_details": "Run the following command for the base chains with the input, forward, and output hooks to implement a default DROP policy:\n```\n# nft chain <table family> <table name> <chain name> { policy drop \\; }\n```\n_Example:_\n```\n# nft chain inet filter input { policy drop \\; }\n# nft chain inet filter forward { policy drop \\; }\n# nft chain inet filter output { policy drop \\; }\n```\n**Default Value:**\naccept",
    "remediation_code": "# nft chain <table family> <table name> <chain name> { policy drop \\; }\n# nft chain inet filter input { policy drop \\; }\n# nft chain inet filter forward { policy drop \\; }\n# nft chain inet filter output { policy drop \\; }",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit nftables default deny firewall policy.\"\"\"\n    chains = ['input', 'forward', 'output']\n    for chain in chains:\n        cmd = f\"nft list ruleset | grep 'hook {chain}' | awk '{{print $NF}}'\"\n        policy = subprocess.check_output(cmd, shell=True).decode().strip()\n        if policy!= 'drop;':\n            print(f\"Base chain '{chain}' policy is not set to 'drop', currently: {policy}\")\n            return False\n    print(\"All base chains (input, forward, output) have the default 'drop' policy.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate nftables to ensure default deny firewall policy.\"\"\"\n    chains = ['input', 'forward', 'output']\n    for chain in chains:\n        cmd_audit = f\"nft list ruleset | grep 'hook {chain}' | awk '{{print $NF}}'\"\n        current_policy = subprocess.check_output(cmd_audit, shell=True).decode().strip()\n        if current_policy!= 'drop;':\n            cmd_remediate = f\"nft chain inet filter {chain} {{ policy drop \\\\; }}\"\n            subprocess.check_call(cmd_remediate, shell=True)\n            print(f\"Set base chain '{chain}' policy to 'drop' (was: {current_policy})\")\n        else:\n            print(f\"Base chain '{chain}' already has the default 'drop' policy.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure nftables service is enabled",
    "id": "4.2.9",
    "type": "Automated",
    "start_page": 464,
    "end_page": 465,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nftables service allows for the loading of nftables rulesets during boot, or starting on the nftables service",
    "rationale": "The nftables service restores the nftables rules from the rules files referenced in the /etc/nftables.conf file during boot or the starting of the nftables service",
    "audit_details": "Run the following command and verify that the nftables service is enabled:\n# systemctl is-enabled nftables\nenabled",
    "audit_code": "# systemctl is-enabled nftables\nenabled",
    "remediation_details": "Run the following command to enable the nftables service:\n# systemctl enable nftables",
    "remediation_code": "# systemctl enable nftables",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the nftables service is enabled.\n    \n    Returns:\n    bool: True if the nftables service is enabled, False otherwise.\n    \"\"\"\n    try:\n        output = subprocess.check_output(['systemctl', 'is-enabled', 'nftables']).decode('utf-8').strip()\n        return output == 'enabled'\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing nftables service: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by enabling the nftables service if it's not already enabled.\n    \"\"\"\n    if not audit_vuln():\n        try:\n            subprocess.check_call(['systemctl', 'enable', 'nftables'])\n            print(\"Enabled `nftables` systemd service.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error enabling nftables service: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"`nftables` systemd service is already enabled.\")\n"
  },
  {
    "name": "Ensure nftables rules are permanent",
    "id": "4.2.10",
    "type": "Automated",
    "start_page": 466,
    "end_page": 468,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames. The nftables service reads the /etc/nftables.conf file for a nftables file or files to include in the nftables ruleset. A nftables ruleset containing the input, forward, and output base chains allow network traffic to be filtered.",
    "rationale": "Changes made to nftables ruleset only affect the live system, you will also need to configure the nftables ruleset to apply on boot",
    "audit_details": "Run the following commands to verify that input, forward, and output base chains are configured to be applied to a nftables ruleset on boot: Run the following command to verify the input base chain:\n```\n# [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook input/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\\\"\\\",\\\"\\\",$2);print $2 }' /etc/nftables.conf)\n```\nOutput should be similar to:\n```\n        type filter hook input priority 0; policy drop;\n        # Ensure loopback traffic is configured\n        iif \"lo\" accept\n        ip saddr 127.0.0.0/8 counter packets 0 bytes 0 drop\n        ip6 saddr ::1 counter packets 0 bytes 0 drop\n        # Ensure established connections are configured\n        ip protocol tcp ct state established accept\n        ip protocol udp ct state established accept\n        ip protocol icmp ct state established accept\n        # Accept port 22(SSH) traffic from anywhere\n        tcp dport ssh accept\n        # Accept ICMP and IGMP from anywhere\n        icmpv6 type { destination-unreachable, packet-too-big, timeexceeded, parameter-problem, mld-listener-query, mld-listener-report, mldlistener-done, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, ndneighbor-advert, ind-neighbor-solicit, ind-neighbor-advert, mld2-listenerreport } accept\n```\n### Review the input base chain to ensure that it follows local site policy\nRun the following command to verify the forward base chain:\n```\n# [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook forward/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\\\"\\\",\\\"\\\",$2);print $2 }' /etc/nftables.conf)\n```\nOutput should be similar to:\n```\n    # Base chain for hook forward named forward (Filters forwarded network packets)\n    chain forward {\n        type filter hook forward priority 0; policy drop;\n    }\n```\nReview the forward base chain to ensure that it follows local site policy.\nRun the following command to verify the forward base chain:\n```\n# [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook output/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\\\"\\\",\\\"\\\",$2);print $2 }' /etc/nftables.conf)\n```\nOutput should be similar to:\n```\n    # Base chain for hook output named output (Filters outbound network packets)\n    chain output {\n        type filter hook output priority 0; policy drop;\n        # Ensure outbound and established connections are configured\n        ip protocol tcp ct state established,related,new accept\n        ip protocol tcp ct state established,related,new accept\n        ip protocol udp ct state established,related,new accept\n        ip protocol icmp ct state established,related,new accept\n    }\n```\nReview the output base chain to ensure that it follows local site policy.",
    "audit_code": "# [ -n \"$(grep -E '^\\s*include' /etc/nftables.conf)\" ] && awk '/hook input/,/}/' $(awk '$1 ~ /^\\s*include/ { gsub(\\\"\\\",\\\"\\\",$2);print $2 }' /etc/nftables.conf)",
    "remediation_details": "Edit the /etc/nftables.conf file and un-comment or add a line with include <Absolute path to nftables rules file> for each nftables file you want included in the nftables ruleset on boot Example:\n\n```\n# vi /etc/nftables.conf\n```\n### Add the line:\n```\ninclude \"/etc/nftables.rules\"\n```",
    "remediation_code": "# vi /etc/nftables.conf\ninclude \"/etc/nftables.rules\"",
    "python_script": "\nimport os\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if /etc/nftables.conf exists, is not empty, and includes other nftables rules files.\n    Returns:\n        bool: True if the audit passes, False otherwise.\n    \"\"\"\n    nftables_conf = pathlib.Path('/etc/nftables.conf')\n    if not nftables_conf.exists() or nftables_conf.stat().st_size == 0:\n        return False\n    \n    includes_found = False\n    with nftables_conf.open('r') as file:\n        for line in file:\n            if line.strip().startswith('include'):\n                includes_found = True\n                break\n    \n    return includes_found\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by ensuring /etc/nftables.conf exists and includes a default nftables rules file.\n    \"\"\"\n    nftables_conf = pathlib.Path('/etc/nftables.conf')\n    nftables_rules = pathlib.Path('/etc/nftables.rules')  # Example rules file, adjust as necessary\n    \n    if not nftables_conf.exists():\n        print(f\"Created `{nftables_conf}` file.\")\n        nftables_conf.touch()\n    \n    if nftables_rules.exists():\n        with nftables_conf.open('a+') as conf_file:\n            conf_file.seek(0)\n            content = conf_file.read()\n            if f\"include '{nftables_rules}'\" not in content:\n                conf_file.seek(0, os.SEEK_END)\n                conf_file.write(f\"\\ninclude '{nftables_rules}'\\n\")\n                print(f\"Added `include '{nftables_rules}'` to `{nftables_conf}`.\")\n    else:\n        print(f\"Warning: Example rules file `{nftables_rules}` does not exist. Please create it or adjust the remediation script accordingly.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"Audit passed. No remediation needed.\")\n"
  },
  {
    "name": "Ensure iptables packages are installed",
    "id": "4.3.1.1",
    "type": "Automated",
    "start_page": 471,
    "end_page": 472,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "iptables is a utility program that allows a system administrator to configure the tables provided by the Linux kernel firewall, implemented as different Netfilter modules, and the chains and rules it stores. Different kernel modules and programs are used for different protocols; iptables applies to IPv4, ip6tables to IPv6, arptables to ARP, and ebtables to Ethernet frames.",
    "rationale": "A method of configuring and maintaining firewall rules is necessary to configure a Host Based Firewall.",
    "audit_details": "Run the following command to verify that iptables is installed:\n\n# dpkg-query -s iptables &>/dev/null && echo \"iptables is installed\"\niptables is installed\n\nRun the following command to verify that iptables-persistent is installed:\n\n# dpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"\niptables-persistent is installed\n",
    "audit_code": "# dpkg-query -s iptables &>/dev/null && echo \"iptables is installed\"\n# dpkg-query -s iptables-persistent &>/dev/null && echo \"iptables-persistent is installed\"",
    "remediation_details": "Run the following command to install iptables and iptables-persistent\n\n# apt install iptables iptables-persistent\n",
    "remediation_code": "# apt install iptables iptables-persistent",
    "python_script": "\nimport apt\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if iptables and iptables-persistent are installed.\"\"\"\n    cache = apt.Cache()\n    iptables_installed = cache['iptables'].is_installed\n    iptables_persistent_installed = cache['iptables-persistent'].is_installed\n    \n    if not iptables_installed:\n        print(\"iptables is not installed\")\n    else:\n        print(\"iptables is installed\")\n    \n    if not iptables_persistent_installed:\n        print(\"iptables-persistent is not installed\")\n    else:\n        print(\"iptables-persistent is installed\")\n    \n    return iptables_installed and iptables_persistent_installed\n\ndef remediate_vuln() -> None:\n    \"\"\"Install iptables and iptables-persistent if not already installed.\"\"\"\n    cache = apt.Cache()\n    iptables_installed = cache['iptables'].is_installed\n    iptables_persistent_installed = cache['iptables-persistent'].is_installed\n    \n    if not iptables_installed:\n        print(\"Installing iptables...\")\n        subprocess.run(['apt', 'install', '-y', 'iptables'], check=True)\n        print(\"Installed iptables.\")\n    \n    if not iptables_persistent_installed:\n        print(\"Installing iptables-persistent...\")\n        subprocess.run(['apt', 'install', '-y', 'iptables-persistent'], check=True)\n        print(\"Installed iptables-persistent.\")\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        compliant = audit_vuln()\n        sys.exit(0 if compliant else 1)\n"
  },
  {
    "name": "Ensure nftables is not installed with iptables",
    "id": "4.3.1.2",
    "type": "Automated",
    "start_page": 473,
    "end_page": 474,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "nftables is a subsystem of the Linux kernel providing filtering and classification of network packets/datagrams/frames and is the successor to iptables.",
    "rationale": "Running both iptables and nftables may lead to conflict.",
    "audit_details": "Run the following commend to verify that nftables is not installed:\n\n# dpkg-query -s nftables &>/dev/null && echo \"nftables is installed\"",
    "audit_code": "nftables is installed",
    "remediation_details": "Run the following command to remove nftables:\n\n# apt purge nftables",
    "remediation_code": "apt purge nftables",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if nftables is installed.\"\"\"\n    try:\n        # Attempt to query the package status, if it's installed, this will succeed\n        subprocess.check_output([\"dpkg-query\", \"-s\", \"nftables\"])\n        # If the above doesn't raise an exception, nftables is installed\n        print(\"nftables is installed\")\n        return True\n    except subprocess.CalledProcessError:\n        # If the package is not found, dpkg-query exits non-zero, and we catch this exception\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remove nftables to remediate the vulnerability.\"\"\"\n    # Purge nftables using apt\n    subprocess.run([\"apt\", \"purge\", \"-y\", \"nftables\"], check=True)\n    print(\"Purged nftables using apt.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure ufw is uninstalled or disabled with iptables",
    "id": "4.3.1.3",
    "type": "Automated",
    "start_page": 475,
    "end_page": 476,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Uncomplicated Firewall (UFW) is a program for managing a Netfilter firewall designed to be easy to use.\n\n  - Uses a command-line interface consisting of a small number of simple commands\n\n  - Uses iptables for configuration",
    "rationale": "Running iptables.persistent with ufw enabled may lead to conflict and unexpected results.",
    "audit_details": "Run the following commands to verify that ufw is either not installed or disabled. Only one of the following needs to pass. Run the following command to verify that ufw is not installed:\n\n```\n# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n```\n\nNothing should be returned.\n\n**- OR -**\nRun the following command to verify ufw is disabled:\n```\n# ufw status\nStatus: inactive\n```\nRun the following commands to verify that the ufw service is masked:\n```\n# systemctl is-enabled ufw\nmasked\n```\n",
    "audit_code": "# dpkg-query -s ufw &>/dev/null && echo \"ufw is installed\"\n# ufw status\n# systemctl is-enabled ufw",
    "remediation_details": "Run one of the following commands to either remove ufw or stop and mask ufw Run the following command to remove ufw:\n\n```\n# apt purge ufw\n```\n\n**- OR -**\nRun the following commands to disable ufw:\n```\n# ufw disable\n# systemctl stop ufw\n# systemctl mask ufw\n```\n**Note:** `ufw disable` needs to be run before `systemctl mask ufw` in order to correctly disable UFW",
    "remediation_code": "# apt purge ufw\n# ufw disable\n# systemctl stop ufw\n# systemctl mask ufw",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the system for UFW vulnerability.\n    \n    Returns:\n    bool: True if UFW is installed and enabled (vulnerable), False otherwise.\n    \"\"\"\n    # Check if UFW is not installed\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'ufw'], stderr=subprocess.DEVNULL)\n        # If no exception, UFW is installed, check its status\n        ufw_status = subprocess.check_output(['ufw', 'status']).decode('utf-8').strip()\n        if ufw_status!= \"Status: inactive\":\n            # UFW is installed and active, check if the service is masked\n            systemctl_enabled = subprocess.check_output(['systemctl', 'is-enabled', 'ufw']).decode('utf-8').strip()\n            if systemctl_enabled!= \"masked\":\n                return True  # Vulnerable\n    except subprocess.CalledProcessError:\n        pass  # UFW is not installed or not enabled\n    return False  # Not vulnerable\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the UFW vulnerability by either uninstalling UFW or stopping and masking the service.\n    \"\"\"\n    try:\n        subprocess.check_output(['dpkg-query', '-s', 'ufw'], stderr=subprocess.DEVNULL)\n        # UFW is installed, offer to uninstall or disable\n        response = input(\"UFW is installed. Do you want to (U)ninstall or (D)isable it? \")\n        if response.upper() == \"U\":\n            subprocess.run(['apt', 'purge', '-y', 'ufw'])\n            print(\"Uninstalled UFW.\")\n        elif response.upper() == \"D\":\n            subprocess.run(['ufw', 'disable'])\n            print(\"Disabled UFW.\")\n            subprocess.run(['systemctl', 'stop', 'ufw'])\n            print(\"Stopped UFW systemd service.\")\n            subprocess.run(['systemctl', 'mask', 'ufw'])\n            print(\"Masked UFW systemd service.\")\n        else:\n            print(\"Invalid choice. Exiting without remediation.\")\n            sys.exit(1)\n    except subprocess.CalledProcessError:\n        print(\"UFW is not installed. No remediation needed.\")\n\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"System is vulnerable. Remediation is required.\")\n        remediate_vuln()\n    else:\n        print(\"System is not vulnerable. No remediation needed.\")\n"
  },
  {
    "name": "Ensure iptables default deny firewall policy",
    "id": "4.3.2.1",
    "type": "Automated",
    "start_page": 478,
    "end_page": 479,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A default deny all policy on connections ensures that any unconfigured network usage will be rejected.\n\n_Notes:_\n\n  - _Changing firewall settings while connected over network can result in being_\n_locked out of the system_\n\n  - _Remediation will only affect the active system firewall, be sure to configure the_\n_default policy in your firewall management to apply on boot as well_",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit_details": "Run the following command and verify that the policy for the INPUT, OUTPUT, and FORWARD chains is DROP or REJECT :\n# iptables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)",
    "audit_code": "# iptables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)",
    "remediation_details": "Run the following commands to implement a default DROP policy:",
    "remediation_code": "# iptables -P INPUT DROP\n# iptables -P OUTPUT DROP\n# iptables -P FORWARD DROP",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit default iptables firewall policy\"\"\"\n    try:\n        output = subprocess.check_output([\"iptables\", \"-L\"]).decode(\"utf-8\")\n        policies = {\n            chain: policy\n            for line in output.splitlines()\n            if line.startswith(\"Chain\")\n            for chain, policy in [line.split()[:2], line.split()[-2:]][1]\n        }\n        expected_policies = {\"INPUT\": \"DROP\", \"OUTPUT\": \"DROP\", \"FORWARD\": \"DROP\"}\n        if policies == expected_policies:\n            print(\"Default policies are set to DROP for all chains (already compliant).\")\n            return True\n        else:\n            print(\"Default policies are not set to DROP for all chains (non-compliant):\")\n            for chain, policy in policies.items():\n                print(f\"  {chain}: {policy}\")\n            return False\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing iptables: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate default iptables firewall policy to DROP\"\"\"\n    chains = [\"INPUT\", \"OUTPUT\", \"FORWARD\"]\n    for chain in chains:\n        try:\n            subprocess.check_call([\"iptables\", \"-P\", chain, \"DROP\"])\n            print(f\"Set default policy for {chain} chain to DROP.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error setting default policy for {chain} chain: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure iptables loopback traffic is configured",
    "id": "4.3.2.2",
    "type": "Automated",
    "start_page": 480,
    "end_page": 481,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (127.0.0.0/8).",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to the operation of the system. The loopback interface is the only place that loopback network (127.0.0.0/8) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands and verify output includes the listed rules in order (packet and byte counts may differ):\n```\n# iptables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all -- lo   *    0.0.0.0/0      0.0.0.0/0\n  0   0 DROP    all -- *   *    127.0.0.0/8     0.0.0.0/0\n # iptables -L OUTPUT -v -n\nChain OUTPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all -- *   lo   0.0.0.0/0      0.0.0.0/0\n```\n",
    "audit_code": "# iptables -L INPUT -v -n\n# iptables -L OUTPUT -v -n",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# iptables -A INPUT -i lo -j ACCEPT\n# iptables -A OUTPUT -o lo -j ACCEPT\n# iptables -A INPUT -s 127.0.0.0/8 -j DROP\n```",
    "remediation_code": "# iptables -A INPUT -i lo -j ACCEPT\n# iptables -A OUTPUT -o lo -j ACCEPT\n# iptables -A INPUT -s 127.0.0.0/8 -j DROP",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit loopback traffic configuration in iptables\"\"\"\n    required_input_rules = [\n        {\"target\": \"ACCEPT\", \"in\": \"lo\", \"source\": \"0.0.0.0/0\", \"destination\": \"0.0.0.0/0\"},\n        {\"target\": \"DROP\", \"source\": \"127.0.0.0/8\", \"destination\": \"0.0.0.0/0\"}\n    ]\n    required_output_rules = [\n        {\"target\": \"ACCEPT\", \"out\": \"lo\", \"source\": \"0.0.0.0/0\", \"destination\": \"0.0.0.0/0\"}\n    ]\n\n    def parse_iptables_output(output, required_rules, chain):\n        output_rules = [line.split() for line in output.decode('utf-8').split('\\n') if line.strip()]\n        output_rules = [rule for rule in output_rules if len(rule) > 8 and rule[0].isdigit()]\n        rule_format = {\"target\": 3, \"in\": 5, \"out\": 5, \"source\": 6, \"destination\": 7}\n        \n        for required_rule in required_rules:\n            found = False\n            for output_rule in output_rules:\n                if all(output_rule[rule_format[key]] == value for key, value in required_rule.items() if key in rule_format):\n                    found = True\n                    break\n            if not found:\n                print(f\"Missing {chain} rule: {required_rule}\")\n                return False\n        return True\n\n    try:\n        input_output = subprocess.check_output([\"iptables\", \"-L\", \"INPUT\", \"-v\", \"-n\"])\n        output_output = subprocess.check_output([\"iptables\", \"-L\", \"OUTPUT\", \"-v\", \"-n\"])\n        \n        return (parse_iptables_output(input_output, required_input_rules, \"INPUT\") and \n                parse_iptables_output(output_output, required_output_rules, \"OUTPUT\"))\n    except subprocess.SubprocessError as e:\n        print(f\"Error auditing iptables: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate loopback traffic configuration in iptables\"\"\"\n    rules_to_add = [\n        [\"iptables\", \"-A\", \"INPUT\", \"-i\", \"lo\", \"-j\", \"ACCEPT\"],\n        [\"iptables\", \"-A\", \"OUTPUT\", \"-o\", \"lo\", \"-j\", \"ACCEPT\"],\n        [\"iptables\", \"-A\", \"INPUT\", \"-s\", \"127.0.0.0/8\", \"-j\", \"DROP\"]\n    ]\n\n    for rule in rules_to_add:\n        try:\n            subprocess.check_call(rule)\n            print(f\"Added rule: {' '.join(rule[1:])}\")\n        except subprocess.SubprocessError as e:\n            print(f\"Error adding rule {' '.join(rule[1:])}: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure iptables firewall rules exist for all open ports",
    "id": "4.3.2.4",
    "type": "Automated",
    "start_page": 484,
    "end_page": 486,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.",
    "rationale": "Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.",
    "audit_details": "Run the following command to determine open ports:\n```\n# ss -4tuln\nNetid State   Recv-Q Send-Q  Local Address:Port          Peer\nAddress:Port\nudp  UNCONN   0   0           *:68                *:*\nudp  UNCONN   0   0           *:123               *:*\ntcp  LISTEN   0   128          *:22                *:*\n```\nRun the following command to determine firewall rules:\n```\n# iptables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all -- lo   *    0.0.0.0/0      0.0.0.0/0\n  0   0 DROP    all -- *   *    127.0.0.0/8     0.0.0.0/0\n  0   0 ACCEPT   tcp -- *   *    0.0.0.0/0      0.0.0.0/0      \ntcp dpt:22 state NEW\n```\nVerify all open ports listening on non-localhost addresses have at least one firewall rule.\n_The last line identified by the \"tcp dpt:22 state NEW\" identifies it as a firewall rule for new connections on tcp port 22._",
    "audit_code": "Run the following command to determine open ports:\n```\n# ss -4tuln\nNetid State   Recv-Q Send-Q  Local Address:Port          Peer\nAddress:Port\nudp  UNCONN   0   0           *:68                *:*\nudp  UNCONN   0   0           *:123               *:*\ntcp  LISTEN   0   128          *:22                *:*\n```\nRun the following command to determine firewall rules:\n```\n# iptables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all -- lo   *    0.0.0.0/0      0.0.0.0/0\n  0   0 DROP    all -- *   *    127.0.0.0/8     0.0.0.0/0\n  0   0 ACCEPT   tcp -- *   *    0.0.0.0/0      0.0.0.0/0      \ntcp dpt:22 state NEW\n```\nVerify all open ports listening on non-localhost addresses have at least one firewall rule.",
    "remediation_details": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:\n```\n# iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT\n```",
    "remediation_code": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:\n```\n# iptables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT\n```",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if all open ports on non-loopback addresses have iptables rules.\"\"\"\n    open_ports = _get_open_ports()\n    iptables_rules = _get_iptables_rules()\n    vulnerable_ports = [port for port in open_ports if not _has_iptables_rule(port, iptables_rules)]\n    \n    # Print vulnerable ports (if any) for transparency, but return bool as per spec\n    if vulnerable_ports:\n        print(f\"Vulnerable ports without iptables rules: {vulnerable_ports}\")\n    \n    return not vulnerable_ports\n\ndef remediate_vuln() -> None:\n    \"\"\"Add iptables rules for open ports on non-loopback addresses without rules.\"\"\"\n    open_ports = _get_open_ports()\n    iptables_rules = _get_iptables_rules()\n    vulnerable_ports = [port for port in open_ports if not _has_iptables_rule(port, iptables_rules)]\n    \n    for port in vulnerable_ports:\n        protocol = 'tcp' if port['protocol'] == 'tcp' else 'udp'\n        subprocess.run(f\"iptables -A INPUT -p {protocol} --dport {port['port']} -m state --state NEW -j ACCEPT\", shell=True)\n        print(f\"Added iptables rule for {protocol} port {port['port']}\")\n\ndef _get_open_ports():\n    \"\"\"Get open ports on non-loopback addresses.\"\"\"\n    output = subprocess.check_output(['ss', '-4tuln']).decode('utf-8')\n    ports = []\n    for line in output.split('\\n')[1:]:  # Skip header\n        match = re.match(r'\\s*(\\w+)\\s+.*\\*\\:(\\d+).*', line)\n        if match:\n            protocol, port = match.groups()\n            if protocol in ['tcp', 'udp'] and port != '0':  # Filter relevant protocols and non-loopback\n                ports.append({'protocol': protocol, 'port': port})\n    return ports\n\ndef _get_iptables_rules():\n    \"\"\"Get existing iptables rules.\"\"\"\n    output = subprocess.check_output(['iptables', '-L', 'INPUT', '-v', '-n']).decode('utf-8')\n    rules = []\n    for line in output.split('\\n')[2:]:  # Skip header\n        match = re.search(r'dpt:(\\d+)', line)\n        if match:\n            rules.append(match.group(1))\n    return rules\n\ndef _has_iptables_rule(port, rules):\n    \"\"\"Check if a port has an existing iptables rule.\"\"\"\n    return port['port'] in rules\n"
  },
  {
    "name": "Ensure ip6tables default deny firewall policy",
    "id": "4.3.3.1",
    "type": "Automated",
    "start_page": 488,
    "end_page": 490,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A default deny all policy on connections ensures that any unconfigured network usage will be rejected. Changing firewall settings while connected over network can result in being locked out of the system. Remediation will only affect the active system firewall, be sure to configure the default policy in your firewall management to apply on boot as well.",
    "rationale": "With a default accept policy the firewall will accept any packet that is not configured to be denied. It is easier to white list acceptable usage than to black list unacceptable usage.",
    "audit_details": "Run the following command and verify that the policy for the INPUT, OUTPUT, and FORWARD chains is DROP or REJECT:\n```\n# ip6tables -L\nChain INPUT (policy DROP)\nChain FORWARD (policy DROP)\nChain OUTPUT (policy DROP)\n```\n\n**-OR-**\nVerify IPv6 is disabled:\nRun the following script. Output will confirm if IPv6 is enabled on the system.\n```\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\n\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n}\n``",
    "audit_code": "# ip6tables -L\n# Run the following script to check IPv6 status\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\n\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n}",
    "remediation_details": "**IF IPv6 is enabled on your system:**\nRun the following commands to implement a default DROP policy:\n```\n# ip6tables -P INPUT DROP\n# ip6tables -P OUTPUT DROP\n# ip6tables -P FORWARD DROP\n```\n",
    "remediation_code": "# ip6tables -P INPUT DROP\n# ip6tables -P OUTPUT DROP\n# ip6tables -P FORWARD DROP",
    "python_script": "\nimport subprocess\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the default policy for ip6tables chains and/or IPv6 status.\n    \n    Returns:\n        bool: True if the vulnerability is not present (policy is DROP/REJECT or IPv6 is disabled), False otherwise.\n    \"\"\"\n    # Check ip6tables policies\n    chains = ['INPUT', 'OUTPUT', 'FORWARD']\n    for chain in chains:\n        output = subprocess.run(['ip6tables', '-L'], stdout=subprocess.PIPE, text=True)\n        if f'policy {chain} (DROP)' not in output.stdout and f'policy {chain} (REJECT)' not in output.stdout:\n            # If any chain doesn't have DROP/REJECT policy, return False\n            return False\n    \n    # If all chains have DROP/REJECT policy, check if IPv6 is disabled (optional)\n    ipv6_disable_file = pathlib.Path('/sys/module/ipv6/parameters/disable')\n    if ipv6_disable_file.exists() and ipv6_disable_file.read_text().strip()!= '0':\n        # IPv6 is not enabled\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the default policy for ip6tables chains to DROP if IPv6 is enabled.\n    \"\"\"\n    # Check if IPv6 is enabled\n    ipv6_disable_file = pathlib.Path('/sys/module/ipv6/parameters/disable')\n    if ipv6_disable_file.exists() and ipv6_disable_file.read_text().strip() == '0':\n        print(\"IPv6 is enabled. Setting default policy for ip6tables chains to DROP...\")\n        chains = ['INPUT', 'OUTPUT', 'FORWARD']\n        for chain in chains:\n            subprocess.run(['ip6tables', '-P', chain, 'DROP'])\n            print(f\"Default policy for {chain} chain set to DROP.\")\n    else:\n        print(\"IPv6 is not enabled. No remediation necessary.\")\n"
  },
  {
    "name": "Ensure ip6tables loopback traffic is configured",
    "id": "4.3.3.2",
    "type": "Automated",
    "start_page": 491,
    "end_page": 493,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Configure the loopback interface to accept traffic. Configure all other interfaces to deny traffic to the loopback network (::1).",
    "rationale": "Loopback traffic is generated between processes on machine and is typically critical to operation of the system. The loopback interface is the only place that loopback network (::1) traffic should be seen, all other interfaces should ignore traffic on this network as an anti-spoofing measure.",
    "audit_details": "Run the following commands and verify output includes the listed rules in order (packet and byte counts may differ):\n```\n# ip6tables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\npkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all   lo   *    ::/0         ::/0    \n  0   0 DROP    all   *   *    ::1         ::/0    \n# ip6tables -L OUTPUT -v -n\nChain OUTPUT (policy DROP 0 packets, 0 bytes)\npkts bytes target   prot opt in   out   source       destination\n  0   0 ACCEPT   all   *   lo   ::/0         ::/0    \n```\n**-OR-**\nVerify IPv6 is disabled:\nRun the following script. Output will confirm if IPv6 is enabled on the system.\n```\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\\\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n} \n``",
    "audit_code": "# ip6tables -L INPUT -v -n\n# ip6tables -L OUTPUT -v -n\n#!/usr/bin/bash\n{\n  if grep -Pqs '^\\\\h*0\\b' /sys/module/ipv6/parameters/disable; then\n   echo -e \" - IPv6 is enabled on the system\"\n  else\n   echo -e \" - IPv6 is not enabled on the system\"\n  fi\n}",
    "remediation_details": "Run the following commands to implement the loopback rules:\n```\n# ip6tables -A INPUT -i lo -j ACCEPT\n# ip6tables -A OUTPUT -o lo -j ACCEPT\n# ip6tables -A INPUT -s ::1 -j DROP\n```",
    "remediation_code": "# ip6tables -A INPUT -i lo -j ACCEPT\n# ip6tables -A OUTPUT -o lo -j ACCEPT\n# ip6tables -A INPUT -s ::1 -j DROP",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit ip6tables loopback traffic configuration\"\"\"\n    \n    # Check ip6tables INPUT rules\n    input_rules = subprocess.check_output([\"ip6tables\", \"-L\", \"INPUT\", \"-v\", \"-n\"]).decode(\"utf-8\")\n    input_expected_rules = [\n        r\"^ *0 *0 ACCEPT +all +lo +\\* +::/0 +::/0 *$\",\n        r\"^ *0 *0 DROP +all +\\* +\\* +::1 +::/0 *$\"\n    ]\n    input_rules_match = all(re.search(rule, input_rules, re.MULTILINE) for rule in input_expected_rules)\n\n    # Check ip6tables OUTPUT rules\n    output_rules = subprocess.check_output([\"ip6tables\", \"-L\", \"OUTPUT\", \"-v\", \"-n\"]).decode(\"utf-8\")\n    output_expected_rule = r\"^ *0 *0 ACCEPT +all +\\* +lo +::/0 +::/0 *$\"\n    output_rule_match = bool(re.search(output_expected_rule, output_rules, re.MULTILINE))\n\n    # Verify IPv6 is enabled (if not, rules are not necessary)\n    ipv6_disabled = subprocess.check_output([\"grep\", \"-Pqs\", \"^\\\\h*1\\\\b\", \"/sys/module/ipv6/parameters/disable\"]).returncode == 0\n\n    # Return True if all expected rules are found or IPv6 is disabled\n    return (input_rules_match and output_rule_match) or ipv6_disabled\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate ip6tables loopback traffic configuration\"\"\"\n    \n    # Add ip6tables rules to accept loopback traffic\n    subprocess.call([\"ip6tables\", \"-A\", \"INPUT\", \"-i\", \"lo\", \"-j\", \"ACCEPT\"])\n    print(\"Added ip6tables INPUT rule to accept loopback traffic.\")\n    subprocess.call([\"ip6tables\", \"-A\", \"OUTPUT\", \"-o\", \"lo\", \"-j\", \"ACCEPT\"])\n    print(\"Added ip6tables OUTPUT rule to accept loopback traffic.\")\n\n    # Add ip6tables rule to deny non-loopback interface traffic to loopback network\n    subprocess.call([\"ip6tables\", \"-A\", \"INPUT\", \"-s\", \"::1\", \"-j\", \"DROP\"])\n    print(\"Added ip6tables INPUT rule to deny non-loopback interface traffic to loopback network.\")\n"
  },
  {
    "name": "Ensure ip6tables firewall rules exist for all open ports",
    "id": "4.3.3.4",
    "type": "Automated",
    "start_page": 496,
    "end_page": 498,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Any ports that have been opened on non-loopback addresses need firewall rules to govern traffic.",
    "rationale": "Without a firewall rule configured for open ports default firewall policy will drop all packets to these ports.",
    "audit_details": "Run the following command to determine open ports:\n```\n# ss -6tuln\nNetid State   Recv-Q Send-Q  Local Address:Port          Peer\nAddress:Port \nudp  UNCONN   0   0          ::1:123               \n:::*\nudp  UNCONN   0   0          :::123               \n:::*\ntcp  LISTEN   0   128         :::22               \n:::*\ntcp  LISTEN   0   20         ::1:25               \n:::\n\n Run the following command to determine firewall rules:\n```\n# ip6tables -L INPUT -v -n\nChain INPUT (policy DROP 0 packets, 0 bytes)\n pkts bytes target   prot opt in   out   source       destination \n  0   0 ACCEPT   all   lo   *    ::/0         ::/0    \n  0   0 DROP    all   *   *    ::1         ::/0    \n  0   0 ACCEPT   tcp   *   *    ::/0         ::/0        \ntcp dpt:22 state NEW\n### Verify all open ports listening on non-localhost addresses have at least one firewall rule. The last line identified by the \"tcp dpt:22 state NEW\" identifies it as a firewall rule for new connections on tcp port 22. OR verify IPv6 is disabled: Run the following script. Output will confirm if IPv6 is disabled on the system.\n#!/usr/bin/bash\noutput=\"\"\ngrubfile=\"$(find -L /boot -name 'grub.cfg' -type f)\"\n[ -f \"$grubfile\" ] && ! grep \"^\\s*linux\" \"$grubfile\" | grep -vq\nipv6.disable=1 && output=\"ipv6 disabled in grub config\"\ngrep -Eqs \"^\\s*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\s*=\\s*1\\b\" /etc/sysctl.conf\n/etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf \n/run/sysctl.d/*.conf && grep -Eqs\n\"^\\s*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\s*=\\s*1\\b\" /etc/sysctl.conf\n/etc/sysctl.d/*.conf \n/usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf && sysctl\nnet.ipv6.conf.all.disable_ipv6 | grep -Eq \n\"^\\s*net\\.ipv6\\.conf\\.all\\.disable_ipv6\\s*=\\s*1\\b\" && sysctl\nnet.ipv6.conf.default.disable_ipv6 | \ngrep -Eq \"^\\s*net\\.ipv6\\.conf\\.default\\.disable_ipv6\\s*=\\s*1\\b\" &&\noutput=\"ipv6 disabled in sysctl config\"\n[ -n \"$output\" ] && echo -e \"\\n$output\" || echo -e \"\\n*** IPv6 is enabled on the system ***\"",
    "audit_code": "# ss -6tuln\n# ip6tables -L INPUT -v -n",
    "remediation_details": "For each port identified in the audit which does not have a firewall rule establish a proper rule for accepting inbound connections:\n# ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT",
    "remediation_code": "# ip6tables -A INPUT -p <protocol> --dport <port> -m state --state NEW -j ACCEPT",
    "python_script": "\nimport subprocess\nimport ipaddress\n\ndef audit_vuln() -> bool:\n    # Identify open ports on non-loopback addresses\n    open_ports_cmd = \"ss -6tuln\"\n    open_ports_output = subprocess.check_output(open_ports_cmd, shell=True).decode('utf-8')\n    open_ports = []\n    for line in open_ports_output.splitlines()[1:]:  # Skip header\n        columns = line.split()\n        if ipaddress.ip_address(columns[3].split(':')[0])!= ipaddress.ip_address('::1'):  # Non-loopback\n            protocol = columns[0]\n            port = columns[3].split(':')[1]\n            open_ports.append((protocol, port))\n\n    # Retrieve existing ip6tables rules\n    ip6tables_rules_cmd = \"ip6tables -L INPUT -v -n\"\n    ip6tables_rules_output = subprocess.check_output(ip6tables_rules_cmd, shell=True).decode('utf-8')\n    existing_rules = []\n    for line in ip6tables_rules_output.splitlines():\n        if \"dpt:\" in line:  # Line contains a specific port rule\n            columns = line.split()\n            for column in columns:\n                if column.startswith(\"dpt:\"):\n                    port_rule = column[4:]  # Extract port number\n                    protocol = \"tcp\" if \"tcp\" in line else \"udp\"  # Determine protocol\n                    existing_rules.append((protocol, port_rule))\n\n    # Compare open ports against existing rules\n    vuln_ports = [(protocol, port) for protocol, port in open_ports if (protocol, port) not in existing_rules]\n\n    # Return True if vulnerable ports found, False otherwise\n    return len(vuln_ports) > 0\n\ndef remediate_vuln() -> None:\n    # If IPv6 is disabled, no need to remediate\n    if is_ipv6_disabled():\n        print(\"IPv6 is disabled, no remediation necessary.\")\n        return\n\n    # Identify vulnerable ports (same logic as in audit_vuln for consistency)\n    open_ports_cmd = \"ss -6tuln\"\n    open_ports_output = subprocess.check_output(open_ports_cmd, shell=True).decode('utf-8')\n    open_ports = []\n    for line in open_ports_output.splitlines()[1:]:  \n        columns = line.split()\n        if ipaddress.ip_address(columns[3].split(':')[0])!= ipaddress.ip_address('::1'):  \n            protocol = columns[0]\n            port = columns[3].split(':')[1]\n            open_ports.append((protocol, port))\n\n    ip6tables_rules_cmd = \"ip6tables -L INPUT -v -n\"\n    ip6tables_rules_output = subprocess.check_output(ip6tables_rules_cmd, shell=True).decode('utf-8')\n    existing_rules = []\n    for line in ip6tables_rules_output.splitlines():\n        if \"dpt:\" in line:  \n            columns = line.split()\n            for column in columns:\n                if column.startswith(\"dpt:\"):\n                    port_rule = column[4:]  \n                    protocol = \"tcp\" if \"tcp\" in line else \"udp\"  \n                    existing_rules.append((protocol, port_rule))\n\n    vuln_ports = [(protocol, port) for protocol, port in open_ports if (protocol, port) not in existing_rules]\n\n    # Remediate each vulnerable port\n    for protocol, port in vuln_ports:\n        rule_cmd = f\"ip6tables -A INPUT -p {protocol} --dport {port} -m state --state NEW -j ACCEPT\"\n        subprocess.check_call(rule_cmd, shell=True)\n        print(f\"Added ip6tables rule for {protocol} port {port}.\")\n\ndef is_ipv6_disabled() -> bool:\n    # Check if IPv6 is disabled in grub config, sysctl.conf, or via sysctl commands\n    # Simplified version, might need adjustments based on exact config file locations\n    ipv6_disabled = False\n    for file in [\"/etc/sysctl.conf\"] + [f for f in subprocess.check_output(\"find /etc/sysctl.d /usr/lib/sysctl.d /run/sysctl.d -type f\").decode('utf-8').splitlines()]:\n        try:\n            with open(file, 'r') as f:\n                for line in f.readlines():\n                    if \"net.ipv6.conf.all.disable_ipv6 = 1\" in line or \"net.ipv6.conf.default.disable_ipv6 = 1\" in line:\n                        ipv6_disabled = True\n                        break\n        except FileNotFoundError:\n            continue\n    if not ipv6_disabled:\n        try:\n            sysctl_output = subprocess.check_output(\"sysctl net.ipv6.conf.all.disable_ipv6\", shell=True).decode('utf-8')\n            if \"net.ipv6.conf.all.disable_ipv6 = 1\" in sysctl_output:\n                ipv6_disabled = True\n            sysctl_output = subprocess.check_output(\"sysctl net.ipv6.conf.default.disable_ipv6\", shell=True).decode('utf-8')\n            if \"net.ipv6.conf.default.disable_ipv6 = 1\" in sysctl_output:\n                ipv6_disabled = True\n        except subprocess.CalledProcessError:\n            pass\n    return ipv6_disabled\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediation required.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/ssh/sshd_config are configured",
    "id": "5.1.1",
    "type": "Automated",
    "start_page": 502,
    "end_page": 504,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The file /etc/ssh/sshd_config, and files ending in .conf in the /etc/ssh/sshd_config.d directory, contain configuration specifications for sshd.",
    "rationale": "configuration specifications for sshd need to be protected from unauthorized changes by non-privileged users.",
    "audit_details": "Run the following script and verify /etc/ssh/sshd_config and files ending in .conf in the /etc/ssh/sshd_config.d directory are:\n\n  - Mode 0600 or more restrictive\n  - Owned by the root user\n  - Group owned by the group root.\n```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  perm_mask='0177' && maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n  SSHD_FILES_CHK()\n  {\n   while IFS=: read -r l_mode l_user l_group; do\n     l_out2=\"\"\n     [ $(( $l_mode & $perm_mask )) -gt 0 ] && l_out2=\"$l_out2\\n - Is mode: \\\"$l_mode\\\" should be: \\\"$maxperm\\\" or more restrictive\"\n     [ \"$l_user\" != \"root\" ] && l_out2=\"$l_out2\\n - Is owned by \\\"$l_user\\\" should be owned by \\\"root\\\"\"\n     [ \"$l_group\" != \"root\" ] && l_out2=\"$l_out2\\n - Is group owned by \\\"$l_user\\\" should be group owned by \\\"root\\\"\"\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\":$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\":\\n - Correct: mode ($l_mode), owner ($l_user), and group owner ($l_group) configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  [ -e \"/etc/ssh/sshd_config\" ] && l_file=\"/etc/ssh/sshd_config\" && SSHD_FILES_CHK\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \"$l_file\" ] && SSHD_FILES_CHK\n  done < <(find -L /etc/ssh/sshd_config.d -type f \\( -perm /077 -o ! -user root -o ! -group root \\) -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\"\n  fi\n}\n```\n\n### - IF - other locations are listed in an Include statement, *.conf files in these locations should also be checked.",
    "audit_code": "```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  perm_mask='0177' && maxperm=\"$( printf '%o' $(( 0777 & ~$perm_mask)) )\"\n  SSHD_FILES_CHK()\n  {\n   while IFS=: read -r l_mode l_user l_group; do\n     l_out2=\"\"\n     [ $(( $l_mode & $perm_mask )) -gt 0 ] && l_out2=\"$l_out2\\n - Is mode: \\\"$l_mode\\\" should be: \\\"$maxperm\\\" or more restrictive\"\n     [ \"$l_user\" != \"root\" ] && l_out2=\"$l_out2\\n - Is owned by \\\"$l_user\\\" should be owned by \\\"root\\\"\"\n     [ \"$l_group\" != \"root\" ] && l_out2=\"$l_out2\\n - Is group owned by \\\"$l_user\\\" should be group owned by \\\"root\\\"\"\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\":$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\":\\n - Correct: mode ($l_mode), owner ($l_user), and group owner ($l_group) configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  [ -e \"/etc/ssh/sshd_config\" ] && l_file=\"/etc/ssh/sshd_config\" && SSHD_FILES_CHK\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \"$l_file\" ] && SSHD_FILES_CHK\n  done < <(find -L /etc/ssh/sshd_config.d -type f \\( -perm /077 -o ! -user root -o ! -group root \\) -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n *** PASS ***\\n- * Correctly set * :\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \" - * Correctly set * :\\n$l_output\\n\"\n  fi\n}\n```",
    "remediation_details": "Run the following script to set ownership and permissions on /etc/ssh/sshd_config and files ending in .conf in the /etc/ssh/sshd_config.d directory:\n```bash\n#!/usr/bin/env bash\n{\n  chmod u-x,og-rwx /etc/ssh/sshd_config\n  chown root:root /etc/ssh/sshd_config\n  while IFS= read -r -d $'\\0' l_file; do\n   if [ -e \"$l_file\" ]; then\n     chmod u-x,og-rwx \"$l_file\"\n     chown root:root \"$l_file\"\n   fi\n  done < <(find /etc/ssh/sshd_config.d -type f -print0 2>/dev/null)\n}\n```\n - IF - other locations are listed in an Include statement, *.conf files in these locations access should also be modified.",
    "remediation_code": "```bash\n#!/usr/bin/env bash\n{\n  chmod u-x,og-rwx /etc/ssh/sshd_config\n  chown root:root /etc/ssh/sshd_config\n  while IFS= read -r -d $'\\0' l_file; do\n   if [ -e \"$l_file\" ]; then\n     chmod u-x,og-rwx \"$l_file\"\n     chown root:root \"$l_file\"\n   fi\n  done < <(find /etc/ssh/sshd_config.d -type f -print0 2>/dev/null)\n}\n```",
    "python_script": "\nimport os\nimport stat\nimport pathlib\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: checks permissions, ownership, and group ownership.\"\"\"\n    vuln_files = [\"/etc/ssh/sshd_config\"]\n    vuln_files.extend(pathlib.Path(\"/etc/ssh/sshd_config.d\").glob(\"*.conf\"))\n\n    all_pass = True\n    for file in vuln_files:\n        file_stat = file.stat()\n        mode_pass = (file_stat.st_mode & 0o177) == 0  # Check if mode is 0600 or more restrictive\n        owner_pass = file_stat.st_uid == 0  # Check if owned by root\n        group_pass = file_stat.st_gid == 0  # Check if group-owned by root\n\n        if not (mode_pass and owner_pass and group_pass):\n            print(f\"- File: {file}:\")\n            if not mode_pass:\n                print(f\"  - Is mode: {stat.filemode(file_stat.st_mode)} should be: 0600 or more restrictive\")\n            if not owner_pass:\n                print(f\"  - Is owned by {file_stat.st_uid} should be owned by root (0)\")\n            if not group_pass:\n                print(f\"  - Is group owned by {file_stat.st_gid} should be group owned by root (0)\")\n            all_pass = False\n        else:\n            print(f\"- File: {file}:\")\n            print(f\"  - Correct: mode ({stat.filemode(file_stat.st_mode)}), owner ({file_stat.st_uid}), and group owner ({file_stat.st_gid}) configured\")\n\n    return all_pass\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: sets permissions and ownership.\"\"\"\n    vuln_files = [\"/etc/ssh/sshd_config\"]\n    vuln_files.extend(pathlib.Path(\"/etc/ssh/sshd_config.d\").glob(\"*.conf\"))\n\n    for file in vuln_files:\n        file.chmod(0o600)  # Set mode to 0600\n        print(f\"Set mode to 0600 for {file}\")\n        file.chown(0, 0)  # Set ownership to root:root\n        print(f\"Set ownership to root:root for {file}\")\n"
  },
  {
    "name": "Ensure permissions on SSH private host key files are configured",
    "id": "5.1.2",
    "type": "Automated",
    "start_page": 505,
    "end_page": 508,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "An SSH private key is one of two files used in SSH public key authentication. In this authentication method, the possession of the private key is proof of identity. Only a private key that corresponds to a public key will be able to authenticate successfully. The private keys need to be stored and handled carefully, and no copies of the private key should be distributed.",
    "rationale": "If an unauthorized user obtains the private SSH host key file, the host could be impersonated",
    "audit_details": "Run the following script to verify SSH private host key files are owned by the root user and either:\n- owned by the group root and mode 0600 or more restrictive\n- OR\n- owned by the group designated to own openSSH private keys and mode 0640 or more restrictive",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_ssh_group_name=\"$(awk -F: '($1 ~ /^(ssh_keys|_?ssh)$/) {print $1} /etc/group)\"\n  FILE_CHK()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     [ \"l_file_group\" = \"$l_ssh_group_name\" ] && l_pmask=\"0137\" || l_pmask=\"0177\"\n     l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n     fi\n     if [ \"$l_file_owner\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\"\n     fi\n     if [[ ! \"$l_file_group\" =~ ($l_ssh_group_name|root) ]]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"$l_ssh_group_name\\\" or \\\"root\\\"\"\n     fi\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?private\\h+key\\b' && FILE_CHK\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH private keys found\"\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured *:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to set mode, ownership, and group on the private SSH host key files:",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_ssh_group_name=\"$(awk -F: '($1 ~ /^(ssh_keys|_?ssh)$/) {print $1} /etc/group)\"\n  FILE_ACCESS_FIX()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     echo \"File: \\\"$l_file\\\" mode: \\\"$l_file_mode\\\" owner \\\"$l_file_own\\\" group \\\"$l_file_group\\\"\"\n     l_out2=\"\"\n     [ \"l_file_group\" = \"$l_ssh_group_name\" ] && l_pmask=\"0137\" || l_pmask=\"0177\"\n     l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode: \\\"$l_maxperm\\\" or more restrictive\\n  - updating to mode: \\:\"$l_maxperm\\\"\"\n      [ \"l_file_group\" = \"$l_ssh_group_name\" ] && chmod u-x,g-wx,o-rwx \"$l_file\" || chmod u-x,go-rwx\n     fi\n     if [ \"$l_file_owner\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned by \\\"root\\\"\\n  - Changing ownership to \\\"root\\\"\"\n      chown root \"$l_file\"\n     fi\n     if [[ ! \"$l_file_group\" =~ ($l_ssh_group_name|root) ]]; then\n      [ -n \"$l_ssh_group_name\" ] && l_new_group=\"$l_ssh_group_name\" || l_new_group=\"root\"\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be group owned by: \\\"$l_ssh_group_name\\\" or \\\"root\\\"\\n  - Changing group ownership to \\\"$l_new_group\\\"\"\n      chgrp \"$l_new_group\" \"$l_file\"\n     fi\n     if [ -n \"$l_out2\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode: \\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner: \\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?private\\h+key\\b' && FILE_ACCESS_FIX\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- No access changes required\\n\"\n  else\n   echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n  fi\n}",
    "python_script": "\nimport os\nimport stat\nimport grp\nimport pwd\n\ndef get_ssh_group_name():\n    \"\"\"Find the group name associated with SSH (e.g., ssh_keys, _ssh, or ssh)\"\"\"\n    for group in grp.getgrall():\n        if group.gr_name in ['ssh_keys', '_ssh', 'ssh']:\n            return group.gr_name\n    return 'root'  # Default if no specific SSH group is found\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions on SSH private host key files\"\"\"\n    ssh_group_name = get_ssh_group_name()\n    pmask_ssh_group = 0o137  # Mode mask for SSH group ownership\n    pmask_root_group = 0o177  # Mode mask for root group ownership\n    audit_pass = True\n    print(\"Audit Results:\")\n    \n    for root, dirs, files in os.walk('/etc/ssh'):\n        for file in files:\n            file_path = os.path.join(root, file)\n            # Check if file is an OpenSSH private key\n            if os.system(f\"ssh-keygen -lf /dev/null {file_path} >/dev/null 2>&1\") == 0 and \\\n               'OpenSSH private key' in os.popen(f\"file {file_path}\").read():\n                file_stat = os.stat(file_path)\n                owner = pwd.getpwuid(file_stat.st_uid).pw_name\n                group = grp.getgrgid(file_stat.st_gid).gr_name\n                mode = stat.filemode(file_stat.st_mode)\n                \n                print(f\" - File: \\\"{file_path}\\\"\")\n                issues = []\n                if (group == ssh_group_name and (file_stat.st_mode & pmask_ssh_group)) or \\\n                   (group == 'root' and (file_stat.st_mode & pmask_root_group)):\n                    issues.append(f\" - Mode: \\\"{mode}\\\" should be more restrictive\")\n                if owner!= 'root':\n                    issues.append(f\" - Owned by: \\\"{owner}\\\" should be owned by \\\"root\\\"\")\n                if group not in [ssh_group_name, 'root']:\n                    issues.append(f\" - Owned by group \\\"{group}\\\" should be group owned by: \\\"{ssh_group_name}\\\" or \\\"root\\\"\")\n                \n                if issues:\n                    audit_pass = False\n                    print(\"\\n\".join(issues))\n                else:\n                    print(\" - Correct: mode, owner, and group owner configured\")\n    \n    print(f\"\\n** {'PASS' if audit_pass else 'FAIL'} **\")\n    return audit_pass\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions issues on SSH private host key files\"\"\"\n    ssh_group_name = get_ssh_group_name()\n    pmask_ssh_group = 0o137  # Mode mask for SSH group ownership\n    pmask_root_group = 0o177  # Mode mask for root group ownership\n    print(\"Remediation Results:\")\n    \n    for root, dirs, files in os.walk('/etc/ssh'):\n        for file in files:\n            file_path = os.path.join(root, file)\n            # Check if file is an OpenSSH private key\n            if os.system(f\"ssh-keygen -lf /dev/null {file_path} >/dev/null 2>&1\") == 0 and \\\n               'OpenSSH private key' in os.popen(f\"file {file_path}\").read():\n                file_stat = os.stat(file_path)\n                owner = pwd.getpwuid(file_stat.st_uid).pw_name\n                group = grp.getgrgid(file_stat.st_gid).gr_name\n                mode = stat.filemode(file_stat.st_mode)\n                \n                print(f\" - File: \\\"{file_path}\\\"\")\n                actions = []\n                if (group == ssh_group_name and (file_stat.st_mode & pmask_ssh_group)) or \\\n                   (group == 'root' and (file_stat.st_mode & pmask_root_group)):\n                    new_mode = file_stat.st_mode & ~pmask_ssh_group if group == ssh_group_name else file_stat.st_mode & ~pmask_root_group\n                    actions.append(f\" - Updating mode from \\\"{mode}\\\" to \\\"{stat.filemode(new_mode)}\\\"\")\n                    os.chmod(file_path, new_mode)\n                if owner!= 'root':\n                    actions.append(f\" - Changing ownership from \\\"{owner}\\\" to \\\"root\\\"\")\n                    os.chown(file_path, pwd.getpwnam('root').pw_uid, -1)\n                if group not in [ssh_group_name, 'root']:\n                    new_group = ssh_group_name if ssh_group_name in grp.getgrall() else 'root'\n                    actions.append(f\" - Changing group ownership from \\\"{group}\\\" to \\\"{new_group}\\\"\")\n                    os.chown(file_path, -1, grp.getgrnam(new_group).gr_gid)\n                \n                if actions:\n                    print(\"\\n\".join(actions))\n                else:\n                    print(\" - No changes required\")\n\n# Example usage\nif __name__ == \"__main__\":\n    audit_vuln()\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on SSH public host key files are configured",
    "id": "5.1.3",
    "type": "Automated",
    "start_page": 509,
    "end_page": 512,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "An SSH public key is one of two files used in SSH public key authentication. In this authentication method, a public key is a key that can be used for verifying digital signatures generated using a corresponding private key. Only a public key that corresponds to a private key will be able to authenticate successfully.",
    "rationale": "If a public host key file is modified by an unauthorized user, the SSH service may be compromised.",
    "audit_details": "Run the following command and verify Access does not grant write or execute permissions to group or other for all returned files: Run the following script to verify SSH public host key files are mode 0644 or more restrictive, owned by the root user, and owned by the root group: \n```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  FILE_CHK()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode:\n\\\"$l_maxperm\\\" or more restrictive\"\n     fi\n     if [ \"${l_file_owner}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned\nby \\\"root\\\"\"\n     fi\n     if [ \"${l_file_group}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be\ngroup owned by group: \\\"root\\\"\"\n     fi\n     if [ -n \"${l_out2}\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode:\n\\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner:\n\\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_CHK\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH public keys found\"\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured *:\\n$l_output\\n\"\n  fi\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  FILE_CHK()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode:\n\\\"$l_maxperm\\\" or more restrictive\"\n     fi\n     if [ \"${l_file_owner}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned\nby \\\"root\\\"\"\n     fi\n     if [ \"${l_file_group}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be\ngroup owned by group: \\\"root\\\"\"\n     fi\n     if [ -n \"${l_out2}\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode:\n\\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner:\n\\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_CHK\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   [ -z \"$l_output\" ] && l_output=\"\\n - No openSSH public keys found\"\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit\nfailure * :$l_output2\\n\"\n   [ -n \"$l_output\" ] && echo -e \"\\n - * Correctly configured *:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Run the following script to set mode, ownership, and group on the public SSH host key files:\n```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  FILE_ACCESS_FIX()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode:\n\\\"$l_maxperm\\\" or more restrictive\\n  - updating to mode: \\:$l_maxperm\\\"\"\n      chmod u-x,go-wx\n     fi\n     if [ \"${l_file_owner}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned\nby \\\"root\\\"\\n  - Changing ownership to \\\"root\\\"\"\n      chown root \"$l_file\"\n     fi\n     if [ \"${l_file_group}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be\ngroup owned by: \\\"root\\\"\\n  - Changing group ownership to \\\"root\\\"\"\n      chgrp root \"$l_file\"\n     fi\n     if [ -n \"${l_out2}\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode:\n\\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner:\n\\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_ACCESS_FIX\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- No access changes required\\n\"\n  else\n   echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n  fi\n}",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_pmask=\"0133\" && l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  FILE_ACCESS_FIX()\n  {\n   while IFS=: read -r l_file_mode l_file_owner l_file_group; do\n     l_out2=\"\"\n     if [ $(( $l_file_mode & $l_pmask )) -gt 0 ]; then\n      l_out2=\"$l_out2\\n - Mode: \\\"$l_file_mode\\\" should be mode:\n\\\"$l_maxperm\\\" or more restrictive\\n  - updating to mode: \\:$l_maxperm\\\"\"\n      chmod u-x,go-wx\n     fi\n     if [ \"${l_file_owner}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by: \\\"$l_file_owner\\\" should be owned\nby \\\"root\\\"\\n  - Changing ownership to \\\"root\\\"\"\n      chown root \"$l_file\"\n     fi\n     if [ \"${l_file_group}\" != \"root\" ]; then\n      l_out2=\"$l_out2\\n - Owned by group \\\"$l_file_group\\\" should be\ngroup owned by: \\\"root\\\"\\n  - Changing group ownership to \\\"root\\\"\"\n      chgrp root \"$l_file\"\n     fi\n     if [ -n \"${l_out2}\" ]; then\n      l_output2=\"$l_output2\\n - File: \\\"$l_file\\\"$l_out2\"\n     else\n      l_output=\"$l_output\\n - File: \\\"$l_file\\\"\\n - Correct: mode:\n\\\"$l_file_mode\\\", owner: \\\"$l_file_owner\\\", and group owner:\n\\\"$l_file_group\\\" configured\"\n     fi\n   done < <(stat -Lc '%#a:%U:%G' \"$l_file\")\n  }\n  while IFS= read -r -d $'\\0' l_file; do \n   if ssh-keygen -lf &>/dev/null \"$l_file\"; then \n     file \"$l_file\" | grep -Piq -'\\bopenssh\\h+([^#\\n\\r]+\\h+)?public\\h+key\\b' && FILE_ACCESS_FIX\n   fi\n  done < <(find -L /etc/ssh -xdev -type f -print0 2>/dev/null)\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- No access changes required\\n\"\n  else\n   echo -e \"\\n- Remediation results:\\n$l_output2\\n\"\n  fi\n}",
    "python_script": "\nimport os\nimport stat\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit SSH public host key file permissions, ownership, and group ownership.\"\"\"\n    audit_passed = True\n    ssh_dir = '/etc/ssh'\n\n    for filename in os.listdir(ssh_dir):\n        filepath = os.path.join(ssh_dir, filename)\n        if os.path.isfile(filepath):\n            # Verify file is an OpenSSH public key\n            if subprocess.run(['ssh-keygen', '-lf', filepath], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0 and \\\n               'OpenSSH public key' in subprocess.run(['file', filepath], stdout=subprocess.PIPE, text=True).stdout:\n                # Check file permissions\n                file_stat = os.stat(filepath)\n                if file_stat.st_mode & 0o133:  # 0o133 = 0o100 (other execute) + 0o031 (group write + execute)\n                    print(f\" - File: \\\"{filename}\\\" - Mode: {stat.filemode(file_stat.st_mode)} should be 0644 or more restrictive\")\n                    audit_passed = False\n                # Check ownership and group ownership\n                if file_stat.st_uid!= 0:  # 0 = root user ID\n                    print(f\" - File: \\\"{filename}\\\" - Owned by: {file_stat.st_uid} should be owned by root\")\n                    audit_passed = False\n                if file_stat.st_gid!= 0:  # 0 = root group ID\n                    print(f\" - File: \\\"{filename}\\\" - Owned by group {file_stat.st_gid} should be group owned by root\")\n                    audit_passed = False\n                if not (file_stat.st_mode & 0o133 or file_stat.st_uid!= 0 or file_stat.st_gid!= 0):\n                    print(f\" - File: \\\"{filename}\\\" - Correct: mode {stat.filemode(file_stat.st_mode)}, owner {file_stat.st_uid}, and group owner {file_stat.st_gid} configured\")\n\n    return audit_passed\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate SSH public host key file permissions, ownership, and group ownership issues.\"\"\"\n    ssh_dir = '/etc/ssh'\n\n    for filename in os.listdir(ssh_dir):\n        filepath = os.path.join(ssh_dir, filename)\n        if os.path.isfile(filepath):\n            # Verify file is an OpenSSH public key\n            if subprocess.run(['ssh-keygen', '-lf', filepath], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0 and \\\n               'OpenSSH public key' in subprocess.run(['file', filepath], stdout=subprocess.PIPE, text=True).stdout:\n                # Fix file permissions\n                file_stat = os.stat(filepath)\n                if file_stat.st_mode & 0o133:  \n                    os.chmod(filepath, 0o644)  # Set to 0644\n                    print(f\" - File: \\\"{filename}\\\" - Updated mode to 0644\")\n                # Fix ownership\n                if file_stat.st_uid!= 0:  \n                    os.chown(filepath, 0, -1)  # Change owner to root, keep group ID unchanged\n                    print(f\" - File: \\\"{filename}\\\" - Changed ownership to root\")\n                # Fix group ownership\n                if file_stat.st_gid!= 0:  \n                    os.chown(filepath, -1, 0)  # Keep owner ID unchanged, change group to root\n                    print(f\" - File: \\\"{filename}\\\" - Changed group ownership to root\")\n\nif __name__ == \"__main__\":\n    print(\"Audit Result:\")\n    if audit_vuln():\n        print(\"** PASS **\")\n    else:\n        print(\"** FAIL **\")\n        response = input(\"Remediate vulnerabilities? (yes/no): \")\n        if response.lower() == \"yes\":\n            remediate_vuln()\n            print(\"Remediation applied. Re-run audit for verification.\")\n"
  },
  {
    "name": "Ensure sshd access is configured",
    "id": "5.1.4",
    "type": "Automated",
    "start_page": 513,
    "end_page": 515,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are several options available to limit which users and group can access the system via SSH. It is recommended that at least one of the following options be leveraged:\n\n  - `AllowUsers:`\n\n`o` The AllowUsers variable gives the system administrator the option of allowing specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by only allowing the allowed users to log in from a particular host, the entry can be specified in the form of user@host.\n\n  - `AllowGroups:`\n\n`o` The AllowGroups variable gives the system administrator the option of allowing specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.\n\n  - `DenyUsers:`\n\n`o` The DenyUsers variable gives the system administrator the option of denying specific users to ssh into the system. The list consists of space separated user names. Numeric user IDs are not recognized with this variable. If a system administrator wants to restrict user access further by specifically denying a user's access from a particular host, the entry can be specified in the form of user@host.\n\n  - `DenyGroups:`\n\n`o` The DenyGroups variable gives the system administrator the option of denying specific groups of users to ssh into the system. The list consists of space separated group names. Numeric group IDs are not recognized with this variable.",
    "rationale": "Restricting which users can remotely access the system via SSH will help ensure that only authorized users access the system.",
    "audit_details": "Run the following command and verify the output:\n\n```\n# sshd -T | grep -Pi -- '^\n  *(allow|deny)(users|groups)\n  +\\H+'\n```\n\nVerify that the output matches at least one of the following lines:\n```\nallowusers <userlist>\n-ORallowgroups <grouplist>\n-ORdenyusers <userlist>\n-ORdenygroups <grouplist>\n```\nReview the list(s) to ensure included users and/or groups follow local site policy\n\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep -Pi -'^\n  *(allow|deny)(users|groups)\n  +\\H+'\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain).",
    "audit_code": "# sshd -T | grep -Pi -- '^(allow|deny)(users|groups)\\h+\\H+'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set one or more of the parameters above any\n```\nInclude and Match set statements as follows:\nAllowUsers <userlist>\n - AND/OR AllowGroups <grouplist>\n```\n**Note:**\n  - First occurrence of a option takes precedence, Match set statements notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a .conf file in a\n```\nInclude directory.\n```\n  - It is easier to manage an allow list than a deny list. In a deny list, you could potentially add a user or group and forget to add it to the deny list.",
    "remediation_code": "Edit the /etc/ssh/sshd_config file to set one or more of the parameters above any Include and Match set statements.",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit sshd config for AllowUsers, AllowGroups, DenyUsers, or DenyGroups settings.\n    \n    Returns:\n        bool: True if at least one setting is found, False otherwise.\n    \"\"\"\n    sshd_config_output = subprocess.check_output([\"sshd\", \"-T\"])\n    sshd_config_text = sshd_config_output.decode(\"utf-8\")\n    pattern = r\"^(allow|deny)(users|groups)\\s+.*\"\n    matches = re.findall(pattern, sshd_config_text, re.MULTILINE)\n    return len(matches) > 0\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate vulnerability by adding AllowUsers and/or AllowGroups to sshd config.\n    \n    NOTE: This example adds a basic AllowUsers setting. You should modify this to fit your site's policy.\n    \"\"\"\n    config_file = \"/etc/ssh/sshd_config\"\n    backup_config_file = f\"{config_file}.bak\"\n    os.popen(f\"cp {config_file} {backup_config_file}\")  # Backup original config\n    print(f\"Backed up {config_file} to {backup_config_file}\")\n    \n    # Example settings (modify according to your site's policy)\n    allow_users = \"your_username\"\n    allow_groups = \"your_groupname\"\n    \n    with open(config_file, \"a\") as file:\n        file.write(f\"\\nAllowUsers {allow_users}\\n\")\n        file.write(f\"AllowGroups {allow_groups}\\n\")\n    print(f\"Added 'AllowUsers {allow_users}' and 'AllowGroups {allow_groups}' to {config_file}\")\n    \n    # Reload sshd service to apply changes (assumes systemd)\n    subprocess.check_output([\"systemctl\", \"reload\", \"ssh\"])\n    print(\"Reloaded sshd service to apply configuration changes\")\n"
  },
  {
    "name": "Ensure sshd Banner is configured",
    "id": "5.1.5",
    "type": "Automated",
    "start_page": 516,
    "end_page": 517,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The Banner parameter specifies a file whose contents must be sent to the remote user before authentication is permitted. By default, no banner is displayed.",
    "rationale": "Banners are used to warn connecting users of the particular site's policy regarding connection. Presenting a warning message prior to the normal user login may assist the prosecution of trespassers on the computer system.",
    "audit_details": "Run the following command to verify Banner is set:\n\n```\n# sshd -T | grep -Pi -- '^banner\\h+/\\H+'\n```\n\n_Example:_\n\n```\nbanner /etc/issue.net\n```\n\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n\n```\n# sshd -T -C user=sshuser | grep -Pi -- '^banner\\h+/\\H+'\n```\n\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), `lport (local port number), and rdomain (routing domain).",
    "audit_code": "# sshd -T | grep -Pi -- '^banner\\h+/\\H+'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the Banner parameter above any Include and\n```\nMatch entries as follows:\n```\n\n```\nBanner /etc/issue.net\n```\n\n**Note: First occurrence of a option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Banner /etc/issue.net",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln(match_params: dict = None) -> bool:\n    \"\"\"\n    Audit if the SSHD Banner is configured.\n\n    Args:\n    - match_params (dict): Optional; Connection parameters for 'Match' set statements.\n                           Example: {'user': 'sshuser'}\n\n    Returns:\n    - bool: True if the Banner is set, False otherwise.\n    \"\"\"\n    cmd = ['sshd', '-T']\n    if match_params:\n        cmd.extend([f'-C {key}={val}' for key, val in match_params.items()])\n    output = subprocess.check_output(cmd).decode('utf-8')\n    # Use regex to search for 'banner' setting, ensuring it's not commented out\n    return bool(re.search(r'^\\s*banner\\s+\\S+', output, re.MULTILINE))\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by configuring the SSHD Banner.\n    \"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    new_line = 'Banner /etc/issue.net\\n'\n    try:\n        with open(config_file, 'r+') as file:\n            content = file.readlines()\n            # Check if the banner is already set to avoid duplicates\n            if not any(line.lstrip().startswith('Banner') for line in content):\n                # Insert at the beginning, above any Include or Match entries\n                include_match_found = False\n                for i, line in enumerate(content):\n                    if line.lstrip().startswith(('Include', 'Match')):\n                        content.insert(i, new_line)\n                        include_match_found = True\n                        break\n                if not include_match_found:\n                    content.insert(0, new_line)\n                file.seek(0)\n                file.writelines(content)\n                file.truncate()\n        print(f\"Added 'Banner /etc/issue.net' to {config_file}.\")\n    except Exception as e:\n        print(f\"Error remediating: {e}\")\n\n# Example Usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        print(\"Re-auditing after remediation...\")\n        if audit_vuln():\n            print(\"Banner is now set.\")\n        else:\n            print(\"Failed to set the Banner.\")\n    else:\n        print(\"Banner is already set.\")\n"
  },
  {
    "name": "Ensure sshd Ciphers are configured",
    "id": "5.1.6",
    "type": "Automated",
    "start_page": 518,
    "end_page": 520,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This variable limits the ciphers that SSH can use during communication.\n\n**Notes:**\n\n  - Some organizations may have stricter requirements for approved ciphers.\n\n  - Ensure that ciphers used are in compliance with site policy.\n\n  - The only \"strong\" ciphers currently FIPS 140 compliant are:\n\n`o` [aes256-gcm@openssh.com](mailto:aes256-gcm@openssh.com)\n`o` [aes128-gcm@openssh.com](mailto:aes128-gcm@openssh.com)\n`o` aes256-ctr\n`o` aes192-ctr\n`o` aes128-ctr",
    "rationale": "Weak ciphers that are used for authentication to the cryptographic module cannot be relied upon to provide confidentiality or integrity, and system data may be compromised.\n\n  - The Triple DES ciphers, as used in SSH, have a birthday bound of approximately four billion blocks, which makes it easier for remote attackers to obtain clear text data via a birthday attack against a long-duration encrypted session, aka a \"Sweet32\" attack.\n\n  - Error handling in the SSH protocol; Client and Server, when using a block cipher algorithm in Cipher Block Chaining (CBC) mode, makes it easier for remote attackers to recover certain plain text data from an arbitrary block of cipher text in an SSH session via unknown vectors.",
    "audit_details": "Run the following command to verify none of the \"weak\" ciphers are being used:\n```\n# sshd -T | grep -Pi -'^ciphers\\h+\"?([^#\\n\\r]+,)?((3des|blowfish|cast128|aes(128|192|256))cbc|arcfour(128|256)?|rijndael-cbc@lysator\\.liu\\.se|chacha20poly1305@openssh\\.com)\\b'\n```\n**- IF - a line is returned, review the list of ciphers. If the line includes chacha20-**\n```\npoly1305@openssh.com, review CVE-2023-48795 and verify the system has been patched.\n```\nNo ciphers in the list below should be returned as they're considered \"weak\":\n```\n3des-cbc\naes128-cbc\naes192-cbc\naes256-cbc\n```\n",
    "audit_code": "sshd -T | grep -Pi -'^ciphers\\h+\"?([^#\\n\\r]+,)?((3des|blowfish|cast128|aes(128|192|256))cbc|arcfour(128|256)?|rijndael-cbc@lysator\\.liu\\.se|chacha20poly1305@openssh\\.com)\\b'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file and add/modify the Ciphers line to contain a comma separated list of the site unapproved (weak) Ciphers preceded with a - above any\n```\nInclude entries:\n```\n_Example:_\n```\nCiphers -3des-cbc,aes128-cbc,aes192-cbc,aes256-cbc,chacha20poly1305@openssh.com\n```\n**- IF -** `CVE-2023-48795 has been addressed, and it meets local site policy, chacha20-`\n```\npoly1305@openssh.com may be removed from the list of excluded ciphers.\n```\n**Note: First occurrence of an option takes precedence. If Include locations are enabled,**\nused, and order of precedence is understood in your environment, the entry may be\ncreated in a file in Include location.",
    "remediation_code": "Edit the /etc/ssh/sshd_config file to configure Ciphers appropriately.",
    "python_script": "\nimport subprocess\nimport re\n\n# Define weak ciphers as per the vulnerability details\nWEAK_CIPHERS = ['3des-cbc', 'aes128-cbc', 'aes192-cbc', 'aes256-cbc', 'chacha20poly1305@openssh.com']\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if any weak ciphers are being used by the SSH server.\n    \n    Returns:\n    bool: True if any weak cipher is found, False otherwise\n    \"\"\"\n    # Run the SSH test command to retrieve the list of ciphers\n    ssh_output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    # Extract the ciphers line using regular expression\n    ciphers_line = re.search(r'^ciphers\\s+\\\"?([^#\\n\\r]+)', ssh_output, re.MULTILINE)\n    if ciphers_line:\n        # Split the ciphers by comma and check for weak ciphers\n        ciphers = ciphers_line.group(1).split(',')\n        for cipher in ciphers:\n            if cipher.strip() in WEAK_CIPHERS:\n                print(f\"Found weak cipher: {cipher.strip()}\")\n                return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Modify the /etc/ssh/sshd_config file to exclude weak ciphers.\n    \"\"\"\n    # Construct the Ciphers line with weak ciphers excluded (preceded by '-')\n    excluded_ciphers = ','.join('-' + cipher for cipher in WEAK_CIPHERS)\n    ciphers_line = f\"Ciphers {excluded_ciphers}\\n\"\n    \n    # Read the existing sshd_config file\n    try:\n        with open('/etc/ssh/sshd_config', 'r+') as file:\n            lines = file.readlines()\n            # Check if the Ciphers line already exists\n            for i, line in enumerate(lines):\n                if line.startswith('Ciphers'):\n                    # Replace the existing Ciphers line\n                    lines[i] = ciphers_line\n                    print(f\"Updated existing Ciphers line in /etc/ssh/sshd_config\")\n                    break\n            else:\n                # Append the Ciphers line if it doesn't exist\n                lines.append(ciphers_line)\n                print(f\"Added Ciphers line to /etc/ssh/sshd_config\")\n            # Write the updated lines back to the file\n            file.seek(0)\n            file.writelines(lines)\n            file.truncate()\n    except Exception as e:\n        print(f\"Error remediating vulnerability: {str(e)}\")\n"
  },
  {
    "name": "Ensure sshd ClientAliveInterval and ClientAliveCountMax are configured",
    "id": "5.1.7",
    "type": "Automated",
    "start_page": 521,
    "end_page": 523,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "**Note: To clarify, the two settings described below are only meant for idle connections** from a protocol perspective and are not meant to check if the user is active or not. An idle user does not mean an idle connection. SSH does not and never had, intentionally, the capability to drop idle users. In SSH versions before 8.2p1 there was a bug that caused these values to behave in such a manner that they were abused to disconnect idle users. This bug has been resolved in 8.2p1 and thus it can no longer be abused disconnect idle users.\n\nThe two options ClientAliveInterval and ClientAliveCountMax control the timeout of SSH sessions. Taken directly from man 5 sshd_config:\n\n  - `ClientAliveInterval Sets a timeout interval in seconds after which if no data` has been received from the client, sshd(8) will send a message through the encrypted channel to request a response from the client. The default is 0, indicating that these messages will not be sent to the client.\n  \n  - `ClientAliveCountMax Sets the number of client alive messages which may be` sent without sshd(8) receiving any messages back from the client. If this threshold is reached while client alive messages are being sent, sshd will disconnect the client, terminating the session. It is important to note that the use of client alive messages is very different from TCPKeepAlive. The client alive messages are sent through the encrypted channel and therefore will not be spoofable. The TCP keepalive option en\u2010bled by TCPKeepAlive is spoofable. The client alive mechanism is valuable when the client or server depend on knowing when a connection has become unresponsive. The default value is 3. If ClientAliveInterval is set to 15, and ClientAliveCountMax is left at the default, unresponsive SSH clients will be disconnected after approximately 45 seconds. Setting a zero ClientAliveCountMax disables connection termination.\n\nPage 520",
    "rationale": "In order to prevent resource exhaustion, appropriate values should be set for both `ClientAliveInterval and ClientAliveCountMax`. Specifically, looking at the source code, ClientAliveCountMax must be greater than zero in order to utilize the ability of SSH to drop idle connections. If connections are allowed to stay open indefinitely, this can potentially be used as a DDOS attack or simple resource exhaustion could occur over unreliable networks.\n\nThe example set here is a 45 second timeout. Consult your site policy for network timeouts and apply as appropriate.",
    "audit_details": "Run the following command and verify ClientAliveInterval and ClientAliveCountMax are greater than zero:\n\n```\n# sshd -T | grep -Pi -- '(clientaliveinterval|clientalivecountmax)'\n```\n\n_Example Output:_\n```\nclientaliveinterval 15\nclientalivecountmax 3\n```\n**- IF -** `Match set statements are used in your environment, specify the connection parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep -Pi -'(clientaliveinterval|clientalivecountmax)'\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), `lport (local port number), and rdomain (routing domain).",
    "audit_code": "# sshd -T | grep -Pi -- '(clientaliveinterval|clientalivecountmax)'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the ClientAliveInterval and ClientAliveCountMax parameters above any Include and Match entries according to site policy.\n_Example:_\n```\nClientAliveInterval 15\nClientAliveCountMax 3\n```\n**Note: First occurrence of a option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "# ClientAliveInterval 15\n# ClientAliveCountMax 3",
    "python_script": "\nimport subprocess\nimport configparser\nfrom tempfile import TemporaryFile\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit SSHD configuration for ClientAliveInterval and ClientAliveCountMax\"\"\"\n    output = subprocess.check_output([\"sshd\", \"-T\"]).decode(\"utf-8\")\n    config = configparser.ConfigParser()\n    config.read_string(output)  # sshd -T output is in a config-like format\n    \n    try:\n        interval = int(config[\"sshiscard\"][\"clientaliveinterval\"])\n        count_max = int(config[\"sshiscard\"][\"clientalivecountmax\"])\n        return all(greater_than_zero for greater_than_zero in (interval, count_max))\n    except (KeyError, ValueError):\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate SSHD configuration by setting ClientAliveInterval and ClientAliveCountMax\"\"\"\n    # Example values, adjust according to site policy\n    interval = 15\n    count_max = 3\n    \n    config = configparser.ConfigParser()\n    config.optionxform = str  # Preserve case for option names\n    config.read(\"/etc/ssh/sshd_config\")\n    \n    # Ensure section exists\n    if not config.has_section(\"sshiscard\"):\n        config.add_section(\"sshiscard\")\n    \n    # Set values above any Include and Match entries\n    # If these need to be at the very top, considerations for existing sections would be needed\n    config.set(\"sshiscard\", \"ClientAliveInterval\", str(interval))\n    config.set(\"sshiscard\", \"ClientAliveCountMax\", str(count_max))\n    \n    # Write changes back to the file\n    with TemporaryFile(mode=\"w+\") as tmp:\n        config.write(tmp)\n        tmp.seek(0)\n        with open(\"/etc/ssh/sshd_config\", \"w\") as sshd_config:\n            sshd_config.write(tmp.read())\n    \n    print(f\"Set ClientAliveInterval to {interval} and ClientAliveCountMax to {count_max} in /etc/ssh/sshd_config.\")\n    print(\"Restarting SSH service to apply changes...\")\n    subprocess.run([\"systemctl\", \"restart\", \"ssh\"])  # Assuming systemd\n    print(\"SSH service restarted.\")\n"
  },
  {
    "name": "Ensure sshd DisableForwarding is enabled",
    "id": "5.1.8",
    "type": "Automated",
    "start_page": 524,
    "end_page": 526,
    "profiles": [
      "level-1-workstation",
      "level-2-server"
    ],
    "description": "The DisableForwarding parameter disables all forwarding features, including X11, sshagent(1), TCP and StreamLocal. This option overrides all other forwarding-related options and may simplify restricted configurations.\n\n  - X11Forwarding provides the ability to tunnel X11 traffic through the connection to enable remote graphic connections.\n\n  - ssh-agent is a program to hold private keys used for public key authentication. Through use of environment variables the agent can be located and automatically used for authentication when logging in to other machines using ssh.\n\n  - SSH port forwarding is a mechanism in SSH for tunneling application ports from the client to the server, or servers to clients. It can be used for adding encryption to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening backdoors into the internal network from their home machines.",
    "rationale": "Disable X11 forwarding unless there is an operational requirement to use X11 applications directly. There is a small risk that the remote X11 servers of users who are logged in via SSH with X11 forwarding could be compromised by other users on the X11 server. Note that even if X11 forwarding is disabled, users can always install their own forwarders.\n\nanyone with root privilege on the the intermediate server can make free use of sshagent to authenticate them to other servers\n\nLeaving port forwarding enabled can expose the organization to security risks and backdoors. SSH connections are protected with strong encryption. This makes their contents invisible to most deployed network monitoring and traffic filtering solutions. This invisibility carries considerable risk potential if it is used for malicious purposes such as data exfiltration. Cybercriminals or malware could exploit SSH to hide their unauthorized communications, or to exfiltrate stolen data from the target network.",
    "audit_details": "Run the following command to verify DisableForwarding is set to yes:\n```\n# sshd -T | grep -i disableforwarding\ndisableforwarding yes\n```",
    "audit_code": "sshd -T | grep -i disableforwarding",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the DisableForwarding parameter to yes above any Include entry as follows:\n```\nDisableForwarding yes\n```\n**Note: First occurrence of a option takes precedence. If Include locations are enabled,**\nused, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Edit /etc/ssh/sshd_config and add:\nDisableForwarding yes\n",
    "python_script": "\nimport subprocess\nimport fileinput\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if DisableForwarding is enabled in SSHD config.\"\"\"\n    try:\n        # Run sshd -T to test the config and capture the output\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        # Split the output into lines for easier parsing\n        config_lines = [line.strip() for line in output.split('\\n')]\n        # Filter lines to find the DisableForwarding setting\n        forwarding_settings = [line for line in config_lines if line.startswith('disableforwarding')]\n        # If no setting is found, assume it's not enabled (vulnerable)\n        if not forwarding_settings:\n            return True\n        # Check the value of the first occurrence (which takes precedence)\n        return forwarding_settings[0].split()[-1].lower()!= 'yes'\n    except subprocess.CalledProcessError as e:\n        print(f\"Error auditing vulnerability: sshd -T failed with return code {e.returncode}\")\n        return True  # Assume vulnerable on audit failure\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring DisableForwarding is set to yes in SSHD config.\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    try:\n        # Iterate over the file in place, editing it as we go\n        with fileinput.input(config_file, inplace=True) as file:\n            include_encountered = False\n            for line in file:\n                # Check if we've reached an Include directive\n                if line.strip().lower().startswith('include'):\n                    include_encountered = True\n                # If we haven't added our rule yet and are before or at the first Include\n                if not include_encountered:\n                    # Add our rule before printing the current line (if any)\n                    print('DisableForwarding yes')\n                # Print the current line (if any) to keep the file intact\n                print(line, end='')\n        print(f\"Added 'DisableForwarding yes' to {config_file} before any Include entries.\")\n    except PermissionError:\n        print(f\"Permission denied editing {config_file}. Please run with sufficient privileges.\")\n    except Exception as e:\n        print(f\"Unexpected error remediating vulnerability: {e}\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure sshd GSSAPIAuthentication is disabled",
    "id": "5.1.9",
    "type": "Automated",
    "start_page": 527,
    "end_page": 528,
    "profiles": [
      "level-1-workstation",
      "level-2-server"
    ],
    "description": "The GSSAPIAuthentication parameter specifies whether user authentication based on GSSAPI is allowed",
    "rationale": "Allowing GSSAPI authentication through SSH exposes the system's GSSAPI to remote hosts, and should be disabled to reduce the attack surface of the system",
    "audit_details": "Run the following command to verify GSSAPIAuthentication is set to no:\n```\n# sshd -T | grep gssapiauthentication\ngssapiauthentication no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep gssapiauthentication\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep gssapiauthentication\ngssapiauthentication no\n# sshd -T -C user=sshuser | grep gssapiauthentication",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the GSSAPIAuthentication parameter to no above any Include and Match entries as follows:\n```\nGSSAPIAuthentication no\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "# Edit /etc/ssh/sshd_config\nGSSAPIAuthentication no",
    "python_script": "\nimport paramiko\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if GSSAPIAuthentication is disabled in sshd config\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    try:\n        with open(config_file, 'r') as f:\n            config = paramiko.SSHConfig()\n            config.parse(f)\n\n            # Check global setting\n            if 'gssapiauthentication' in config.lookup(''):\n                if config.lookup('')['gssapiauthentication']!= 'no':\n                    print(\"GSSAPIAuthentication is not set to 'no' in global settings.\")\n                    return False\n\n            # Check Match blocks (simplified, as paramiko doesn't fully support Match parsing)\n            match_blocks = re.findall(r'Match.*?\\n(.*?)(?=\\nMatch |\\n#|$)', f.read(), re.DOTALL)\n            for block in match_blocks:\n                if 'GSSAPIAuthentication' in block and 'no' not in block:\n                    print(\"GSSAPIAuthentication is not set to 'no' in a Match block.\")\n                    return False\n\n            # If no issues found\n            print(\"GSSAPIAuthentication is set to 'no' in all applicable settings.\")\n            return True\n\n    except FileNotFoundError:\n        print(f\"Error: {config_file} not found.\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting GSSAPIAuthentication to no in sshd config\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    try:\n        with open(config_file, 'r+') as f:\n            content = f.read()\n            # Insert at the top, above any Include or Match entries\n            if 'Include' in content or 'Match' in content:\n                insert_index = min(content.find('Include'), content.find('Match')) if 'Include' in content and 'Match' in content else (content.find('Include') if 'Include' in content else content.find('Match'))\n                if insert_index == -1:  # Not found, append to the end\n                    insert_index = len(content)\n                content = content[:insert_index] + '\\nGSSAPIAuthentication no\\n' + content[insert_index:]\n            else:\n                content = 'GSSAPIAuthentication no\\n' + content\n\n            # Update the file content\n            f.seek(0)\n            f.write(content)\n            f.truncate()\n\n            print(f\"Set GSSAPIAuthentication to 'no' in {config_file}.\")\n\n    except Exception as e:\n        print(f\"Error remediating: {e}\")\n"
  },
  {
    "name": "Ensure sshd HostbasedAuthentication is disabled",
    "id": "5.1.10",
    "type": "Automated",
    "start_page": 529,
    "end_page": 530,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The HostbasedAuthentication parameter specifies if authentication is allowed through trusted hosts via the user of .rhosts, or /etc/hosts.equiv, along with successful public key client host authentication.",
    "rationale": "Even though the .rhosts files are ineffective if support is disabled in /etc/pam.conf, disabling the ability to use .rhosts files in SSH provides an additional layer of protection.",
    "audit_details": "Run the following command to verify HostbasedAuthentication is set to no:\n```\n# sshd -T | grep hostbasedauthentication\nhostbasedauthentication no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep hostbasedauthentication\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), `lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep hostbasedauthentication\n# sshd -T -C user=sshuser | grep hostbasedauthentication",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the HostbasedAuthentication parameter to no above any Include and Match entries as follows:\n```\nHostbasedAuthentication no\n```\n**Note: First occurrence of a option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "# echo 'HostbasedAuthentication no' >> /etc/ssh/sshd_config",
    "python_script": "\nimport subprocess\nimport shutil\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if HostbasedAuthentication is disabled in sshd config.\n    \n    Returns:\n    bool: True if disabled, False otherwise.\n    \"\"\"\n    # Run sshd in test mode and capture output\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    \n    # Check for HostbasedAuthentication setting\n    for line in output.split('\\n'):\n        if line.startswith('hostbasedauthentication'):\n            return line.endswith('no')\n    \n    # If setting not found, assume vulnerable\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by ensuring HostbasedAuthentication is set to 'no' \n    in /etc/ssh/sshd_config before any Include or Match entries.\n    \"\"\"\n    sshd_config_path = '/etc/ssh/sshd_config'\n    \n    # Backup original file\n    backup_path = f\"{sshd_config_path}.backup\"\n    shutil.copy2(sshd_config_path, backup_path)\n    print(f\"Backed up {sshd_config_path} to {backup_path}\")\n    \n    # Read original file content\n    with open(sshd_config_path, 'r') as file:\n        content = file.readlines()\n    \n    # Insert HostbasedAuthentication no at the beginning, avoiding any Include or Match blocks\n    insertion_index = 0\n    for i, line in enumerate(content):\n        if line.strip().lower().startswith(('include', 'match')):\n            insertion_index = i\n            break\n    content.insert(insertion_index, 'HostbasedAuthentication no\\n')\n    \n    # Write updated content\n    with open(sshd_config_path, 'w') as file:\n        file.writelines(content)\n    print(f\"Set HostbasedAuthentication to 'no' in {sshd_config_path}\")\n\n# Example usage for a specific Match block (e.g., user=sshuser)\ndef audit_vuln_match_block(user: str) -> bool:\n    output = subprocess.check_output(['sshd', '-T', f'-C', f'user={user}']).decode('utf-8')\n    for line in output.split('\\n'):\n        if line.startswith('hostbasedauthentication'):\n            return line.endswith('no')\n    return False\n\nif __name__ == \"__main__\":\n    vulnerable = not audit_vuln()\n    print(f\"Vulnerable: {vulnerable}\")\n    if vulnerable:\n        remediate_vuln()\n    \n    # Example match block audit for user 'sshuser'\n    match_block_vulnerable = not audit_vuln_match_block('sshuser')\n    print(f\"Vulnerable in Match block for user 'sshuser': {match_block_vulnerable}\")\n"
  },
  {
    "name": "Ensure sshd IgnoreRhosts is enabled",
    "id": "5.1.11",
    "type": "Automated",
    "start_page": 531,
    "end_page": 532,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The IgnoreRhosts parameter specifies that .rhosts and .shosts files will not be used in RhostsRSAAuthentication or HostbasedAuthentication.",
    "rationale": "Setting this parameter forces users to enter a password when authenticating with SSH.",
    "audit_details": "Run the following command to verify IgnoreRhosts is set to yes:\n# sshd -T | grep ignorerhosts\nignorerhosts yes\n\n- IF - Match set statements are used in your environment, specify the connection parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\nExample additional audit needed for a match block for the user sshuser:\n# sshd -T -C user=sshuser | grep ignorerhosts\n\nNote: If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep ignorerhosts\n# sshd -T -C user=sshuser | grep ignorerhosts",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the IgnoreRhosts parameter to yes above any Include and Match entries as follows:\nIgnoreRhosts yes\n\nNote: First occurrence of a option takes precedence, Match set statements notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "IgnoreRhosts yes",
    "python_script": "\nimport pathlib\nimport re\n\n# Constants\nSSHD_CONFIG_FILE = pathlib.Path('/etc/ssh/sshd_config')\nIGNORE_RHOSTS.setting = 'IgnoreRhosts yes'\nMATCH_DIRECTIVES = ['Match', 'Include']\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit SSHD configuration for IgnoreRhosts setting.\"\"\"\n    config_content = SSHD_CONFIG_FILE.read_text()\n    \n    # Check global setting\n    if re.search(r'^IgnoreRhosts\\s+yes$', config_content, re.MULTILINE):\n        return True  # Global setting is secure\n    \n    # Check for Match directives (simplified, as precise Match parsing is complex)\n    match_blocks = re.findall(r'(Match.*?)\n                                (.*?)^$\n                                ''', config_content, re.DOTALL | re.MULTILINE)\n    for _, block in match_blocks:\n        if re.search(r'^IgnoreRhosts\\s+no$', block, re.MULTILINE):\n            return False  # Insecure setting found in a Match block\n    \n    # If no global or Match block settings are found, or all are secure\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate SSHD configuration to set IgnoreRhosts to yes.\"\"\"\n    config_content = SSHD_CONFIG_FILE.read_text()\n    lines = config_content.splitlines()\n    \n    # Insert setting at the top, above any Match or Include directives\n    insert_index = next((i for i, line in enumerate(lines) if any(line.startswith(directive) for directive in MATCH_DIRECTIVES)), len(lines))\n    lines.insert(insert_index, IGNORE_RHOSTS.setting)\n    \n    # Ensure the setting is not duplicated\n    lines = [line for line in lines if not (line == IGNORE_RHOSTS.setting and lines.index(line)!= insert_index)]\n    \n    new_content = '\\n'.join(lines)\n    SSHD_CONFIG_FILE.write_text(new_content)\n    print(f\"Set 'IgnoreRhosts yes' in {SSHD_CONFIG_FILE}.\")\n"
  },
  {
    "name": "Ensure sshd KexAlgorithms is configured",
    "id": "5.1.12",
    "type": "Automated",
    "start_page": 533,
    "end_page": 535,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Key exchange is any method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm. If the sender and receiver wish to exchange encrypted messages, each must be equipped to encrypt messages to be sent and decrypt messages received. Kex algorithms have a higher preference the earlier they appear in the list. Some organizations may have stricter requirements for approved Key exchange algorithms. Ensure that Key exchange algorithms used are in compliance with site policy. The only Key Exchange Algorithms currently FIPS 140 approved are: ecdh-sha2-nistp256, ecdh-sha2-nistp384, ecdh-sha2-nistp521, diffie-hellman-group-exchange-sha256, diffie-hellman-group16-sha512, diffie-hellman-group18-sha512, diffie-hellman-group14-sha256.",
    "rationale": "Key exchange methods that are considered weak should be removed. A key exchange method may be weak because too few bits are used, or the hashing algorithm is considered too weak. Using weak algorithms could expose connections to man-in-the-middle attacks.",
    "audit_details": "Run the following command to verify none of the \"weak\" Key Exchange algorithms are being used: # sshd -T | grep -Pi -- 'kexalgorithms\\h+([^#\\n\\r]+,)?(diffie-hellman-group1sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\\b' Nothing should be returned. The following are considered \"weak\" Key Exchange Algorithms, and should not be used: diffie-hellman-group1-sha1, diffie-hellman-group14-sha1, diffie-hellman-group-exchange-sha1.",
    "audit_code": "# sshd -T | grep -Pi -- 'kexalgorithms\\h+([^#\\n\\r]+,)?(diffie-hellman-group1sha1|diffie-hellman-group14-sha1|diffie-hellman-group-exchange-sha1)\\b'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file and add/modify the KexAlgorithms line to contain a comma separated list of the site unapproved (weak) KexAlgorithms preceded with a - above any Include entries: _Example:_ KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1. Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group14-sha1,diffie-hellman-group-exchange-sha1",
    "python_script": "\nimport subprocess\nimport re\nfrom fileinput import input, Output(branch=True)\n\n# Constants\nSSH_CONFIG_FILE = '/etc/ssh/sshd_config'\nWEAK_ALGORITHMS = ['diffie-hellman-group1-sha1', 'diffie-hellman-group14-sha1', 'diffie-hellman-group-exchange-sha1']\nKEX_LINE = f'KexAlgorithms -{\",\".join(WEAK_ALGORITHMS)}'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if weak Kex Algorithms are in use.\"\"\"\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    for algorithm in WEAK_ALGORITHMS:\n        if re.search(r'kexalgorithms\\s+.*?' + algorithm, output, re.IGNORECASE):\n            return True  # Vulnerable\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by modifying sshd_config to disable weak Kex Algorithms.\"\"\"\n    include_directive_found = False\n    modified_lines = []\n    \n    # Backup the original file (if this is the first edit)\n    with open(SSH_CONFIG_FILE, 'r') as file:\n        original_content = file.read()\n    with open(f\"{SSH_CONFIG_FILE}.orig\", 'w') as backup_file:\n        backup_file.write(original_content)\n    print(f\"Backed up original {SSH_CONFIG_FILE} to {SSH_CONFIG_FILE}.orig\")\n    \n    for line in input(SSH_CONFIG_FILE, inplace=True):\n        # Check for Include directive\n        if line.strip().lower().startswith('include'):\n            include_directive_found = True\n        \n        # Modify or add KexAlgorithms line\n        if line.strip().lower().startswith('kexalgorithms'):\n            modified_lines.append(KEX_LINE + '\\n')\n        else:\n            modified_lines.append(line)\n    \n    # If no KexAlgorithms line exists, add it above the first Include directive or at the end\n    if KEX_LINE not in ''.join(modified_lines):\n        if include_directive_found:\n            modified_lines.insert(next((i for i, line in enumerate(modified_lines) if line.strip().lower().startswith('include')), None), KEX_LINE + '\\n')\n        else:\n            modified_lines.append(KEX_LINE + '\\n')\n        print(f\"Added KexAlgorithms line to {SSH_CONFIG_FILE}\")\n    \n    # Overwrite the file with modified content\n    with open(SSH_CONFIG_FILE, 'w') as ssh_config:\n        ssh_config.writelines(modified_lines)\n    print(f\"Modified {SSH_CONFIG_FILE} to disable weak Kex Algorithms\")\n"
  },
  {
    "name": "Ensure sshd LoginGraceTime is configured",
    "id": "5.1.13",
    "type": "Automated",
    "start_page": 536,
    "end_page": 537,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The LoginGraceTime parameter specifies the time allowed for successful authentication to the SSH server. The longer the Grace period is the more open unauthenticated connections can exist. Like other session controls in this session the Grace Period should be limited to appropriate organizational limits to ensure the service is available for needed access.",
    "rationale": "Setting the LoginGraceTime parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. It will also limit the number of concurrent unauthenticated connections While the recommended setting is 60 seconds (1 Minute), set the number based on site policy.",
    "audit_details": "Run the following command and verify that output LoginGraceTime is between 1 and 60 seconds:\n```\n# sshd -T | grep logingracetime\nlogingracetime 60\n```\n",
    "audit_code": "# sshd -T | grep logingracetime",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the LoginGraceTime parameter to 60 seconds or less above any Include entry as follows:\n```\nLoginGraceTime 60\n```\n\n**Note: First occurrence of a option takes precedence. If Include locations are enabled,**\nused, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "LoginGraceTime 60",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit SSHD LoginGraceTime configuration.\n    \n    Returns:\n        bool: True if LoginGraceTime is within the allowed range (1-60 seconds), False otherwise.\n    \"\"\"\n    # Run sshd -T to test the configuration and capture the output\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    \n    # Use regular expression to find the LoginGraceTime value\n    match = re.search(r'logingracetime\\s+(\\d+)', output)\n    \n    if match:\n        # Validate the value\n        value = int(match.group(1))\n        return 1 <= value <= 60\n    else:\n        # If the parameter is not found, consider it non-compliant\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate SSHD LoginGraceTime configuration by setting it to 60 seconds.\n    \"\"\"\n    sshd_config_path = '/etc/ssh/sshd_config'\n    \n    # Backup the original file\n    with open(sshd_config_path, 'r') as file:\n        content = file.readlines()\n    with open(sshd_config_path + '.orig', 'w') as file:\n        file.writelines(content)\n    print(f\"Backed up {sshd_config_path} to {sshd_config_path}.orig\")\n    \n    # Find the first occurrence of an Include directive or the end of the file\n    include_index = next((i for i, line in enumerate(content) if line.strip().lower().startswith('include')), len(content))\n    \n    # Insert the new LoginGraceTime directive above the first Include or at the end\n    content.insert(include_index, 'LoginGraceTime 60\\n')\n    \n    # Write the updated content\n    with open(sshd_config_path, 'w') as file:\n        file.writelines(content)\n    print(f\"Set LoginGraceTime to 60 in {sshd_config_path}\")\n\n    # Reload sshd service to apply changes (using systemd, as per Debian 11 and Ubuntu 22.04)\n    subprocess.run(['systemctl', 'reload', 'ssh.service'])\n    print(\"Reloaded ssh.service\")\n"
  },
  {
    "name": "Ensure sshd LogLevel is configured",
    "id": "5.1.14",
    "type": "Automated",
    "start_page": 538,
    "end_page": 539,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "SSH provides several logging levels with varying amounts of verbosity. The DEBUG options are specifically not recommended other than strictly for debugging SSH communications. These levels provide so much data that it is difficult to identify important security information, and may violate the privacy of users.",
    "rationale": "The INFO level is the basic level that only records login activity of SSH users. In many situations, such as Incident Response, it is important to determine when a particular user was active on a system. The logout record can eliminate those users who disconnected, which helps narrow the field.\n\nThe VERBOSE level specifies that login and logout activity as well as the key fingerprint for any SSH key used for login will be logged. This information is important for SSH key management, especially in legacy environments.",
    "audit_details": "Run the following command and verify that output matches loglevel VERBOSE or\n```\nloglevel INFO:\n# sshd -T | grep loglevel\nloglevel VERBOSE\n  - OR loglevel INFO\n```\n\n**- IF -** `Match set statements are used in your environment, specify the connection`\nparameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep loglevel\n```\n\n**Note: If provided, any Match directives in the configuration file that would apply are**\napplied before the configuration is written to standard output. The connection\nparameters are supplied as keyword=value pairs and may be supplied in any order,\neither with multiple -C options or as a comma-separated list. The keywords are addr\n(source address), user (user), host (resolved source host name), laddr (local address),\n```\nlport (local port number), and rdomain (routing domain)\n```\nPage 537",
    "audit_code": "# sshd -T | grep loglevel\n# sshd -T -C user=sshuser | grep loglevel",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the LogLevel parameter to VERBOSE or INFO above any Include and Match entries as follows:\n```\nLogLevel VERBOSE\n  - OR LogLevel INFO\n```\n**Note: First occurrence of an option takes precedence, Match set statements**\nwithstanding. If Include locations are enabled, used, and order of precedence is\nunderstood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "LogLevel VERBOSE\n# OR LogLevel INFO",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln(match_params: str = None) -> bool:\n    \"\"\"\n    Audits the current LogLevel setting in the SSH daemon configuration.\n\n    Args:\n    match_params (str, optional): Connection parameters for the -T extended test mode (e.g., \"user=sshuser\"). Defaults to None.\n\n    Returns:\n    bool: True if the LogLevel is set to VERBOSE or INFO, False otherwise.\n    \"\"\"\n    cmd = [\"sshd\", \"-T\"]\n    if match_params:\n        cmd.extend([\"-C\", match_params])\n\n    try:\n        output = subprocess.check_output(cmd).decode(\"utf-8\")\n        log_level = re.search(r\"loglevel (\\w+)\", output).group(1)\n        return log_level in [\"VERBOSE\", \"INFO\"]\n    except (subprocess.CalledProcessError, AttributeError):\n        return False\n\n\ndef remediate_vuln(log_level: str = \"VERBOSE\", match_params: str = None) -> None:\n    \"\"\"\n    Remediates the LogLevel setting in the SSH daemon configuration.\n\n    Args:\n    log_level (str, optional): Desired LogLevel (VERBOSE or INFO). Defaults to \"VERBOSE\".\n    match_params (str, optional): Connection parameters (not used in remediation, but maintained for consistency). Defaults to None.\n    \"\"\"\n    if log_level not in [\"VERBOSE\", \"INFO\"]:\n        print(\"Invalid log level. Using default (VERBOSE).\")\n        log_level = \"VERBOSE\"\n\n    config_file = \"/etc/ssh/sshd_config\"\n    new_config = \"\"\n\n    # Read the original configuration\n    with open(config_file, \"r\") as file:\n        for line in file:\n            # Insert the new LogLevel setting above any Include or Match entries\n            if line.lstrip().startswith((\"Include\", \"Match\")) or new_config:\n                new_config += line\n            else:\n                new_config += f\"LogLevel {log_level}\\n\" + line\n\n    # Write the updated configuration\n    with open(config_file, \"w\") as file:\n        file.write(new_config)\n\n    print(f\"Set LogLevel to {log_level} in {config_file}.\")\n    print(\"Restarting SSH service to apply changes...\")\n    subprocess.run([\"systemctl\", \"restart\", \"ssh\"])\n    print(\"SSH service restarted.\")\n"
  },
  {
    "name": "Ensure sshd MACs are configured",
    "id": "5.1.15",
    "type": "Automated",
    "start_page": 540,
    "end_page": 542,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "This variable limits the types of MAC algorithms that SSH can use during communication. Notes:  - Some organizations may have stricter requirements for approved MACs. - Ensure that MACs used are in compliance with site policy. - The only \"strong\" MACs currently FIPS 140 approved are: `o` HMAC-SHA1 `o` HMAC-SHA2-256 `o` HMAC-SHA2-384 `o` HMAC-SHA2-512",
    "rationale": "MD5 and 96-bit MAC algorithms are considered weak and have been shown to increase exploitability in SSH downgrade attacks. Weak algorithms continue to have a great deal of attention as a weak spot that can be exploited with expanded computing power. An attacker that breaks the algorithm could take advantage of a MiTM position to decrypt the SSH tunnel and capture credentials and information.",
    "audit_details": "Run the following command to verify none of the \"weak\" MACs are being used:\n\n```\n# sshd -T | grep -Pi -- 'macs\\h+([^#\\n\\r]+,)?(hmac-md5|hmac-md5-96|hmacripemd160|hmac-sha1-96|umac-64@openssh\\.com|hmac-md5-etm@openssh\\.com|hmacmd5-96-etm@openssh\\.com|hmac-ripemd160-etm@openssh\\.com|hmac-sha1-96etm@openssh\\.com|umac-64-etm@openssh\\.com|umac-128-etm@openssh\\.com)\\b'\nNothing should be returned\n```\nNote: Review CVE-2023-48795 and verify the system has been patched. If the system has not been patched, review the use of the Encrypt Then Mac (etm) MACs. The following are considered \"weak\" MACs, and should not be used:\n```\nhmac-md5\nhmac-md5-96\nhmac-ripemd160\nhmac-sha1-96\numac-64@openssh.com\nhmac-md5-etm@openssh.com\nhmac-md5-96-etm@openssh.com\nhmac-ripemd160-etm@openssh.com\nhmac-sha1-96-etm@openssh.com\numac-64-etm@openssh.com\numac-128-etm@openssh.com\n``",
    "audit_code": "# sshd -T | grep -Pi -- 'macs\\h+([^#\\n\\r]+,)?(hmac-md5|hmac-md5-96|hmacripemd160|hmac-sha1-96|umac-64@openssh\\.com|hmac-md5-etm@openssh\\.com|hmacmd5-96-etm@openssh\\.com|hmac-ripemd160-etm@openssh\\.com|hmac-sha1-96etm@openssh\\.com|umac-64-etm@openssh\\.com|umac-128-etm@openssh\\.com)\\b'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file and add/modify the MACs line to contain a comma separated list of the site unapproved (weak) MACs preceded with a - above any Include entries:\n\nExample:\n```\nMACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmacripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64etm@openssh.com,umac-128-etm@openssh.com\n```\nIF CVE-2023-48795 has not been reviewed and addressed, the following etm MACs should be added to the exclude list: hmac-sha1-etm@openssh.com,hmac-sha2-256etm@openssh.com,hmac-sha2-512-etm@openssh.com Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "Edit the /etc/ssh/sshd_config file and add/modify the MACs line to contain a comma separated list of the site unapproved (weak) MACs preceded with a - above any Include entries. Example: MACs -hmac-md5,hmac-md5-96,hmac-ripemd160,hmac-sha1-96,umac64@openssh.com,hmac-md5-etm@openssh.com,hmac-md5-96-etm@openssh.com,hmacripemd160-etm@openssh.com,hmac-sha1-96-etm@openssh.com,umac-64etm@openssh.com,umac-128-etm@openssh.com",
    "python_script": "\nimport re\nimport subprocess\n\n# Constants\nSSH_CONFIG_FILE = '/etc/ssh/sshd_config'\nWEAK_MACS = [\n    'hmac-md5', 'hmac-md5-96', 'hmac-ripemd160', 'hmac-sha1-96',\n    'umac-64@openssh.com', 'hmac-md5-etm@openssh.com', 'hmac-md5-96-etm@openssh.com',\n    'hmac-ripemd160-etm@openssh.com', 'hmac-sha1-96-etm@openssh.com', 'umac-64-etm@openssh.com', 'umac-128-etm@openssh.com'\n]\nETM_MACS_FOR_CVE_CHECK = ['hmac-sha1-etm@openssh.com', 'hmac-sha2-256-etm@openssh.com', 'hmac-sha2-512-etm@openssh.com']\n\ndef audit_vuln() -> bool:\n    \"\"\"Checks if any weak MACs are currently enabled.\"\"\"\n    try:\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        for line in output.splitlines():\n            if line.startswith('macs'):\n                macs_used = line.split(':')[1].strip()\n                for weak_mac in WEAK_MACS:\n                    if weak_mac in macs_used:\n                        print(f\"Weak MAC {weak_mac} is in use.\")\n                        return True\n        print(\"No weak MACs found in use.\")\n        return False\n    except Exception as e:\n        print(f\"Audit failed: {e}\")\n        return True  # Assume vulnerable if audit fails\n\ndef remediate_vuln() -> None:\n    \"\"\"Modifies the sshd_config to explicitly disable weak MACs.\"\"\"\n    try:\n        with open(SSH_CONFIG_FILE, 'r+') as file:\n            content = file.readlines()\n            macs_line_added = False\n            for i, line in enumerate(content):\n                if line.startswith('Include') and not macs_line_added:\n                    # Insert before the first Include, if any\n                    content.insert(i, f\"MACs -{','.join(WEAK_MACS)}\\n\")\n                    macs_line_added = True\n                    print(f\"Added MACs directive with weak MACs excluded at line {i+1}.\")\n                    break\n                elif line.strip().lower().startswith('macs') and not macs_line_added:\n                    # Update existing MACs line if found and no Include was before it\n                    content[i] = f\"MACs -{','.join(WEAK_MACS)}\\n\"\n                    macs_line_added = True\n                    print(f\"Updated existing MACs directive to exclude weak MACs at line {i+1}.\")\n                    break\n            if not macs_line_added:\n                # Append at the end if no Include or MACs directive was found\n                content.append(f\"MACs -{','.join(WEAK_MACS)}\\n\")\n                print(f\"Appended MACs directive with weak MACs excluded at the end of the file.\")\n            file.seek(0)\n            file.writelines(content)\n            file.truncate()\n        \n        # Warning for CVE and ETM MACs\n        print(\"WARNING: Manual review of CVE-2023-48795 and potential exclusion of ETM MACs (if unpatched) is required:\")\n        print(', '.join(ETM_MACS_FOR_CVE_CHECK))\n    except Exception as e:\n        print(f\"Remediation failed: {e}\")\n"
  },
  {
    "name": "Ensure sshd MaxAuthTries is configured",
    "id": "5.1.16",
    "type": "Automated",
    "start_page": 543,
    "end_page": 544,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The MaxAuthTries parameter specifies the maximum number of authentication attempts permitted per connection. When the login failure count reaches half the number, error messages will be written to the syslog file detailing the login failure.",
    "rationale": "Setting the MaxAuthTries parameter to a low number will minimize the risk of successful brute force attacks to the SSH server. While the recommended setting is 4, set the number based on site policy.",
    "audit_details": "Run the following command and verify that MaxAuthTries is 4 or less:\n```\n# sshd -T | grep maxauthtries\nmaxauthtries 4\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep maxauthtries\n```\n**Note: If provided, any Match directives in the configuration file that would apply are** applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep maxauthtries\nmaxauthtries 4\n# sshd -T -C user=sshuser | grep maxauthtries\n",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the MaxAuthTries parameter to 4 or less above any Include and Match entries as follows:\n```\nMaxAuthTries 4\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "# echo 'MaxAuthTries 4' >> /etc/ssh/sshd_config\n",
    "python_script": "\nimport subprocess\nimport configparser\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the current MaxAuthTries setting in the SSHD configuration.\n    \n    Returns:\n    bool: True if MaxAuthTries is set to 4 or less, False otherwise.\n    \"\"\"\n    # Run sshd -T to get the current configuration\n    config_output = subprocess.check_output(['sshd', '-T'])\n    config_lines = config_output.decode('utf-8').splitlines()\n    \n    # Parse the output to find the MaxAuthTries setting\n    max_auth_tries = None\n    for line in config_lines:\n        if line.startswith('maxauthtries'):\n            max_auth_tries = int(line.split()[1])\n            break\n    \n    # If no value is found, assume it's not set (default is 6) and return False\n    if max_auth_tries is None:\n        return False\n    \n    # Check if there are any Match directives that might override the setting\n    sshd_config = Path('/etc/ssh/sshd_config')\n    config_parser = configparser.ConfigParser()\n    config_parser.read(sshd_config)\n    for section in config_parser.sections():\n        if section.startswith('Match'):\n            # Simulate sshd -T with the Match parameters (simplified, might not cover all cases)\n            match_params = ','.join(f'{key}={value}' for key, value in config_parser[section].items())\n            match_output = subprocess.check_output(['sshd', '-T', f'-C{match_params}'])\n            match_lines = match_output.decode('utf-8').splitlines()\n            for line in match_lines:\n                if line.startswith('maxauthtries'):\n                    match_max_auth_tries = int(line.split()[1])\n                    if match_max_auth_tries > 4:\n                        return False\n    \n    # If all checks pass, the setting is acceptable\n    return max_auth_tries <= 4\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the MaxAuthTries setting in the SSHD configuration if necessary.\n    \"\"\"\n    sshd_config = Path('/etc/ssh/sshd_config')\n    \n    # Check if the setting is already present and correct\n    config_parser = configparser.ConfigParser()\n    config_parser.read(sshd_config)\n    if config_parser.has_option('_sshd_config', 'MaxAuthTries') and config_parser.get('_sshd_config', 'MaxAuthTries') <= '4':\n        return  # No remediation needed\n    \n    # Add or update the MaxAuthTries setting above any Include and Match entries\n    with sshd_config.open('r+') as file:\n        lines = file.readlines()\n        include_or_match_encountered = False\n        for i, line in enumerate(lines):\n            if line.strip().startswith(('Include', 'Match')):\n                include_or_match_encountered = True\n            if not include_or_match_encountered and line.strip().startswith('MaxAuthTries'):\n                lines[i] = 'MaxAuthTries 4\\n'\n                file.seek(0)\n                file.write(''.join(lines))\n                file.truncate()\n                print(\"Updated MaxAuthTries to 4 in /etc/ssh/sshd_config.\")\n                return\n        # If not found or before the first Include/Match, prepend the setting\n        lines.insert(0, 'MaxAuthTries 4\\n')\n        file.seek(0)\n        file.write(''.join(lines))\n        file.truncate()\n        print(\"Added MaxAuthTries 4 to the top of /etc/ssh/sshd_config.\")\n"
  },
  {
    "name": "Ensure sshd MaxSessions is configured",
    "id": "5.1.17",
    "type": "Automated",
    "start_page": 545,
    "end_page": 546,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The MaxSessions parameter specifies the maximum number of open sessions permitted from a given connection.",
    "rationale": "To protect a system from denial of service due to a large number of concurrent sessions, use the rate limiting function of MaxSessions to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit_details": "Run the following command and verify that MaxSessions is 10 or less:\n```\n# sshd -T | grep -i maxsessions\nmaxsessions 10\n```\nRun the following command and verify the output:\n```\ngrep -Psi -- '^\n \\s*MaxSessions\\s+\"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf\nNothing should be returned\n```\n**- IF -** `Match set statements are used in your environment, specify the connection parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep maxsessions\n```\n**Note: If provided, any Match directives in the configuration file that would apply are applied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address), lport (local port number), and rdomain (routing domain)**",
    "audit_code": "# sshd -T | grep -i maxsessions\nmaxsessions 10\n\n# grep -Psi -- '^\n \\s*MaxSessions\\s+\"?(1[1-9]|[2-9][0-9]|[1-9][0-9][0-9]+)\\b' /etc/ssh/sshd_config /etc/ssh/sshd_config.d/*.conf\nNothing should be returned\n\n# sshd -T -C user=sshuser | grep maxsessions\n",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the MaxSessions parameter to 10 or less above any Include and Match entries as follows:\n```\nMaxSessions 10\n```\n**Note: First occurrence of an option takes precedence, Match set statements notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.**",
    "remediation_code": "# Edit /etc/ssh/sshd_config\nMaxSessions 10\n",
    "python_script": "\nimport subprocess\nimport re\nimport os\n\n# Constants\nMAX_SESSIONS_LIMIT = 10\nSSHD_CONFIG_FILE = '/etc/ssh/sshd_config'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit MaxSessions configuration for sshd.\"\"\"\n    # 1. Check sshd -T output\n    try:\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        max_sessions_config = re.search(r'MaxSessions (\\d+)', output)\n        if max_sessions_config and int(max_sessions_config.group(1)) <= MAX_SESSIONS_LIMIT:\n            pass  # Config seems okay for the first check\n        else:\n            print(f\"MaxSessions not configured correctly in sshd -T output ({max_sessions_config.group(1) if max_sessions_config else 'Not Found'})\")\n            return False\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to run sshd -T: {e}\")\n        return False\n\n    # 2. Search for excessive MaxSessions settings in config files\n    config_files = [SSHD_CONFIG_FILE] + [f for f in os.listdir('/etc/ssh/sshd_config.d/') if f.endswith('.conf')]\n    config_files = [SSHD_CONFIG_FILE] + ['/etc/ssh/sshd_config.d/' + f for f in config_files[1:]]\n    pattern = r'^\\s*MaxSessions\\s+\\\"?([2-9][0-9]|[1-9][0-9][0-9]+)\\b'\n    for file in config_files:\n        try:\n            with open(file, 'r') as f:\n                content = f.read()\n                if re.search(pattern, content):\n                    print(f\"Found excessive MaxSessions setting in {file}\")\n                    return False\n        except FileNotFoundError:\n            continue  # Handle non-existent files gracefully, especially for the *.conf files\n        except Exception as e:\n            print(f\"Error reading {file}: {e}\")\n            return False\n\n    print(\"MaxSessions audit: OK\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate MaxSessions configuration for sshd if necessary.\"\"\"\n    # Backup original config\n    original_config_file = SSHD_CONFIG_FILE + '.original'\n    try:\n        subprocess.check_call(['cp', SSHD_CONFIG_FILE, original_config_file])\n        print(f\"Backed up {SSHD_CONFIG_FILE} to {original_config_file}\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to backup {SSHD_CONFIG_FILE}: {e}\")\n        return\n\n    # Insert MaxSessions configuration at the top of the file, above Includes and Matches\n    new_content = f\"MaxSessions {MAX_SESSIONS_LIMIT}\\n\"\n    try:\n        with open(SSHD_CONFIG_FILE, 'r+') as f:\n            content = f.read()\n            f.seek(0)\n            f.write(new_content + content)\n            f.truncate()\n        print(f\"Configured MaxSessions to {MAX_SESSIONS_LIMIT} in {SSHD_CONFIG_FILE}\")\n    except Exception as e:\n        print(f\"Failed to edit {SSHD_CONFIG_FILE}: {e}\")\n        # Attempt to restore backup\n        try:\n            subprocess.check_call(['mv', original_config_file, SSHD_CONFIG_FILE])\n            print(f\"Restored {SSHD_CONFIG_FILE} from backup\")\n        except subprocess.CalledProcessError as e_restore:\n            print(f\"Failed to restore {SSHD_CONFIG_FILE} from backup: {e_restore}\")\n"
  },
  {
    "name": "Ensure sshd MaxStartups is configured",
    "id": "5.1.18",
    "type": "Automated",
    "start_page": 547,
    "end_page": 548,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The MaxStartups parameter specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.",
    "rationale": "To protect a system from denial of service due to a large number of pending authentication connection attempts, use the rate limiting function of MaxStartups to protect availability of sshd logins and prevent overwhelming the daemon.",
    "audit_details": "Run the following command to verify MaxStartups is 10:30:60 or more restrictive:\n```\n# sshd -T | awk '$1 ~ /^\\s*maxstartups/{split($2, a, \":\");{if(a[1] > 10 || a[2] > 30 || a[3] > 60) print $0}}'\n```\nNothing should be returned",
    "audit_code": "# sshd -T | awk '$1 ~ /^\\s*maxstartups/{split($2, a, \":\");{if(a[1] > 10 || a[2] > 30 || a[3] > 60) print $0}}'",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the MaxStartups parameter to 10:30:60 or more restrictive above any Include entries as follows:\n```\nMaxStartups 10:30:60\n```\n**Note: First occurrence of a option takes precedence. If Include locations are enabled,** used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "MaxStartups 10:30:60",
    "python_script": "\nimport subprocess\nimport fileinput\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if MaxStartups is configured to 10:30:60 or more restrictive.\"\"\"\n    try:\n        output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n        for line in output.splitlines():\n            if line.startswith('maxstartups'):\n                value = line.split()[1]\n                # Check if more restrictive than 10:30:60\n                if not (re.match(r'^\\d+:\\d+:\\d+$', value) and \n                        all(map(lambda x, y: int(x) <= int(y), value.split(':'), '10:30:60'.split(':')))):\n                    print(f\"Found MaxStartups {value}, which is not 10:30:60 or more restrictive.\")\n                    return False\n        print(\"MaxStartups is configured to 10:30:60 or more restrictive.\")\n        return True\n    except subprocess.CalledProcessError as e:\n        print(f\"Audit failed with error: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting MaxStartups to 10:30:60 in /etc/ssh/sshd_config.\"\"\"\n    target_file = '/etc/ssh/sshd_config'\n    desired_setting = 'MaxStartups 10:30:60\\n'\n    include_encountered = False\n\n    for line in fileinput.input(target_file, inplace=True):\n        if line.strip().lower().startswith('include'):\n            include_encountered = True\n        if line.strip().lower().startswith('maxstartups') and not include_encountered:\n            # If MaxStartups is already set before any Include, update it\n            print(desired_setting, end='')\n            include_encountered = True\n            continue\n        print(line, end='')\n\n    # If the file was not modified (no print statement executed) and no MaxStartups was found before Includes,\n    # append the setting before the first Include or at the end of the file\n    if fileinput.isstdin():\n        # fileinput.input() returns to stdin after processing all files, \n        # meaning the file was not modified, so we append the setting\n        with open(target_file, 'a') as file:\n            # Check if any Include entries exist, if so, insert before the first one\n            with open(target_file, 'r') as readFile:\n                content = readFile.readlines()\n                include_index = next((content.index(line) for line in content if line.lower().strip().startswith('include')), None)\n                if include_index is not None:\n                    content.insert(include_index, desired_setting)\n                    with open(target_file, 'w') as writeFile:\n                        writeFile.writelines(content)\n                else:\n                    file.write(desired_setting)\n    print(f\"Set MaxStartups to 10:30:60 in {target_file}.\")\n"
  },
  {
    "name": "Ensure sshd PermitEmptyPasswords is disabled",
    "id": "5.1.19",
    "type": "Automated",
    "start_page": 549,
    "end_page": 550,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PermitEmptyPasswords parameter specifies if the SSH server allows login to accounts with empty password strings.",
    "rationale": "Disallowing remote shell access to accounts that have an empty password reduces the probability of unauthorized access to the system.",
    "audit_details": "Run the following command to verify PermitEmptyPasswords is set to no:\n```\n# sshd -T | grep permitemptypasswords\npermitemptypasswords no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep permitemptypasswords\n```\n**Note: If provided, any Match directives in the configuration file that would apply are**\napplied before the configuration is written to standard output. The connection\nparameters are supplied as keyword=value pairs and may be supplied in any order,\neither with multiple -C options or as a comma-separated list. The keywords are addr\n(source address), user (user), host (resolved source host name), laddr (local address),\nlport (local port number), and rdomain (routing domain)",
    "audit_code": "# sshd -T | grep permitemptypasswords\n# sshd -T -C user=sshuser | grep permitemptypasswords",
    "remediation_details": "Edit /etc/ssh/sshd_config and set the PermitEmptyPasswords parameter to no above any Include and Match entries as follows:\n```\nPermitEmptyPasswords no\n```\n**Note: First occurrence of an option takes precedence, Match set statements**\nwithstanding. If Include locations are enabled, used, and order of precedence is\nunderstood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "PermitEmptyPasswords no",
    "python_script": "\nimport pathlib\nimport re\n\ndef audit_vuln(match_blocks: dict[str, str] = None) -> bool:\n    \"\"\"Audit if PermitEmptyPasswords is disabled in sshd config.\"\"\"\n    sshd_config = pathlib.Path('/etc/ssh/sshd_config')\n    config_content = sshd_config.read_text()\n    \n    # Check global config\n    if re.search(r'^PermitEmptyPasswords\\s+no\\b', config_content, re.MULTILINE):\n        print(\"PermitEmptyPasswords is globally set to 'no'.\")\n    else:\n        print(\"PermitEmptyPasswords is not globally set to 'no'.\")\n\n    # Check Match blocks if provided\n    if match_blocks:\n        for user, match_block in match_blocks.items():\n            if not check_match_block(user, match_block, config_content):\n                return False\n\n    return True\n\n\ndef check_match_block(user: str, match_block: str, config_content: str) -> bool:\n    \"\"\"Check PermitEmptyPasswords within a Match block.\"\"\"\n    match_block_regex = rf'^Match\\s+{match_block}\\s*.*?^(PermitEmptyPasswords\\s+no\\b).*?$'\n    if re.search(match_block_regex, config_content, re.DOTALL | re.MULTILINE):\n        print(f\"PermitEmptyPasswords is set to 'no' for user '{user}' in Match block.\")\n        return True\n    else:\n        print(f\"PermitEmptyPasswords is not set to 'no' for user '{user}' in Match block.\")\n        return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting PermitEmptyPasswords to 'no' above Include and Match entries.\"\"\"\n    sshd_config = pathlib.Path('/etc/ssh/sshd_config')\n    config_lines = sshd_config.read_text().splitlines()\n    modified = False\n\n    # Insert above first Include or Match entry, or at the beginning if none exist\n    insert_index = 0\n    for i, line in enumerate(config_lines):\n        if line.strip().startswith(('Include', 'Match')):\n            insert_index = i\n            break\n\n    # Check if the setting already exists to avoid duplicates\n    for i, line in enumerate(config_lines[:insert_index]):\n        if line.strip().startswith('PermitEmptyPasswords'):\n            print(\"PermitEmptyPasswords already set, updating if necessary.\")\n            if not line.strip().endswith('no'):\n                config_lines[i] = 'PermitEmptyPasswords no'\n                modified = True\n            break\n    else:\n        print(\"Adding 'PermitEmptyPasswords no' above existing directives.\")\n        config_lines.insert(insert_index, 'PermitEmptyPasswords no')\n        modified = True\n\n    if modified:\n        sshd_config.write_text('\\n'.join(config_lines))\n        print(\"Configuration updated. Restart sshd service for changes to take effect.\")\n        # NOTE: Restarting the sshd service is not handled here as it may interrupt existing connections.\n        #       Consider running `systemctl restart sshd` or `service sshd restart` manually after verification.\n"
  },
  {
    "name": "Ensure sshd PermitRootLogin is disabled",
    "id": "5.1.20",
    "type": "Automated",
    "start_page": 551,
    "end_page": 552,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PermitRootLogin parameter specifies if the root user can log in using SSH. The default is prohibit-password.",
    "rationale": "Disallowing root logins over SSH requires system admins to authenticate using their own individual account, then escalating to root. This limits opportunity for nonrepudiation and provides a clear audit trail in the event of a security incident.",
    "audit_details": "Run the following command to verify PermitRootLogin is set to no:\n```\n# sshd -T | grep permitrootlogin\npermitrootlogin no\n```\n**- IF -** `Match set statements are used in your environment, specify the connection` parameters to use for the -T extended test mode and run the audit to verify the setting is not incorrectly configured in a match block\n_Example additional audit needed for a match block for the user sshuser:_\n```\n# sshd -T -C user=sshuser | grep permitrootlogin\n```\n**Note: If provided, any Match directives in the configuration file that would apply are**\napplied before the configuration is written to standard output. The connection parameters are supplied as keyword=value pairs and may be supplied in any order, either with multiple -C options or as a comma-separated list. The keywords are addr (source address), user (user), host (resolved source host name), laddr (local address),\n```\nlport (local port number), and rdomain (routing domain)\n``",
    "audit_code": "# sshd -T | grep permitrootlogin\npermitrootlogin no\n# sshd -T -C user=sshuser | grep permitrootlogin\n",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the PermitRootLogin parameter to no above any Include and Match entries as follows:\n```\nPermitRootLogin no\n```\n**Note: First occurrence of an option takes precedence, Match set statements** notwithstanding. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.",
    "remediation_code": "# vi /etc/ssh/sshd_config\nPermitRootLogin no\n# systemctl restart sshd\n",
    "python_script": "\nimport configparser\nimport os\n\ndef audit_vuln(match_user=None) -> bool:\n    \"\"\"Audit if PermitRootLogin is set to no in sshd_config.\n    \n    Args:\n    - match_user (str, optional): Specify a user for auditing within a Match block. Defaults to None.\n    \n    Returns:\n    - bool: True if PermitRootLogin is not vulnerable, False otherwise.\n    \"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    cmd = ['sshd', '-T']\n    if match_user:\n        cmd.extend(['-C', f'user={match_user}'])\n    \n    # Minimally using subprocess for the sshd -T command as it's the most direct way to evaluate the config as sshd would\n    import subprocess\n    output = subprocess.check_output(cmd).decode('utf-8')\n    for line in output.split('\\n'):\n        if line.startswith('permitrootlogin'):\n            return line.split()[-1] == 'no'\n    # If the parameter is not found, assume it's vulnerable\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the PermitRootLogin vulnerability in sshd_config.\"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    temp_file = '/etc/ssh/sshd_config.tmp'\n    \n    # Use configparser to ensure PermitRootLogin is set to no above any Include or Match entries\n    config = configparser.ConfigParser()\n    config.optionxform = str  # Preserve case for options\n    \n    # Create a new section if the file is empty or doesn't exist\n    if not os.path.isfile(config_file) or os.path.getsize(config_file) == 0:\n        with open(config_file, 'w'): pass  # Touch the file\n    config.read(config_file)\n    \n    if not config.has_section('SSHD'):\n        config.add_section('SSHD')\n    \n    # Set PermitRootLogin to no at the top of the file\n    with open(temp_file, 'w') as tf:\n        tf.write('PermitRootLogin no\\n')\n        for section in config.sections():\n            tf.write(f'\\n[{section}]\\n')\n            for option, value in config.items(section):\n                tf.write(f'{option} = {value}\\n')\n    \n    # Replace the original file with the temporary one\n    os.replace(temp_file, config_file)\n    print(f\"Updated '{config_file}' with 'PermitRootLogin no' at the top.\")\n    \n    # Restart sshd service\n    import subprocess\n    subprocess.run(['systemctl', 'restart', 'sshd'])\n    print(\"Restarted SSHD service.\")\n"
  },
  {
    "name": "Ensure sshd PermitUserEnvironment is disabled",
    "id": "5.1.21",
    "type": "Automated",
    "start_page": 553,
    "end_page": 554,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PermitUserEnvironment option allows users to present environment options to the SSH daemon.",
    "rationale": "Permitting users the ability to set environment variables through the SSH daemon could potentially allow users to bypass security controls (e.g. setting an execution path that has SSH executing trojan'd programs)",
    "audit_details": "Run the following command to verify PermitUserEnvironment is set to no: \n```\n# sshd -T | grep permituserenvironment\npermituserenvironment no\n```",
    "audit_code": "sshd -T | grep permituserenvironment",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the PermitUserEnvironment parameter to no above any Include entries as follows:\n```\nPermitUserEnvironment no\n```\n**Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.**",
    "remediation_code": "Edit /etc/ssh/sshd_config to set PermitUserEnvironment no",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if PermitUserEnvironment is disabled in sshd config.\n    \n    Returns:\n    bool: True if PermitUserEnvironment is set to no, False otherwise.\n    \"\"\"\n    # Run sshd config test and capture output\n    output = subprocess.check_output(['sshd', '-T']).decode('utf-8')\n    \n    # Search for the PermitUserEnvironment directive and its value\n    match = re.search(r'permituserenvironment\\s+(\\w+)', output, re.IGNORECASE)\n    \n    if match and match.group(1).lower() == 'no':\n        return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting PermitUserEnvironment to no.\n    \"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    include_found = False\n    lines_to_write = []\n    permit_user_env_set = False\n    \n    try:\n        with open(config_file, 'r') as file:\n            for line in file:\n                # Check if an 'Include' directive is encountered before setting the option\n                if line.strip().lower().startswith('include') and not permit_user_env_set:\n                    lines_to_write.append('PermitUserEnvironment no\\n')\n                    permit_user_env_set = True\n                    include_found = True\n                lines_to_write.append(line)\n        \n        # If no 'Include' entries were found, append the option at the end\n        if not include_found and not permit_user_env_set:\n            lines_to_write.append('PermitUserEnvironment no\\n')\n        \n        with open(config_file, 'w') as file:\n            file.writelines(lines_to_write)\n        \n        print(f\"Set 'PermitUserEnvironment no' in {config_file}\")\n    \n    except Exception as e:\n        print(f\"Remediation failed: {str(e)}\")\n"
  },
  {
    "name": "Ensure sshd UsePAM is enabled",
    "id": "5.1.22",
    "type": "Automated",
    "start_page": 555,
    "end_page": 556,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The UsePAM directive enables the Pluggable Authentication Module (PAM) interface. If set to yes this will enable PAM authentication using ChallengeResponseAuthentication and PasswordAuthentication directives in addition to PAM account and session module processing for all authentication types.",
    "rationale": "When usePAM is set to yes, PAM runs through account and session types properly. This is important if you want to restrict access to services based off of IP, time or other factors of the account. Additionally, you can make sure users inherit certain environment variables on login or disallow access to the server.",
    "audit_details": "Run the following command to verify UsePAM is set to yes:\n```\n# sshd -T | grep -i usepam\nusepam yes\n``",
    "audit_code": "sshd -T | grep -i usepam",
    "remediation_details": "Edit the /etc/ssh/sshd_config file to set the UsePAM parameter to yes above any\n```\nInclude entries as follows:\n```\nUsePAM yes\n```\n**Note: First occurrence of an option takes precedence. If Include locations are enabled, used, and order of precedence is understood in your environment, the entry may be created in a file in Include location.**",
    "remediation_code": "Edit /etc/ssh/sshd_config",
    "python_script": "\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if UsePAM is enabled in sshd_config.\n    \n    Returns:\n    bool: True if UsePAM is yes, False otherwise.\n    \"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    try:\n        with open(config_file, 'r') as file:\n            config_content = file.read()\n            # Search for UsePAM directive, case-insensitive\n            match = re.search(r'^\\s*UsePAM\\s+yes\\s*$', config_content, re.IGNORECASE | re.MULTILINE)\n            return match is not None\n    except FileNotFoundError:\n        print(f\"File {config_file} not found.\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred during audit: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by ensuring UsePAM is set to yes in sshd_config.\n    \"\"\"\n    config_file = '/etc/ssh/sshd_config'\n    try:\n        with open(config_file, 'r+') as file:\n            config_content = file.read()\n            # Check if UsePAM is already set to yes\n            if re.search(r'^\\s*UsePAM\\s+yes\\s*$', config_content, re.IGNORECASE | re.MULTILINE):\n                print(\"UsePAM is already set to yes. No changes needed.\")\n                return\n            \n            # Find the first occurrence of an Include entry or the end of the file\n            include_match = re.search(r'^\\s*Include', config_content, re.MULTILINE)\n            insert_position = include_match.start() if include_match else len(config_content)\n            \n            # Insert UsePAM yes above the first Include entry or at the end\n            new_content = config_content[:insert_position] + \"\\nUsePAM yes\\n\" + config_content[insert_position:]\n            \n            # Reset file pointer and overwrite the file\n            file.seek(0)\n            file.write(new_content)\n            file.truncate()\n            print(f\"Added 'UsePAM yes' to {config_file}.\")\n    except FileNotFoundError:\n        with open(config_file, 'w') as file:\n            file.write(\"UsePAM yes\\n\")\n            print(f\"Created {config_file} with 'UsePAM yes'.\")\n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n"
  },
  {
    "name": "Ensure sudo is installed",
    "id": "5.2.1",
    "type": "Automated",
    "start_page": 558,
    "end_page": 559,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo allows a permitted user to execute a command as the superuser or another user, as specified by the security policy. The invoking user's real (not effective) user ID is used to determine the user name with which to query the security policy.",
    "rationale": "sudo supports a plug-in architecture for security policies and input/output logging. Third parties can develop and distribute their own policy and I/O logging plug-ins to work seamlessly with the sudo front end. The default security policy is sudoers, which is configured via the file /etc/sudoers and any entries in /etc/sudoers.d. The security policy determines what privileges, if any, a user has to run sudo. The policy may require that users authenticate themselves with a password or another authentication mechanism. If authentication is required, sudo will exit if the user's password is not entered within a configurable time limit. This limit is policy-specific.",
    "audit_details": "Run the following command to verify that either sudo is installed:\n\n# dpkg-query -s sudo &>/dev/null && echo \"sudo is installed\"\nsudo is installed\n\n**- OR -**\nRun the following command to verify that either sudo-ldap is installed:\n\n# dpkg-query -s sudo-ldap &>/dev/null && echo \"sudo-ldap is installed\"\nsudo-ldap is installed",
    "audit_code": "# dpkg-query -s sudo &>/dev/null && echo \"sudo is installed\"\n# dpkg-query -s sudo-ldap &>/dev/null && echo \"sudo-ldap is installed\"",
    "remediation_details": "First determine is LDAP functionality is required. If so, then install sudo-ldap, else install sudo. \n_Example:_\n\n# apt install sudo",
    "remediation_code": "# apt install sudo",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Checks if sudo or sudo-ldap is installed.\n    \n    Returns:\n        bool: True if either sudo or sudo-ldap is installed, False otherwise.\n    \"\"\"\n    try:\n        # Check if sudo is installed\n        result_sudo = subprocess.run(['dpkg-query', '-s', 'sudo'], stdout=subprocess.DEVNULL)\n        # Check if sudo-ldap is installed\n        result_sudo_ldap = subprocess.run(['dpkg-query', '-s', 'sudo-ldap'], stdout=subprocess.DEVNULL)\n        \n        # If either returns 0 (success), the package is installed\n        if result_sudo.returncode == 0:\n            print(\"sudo is installed\")\n            return True\n        elif result_sudo_ldap.returncode == 0:\n            print(\"sudo-ldap is installed\")\n            return True\n        else:\n            print(\"Neither sudo nor sudo-ldap is installed\")\n            return False\n    except Exception as e:\n        print(f\"An error occurred during audit: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Installs sudo or sudo-ldap based on user input regarding LDAP functionality requirement.\n    \"\"\"\n    try:\n        ldap_required = input(\"Is LDAP functionality required? (yes/no): \")\n        if ldap_required.lower() == \"yes\":\n            # Install sudo-ldap if LDAP is required\n            subprocess.run(['apt', 'install', '-y', 'sudo-ldap'])\n            print(\"Installed sudo-ldap\")\n        else:\n            # Install sudo if LDAP is not required\n            subprocess.run(['apt', 'install', '-y', 'sudo'])\n            print(\"Installed sudo\")\n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure sudo commands use pty",
    "id": "5.2.2",
    "type": "Automated",
    "start_page": 560,
    "end_page": 562,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo can be configured to run only from a pseudo terminal (pseudo-pty).",
    "rationale": "Attackers can run a malicious program using sudo which would fork a background process that remains even when the main program has finished executing.",
    "audit_details": "Verify that sudo can only run other commands from a pseudo terminal. Run the following command to verify Defaults use_pty is set:\n\n# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*\n\nVerify the output matches:\n\n/etc/sudoers:Defaults use_pty\n\nRun the follow command to to verify Defaults !use_pty is not set:\n\n# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?!use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*\n\nNothing should be returned",
    "audit_code": "# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*\n\n# grep -rPi -- '^\n*Defaults\\h+([^#\\n\\r]+,)?!use_pty(,\\h*\\h+\\h*)*\\h*(#.*)?$'\n/etc/sudoers*",
    "remediation_details": "Edit the file /etc/sudoers with visudo or a file in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and add the following line:\n\nDefaults use_pty\n\nEdit the file /etc/sudoers with visudo and any files in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and remove any occurrence of !use_pty\n\nNote:\n- sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files.\n- Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second.\n- Be aware that because the sorting is lexical, not numeric, /etc/sudoers.d/1_whoops would be loaded after /etc/sudoers.d/10_second.\n- Using a consistent number of leading zeroes in the file names can be used to avoid such problems.",
    "remediation_code": "Edit the file /etc/sudoers with visudo or a file in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and add the following line:\n\nDefaults use_pty\n\nEdit the file /etc/sudoers with visudo and any files in /etc/sudoers.d/ with visudo -f <PATH TO FILE> and remove any occurrence of !use_pty.",
    "python_script": "\nimport glob\nimport subprocess\nimport tempfile\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit sudoers files for 'use_pty' setting.\"\"\"\n    sudoers_files = glob.glob('/etc/sudoers*')\n    use_pty_set = False\n    not_use_pty_set = False\n\n    for file in sudoers_files:\n        with open(file, 'r') as f:\n            for line in f:\n                if line.strip().startswith('Defaults') and 'use_pty' in line.split('#')[0]:\n                    use_pty_set = True\n                if line.strip().startswith('Defaults') and '!use_pty' in line.split('#')[0]:\n                    not_use_pty_set = True\n\n    return use_pty_set and not not_use_pty_set\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate sudoers files to ensure 'use_pty' is set.\"\"\"\n    # Add Defaults use_pty if it doesn't exist\n    with tempfile.NamedTemporaryFile(mode='w') as tmp:\n        tmp.write('Defaults use_pty\\n')\n        tmp.flush()\n        subprocess.run(['sudo', 'visudo', '-cf', tmp.name])\n        if subprocess.run(['sudo', 'visudo', '-qf', tmp.name]).returncode == 0:\n            subprocess.run(['sudo', 'visudo', '-f', '/etc/sudoers.d/99_use_pty'], input=tmp.read().encode())\n            print(\"Added 'Defaults use_pty' to /etc/sudoers.d/99_use_pty.\")\n\n    # Remove!use_pty from all sudoers files\n    for file in glob.glob('/etc/sudoers*'):\n        with open(file, 'r+') as f:\n            lines = f.readlines()\n            f.seek(0)\n            for line in lines:\n                if not line.strip().startswith('Defaults') or '!use_pty' not in line.split('#')[0]:\n                    f.write(line)\n            f.truncate()\n            if any('!use_pty' in line for line in lines) and not any('!use_pty' in line for line in open(file).readlines()):\n                print(f\"Removed '!use_pty' from {file}.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability detected. Initiating remediation...\")\n        remediate_vuln()\n    else:\n        print(\"System is secure. No remediation needed.\")\n"
  },
  {
    "name": "Ensure sudo log file exists",
    "id": "5.2.3",
    "type": "Automated",
    "start_page": 563,
    "end_page": 564,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo can use a custom log file",
    "rationale": "A sudo log file simplifies auditing of sudo commands",
    "audit_details": "Run the following command to verify that sudo has a custom log file configured:\n```\n# grep -rPsi\n\"^\\h*Defaults\\h+([^#]+,\\h*)?logfile\\h*=\\h*(\"|')?\\H+(\"|')?(,\\h*\\H+\\h*)*\\h*\n(#.*)?$\" /etc/sudoers*\n```\nVerify the output matches:\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```\n",
    "audit_code": "# grep -rPsi\n\"^\\h*Defaults\\h+([^#]+,\\h*)?logfile\\h*=\\h*(\"|')?\\H+(\"|')?(,\\h*\\H+\\h*)*\\h*\n(#.*)?$\" /etc/sudoers*\n",
    "remediation_details": "Edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo or visudo -f <PATH TO FILE> and add the following line:\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```\n**Note:**\n- sudo will read each file in /etc/sudoers.d, skipping file names that end in ~ or contain a . character to avoid causing problems with package manager or editor temporary/backup files.\n- Files are parsed in sorted lexical order. That is, /etc/sudoers.d/01_first will be parsed before /etc/sudoers.d/10_second.\n- Be aware that because the sorting is lexical, not numeric, /etc/sudoers.d/1_whoops would be loaded after /etc/sudoers.d/10_second.\n- Using a consistent number of leading zeroes in the file names can be used to avoid such problems.",
    "remediation_code": "Edit the file /etc/sudoers or a file in /etc/sudoers.d/ with visudo or visudo -f <PATH TO FILE> and add the following line:\n```\nDefaults logfile=\"/var/log/sudo.log\"\n```",
    "python_script": "\nimport re\nimport glob\nimport tempfile\nimport shutil\nimport subprocess\n\n# Constants\nLOG_FILE_PATH = \"/var/log/sudo.log\"\nSUDOERS_DIR = \"/etc/sudoers.d/\"\nSUDOERS_PATTERN = r\"^Defaults\\s+logfile\\s*=\\s*\\\"{}\\\"\".format(re.escape(LOG_FILE_PATH))\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if sudo has a custom log file configured.\"\"\"\n    for file in glob.glob(\"/etc/sudoers*\"):\n        try:\n            with open(file, 'r') as f:\n                for line in f:\n                    if re.match(SUDOERS_PATTERN, line):\n                        return True\n        except PermissionError:\n            print(f\"Permission denied reading {file}. Skipping...\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding a custom log file configuration for sudo.\"\"\"\n    # Choose a new file name in /etc/sudoers.d/ following lexical sorting convention\n    new_file_name = \"99_custom_logfile\"\n    new_file_path = SUDOERS_DIR + new_file_name\n\n    # Check if the file already exists to avoid overwriting\n    if glob.glob(new_file_path):\n        print(f\"File {new_file_path} already exists. Choosing alternative.\")\n        i = 1\n        while glob.glob(new_file_path + f\"_{i}\"):\n            i += 1\n        new_file_path += f\"_{i}\"\n\n    # Create a temporary file with the new configuration\n    with tempfile.TemporaryDirectory() as tmp_dir:\n        tmp_file_path = f\"{tmp_dir}/tmp_sudoers\"\n        with open(tmp_file_path, 'w') as tmp_file:\n            tmp_file.write(f\"Defaults logfile=\\\"{LOG_FILE_PATH}\\\"\\n\")\n        \n        # Validate and install the new sudoers file using visudo\n        try:\n            subprocess.run([\"visudo\", \"-f\", new_file_path], input=open(tmp_file_path, 'rb').read(), check=True)\n            print(f\"Added custom log file configuration to {new_file_path}.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"visudo validation failed for {new_file_path}: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"Custom sudo log file already configured.\")\n"
  },
  {
    "name": "Ensure re-authentication for privilege escalation is not disabled globally",
    "id": "5.2.5",
    "type": "Automated",
    "start_page": 567,
    "end_page": 568,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The operating system must be configured so that users must re-authenticate for privilege escalation.",
    "rationale": "Without re-authentication, users may access resources or perform tasks for which they do not have authorization. When operating systems provide the capability to escalate a functional capability, it is critical the user re-authenticate.",
    "audit_details": "Verify the operating system requires users to re-authenticate for privilege escalation. Check the configuration of the /etc/sudoers and /etc/sudoers.d/* files with the following command:\n```\n# grep -r \"^[^#].*!authenticate\" /etc/sudoers*\n```\nIf any line is found with a !authenticate tag, refer to the remediation procedure below.",
    "audit_code": "# grep -r \"^[^#].*!authenticate\" /etc/sudoers*",
    "remediation_details": "Configure the operating system to require users to reauthenticate for privilege escalation. Based on the outcome of the audit procedure, use visudo -f <PATH TO FILE> to edit the relevant sudoers file. Remove any occurrences of !authenticate tags in the file(s).",
    "remediation_code": "visudo -f <PATH TO FILE>",
    "python_script": "\nimport glob\nimport fileinput\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if!authenticate tag exists in sudoers files.\"\"\"\n    vulnerable = False\n    for file in glob.glob(\"/etc/sudoers*\"):\n        with open(file, 'r') as f:\n            for line in f:\n                if line.strip().startswith(\"#\"):  # Skip comments\n                    continue\n                if \"!authenticate\" in line:\n                    print(f\"Found!authenticate tag in {file}: {line.strip()}\")\n                    vulnerable = True\n    return vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Provide instructions to remediate the vulnerability.\"\"\"\n    print(\"Manual Remediation Steps (due to file sensitivity):\")\n    print(\"1. Use `visudo -f <PATH TO FILE>` to safely edit each affected file.\")\n    print(\"   Example: `visudo -f /etc/sudoers`\")\n    print(\"2. In the editor, remove any lines containing `!authenticate` tags.\")\n    print(\"3. Save and exit the editor. Visudo will check the syntax.\")\n    \n    # Alternative Automated Approach (Commented due to sensitivity of files):\n    # for file in glob.glob(\"/etc/sudoers*\"):\n    #     with fileinput.input(file, inplace=True) as f:\n    #         for line in f:\n    #             if \"!authenticate\" not in line:\n    #                 print(line, end='')\n    #     print(f\"Removed!authenticate tags from {file}. Please review manually.\")\n"
  },
  {
    "name": "Ensure sudo authentication timeout is configured correctly",
    "id": "5.2.6",
    "type": "Automated",
    "start_page": 569,
    "end_page": 570,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "sudo caches used credentials for a default of 15 minutes. This is for ease of use when there are multiple administrative tasks to perform. The timeout can be modified to suit local security policies. This default is distribution specific. See audit section for further information.",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized privileged access to another user.",
    "audit_details": "Ensure that the caching timeout is no more than 15 minutes. Example:\n\n# grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers*\n\nIf there is no timestamp_timeout configured in /etc/sudoers* then the default is 15 minutes. This default can be checked with:\n\n# sudo -V | grep \"Authentication timestamp timeout:\"\n\nNOTE: A value of -1 means that the timeout is disabled. Depending on the configuration of the timestamp_type, this could mean for all terminals / processes of that user and not just that one single terminal session.",
    "audit_code": "# grep -roP \"timestamp_timeout=\\K[0-9]*\" /etc/sudoers*\n# sudo -V | grep \"Authentication timestamp timeout:\"",
    "remediation_details": "If the currently configured timeout is larger than 15 minutes, edit the file listed in the audit section with visudo -f <PATH TO FILE> and modify the entry timestamp_timeout= to 15 minutes or less as per your site policy. The value is in minutes. This particular entry may appear on its own, or on the same line as env_reset. See the following two examples:\nDefaults  env_reset, timestamp_timeout=15\nDefaults  timestamp_timeout=15\nDefaults  env_reset\n",
    "remediation_code": "visudo -f <PATH TO FILE> \n# Modify timestamp_timeout=",
    "python_script": "\nimport re\nimport subprocess\nimport tempfile\n\n# Constants\nMAX_TIMEOUT = 15  # in minutes\nSUDOERS_FILES = ['/etc/sudoers', '/etc/sudoers.d/*']  # glob pattern for sudoers files\nDEFAULT_TIMEOUT_CHECK_CMD = 'sudo -V'\nDEFAULT_TIMEOUT_REGEX = r'Authentication timestamp timeout: ([0-9]+)'\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit sudo authentication timeout configuration.\"\"\"\n    # Check sudoers files for timestamp_timeout\n    for file in glob.glob(SUDOERS_FILES[0]) + glob.glob(SUDOERS_FILES[1], recursive=True):\n        try:\n            with open(file, 'r') as f:\n                content = f.read()\n                match = re.search(r'timestamp_timeout=([0-9]+)', content)\n                if match:\n                    timeout = int(match.group(1))\n                    if timeout > MAX_TIMEOUT:\n                        print(f\"Found {file} with timestamp_timeout set to {timeout} minutes, which exceeds the limit.\")\n                        return False\n        except PermissionError:\n            print(f\"Permission denied for reading {file}, skipping...\")\n    \n    # If not found, check the default timeout\n    default_timeout_output = subprocess.check_output(DEFAULT_TIMEOUT_CHECK_CMD, shell=True).decode('utf-8')\n    default_timeout_match = re.search(DEFAULT_TIMEOUT_REGEX, default_timeout_output)\n    if default_timeout_match:\n        default_timeout = int(default_timeout_match.group(1))\n        if default_timeout > MAX_TIMEOUT:\n            print(f\"Default authentication timestamp timeout is {default_timeout} minutes, which exceeds the limit.\")\n            return False\n    \n    print(\"All sudo authentication timeouts are within the 15-minute limit.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate sudo authentication timeout configuration if it exceeds the limit.\"\"\"\n    for file in glob.glob(SUDOERS_FILES[0]) + glob.glob(SUDOERS_FILES[1], recursive=True):\n        try:\n            with open(file, 'r+') as f:\n                content = f.read()\n                match = re.search(r'(Defaults.*?)(,?)\\s*(timestamp_timeout=[0-9]+)?', content)\n                if match:\n                    group1, separator, _ = match.groups()\n                    newline = f\"{group1}{separator} timestamp_timeout={MAX_TIMEOUT}\" if separator else f\"{group1}, timestamp_timeout={MAX_TIMEOUT}\"\n                    new_content = content.replace(match.group(0), newline)\n                    # Simulating safe edit with visudo (real editing requires interactive visudo for safety)\n                    print(f\"Simulating edit of {file} to set timestamp_timeout to {MAX_TIMEOUT} minutes:\")\n                    print(new_content)\n                    # For actual modification, ideally use visudo interactively or handle its output, which is complex in a script\n                    # subprocess.run(['visudo', '-f', file], input=new_content.encode())\n                else:\n                    print(f\"No timestamp_timeout found in {file} to remediate; consider adding 'Defaults timestamp_timeout={MAX_TIMEOUT}'\")\n        except PermissionError:\n            print(f\"Permission denied for editing {file}, skipping remediation...\")\n\nimport glob  # Importing at the bottom due to its usage being within the code block above\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure access to the su command is restricted",
    "id": "5.2.7",
    "type": "Automated",
    "start_page": 571,
    "end_page": 572,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The su command allows a user to run a command or shell as another user. The program has been superseded by sudo, which allows for more granular control over privileged access. Normally, the su command can be executed by any user. By uncommenting the pam_wheel.so statement in /etc/pam.d/su, the su command will only allow users in a specific groups to execute su. This group should be empty to reinforce the use of sudo for privileged access.",
    "rationale": "Restricting the use of su, and using sudo in its place, provides system administrators better control of the escalation of user privileges to execute privileged commands. The sudo utility also provides a better logging and audit mechanism, as it can log each command executed via sudo, whereas su can only record that a user executed the su program.",
    "audit_details": "Run the following command:\n```\n# grep -Pi '^\th*auth\th+(?:required|requisite)\th+pam_wheel\\.so\th+(?:[^#\\n\\r]+\\h+)?((?!\\2)(use_uid\\b|group=\\H+\\b))\\h+(?:[^#\\n\\r]+\\h+)?((?!\\1)(use_uid\\b|group=\\H+\\b))(\\h+.*)?$' /etc/pam.d/su\n```\n\nVerify the output matches:\n```\nauth required pam_wheel.so use_uid group=<group_name>\n```\n\nRun the following command and verify that the group specified in <group_name> contains no users:\n```\n# grep <group_name> /etc/group\n```\n\nVerify the output does not contain any users in the relevant group:\n```\n<group_name>:x:<GID>:\n```\n",
    "audit_code": "# grep -Pi '^\th*auth\th+(?:required|requisite)\th+pam_wheel\\.so\th+(?:[^#\\n\\r]+\\h+)?((?!\\2)(use_uid\\b|group=\\H+\\b))\\h+(?:[^#\\n\\r]+\\h+)?((?!\\1)(use_uid\\b|group=\\H+\\b))(\\h+.*)?$' /etc/pam.d/su\n# grep <group_name> /etc/group",
    "remediation_details": "Create an empty group that will be specified for use of the su command. The group should be named according to site policy.\nExample:\n```\n# groupadd sugroup\n```\n\nAdd the following line to the /etc/pam.d/su file, specifying the empty group:\n```\nauth required pam_wheel.so use_uid group=sugroup\n```\n",
    "remediation_code": "# groupadd sugroup\nauth required pam_wheel.so use_uid group=sugroup",
    "python_script": "\nimport subprocess\nimport re\n\n# Constants\nGROUP_NAME = \"sugroup\"\nSU_PAM_FILE = \"/etc/pam.d/su\"\nGROUP_FILE = \"/etc/group\"\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if access to the su command is restricted.\n    \n    Returns:\n        bool: True if the vulnerability is present, False otherwise\n    \"\"\"\n    try:\n        with open(SU_PAM_FILE, 'r') as file:\n            pam_content = file.read()\n            pattern = r\"^auth\\s+required\\s+pam_wheel\\.so\\s+use_uid\\s+group=\" + GROUP_NAME\n            if re.search(pattern, pam_content, re.MULTILINE):\n                with open(GROUP_FILE, 'r') as group_file:\n                    group_content = group_file.read()\n                    pattern = fr\"{GROUP_NAME}:x:\\d+:.*\"  # Check if group exists and has no users\n                    if re.search(pattern, group_content):\n                        # Group exists and has no users, vulnerability is not present\n                        return False\n    except FileNotFoundError:\n        print(f\"Error: File not found during audit - {SU_PAM_FILE} or {GROUP_FILE}\")\n    # Vulnerability is present or an error occurred\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by creating an empty group and restricting su access.\n    \"\"\"\n    try:\n        # Create an empty group\n        subprocess.run([\"groupadd\", GROUP_NAME])\n        print(f\"Created empty group '{GROUP_NAME}'\")\n        \n        # Add pam_wheel.so line to /etc/pam.d/su\n        with open(SU_PAM_FILE, 'a') as file:\n            file.write(f\"auth required pam_wheel.so use_uid group={GROUP_NAME}\\n\")\n        print(f\"Added 'auth required pam_wheel.so use_uid group={GROUP_NAME}' to {SU_PAM_FILE}\")\n        \n    except subprocess.CalledProcessError as e:\n        print(f\"Error executing command: {e.cmd} - {e.output}\")\n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n"
  },
  {
    "name": "Ensure latest version of pam is installed",
    "id": "5.3.1.1",
    "type": "Automated",
    "start_page": 575,
    "end_page": 575,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Updated versions of PAM include additional functionality",
    "rationale": "To ensure the system has full functionality and access to the options covered by this Benchmark the latest version of libpam-runtime should be installed on the system",
    "audit_details": "Run the following command to verify the version of libpam-runtime on the system:\n\n```\n# dpkg-query -s libpam-runtime | grep -P -- '^(Status|Version)\\b'\n```\n\nThe output should be similar to:\n```\nStatus: install ok installed\nVersion: 1.4.0-9\n```\n",
    "audit_code": "# dpkg-query -s libpam-runtime | grep -P -- '^(Status|Version)\\b'",
    "remediation_details": "- IF - the version of libpam-runtime on the system is less than version 1.5.2-6:\nRun the following command to update to the latest version of PAM:\n\n```\n# apt upgrade libpam-runtime\n```",
    "remediation_code": "# apt upgrade libpam-runtime",
    "python_script": "\nimport subprocess\nimport packaging.version\n\n# Define the minimum required version\nMIN_REQUIRED_VERSION = \"1.5.2-6\"\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if the latest version of libpam-runtime is installed\"\"\"\n    try:\n        # Execute dpkg-query to get the installed version\n        output = subprocess.check_output([\"dpkg-query\", \"-s\", \"libpam-runtime\"])\n        # Parse the output to extract the version\n        for line in output.decode(\"utf-8\").splitlines():\n            if line.startswith(\"Version: \"):\n                installed_version = line.split(\": \")[1].strip()\n                # Compare the installed version with the minimum required version\n                return packaging.version.parse(installed_version) >= packaging.version.parse(MIN_REQUIRED_VERSION)\n    except (subprocess.CalledProcessError, IndexError):\n        # Handle errors and return False (i.e., audit failed)\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by upgrading libpam-runtime to the latest version\"\"\"\n    if not audit_vuln():  # Check if remediation is needed\n        print(f\"Upgrading libpam-runtime to the latest version (>= {MIN_REQUIRED_VERSION})...\")\n        try:\n            # Execute apt upgrade for libpam-runtime\n            subprocess.check_call([\"apt\", \"upgrade\", \"libpam-runtime\", \"-y\"])\n            print(\"Upgrade of libpam-runtime completed.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error upgrading libpam-runtime: {e}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found. libpam-runtime is up-to-date.\")\n"
  },
  {
    "name": "Ensure libpam-modules is installed",
    "id": "5.3.1.2",
    "type": "Automated",
    "start_page": 576,
    "end_page": 576,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Pluggable Authentication Modules for PAM",
    "rationale": "To ensure the system has full functionality and access to the PAM options covered by this Benchmark",
    "audit_details": "Run the following command to verify libpam-modules is installed and version 1.5.2-6 or later:\n\n```\n# dpkg-query -s libpam-modules | grep -P -- '^(Status|Version)\\b'\n\n```\n\nThe output should be similar to:\n```\nStatus: install ok installed\nVersion: 1.4.0-9\n\n```\n",
    "audit_code": "# dpkg-query -s libpam-modules | grep -P -- '^(Status|Version)\\b'",
    "remediation_details": "**- IF - the version of libpam-modules on the system is less that version 1.5.2-6:**\nRun the following command to update to the latest version of PAM:\n\n```\n# apt upgrade libpam-modules\n\n```\n",
    "remediation_code": "# apt upgrade libpam-modules",
    "python_script": "\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if libpam-modules is installed with version 1.5.2-6 or later.\"\"\"\n    command = [\"dpkg-query\", \"-s\", \"libpam-modules\"]\n    output = subprocess.check_output(command).decode('utf-8')\n    \n    # Parse output for Status and Version\n    status_match = re.search(r'Status: (.*)', output)\n    version_match = re.search(r'Version: (.*)', output)\n    \n    if status_match and version_match:\n        status = status_match.group(1).strip()\n        version = version_match.group(1).strip()\n        \n        # Check if installed and version is 1.5.2-6 or later\n        if status == \"install ok installed\" and version >= \"1.5.2-6\":\n            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by upgrading libpam-modules to the latest version if necessary.\"\"\"\n    if not audit_vuln():\n        # Upgrade libpam-modules\n        command = [\"apt\", \"upgrade\", \"libpam-modules\", \"-y\"]  # -y for yes to all prompts\n        subprocess.check_call(command)\n        print(\"Upgraded libpam-modules to the latest version.\")\n    else:\n        print(\"libpam-modules is already up to date or not installed. No action taken.\")\n\nif __name__ == \"__main__\":\n    print(\"Audit Result:\", \"Vulnerable\" if not audit_vuln() else \"Compliant\")\n    remediate_vuln()\n"
  },
  {
    "name": "Ensure libpam-pwquality is installed",
    "id": "5.3.1.3",
    "type": "Automated",
    "start_page": 577,
    "end_page": 577,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "libpwquality provides common functions for password quality checking and scoring them based on their apparent randomness. The library also provides a function for generating random passwords with good pronounceability. This module can be plugged into the password stack of a given service to provide some plug-in strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options.",
    "rationale": "Strong passwords reduce the risk of systems being hacked through brute force methods.",
    "audit_details": "Run the following command to verify libpam-pwquality is installed:\n```\n# dpkg-query -s libpam-pwquality | grep -P -- '^(Status|Version)\\b'\n```\nThe output should be similar to:\n```\nStatus: install ok installed\nVersion: 1.4.4-1\n```",
    "audit_code": "# dpkg-query -s libpam-pwquality | grep -P -- '^(Status|Version)\\b'",
    "remediation_details": "Run the following command to install libpam-pwquality:\n```\n# apt install libpam-pwquality\n```",
    "remediation_code": "# apt install libpam-pwquality",
    "python_script": "\nimport apt\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if libpam-pwquality is installed.\"\"\"\n    cache = apt.Cache()\n    return cache['libpam-pwquality'].is_installed\n\ndef remediate_vuln() -> None:\n    \"\"\"Install libpam-pwquality if it's not already installed.\"\"\"\n    cache = apt.Cache()\n    if not cache['libpam-pwquality'].is_installed:\n        print(\"Installing libpam-pwquality package...\")\n        cache['libpam-pwquality'].mark_install()\n        try:\n            cache.commit()\n            print(\"Successfully installed libpam-pwquality.\")\n        except Exception as e:\n            print(f\"Failed to install libpam-pwquality: {e}\")\n    else:\n        print(\"libpam-pwquality is already installed. No action taken.\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"Audit: libpam-pwquality is already installed.\")\n"
  },
  {
    "name": "Ensure pam_unix module is enabled",
    "id": "5.3.2.1",
    "type": "Automated",
    "start_page": 579,
    "end_page": 580,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "pam_unix is the standard Unix authentication module. It uses standard calls from the system's libraries to retrieve and set account information as well as authentication. Usually this is obtained from the /etc/passwd and if shadow is enabled, the /etc/shadow file as well.\n\nThe account component performs the task of establishing the status of the user's account and password based on the following shadow elements: expire, last_change, max_change, min_change, warn_change. In the case of the latter, it may offer advice to the user on changing their password or, through the PAM_AUTHTOKEN_REQD return, delay giving service to the user until they have established a new password. The entries listed above are documented in the shadow(5) manual page. Should the user's record not contain one or more of these entries, the corresponding shadow check is not performed.\n\nThe authentication component performs the task of checking the users credentials (password). The default action of this module is to not permit the user access to a service if their official password is blank.",
    "rationale": "The system should only provide access after performing authentication of a user.",
    "audit_details": "Run the following command to verify that pam_unix is enabled:\n# grep -P -- '\\bpam_unix\\.so\\b' /etc/pam.d/common{account,session,auth,password}\nOutput should be simular to:\n/etc/pam.d/common-account:account  [success=1 new_authtok_reqd=done default=ignore]  pam_unix.so\n/etc/pam.d/common-session:session  required  pam_unix.so\n/etc/pam.d/common-auth:auth  [success=2 default=ignore]  pam_unix.so try_first_pass\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt",
    "audit_code": "# grep -P -- '\\bpam_unix\\.so\\b' /etc/pam.d/common{account,session,auth,password}",
    "remediation_details": "Run the following command to enable the pam_unix module:\n# pam-auth-update --enable unix\n\nNote: If a site specific custom profile is being used in your environment to configure PAM that includes the configuration for the pam_faillock module, enable that module instead",
    "remediation_code": "# pam-auth-update --enable unix",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if pam_unix module is enabled in PAM configuration files.\n    \n    Returns:\n        bool: True if pam_unix.so is enabled, False otherwise\n    \"\"\"\n    config_files = ['/etc/pam.d/common-account', '/etc/pam.d/common-session', \n                    '/etc/pam.d/common-auth', '/etc/pam.d/common-password']\n    enabled = True\n    \n    for file in config_files:\n        try:\n            with open(file, 'r') as f:\n                if 'pam_unix.so' not in f.read():\n                    enabled = False\n                    break\n        except FileNotFoundError:\n            enabled = False\n            break\n    \n    return enabled\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Enable the unix module using pam-auth-update if it's not already enabled.\n    \"\"\"\n    if not audit_vuln():\n        print(\"Enabling unix module using pam-auth-update...\")\n        subprocess.run(['pam-auth-update', '--enable', 'unix'])\n        print(\"unix module enabled for PAM.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found. pam_unix.so is enabled.\")\n"
  },
  {
    "name": "Ensure pam_faillock module is enabled",
    "id": "5.3.2.2",
    "type": "Automated",
    "start_page": 581,
    "end_page": 583,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_faillock.so module maintains a list of failed authentication attempts per user during a specified interval and locks the account in case there were more than the configured number of consecutive failed authentications (this is defined by the deny parameter in the faillock configuration). It stores the failure records into per-user files in the tally directory.",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit_details": "Run the following commands to verify that pam_faillock is enabled:\n\n```\n# grep -P -- '\\bpam_faillock\\.so\\b' /etc/pam.d/common-{auth,account}\n```\n\n### Output should be similar to:\n```\n/etc/pam.d/common-auth:auth   requisite           pam_faillock.so preauth\n/etc/pam.d/common-auth:auth   [default=die]         pam_faillock.so authfail\n/etc/pam.d/common-account:account    required            pam_faillock.so\n```\nPage 580",
    "audit_code": "# grep -P -- '\\bpam_faillock\\.so\\b' /etc/pam.d/common-{auth,account}",
    "remediation_details": "Create two pam-auth-update profiles in /usr/share/pam-configs/: Create the first profile with the following lines:\n```\nName: Enable pam_faillock to deny access\nDefault: yes\nPriority: 0\nAuth-Type: Primary\nAuth:\n    [default=die]          pam_faillock.so authfail\n```\n\n Example:\n#!/usr/bin/env bash\n{\n  arr=('Name: Enable pam_faillock to deny access' 'Default: yes' 'Priority:\n0' 'Auth-Type: Primary' 'Auth:' '    [default=die]         pam_faillock.so authfail') \n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/faillock\n}\n\n Create the second profile with the following lines:\nName: Notify of failed login attempts and reset count upon success\nDefault: yes\nPriority: 1024\nAuth-Type: Primary\nAuth:\n    requisite            pam_faillock.so preauth\nAccount-Type: Primary\nAccount:\n    required            pam_faillock.so\n\n Example:\n#!/usr/bin/env bash\n{\n  arr=('Name: Notify of failed login attempts and reset count upon success'\n'Default: yes' 'Priority: 1024' 'Auth-Type: Primary' 'Auth:' '    requisite            pam_faillock.so preauth' 'Account-Type:\nPrimary' 'Account:' '    required            pam_faillock.so') \n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/faillock_notify\n}\n\nRun the following command to update the common-auth and common-account PAM files with the new profiles:\n\n```\n# pam-auth-update --enable <profile_filename>\n```\n\n### Example:\n```\n# pam-auth-update --enable faillock\n# pam-auth-update --enable faillock_notify\n```\nPage 581",
    "remediation_code": "# pam-auth-update --enable faillock\n# pam-auth-update --enable faillock_notify",
    "python_script": "\nimport pathlib\nimport subprocess\n\n# Expected lines for auditing\nEXPECTED_AUTH_LINES = [\n    \"auth   requisite           pam_faillock.so preauth\",\n    \"auth   [default=die]         pam_faillock.so authfail\"\n]\nEXPECTED_ACCOUNT_LINE = \"account    required            pam_faillock.so\"\n\n# Profile contents for remediation\nFAILLOCK_PROFILE = \"\"\"\\\nName: Enable pam_faillock to deny access\nDefault: yes\nPriority: 0\nAuth-Type: Primary\nAuth:\n    [default=die]          pam_faillock.so authfail\n\"\"\"\n\nFAILLOCK_NOTIFY_PROFILE = \"\"\"\\\nName: Notify of failed login attempts and reset count upon success\nDefault: yes\nPriority: 1024\nAuth-Type: Primary\nAuth:\n    requisite            pam_faillock.so preauth\nAccount-Type: Primary\nAccount:\n    required            pam_faillock.so\n\"\"\"\n\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if pam_faillock is enabled.\"\"\"\n    common_auth_path = pathlib.Path(\"/etc/pam.d/common-auth\")\n    common_account_path = pathlib.Path(\"/etc/pam.d/common-account\")\n\n    if not (common_auth_path.is_file() and common_account_path.is_file()):\n        return False  # Files do not exist, consider vulnerable\n\n    with common_auth_path.open('r') as auth_file:\n        auth_lines = [line.strip() for line in auth_file.readlines()]\n        if not all(expected in auth_lines for expected in EXPECTED_AUTH_LINES):\n            return False  # Expected auth lines not found\n\n    with common_account_path.open('r') as account_file:\n        account_lines = [line.strip() for line in account_file.readlines()]\n        if EXPECTED_ACCOUNT_LINE not in account_lines:\n            return False  # Expected account line not found\n\n    return True  # All expected lines found, consider not vulnerable\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by enabling pam_faillock.\"\"\"\n    profiles_dir = pathlib.Path(\"/usr/share/pam-configs/\")\n\n    # Create faillock profile\n    faillock_path = profiles_dir / \"faillock\"\n    with faillock_path.open('w') as f:\n        f.write(FAILLOCK_PROFILE)\n    print(f\"Created {faillock_path} profile.\")\n\n    # Create faillock_notify profile\n    faillock_notify_path = profiles_dir / \"faillock_notify\"\n    with faillock_notify_path.open('w') as f:\n        f.write(FAILLOCK_NOTIFY_PROFILE)\n    print(f\"Created {faillock_notify_path} profile.\")\n\n    # Enable profiles using pam-auth-update\n    for profile in [\"faillock\", \"faillock_notify\"]:\n        subprocess.run([\"pam-auth-update\", \"--enable\", profile])\n        print(f\"Enabled {profile} profile via pam-auth-update.\")\n"
  },
  {
    "name": "Ensure pam_pwquality module is enabled",
    "id": "5.3.2.3",
    "type": "Automated",
    "start_page": 584,
    "end_page": 586,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_pwquality.so module performs password quality checking. This module can be plugged into the password stack of a given service to provide strength-checking for passwords. The code was originally based on pam_cracklib module and the module is backwards compatible with its options.\n\nThe action of this module is to prompt the user for a password and check its strength against a system dictionary and a set of rules for identifying poor choices.\n\nThe first action is to prompt for a single password, check its strength and then, if it is considered strong, prompt for the password a second time (to verify that it was typed correctly on the first occasion). All being well, the password is passed on to subsequent modules to be installed as the new authentication token.",
    "rationale": "Use of a unique, complex passwords helps to increase the time and resources required to compromise the password.",
    "audit_details": "Run the following command to verify that pam_pwhistory is enabled:\n\n```\n# grep -P -- '\\bpam_pwquality\\.so\\b' /etc/pam.d/common-password\n```\n\nOutput should be similar to:\n\n```\npassword  requisite  pam_pwquality.so retry=3\n```\n\nPage 583",
    "audit_code": "# grep -P -- '\\bpam_pwquality\\.so\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following script to verify the pam_pwquality.so line exists in a pam-auth-update profile:\n\n```\n# grep -P -- '\\bpam_pwquality\\.so\\b' /usr/share/pam-configs/*\n```\n\nOutput should be similar to:\n```\n/usr/share/pam-configs/pwquality:    requisite           pam_pwquality.so retry=3\n/usr/share/pam-configs/pwquality:    requisite           pam_pwquality.so retry=3\n```\n\n**- IF - similar output is returned:**\nRun the following command to update /etc/pam.d/common-password with the returned profile:\n```\n# pam-auth-update --enable {PROFILE_NAME}\n```\n\n_Example:_\n```\n# pam-auth-update pwquality\n```\n\n**- IF - similar output is NOT returned:**\nRun the following script to create a pam-auth-update profile for pwquality:\n```\n!#/usr/bin/env bash\n{\n  arr=('Name: Pwquality password strength checking' 'Default: yes'\n'Priority: 1024' 'Conflicts: cracklib' 'Password-Type: Primary' 'Password:' '    requisite            pam_pwquality.so retry=3' 'Password-Initial:'\n'requisite')\n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwquality\n}\n```\nRun the following command to update /etc/pam.d/common-password with the pwquality profile:\n```\n# pam-auth-update --enable pwquality\n```\n\n**Note:**\n\n  - The name used for the file must be used in the pam-auth-update --enable command\n\n  - The Name: line should be easily recognizable and understood\n\n  - The Priority: Line is important as it effects the order of the lines in the\n```\n    /etc/pam.d/ files\n```\n  - If a site specific custom profile is being used in your environment to configure PAM that includes the configuration for the pam_pwquality module, enable that module instead\n\nPage 584",
    "remediation_code": "# grep -P -- '\\bpam_pwquality\\.so\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport os\nimport glob\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if pam_pwquality.so is enabled in /etc/pam.d/common-password\"\"\"\n    with open(\"/etc/pam.d/common-password\", \"r\") as file:\n        for line in file:\n            if \"pam_pwquality.so\" in line:\n                return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Enable pam_pwquality.so module if not already enabled\"\"\"\n    # Check if pam_pwquality.so line exists in a pam-auth-update profile\n    profiles = glob.glob(\"/usr/share/pam-configs/*\")\n    pwquality_profile = next((p for p in profiles if \"pam_pwquality.so\" in open(p).read()), None)\n    \n    if pwquality_profile:\n        profile_name = os.path.basename(pwquality_profile)\n        print(f\"Enabling existing pam-auth-update profile: {profile_name}\")\n        subprocess.run([\"pam-auth-update\", \"--enable\", profile_name])\n    else:\n        print(\"Creating new pam-auth-update profile for pwquality...\")\n        profile_content = [\n            \"Name: Pwquality password strength checking\",\n            \"Default: yes\",\n            \"Priority: 1024\",\n            \"Conflicts: cracklib\",\n            \"Password-Type: Primary\",\n            \"Password: requisite            pam_pwquality.so retry=3\",\n            \"Password-Initial: requisite\"\n        ]\n        with open(\"/usr/share/pam-configs/pwquality\", \"w\") as file:\n            file.write(\"\\n\".join(profile_content))\n        print(\"Enabling newly created pwquality profile...\")\n        subprocess.run([\"pam-auth-update\", \"--enable\", \"pwquality\"])\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure pam_pwhistory module is enabled",
    "id": "5.3.2.4",
    "type": "Automated",
    "start_page": 587,
    "end_page": 589,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_pwhistory.so module saves the last passwords for each user in order to force password change history and keep the user from alternating between the same password too frequently.\n\nThis module does not work together with kerberos. In general, it does not make much sense to use this module in conjunction with NIS or LDAP, since the old passwords are stored on the local machine and are not available on another machine for password history checking.",
    "rationale": "Use of a unique, complex passwords helps to increase the time and resources required to compromise the password.",
    "audit_details": "Run the following command to verify that pam_pwhistory is enabled:\n\n```\n# grep -P -- '\\bpam_pwhistory\\.so\\b' /etc/pam.d/common-password\n```\n\nOutput should be similar to:\n```\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root\ntry_first_pass use_authtok\n```\n\nPage 586",
    "audit_code": "# grep -P -- '\\bpam_pwhistory\\.so\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following script to verify the pam_pwquality.so line exists in a pam-auth-update profile:\n\n```\n# grep -P -- '\\bpam_pwhistory\\.so\\b' /usr/share/pam-configs/*\n```\n\nOutput should be similar to:\n```\n/usr/share/pam-configs/pwhistory:  requisite  pam_pwhistory.so remember=24\nenforce_for_root try_first_pass use_authtok\n```\n\n**- IF - similar output is returned:**\nRun the following command to update /etc/pam.d/common-password with the returned profile:\n```\n# pam-auth-update --enable {PROFILE_NAME}\n```\n\n_Example:_\n```\n# pam-auth-update pwhistory\n```\n\n**- IF - similar output is NOT returned:**\nRun the following script to create a pam-auth-update profile for pwhistory:\n```\n!/usr/bin/env bash\n{\n  arr=('Name: pwhistory password history checking' 'Default: yes' 'Priority:\n1024' 'Password-Type: Primary' 'Password:' '    requisite           \npam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok')\n  printf '%s\\n' \"${arr[@]}\" > /usr/share/pam-configs/pwhistory\n}\n```\nRun the following command to update /etc/pam.d/common-password with the pwhistory profile:\n```\n# pam-auth-update --enable pwhistory\n```\n\n**Note:**\n\n  - The name used for the file must be used in the pam-auth-update --enable\ncommand\n\n  - The Name: line should be easily recognizable and understood\n\n  - The Priority: Line is important as it effects the order of the lines in the\n```\n    /etc/pam.d/ files\n```\n\n  - If a site specific custom profile is being used in your environment to configure\nPAM that includes the configuration for the pam_pwhistory module, enable that\nmodule instead\n\nPage 587",
    "remediation_code": "# grep -P -- '\\bpam_pwhistory\\.so\\b' /usr/share/pam-configs/*\n# pam-auth-update --enable {PROFILE_NAME}",
    "python_script": "\nimport pathlib\nimport subprocess\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if pam_pwhistory module is enabled\"\"\"\n    common_password_file = pathlib.Path('/etc/pam.d/common-password')\n    pattern = r'\\bpam_pwhistory\\.so\\b'\n    try:\n        content = common_password_file.read_text()\n        return bool(re.search(pattern, content))\n    except Exception as e:\n        print(f\"Error during audit: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate if pam_pwhistory module is not enabled\"\"\"\n    pam_configs_dir = pathlib.Path('/usr/share/pam-configs/')\n    profile_pattern = r'\\bpam_pwhistory\\.so\\b'\n    existing_profile = None\n\n    # Check if a matching profile already exists\n    for profile_file in pam_configs_dir.glob('*'):\n        try:\n            content = profile_file.read_text()\n            if re.search(profile_pattern, content):\n                existing_profile = profile_file.name\n                break\n        except Exception as e:\n            print(f\"Error checking profile {profile_file}: {e}\")\n\n    if existing_profile:\n        print(f\"Enabling existing profile: {existing_profile}\")\n        subprocess.run(['pam-auth-update', '--enable', existing_profile])\n    else:\n        # Create a new profile\n        new_profile_name = 'pwhistory'\n        new_profile_content = \"\\n\".join([\n            'Name: pwhistory password history checking',\n            'Default: yes',\n            'Priority: 1024',\n            'Password-Type: Primary',\n            'Password: requisite pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok'\n        ])\n        new_profile_file = pam_configs_dir / new_profile_name\n        new_profile_file.write_text(new_profile_content)\n        print(f\"Created new profile: {new_profile_name}\")\n        subprocess.run(['pam-auth-update', '--enable', new_profile_name])\n"
  },
  {
    "name": "Ensure password failed attempts lockout is configured",
    "id": "5.3.3.1.1",
    "type": "Automated",
    "start_page": 592,
    "end_page": 593,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The deny=<n> option will deny access if the number of consecutive authentication failures for this user during the recent interval exceeds.",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit_details": "Run the following command to verify that Number of failed logon attempts before the account is locked is no greater than 5 and meets local site policy:\n```\n# grep -Pi -- '^\n\\h*deny\\h*=\\h*[1-5]\\b' /etc/security/faillock.conf\ndeny = 5\n```\nRun the following command to verify that the deny argument has not been set, or 5 or less and meets local site policy:\n```\n# grep -Pi -'^\n\\h*auth\\h+(requisite|required|sufficient)\\h+pam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?deny\\h*=\\h*(0|[6-9]|[1-9][0-9]+)\\b' /etc/pam.d/common-auth\nNothing should be returned\n``",
    "audit_code": "# grep -Pi -- '^\n\\h*deny\\h*=\\h*[1-5]\\b' /etc/security/faillock.conf\ndeny = 5\n\n# grep -Pi -'^\n\\h*auth\\h+(requisite|required|sufficient)\\h+pam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?deny\\h*=\\h*(0|[6-9]|[1-9][0-9]+)\\b' /etc/pam.d/common-auth\nNothing should be returned",
    "remediation_details": "Create or edit the following line in /etc/security/faillock.conf setting the deny option to 5 or less:\n```\ndeny = 5\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?deny\\b' /usr/share/pamconfigs/*\n```\nEdit any returned files and remove the deny=<N> arguments from the pam_faillock.so line(s):",
    "remediation_code": "# grep -Pl -- '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?deny\\b' /usr/share/pamconfigs/*",
    "python_script": "\nimport pathlib\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit password failed attempts lockout configuration.\"\"\"\n    faillock_conf = pathlib.Path('/etc/security/faillock.conf')\n    common_auth = pathlib.Path('/etc/pam.d/common-auth')\n\n    # Check 1: deny option in faillock.conf\n    with faillock_conf.open('r') as file:\n        for line in file:\n            match = re.match(r'^\\s*deny\\s*=\\s*(\\d+)\\s*$', line)\n            if match:\n                if 1 <= int(match.group(1)) <= 5:\n                    print(f\"Found acceptable deny value ({match.group(1)}) in {faillock_conf}.\")\n                else:\n                    print(f\"Unacceptable deny value ({match.group(1)}) in {faillock_conf}.\")\n                    return False\n                break\n        else:\n            print(f\"No deny option found in {faillock_conf}.\")\n            return False\n\n    # Check 2: deny argument in common-auth for pam_faillock.so\n    with common_auth.open('r') as file:\n        for line in file:\n            if re.search(r'\\bpam_faillock\\.so\\s+[^#]*\\bdeny\\s*=\\s*(0|[6-9]|[1-9][0-9]+)\\b', line):\n                print(f\"Found unacceptable deny argument in {common_auth}.\")\n                return False\n\n    print(\"Audit passed.\")\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password failed attempts lockout configuration.\"\"\"\n    faillock_conf = pathlib.Path('/etc/security/faillock.conf')\n    pam_configs_dir = pathlib.Path('/usr/share/pamconfigs/')\n\n    # Remediation 1: Edit faillock.conf\n    with faillock_conf.open('r+') as file:\n        lines = file.readlines()\n        deny_set = False\n        for i, line in enumerate(lines):\n            match = re.match(r'^\\s*deny\\s*=\\s*(\\d+)\\s*$', line)\n            if match:\n                if 1 <= int(match.group(1)) <= 5:\n                    print(f\"Already set to acceptable value ({match.group(1)}) in {faillock_conf}.\")\n                    deny_set = True\n                    break\n                else:\n                    lines[i] = 'deny = 5\\n'\n                    print(f\"Updated deny value to 5 in {faillock_conf}.\")\n                    deny_set = True\n                    break\n        if not deny_set:\n            lines.append('deny = 5\\n')\n            print(f\"Added deny = 5 to {faillock_conf}.\")\n        file.seek(0)\n        file.writelines(lines)\n        file.truncate()\n\n    # Remediation 2: Edit pam_configs\n    for config_file in pam_configs_dir.glob('*.conf'):\n        with config_file.open('r+') as file:\n            lines = file.readlines()\n            updated = False\n            for i, line in enumerate(lines):\n                if re.search(r'\\bpam_faillock\\.so\\s+[^#]*\\bdeny\\s*=\\s*(0|[6-9]|[1-9][0-9]+)\\b', line):\n                    lines[i] = re.sub(r'\\bpam_faillock\\.so\\s+[^#]*\\bdeny\\s*=\\s*(0|[6-9]|[1-9][0-9]+)\\b', r'pam_faillock.so', line)\n                    print(f\"Removed deny argument from {config_file}.\")\n                    updated = True\n            if updated:\n                file.seek(0)\n                file.writelines(lines)\n                file.truncate()\n"
  },
  {
    "name": "Ensure password unlock time is configured",
    "id": "5.3.3.1.2",
    "type": "Automated",
    "start_page": 594,
    "end_page": 596,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "unlock_time=<n> - The access will be re-enabled after seconds after the lock out. The value 0 has the same meaning as value never - the access will not be re-enabled without resetting the faillock entries by the faillock(8) command. Note: The default directory that pam_faillock uses is usually cleared on system boot so the access will be also re-enabled after system reboot. If that is undesirable a different tally directory must be set with the dir option. It is usually undesirable to permanently lock out users as they can become easily a target of denial of service attack unless the usernames are random and kept secret to potential attackers. The maximum configurable value for unlock_time is 604800",
    "rationale": "Locking out user IDs after n unsuccessful consecutive login attempts mitigates brute force password attacks against your systems.",
    "audit_details": "Run the following command to verify that the time in seconds before the account is unlocked is either 0 (never) or 900 (15 minutes) or more and meets local site policy: # grep -Pi -- '^\t*unlock_time\t*=(0|9[0-9][0-9]|[1-9][0-9]{3,})\\b' /etc/security/faillock.conf unlock_time = 900 Run the following command to verify that the unlock_time argument has not been set, or is either 0 (never) or 900 (15 minutes) or more and meets local site policy: # grep -Pi -'^\t*auth\t+(requisite|required|sufficient)\t+pam_faillock\\.so\t+([^#\\n\\r]+\\h+)?unlock_time\\h*=\\h*([1-9]|[1-9][0-9]|[1-8][0-9][0-9])\\b' /etc/pam.d/commonauth Nothing should be returned",
    "audit_code": "# grep -Pi -- '^\t*unlock_time\t*=(0|9[0-9][0-9]|[1-9][0-9]{3,})\\b' /etc/security/faillock.conf\n# grep -Pi -'^\t*auth\t+(requisite|required|sufficient)\t+pam_faillock\\.so\t+([^#\\n\\r]+\\h+)?unlock_time\\h*=\\h*([1-9]|[1-9][0-9]|[1-8][0-9][0-9])\\b' /etc/pam.d/commonauth",
    "remediation_details": "Set password unlock time to conform to site policy. unlock_time should be 0 (never), or 900 seconds or greater. Edit /etc/security/faillock.conf and update or add the following line: unlock_time = 900 Run the following command: remove the unlock_time argument from the pam_faillock.so module in the PAM files: # grep -Pl -- '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?unlock_time\\b' /usr/share/pam-configs/* Edit any returned files and remove the unlock_time=<N> argument from the pam_faillock.so line(s):",
    "remediation_code": "# grep -Pl -- '\\bpam_faillock\\.so\\h+([^#\\n\\r]+\\h+)?unlock_time\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport re\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the system for password unlock time configuration.\"\"\"\n    faillock_conf = Path('/etc/security/faillock.conf')\n    common_auth = Path('/etc/pam.d/common-auth')\n\n    # Check if unlock_time is set to 0 or a value >= 900 in faillock.conf\n    with faillock_conf.open('r') as file:\n        for line in file:\n            match = re.match(r'^\\s*unlock_time\\s*=\\s*(\\d+)\\s*$', line)\n            if match:\n                value = int(match.group(1))\n                if not (value == 0 or value >= 900):\n                    print(f\"Non-compliant unlock_time value ({value}) found in {faillock_conf}.\")\n                    return False\n\n    # Verify no unlock_time argument with a value between 1-899 is set in common-auth\n    with common_auth.open('r') as file:\n        for line in file:\n            match = re.search(r'\\bpam_faillock\\.so\\s+[^#]*\\bunlock_time\\s*=\\s*([1-8][0-9][0-9]|[1-9][0-9]|[1-9])\\b', line)\n            if match:\n                value = int(match.group(1))\n                print(f\"Non-compliant unlock_time value ({value}) found in {common_auth}.\")\n                return False\n\n    print(\"System is compliant with password unlock time configuration.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the system to configure password unlock time.\"\"\"\n    faillock_conf = Path('/etc/security/faillock.conf')\n    pam_configs_dir = Path('/usr/share/pam-configs/')\n\n    # Update faillock.conf to set unlock_time to a compliant value (e.g., 900)\n    compliant_value = '900'\n    with faillock_conf.open('r+') as file:\n        content = file.readlines()\n        file.seek(0)\n        updated = False\n        for line in content:\n            if line.startswith('unlock_time'):\n                file.write(f'unlock_time = {compliant_value}\\n')\n                updated = True\n            else:\n                file.write(line)\n        if not updated:\n            file.write(f'unlock_time = {compliant_value}\\n')\n        file.truncate()\n    print(f\"Updated {faillock_conf} with compliant unlock_time value ({compliant_value}).\")\n\n    # Remove unlock_time arguments from pam_faillock.so lines in pam-configs files\n    for file in pam_configs_dir.glob('**/*'):\n        if file.is_file():\n            with file.open('r+') as f:\n                content = f.readlines()\n                f.seek(0)\n                updated = False\n                for line in content:\n                    if 'pam_faillock.so' in line and 'unlock_time' in line:\n                        line = re.sub(r'\\bunlock_time\\s*=\\s*\\d+\\b', '', line)\n                        updated = True\n                    f.write(line)\n                if updated:\n                    f.truncate()\n                    print(f\"Removed unlock_time argument from {file}.\")\n"
  },
  {
    "name": "Ensure password number of changed characters is configured",
    "id": "5.3.3.2.1",
    "type": "Automated",
    "start_page": 602,
    "end_page": 605,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality difok option sets the number of characters in a password that must not be present in the old password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks.\n\nPassword complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the difok option is set to 2 or more and follows local site policy:\n```\n# grep -Psi -- '^\n\\h*difok\\h*=\\h*([2-9]|[1-9][0-9]+)\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwdifok.conf:difok = 2\n```\nVerify returned value(s) are 2 or more and meet local site policy\nRun the following command to verify that difok is not set, is 2 or more, and conforms to local site policy:\n```\ngrep -Psi -'^\n\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?difok\\h*=\\h*([0-1])\\b' /etc/pam.d/common-password\nNothing should be returned\n``",
    "audit_code": "# grep -Psi -- '^\\h*difok\\h*=\\h*([2-9]|[1-9][0-9]+)\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n# grep -Psi -'^\n\\h*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?difok\\h*=\\h*([0-1])\\b' /etc/pam.d/common-password",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set difok to 2 or more. Ensure setting conforms to local site policy:\n_Example:_\n```\n#!/usr/bin/env bash\n{\nsed -ri 's/^\\s*difok\\s*=/# &/' /etc/security/pwquality.conf\n[ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\nprintf '\\n%s' \"difok = 2\" > /etc/security/pwquality.conf.d/50-pwdifok.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?difok\\b' /usr/share/pamconfigs/*\n```\nEdit any returned files and remove the difok argument from the pam_pwquality.so line(s):",
    "remediation_code": "#!/usr/bin/env bash\n{\nsed -ri 's/^\\s*difok\\s*=/# &/' /etc/security/pwquality.conf\n[ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\nprintf '\\n%s' \"difok = 2\" > /etc/security/pwquality.conf.d/50-pwdifok.conf\n}\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?difok\\b' /usr/share/pamconfigs/*",
    "python_script": "\nimport pathlib\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit password number of changed characters configuration.\n    \n    Returns:\n        bool: True if audit passes, False otherwise.\n    \"\"\"\n    # Verify difok option in pwquality.conf(d) files\n    pwquality_conf_dir = pathlib.Path('/etc/security/pwquality.conf.d')\n    pwquality_conf_file = pathlib.Path('/etc/security/pwquality.conf')\n    difok_pattern = re.compile(r'^\\s*difok\\s*=\\s*(2|[3-9]|[1-9][0-9]+)\\b')\n    \n    if (pwquality_conf_file.exists() and difok_pattern.search(pwquality_conf_file.read_text())) or \\\n       any(difok_pattern.search(file.read_text()) for file in pwquality_conf_dir.glob('*.conf') if file.exists()):\n        pass  # difok option set to 2 or more found\n    else:\n        return False  # no valid difok option found\n\n    # Verify difok is not set to 1 or less in pam.d/common-password\n    common_password_file = pathlib.Path('/etc/pam.d/common-password')\n    if common_password_file.exists():\n        pam_pwquality_pattern = re.compile(r'^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so\\s+.*\\bdifok\\s*=\\s*[01]\\b')\n        if pam_pwquality_pattern.search(common_password_file.read_text()):\n            return False  # difok set to 1 or less found\n\n    return True  # audit passed\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate password number of changed characters configuration.\n    \"\"\"\n    # Create or modify.conf file in pwquality.conf.d to set difok to 2\n    pwquality_conf_dir = pathlib.Path('/etc/security/pwquality.conf.d')\n    pwquality_conf_dir.mkdir(exist_ok=True)\n    remediation_file = pwquality_conf_dir / '50-pwdifok.conf'\n    \n    with remediation_file.open('w') as file:\n        file.write('difok = 2\\n')\n    print(f\"Created {remediation_file} with difok = 2.\")\n\n    # Comment out existing difok lines in pwquality.conf (if any)\n    pwquality_conf_file = pathlib.Path('/etc/security/pwquality.conf')\n    if pwquality_conf_file.exists():\n        difok_pattern = re.compile(r'^\\s*difok\\s*=')\n        contents = pwquality_conf_file.read_text()\n        modified_contents = difok_pattern.sub('# &', contents)\n        if modified_contents!= contents:\n            pwquality_conf_file.write_text(modified_contents)\n            print(f\"Commented out difok line in {pwquality_conf_file}.\")\n\n    # Remove difok argument from pam_pwquality.so lines in /usr/share/pamconfigs/*\n    pamconfigs_dir = pathlib.Path('/usr/share/pamconfigs')\n    if pamconfigs_dir.exists():\n        pam_pwquality_pattern = re.compile(r'(\\bpam_pwquality\\.so[^#]*\\b)\\s+\\bdifok\\s*=[^#\\s]+')\n        for file in pamconfigs_dir.glob('*.conf'):\n            if file.exists():\n                contents = file.read_text()\n                modified_contents = pam_pwquality_pattern.sub(r'\\1', contents)\n                if modified_contents!= contents:\n                    file.write_text(modified_contents)\n                    print(f\"Removed difok argument from {file}.\")\n"
  },
  {
    "name": "Ensure minimum password length is configured",
    "id": "5.3.3.2.2",
    "type": "Automated",
    "start_page": 606,
    "end_page": 609,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The minimum password length setting determines the lowers number of characters that make up a password for a user account. There are many different theories about how to determine the best password length for an organization, but perhaps 'passphrase' is a better term than 'password'. The minlen option sets the minimum acceptable size for the new password (plus one if credits are not disabled which is the default). Cannot be set to lower value than 6.",
    "rationale": "Strong passwords help protect systems from password attacks. Types of password attacks include dictionary attacks, which attempt to use common words and phrases, and brute force attacks, which try every possible combination of characters. Also attackers may try to obtain the account database so they can use tools to discover the accounts and passwords.",
    "audit_details": "Run the following command to verify that password length is 14 or more characters, and conforms to local site policy: \n```\n# grep -Psi -- '^\\\\h*minlen\\\\h*=\\\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\\\b' \n/etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwlength.conf:minlen = 14\n```\nVerify returned value(s) are no less than 14 characters and meet local site policy \nRun the following command to verify that minlen is not set, or is 14 or more characters, and conforms to local site policy:\n```\ngrep -Psi -'^\\\\h*password\\\\h+(requisite|required|sufficient)\\\\h+pam_pwquality\\\\.so\\\\h+([^#\\n\\r]+)?minlen\\\\h*=\\\\h*([0-9]|1[0-3])\\\\b' /etc/pam.d/system-auth /etc/pam.d/common-password\nNothing should be returned\n```\n**Note:**\n  - settings should be configured in only one location for clarity\n  - Settings observe an order of precedence:\n`o` module arguments override the settings in the\n```\n       /etc/security/pwquality.conf configuration file\n```\n`o` settings in the /etc/security/pwquality.conf configuration file override\nsettings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\nare read in canonical order, with last read file containing the setting taking\nprecedence\n  - It is recommended that settings be configured in a .conf file in the\n```\n    /etc/security/pwquality.conf.d/ directory for clarity, convenience, and\n```\ndurability.",
    "audit_code": "# grep -Psi -- '^\\\\h*minlen\\\\h*=\\\\h*(1[4-9]|[2-9][0-9]|[1-9][0-9]{2,})\\\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n# grep -Psi -'^\\\\h*password\\\\h+(requisite|required|sufficient)\\\\h+pam_pwquality\\\\.so\\\\h+([^#\\n\\r]+)?minlen\\\\h*=\\\\h*([0-9]|1[0-3])\\\\b' /etc/pam.d/system-auth /etc/pam.d/common-password",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set password length of 14 or more characters. Ensure that password length conforms to local site policy:\n_Example:_\n```\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*minlen\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"minlen = 14\" > /etc/security/pwquality.conf.d/50pwlength.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+)?minlen\\b' /usr/share/pamconfigs/*\n```\nEdit any returned files and remove the minlen argument from the pam_pwquality.so line(s):",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*minlen\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"minlen = 14\" > /etc/security/pwquality.conf.d/50pwlength.conf\n}\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+)?minlen\\b' /usr/share/pamconfigs/*",
    "python_script": "\nimport re\nimport os\nfrom pathlib import Path\nimport fileinput\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the minimum password length is 14 or more characters.\n    \n    Returns:\n        bool: True if the minimum password length is 14 or more characters, False otherwise.\n    \"\"\"\n    config_files = [\"/etc/security/pwquality.conf\"] + list(Path(\"/etc/security/pwquality.conf.d/\").glob(\"*.conf\"))\n    config_files += [\"/etc/pam.d/system-auth\", \"/etc/pam.d/common-password\"]\n\n    minlen_pattern = re.compile(r\"^#\\s*minlen\\s*=\\s*[1-9][4-9]|[2-9][0-9]|[1-9][0-9]{2,}\\b\")\n    pam_pwquality_pattern = re.compile(r\"\\bpam_pwquality\\.so\\s+([^#]*?)minlen\\s*=\\s*([0-9]|1[0-3])\\b\")\n\n    for file in config_files:\n        with open(file, \"r\") as f:\n            for line in f:\n                if minlen_pattern.search(line):\n                    # Found a minlen setting with a value of 14 or more\n                    return True\n                if pam_pwquality_pattern.search(line):\n                    # Found a pam_pwquality.so line with a minlen setting less than 14\n                    return False\n\n    # No minlen setting found or all settings were valid\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the minimum password length to 14 or more characters.\n    \"\"\"\n    # Create the /etc/security/pwquality.conf.d/ directory if it doesn't exist\n    conf_dir = Path(\"/etc/security/pwquality.conf.d/\")\n    if not conf_dir.exists():\n        conf_dir.mkdir()\n        print(f\"Created directory {conf_dir}\")\n\n    # Create or modify the 50pwlength.conf file to set minlen = 14\n    conf_file = conf_dir / \"50pwlength.conf\"\n    with open(conf_file, \"w\") as f:\n        f.write(\"minlen = 14\\n\")\n    print(f\"Created or modified file {conf_file} with minlen = 14\")\n\n    # Remove minlen arguments from pam_pwquality.so lines in /usr/share/pamconfigs/* files\n    for file in Path(\"/usr/share/pamconfigs/\").glob(\"*.conf\"):\n        with fileinput.input(file, inplace=True) as f:\n            for line in f:\n                line = re.sub(r\"\\bpam_pwquality\\.so\\s+[^#]*?minlen\\s*=\\s*[0-9]\\b\", \"\", line)\n                print(line, end=\"\")\n        print(f\"Removed minlen argument from pam_pwquality.so line in file {file}\")\n"
  },
  {
    "name": "Ensure password same consecutive characters is configured",
    "id": "5.3.3.2.4",
    "type": "Automated",
    "start_page": 614,
    "end_page": 617,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality `maxrepeat option sets the maximum number of allowed same consecutive characters in a new password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the maxrepeat option is set to 3 or less, not 0, and follows local site policy:\n```\n# grep -Psi -- '^\n*maxrepeat\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwrepeat.conf:maxrepeat = 3\n```\n\nVerify returned value(s) are 3 or less, not 0, and meet local site policy.\nRun the following command to verify that maxrepeat is not set, is 3 or less, not 0, and conforms to local site policy:\n```\ngrep -Psi -'^\n*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxrepeat\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/common-password\nNothing should be returned\n```\n**Note:**\n\n - settings should be configured in only one location for clarity\n\n - Settings observe an order of precedence:\n`o` module arguments override the settings in the\n```\n       /etc/security/pwquality.conf configuration file\n```\n`o` settings in the /etc/security/pwquality.conf configuration file override settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory are read in canonical order, with last read file containing the setting taking precedence\n\n - It is recommended that settings be configured in a .conf file in the\n```\n    /etc/security/pwquality.conf.d/ directory for clarity, convenience, and\n```\ndurability.",
    "audit_code": "# grep -Psi -- '^\n*maxrepeat\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set maxrepeat to 3 or less and not 0. Ensure setting conforms to local site policy:\n_Example:_\n```\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*maxrepeat\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"maxrepeat = 3\" > /etc/security/pwquality.conf.d/50pwrepeat.conf\n}\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxrepeat\\b' /usr/share/pam-configs/*\n```\nEdit any returned files and remove the maxrepeat argument from the pam_pwquality.so line(s):",
    "remediation_code": "#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*maxrepeat\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"maxrepeat = 3\" > /etc/security/pwquality.conf.d/50pwrepeat.conf\n}",
    "python_script": "\nimport pathlib\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit the maxrepeat option in pwquality configuration\"\"\"\n    config_dirs = [pathlib.Path('/etc/security/pwquality.conf'), \n                   pathlib.Path('/etc/security/pwquality.conf.d/')]\n    \n    for config_dir in config_dirs:\n        if config_dir.is_file():\n            with config_dir.open('r') as file:\n                for line in file:\n                    match = re.search(r'^\\s*maxrepeat\\s*=\\s*(\\d+)\\s*$', line)\n                    if match:\n                        value = int(match.group(1))\n                        if value > 3 or value == 0:\n                            print(f\"Non-compliant maxrepeat value ({value}) found in {config_dir}\")\n                            return False\n        elif config_dir.is_dir():\n            for file in config_dir.glob('*.conf'):\n                with file.open('r') as conf_file:\n                    for line in conf_file:\n                        match = re.search(r'^\\s*maxrepeat\\s*=\\s*(\\d+)\\s*$', line)\n                        if match:\n                            value = int(match.group(1))\n                            if value > 3 or value == 0:\n                                print(f\"Non-compliant maxrepeat value ({value}) found in {file}\")\n                                return False\n    \n    # Check if maxrepeat is not set or set incorrectly in pam_pwquality.so lines\n    output = subprocess.check_output(['grep', '-P', r'\\bpam_pwquality\\.so\\b([^#\\n\\r]+?\\h+)?maxrepeat\\b', '/usr/share/pam-configs/*'])\n    if output:\n        print(\"Incorrect maxrepeat setting found in pam_pwquality.so lines:\")\n        print(output.decode().strip())\n        return False\n    \n    print(\"No non-compliant maxrepeat values found.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the maxrepeat option in pwquality configuration\"\"\"\n    config_dir = pathlib.Path('/etc/security/pwquality.conf.d/')\n    config_file = config_dir / '50pwrepeat.conf'\n    \n    # Create the config directory if it doesn't exist\n    if not config_dir.is_dir():\n        config_dir.mkdir()\n        print(f\"Created directory: {config_dir}\")\n    \n    # Comment out existing maxrepeat lines in /etc/security/pwquality.conf\n    pwquality_conf = pathlib.Path('/etc/security/pwquality.conf')\n    if pwquality_conf.is_file():\n        with pwquality_conf.open('r+') as file:\n            content = file.readlines()\n            file.seek(0)\n            for line in content:\n                if not re.search(r'^\\s*maxrepeat\\s*=', line):\n                    file.write(line)\n                else:\n                    file.write(f'# {line.strip()}\\n')\n                    print(f\"Commented out maxrepeat line in {pwquality_conf}\")\n            file.truncate()\n    \n    # Create or modify the config file to set maxrepeat to 3\n    with config_file.open('w') as file:\n        file.write('maxrepeat = 3\\n')\n        print(f\"Set maxrepeat to 3 in {config_file}\")\n    \n    # Remove maxrepeat arguments from pam_pwquality.so lines\n    for file in pathlib.Path('/usr/share/pam-configs/').glob('*.cfg'):\n        with file.open('r+') as pam_file:\n            content = pam_file.readlines()\n            pam_file.seek(0)\n            for line in content:\n                if not re.search(r'\\bpam_pwquality\\.so\\b([^#\\n\\r]+?\\h+)?maxrepeat\\b', line):\n                    pam_file.write(line)\n                else:\n                    pam_file.write(re.sub(r'\\bmaxrepeat=[^#\\n\\r]+?\\h?', '', line))\n                    print(f\"Removed maxrepeat argument from pam_pwquality.so line in {file}\")\n            pam_file.truncate()\n"
  },
  {
    "name": "Ensure password maximum sequential characters is configured",
    "id": "5.3.3.2.5",
    "type": "Automated",
    "start_page": 618,
    "end_page": 621,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality `maxsequence option sets the maximum length of monotonic character sequences in the new password. Examples of such sequence are 12345 or fedcb. The check is disabled if the value is 0. Note: Most such passwords will not pass the simplicity check unless the sequence is only a minor part of the password.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the maxsequence option is set to 3 or less, not 0, and follows local site policy:\n# grep -Psi -- '^\n*maxsequence\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n\nExample output:\n/etc/security/pwquality.conf.d/50-pwmaxsequence.conf:maxsequence = 3\n\nVerify returned value(s) are 3 or less, not 0, and meet local site policy Run the following command to verify that maxsequence is not set, is 3 or less, not 0, and conforms to local site policy:\n# grep -Psi -'^\n*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/common-password\nNothing should be returned Note: settings should be configured in only one location for clarity Settings observe an order of precedence: module arguments override the settings in the /etc/security/pwquality.conf configuration file settings in the /etc/security/pwquality.conf configuration file override settings in a .conf file in the /etc/security/pwquality.conf.d/ directory settings in a .conf file in the /etc/security/pwquality.conf.d/ directory are read in canonical order, with last read file containing the setting taking precedence It is recommended that settings be configured in a .conf file in the /etc/security/pwquality.conf.d/ directory for clarity, convenience, and durability.",
    "audit_code": "# grep -Psi -- '^\n*maxsequence\\h*=\\h*[1-3]\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n# grep -Psi -'^\n*password\\h+(requisite|required|sufficient)\\h+pam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\h*=\\h*(0|[4-9]|[1-9][0-9]+)\\b' /etc/pam.d/common-password",
    "remediation_details": "Create or modify a file ending in .conf in the /etc/security/pwquality.conf.d/ directory or the file /etc/security/pwquality.conf and add or modify the following line to set maxsequence to 3 or less and not 0. Ensure setting conforms to local site policy:\nExample:\n#!/usr/bin/env bash\n{\n  sed -ri 's/^\\s*maxsequence\\s*=/# &/' /etc/security/pwquality.conf\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s' \"maxsequence = 3\" > /etc/security/pwquality.conf.d/50pwmaxsequence.conf\n}",
    "remediation_code": "# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?maxsequence\\b' /usr/share/pam-configs/*",
    "python_script": ""
  },
  {
    "name": "Ensure password dictionary check is enabled",
    "id": "5.3.3.2.6",
    "type": "Automated",
    "start_page": 622,
    "end_page": 624,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pwquality `dictcheck option sets whether to check for the words from the cracklib` dictionary.",
    "rationale": "If the operating system allows the user to select passwords based on dictionary words, this increases the chances of password compromise by increasing the opportunity for successful guesses, and brute-force attacks.",
    "audit_details": "Run the following command to verify that the dictcheck option is not set to 0 (disabled) in a pwquality configuration file:\n```\n# grep -Psi -- '^\n*dictcheck\nh*=\nh*0\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\nNothing should be returned\n```\nRun the following command to verify that the dictcheck option is not set to 0 (disabled) as a module argument in a PAM file:\n```\n# grep -Psi -'^\n*password\nh+(requisite|required|sufficient)\nh+pam_pwquality\\.so\nh+([^#\\n\\\r]+\\h+)?dictcheck\nh*=\\h*0\b' /etc/pam.d/common-password\nNothing should be returned\n```\n**Note:**\n  - Settings observe an order of precedence:\n`o` module arguments override the settings in the\n```\n       /etc/security/pwquality.conf configuration file\n```\n`o` settings in the /etc/security/pwquality.conf configuration file override\nsettings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\nare read in canonical order, with last read file containing the setting taking\nprecedence\n  - It is recommended that settings be configured in a .conf file in the\n```\n    /etc/security/pwquality.conf.d/ directory for clarity, convenience, and\n```\ndurability.",
    "audit_code": "# grep -Psi -- '^\n*dictcheck\nh*=\nh*0\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\nNothing should be returned\n\n# grep -Psi -'^\n*password\nh+(requisite|required|sufficient)\nh+pam_pwquality\\.so\nh+([^#\\n\\\r]+\\h+)?dictcheck\nh*=\\h*0\b' /etc/pam.d/common-password\nNothing should be returned",
    "remediation_details": "Edit any file ending in .conf in the /etc/security/pwquality.conf.d/ directory and/or the file /etc/security/pwquality.conf and comment out or remove any instance of\ndictcheck = 0:\n```\n# sed -ri 's/^\\s*dictcheck\\s*=/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n```\nRun the following command:\n```\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+)?dictcheck\\b'\n/usr/share/pam-configs/*\n```\nEdit any returned files and remove the dictcheck argument from the pam_pwquality.so line(s)",
    "remediation_code": "# sed -ri 's/^\\s*dictcheck\\s*=/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+)?dictcheck\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport pathlib\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if password dictionary check is enabled\"\"\"\n    # Check pwquality config files\n    pwquality_configs = list(pathlib.Path('/etc/security').glob('pwquality.conf*'))\n    for file in pwquality_configs:\n        with open(file, 'r') as f:\n            for line in f:\n                if re.match(r'^\\s*dictcheck\\s*=\\s*0\\b', line):\n                    print(f\"Found 'dictcheck = 0' in {file}\")\n                    return False\n\n    # Check PAM config\n    pam_file = pathlib.Path('/etc/pam.d/common-password')\n    with open(pam_file, 'r') as f:\n        for line in f:\n            if re.match(r'^\\s*password\\s+(requisite|required|sufficient)\\s+pam_pwquality\\.so\\s+([^#\\n\\r]+)?dictcheck\\s*=\\s*0\\b', line):\n                print(f\"Found 'dictcheck = 0' in {pam_file} as a module argument for pam_pwquality.so\")\n                return False\n\n    print(\"No instances of 'dictcheck = 0' found in config files\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password dictionary check vulnerability\"\"\"\n    # Comment out dictcheck = 0 in pwquality config files\n    pwquality_configs = list(pathlib.Path('/etc/security').glob('pwquality.conf*'))\n    for file in pwquality_configs:\n        with open(file, 'r+') as f:\n            content = f.readlines()\n            f.seek(0)\n            for line in content:\n                if re.match(r'^\\s*dictcheck\\s*=\\s*0\\b', line):\n                    print(f\"Commenting out 'dictcheck = 0' in {file}\")\n                    f.write(f'# {line}')\n                else:\n                    f.write(line)\n            f.truncate()\n\n    # Remove dictcheck argument from pam_pwquality.so lines\n    search_cmd = [\"grep\", \"-Pl\", r'\\bpam_pwquality\\.so\\h+([^#\\n\\r]+)?dictcheck\\b', \"/usr/share/pam-configs/*\"]\n    output = subprocess.run(search_cmd, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)\n    if output.stdout:\n        files_to_edit = output.stdout.decode('utf-8').splitlines()\n        for file in files_to_edit:\n            with open(file, 'r+') as f:\n                content = f.readlines()\n                f.seek(0)\n                for line in content:\n                    if re.search(r'(\\bpam_pwquality\\.so\\s+[^#\\n\\r]+?)dictcheck\\b', line):\n                        print(f\"Removing 'dictcheck' argument from pam_pwquality.so line in {file}\")\n                        line = re.sub(r'(\\bpam_pwquality\\.so\\s+[^#\\n\\r]+?)dictcheck\\b', r'\\1', line)\n                    f.write(line)\n                f.truncate()\n"
  },
  {
    "name": "Ensure password quality checking is enforced",
    "id": "5.3.3.2.7",
    "type": "Automated",
    "start_page": 625,
    "end_page": 626,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The pam_pwquality module can be configured to either reject a password if it fails the checks, or only print a warning. This is configured by setting the enforcing=<N> argument. If nonzero, a password will be rejected if it fails the checks, otherwise only a warning message will be provided. This setting applies only to the pam_pwquality module and possibly other applications that explicitly change their behavior based on it. It does not affect pwmake(1) and pwscore(1).",
    "rationale": "Strong passwords help protect systems from password attacks. Types of password attacks include dictionary attacks, which attempt to use common words and phrases, and brute force attacks, which try every possible combination of characters. Also attackers may try to obtain the account database so they can use tools to discover the accounts and passwords.",
    "audit_details": "Run the following command to verify that enforcing=0 has not been set in a pwquality configuration file: \n# grep -PHsi -- '^\n*enforcing\n*=\n*0\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\nNothing should be returned.\nRun the following command to verify that the enforcing=0 argument has not been set on the pam_pwquality module:\n# grep -PHsi -'^\n*password\n+[^#\\n\\r]+\npam_pwquality\\.so\n+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/etc/pam.d/common-password\nNothing should be returned.",
    "audit_code": "# grep -PHsi -- '^\n*enforcing\n*=\n*0\\b' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf\n\n# grep -PHsi -'^\n*password\n+[^#\\n\\r]+\npam_pwquality\\.so\n+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/usr/share/pam-configs/*\nEdit any returned files and remove the enforcing=0 argument from the pam_pwquality.so line(s)\nEdit /etc/security/pwquality.conf and all files ending in .conf in the /etc/security/pwquality.conf.d/ directory and remove or comment out any line containing the enforcing = 0 argument:\nExample:\n# sed -ri 's/^\\s*enforcing\\s*=\\s*0/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf",
    "remediation_code": "# grep -Pl -- '\\bpam_pwquality\\.so\\h+([^#\\n\\r]+\\h+)?enforcing=0\\b'\n/usr/share/pam-configs/*\n\n# sed -ri 's/^\\s*enforcing\\s*=\\s*0/# &/' /etc/security/pwquality.conf\n/etc/security/pwquality.conf.d/*.conf",
    "python_script": "\nimport pathlib\nimport re\nimport sys\n\n# Configuration file paths\nPWQUALITY_CONF = pathlib.Path('/etc/security/pwquality.conf')\nPWQUALITY_CONF_D = pathlib.Path('/etc/security/pwquality.conf.d')\nPAM_COMMON_PASSWORD = pathlib.Path('/etc/pam.d/common-password')\nPAM_CONFIGS = pathlib.Path('/usr/share/pam-configs')\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if enforcing=0 is set in configuration files.\"\"\"\n    vulnerable = False\n\n    # Check pwquality configuration files\n    for file in [PWQUALITY_CONF] + list(PWQUALITY_CONF_D.glob('*.conf')):\n        try:\n            content = file.read_text()\n            if re.search(r'^\\s*enforcing\\s*=\\s*0\\b', content, re.MULTILINE):\n                print(f\"Found enforcing=0 in {file}\")\n                vulnerable = True\n        except Exception as e:\n            print(f\"Error reading {file}: {e}\", file=sys.stderr)\n\n    # Check pam_pwquality module argument\n    try:\n        content = PAM_COMMON_PASSWORD.read_text()\n        if re.search(r'^\\s*password\\s+[^#\\n\\r]+\\s+pam_pwquality\\.so\\s+([^#\\n\\r]+)?enforcing=0\\b', content, re.MULTILINE):\n            print(\"Found enforcing=0 in pam_pwquality module argument\")\n            vulnerable = True\n    except Exception as e:\n        print(f\"Error reading {PAM_COMMON_PASSWORD}: {e}\", file=sys.stderr)\n\n    return vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remove or comment out enforcing=0 from configuration files.\"\"\"\n    # Remediate pwquality configuration files\n    for file in [PWQUALITY_CONF] + list(PWQUALITY_CONF_D.glob('*.conf')):\n        try:\n            content = file.read_text()\n            new_content = re.sub(r'^\\s*enforcing\\s*=\\s*0\\b', r'# \\g<0>', content, flags=re.MULTILINE)\n            if new_content != content:\n                file.write_text(new_content)\n                print(f\"Commented out enforcing=0 in {file}\")\n        except Exception as e:\n            print(f\"Error updating {file}: {e}\", file=sys.stderr)\n\n    # Remediate pam_pwquality module argument\n    for file in PAM_CONFIGS.glob('*.config'):\n        try:\n            content = file.read_text()\n            new_content = re.sub(r'(\\s+pam_pwquality\\.so\\s+[^#\\n\\r]+)?\\s+enforcing=0\\b', r'\\1', content, flags=re.MULTILINE)\n            if new_content != content:\n                file.write_text(new_content)\n                print(f\"Removed enforcing=0 from pam_pwquality module argument in {file}\")\n        except Exception as e:\n            print(f\"Error updating {file}: {e}\", file=sys.stderr)\n"
  },
  {
    "name": "Ensure password quality is enforced for the root user",
    "id": "5.3.3.2.8",
    "type": "Automated",
    "start_page": 627,
    "end_page": 629,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "If the pwquality `enforce_for_root option is enabled, the module will return error on failed check even if the user changing the password is root. This option is off by default which means that just the message about the failed check is printed but root can change the password anyway. Note: The root is not asked for an old password so the checks that compare the old and new password are not performed.",
    "rationale": "Use of a complex password helps to increase the time and resources required to compromise the password. Password complexity, or strength, is a measure of the effectiveness of a password in resisting attempts at guessing and brute-force attacks. Password complexity is one factor of several that determines how long it takes to crack a password. The more complex the password, the greater the number of possible combinations that need to be tested before the password is compromised.",
    "audit_details": "Run the following command to verify that the enforce_for_root option is enabled in a pwquality configuration file:\n```\n# grep -Psi -- '^-\\h*enforce_for_root\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf\n```\n_Example output:_\n```\n/etc/security/pwquality.conf.d/50-pwroot.conf:enforce_for_root\n```\n**Note:**  - Settings observe an order of precedence:\n`o` module arguments override the settings in the `/etc/security/pwquality.conf configuration file`\n`o` settings in the /etc/security/pwquality.conf configuration file override settings in a .conf file in the /etc/security/pwquality.conf.d/ directory\n`o` settings in a .conf file in the /etc/security/pwquality.conf.d/ directory are read in canonical order, with last read file containing the setting taking precedence\n  - It is recommended that settings be configured in a .conf file in the `/etc/security/pwquality.conf.d/ directory` for clarity, convenience, and durability.",
    "audit_code": "# grep -Psi -- '\\b' /etc/security/pwquality.conf /etc/security/pwquality.conf.d/*.conf",
    "remediation_details": "Edit or add the following line in a *.conf file in /etc/security/pwquality.conf.d or in `/etc/security/pwquality.conf:`\n_Example:_\n```\n#!/urs/bin/env bash\n{\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s\\n' \"enforce_for_root\" > /etc/security/pwquality.conf.d/50pwroot.conf\n}\n```\n",
    "remediation_code": "#!/urs/bin/env bash\n{\n  [ ! -d /etc/security/pwquality.conf.d/ ] && mkdir /etc/security/pwquality.conf.d/\n  printf '\\n%s\\n' \"enforce_for_root\" > /etc/security/pwquality.conf.d/50pwroot.conf\n}",
    "python_script": "\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if enforce_for_root option is enabled in pwquality configuration files\"\"\"\n    config_files = ['/etc/security/pwquality.conf'] + [\n        os.path.join('/etc/security/pwquality.conf.d/', file)\n        for file in os.listdir('/etc/security/pwquality.conf.d/')\n        if file.endswith('.conf')\n    ]\n    for file in config_files:\n        try:\n            with open(file, 'r') as f:\n                for line in f:\n                    if line.strip() == 'enforce_for_root':\n                        return True\n        except FileNotFoundError:\n            continue\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Enable enforce_for_root option in pwquality configuration\"\"\"\n    config_dir = '/etc/security/pwquality.conf.d/'\n    config_file = os.path.join(config_dir, '50pwroot.conf')\n    \n    # Create directory if it doesn't exist\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)\n        print(f\"Created directory '{config_dir}'\")\n    \n    # Create or append to the configuration file\n    if not os.path.exists(config_file):\n        with open(config_file, 'w') as f:\n            f.write('enforce_for_root\\n')\n        print(f\"Created file '{config_file}' with 'enforce_for_root' option\")\n    else:\n        with open(config_file, 'r+') as f:\n            content = f.read()\n            if 'enforce_for_root' not in content:\n                f.write('enforce_for_root\\n')\n                print(f\"Added 'enforce_for_root' option to '{config_file}'\")\n            else:\n                print(f\"'enforce_for_root' option already present in '{config_file}'\")\n"
  },
  {
    "name": "Ensure password history remember is configured",
    "id": "5.3.3.3.1",
    "type": "Automated",
    "start_page": 631,
    "end_page": 633,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/security/opasswd file stores the users' old passwords and can be checked to ensure that users are not recycling recent passwords. The number of passwords remembered is set via the remember argument value in set for the pam_pwhistory module.\n\n  - remember=<N> - <N> is the number of old passwords to remember",
    "rationale": "Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password.\n\n**Note: These change only apply to accounts configured on the local system.**",
    "audit_details": "Run the following command and verify:\n\n  - The pwhistory line in /etc/pam.d/common-password includes remember=<N>\n\n  - The value of <N> is 24 or more\n\n  - The value meets local site policy\n```\n# grep -Psi -'^\n\\h*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?remember=\\d+\\b\n' /etc/pam.d/common-password\n```\nOutput should be similar to:\n```\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root\ntry_first_pass use_authtok\n```\nPage 630",
    "audit_code": "# grep -Psi -'^\n\\h*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?remember=\\d+\\b\n' /etc/pam.d/common-password\n",
    "remediation_details": "Run the following command:\n```\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n```\nEdit any returned files and edit or add the remember= argument, with a value of 24 or more, that meets local site policy to the pam_pwhistory line in the Password section:\n_Example File:_\n```\nName: pwhistory password history checking\nDefault: yes\nPriority: 1024\nPassword-Type: Primary\nPassword:\n  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass\nuse_authtok # <- **ensure line includes remember=<N>**\n```\nRun the following command to update the files in the /etc/pam.d/ directory:\n```\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n```\n_Example:_\n```\n# pam-auth-update --enable pwhistory\n```\n",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME> \n",
    "python_script": "\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the pam_pwhistory configuration to ensure 'remember' value is 24 or more.\n\n    Returns:\n        bool: True if the 'remember' value meets the requirement, False otherwise.\n    \"\"\"\n    config_file = '/etc/pam.d/common-password'\n    pattern = r'password\\s+requisite\\s+pam_pwhistory\\.so\\s+.*remember=(\\d+)'\n    \n    try:\n        with open(config_file, 'r') as file:\n            content = file.read()\n            match = re.search(pattern, content)\n            if match:\n                remember_value = int(match.group(1))\n                return remember_value >= 24\n    except FileNotFoundError:\n        pass\n    \n    return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the pam_pwhistory configuration to set 'remember' value to 24 or more.\n    \"\"\"\n    modified_profile_name = 'pwhistory'\n    config_dir = '/usr/share/pam-configs/'\n    target_line_pattern = r'^\\s*Password:\\s*'\n    update_line_pattern = r'(requisite\\s+pam_pwhistory\\.so.*)'\n    updated_line = r'\\1 remember=24 enforce_for_root try_first_pass use_authtok'\n    \n    # Find and update the relevant config file\n    for filename in os.listdir(config_dir):\n        filepath = os.path.join(config_dir, filename)\n        with open(filepath, 'r+') as file:\n            content = file.readlines()\n            updated_content = []\n            password_section = False\n            \n            for line in content:\n                if re.match(target_line_pattern, line):\n                    password_section = True\n                elif re.match(r'-Type:', line):\n                    password_section = False\n                \n                if password_section and re.search(update_line_pattern, line):\n                    updated_line_with_original = re.sub(update_line_pattern, \n                                                        lambda match: f\"{match.group(0)} remember=24\", line)\n                    print(f\"Updated pam_pwhistory line in {filename}: {updated_line_with_original.strip()}\")\n                    updated_content.append(updated_line_with_original)\n                else:\n                    updated_content.append(line)\n            \n            # Write updates back to the file\n            file.seek(0)\n            file.writelines(updated_content)\n            file.truncate()\n    \n    # Update PAM configuration\n    update_cmd = f'pam-auth-update --enable {modified_profile_name}'\n    print(f\"Running command: {update_cmd}\")\n    os.system(update_cmd)\n"
  },
  {
    "name": "Ensure password history is enforced for the root user",
    "id": "5.3.3.3.2",
    "type": "Automated",
    "start_page": 634,
    "end_page": 636,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "If the pwhistory enforce_for_root option is enabled, the module will enforce password history for the root user as well",
    "rationale": "Requiring users not to reuse their passwords make it less likely that an attacker will be able to guess the password or use a compromised password. Note: These change only apply to accounts configured on the local system.",
    "audit_details": "Run the following command to verify that the enforce_for_root argument is exists on the pwhistory line in /etc/pam.d/common-password:\n```\n# grep -Psi -'^\t*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?enforce_for_root\\b' /etc/pam.d/common-password\n```\nOutput should be similar to:\n```\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root\ntry_first_pass use_authtok\n```\nPage 633",
    "audit_code": "# grep -Psi -'^\t*password\\h+[^#\\n\\r]+\\h+pam_pwhistory\\.so\\h+([^#\\n\\r]+\\h+)?enforce_for_root\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n```\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n```\nEdit any returned files and add the enforce_for_root argument to the pam_pwhistory line in the Password section:\n_Example File:_\n```\nName: pwhistory password history checking\nDefault: yes\nPriority: 1024\nPassword-Type: Primary\nPassword:\n  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass\nuse_authtok # <- **ensure line includes enforce_for_root**\n```\nRun the following command to update the files in the /etc/pam.d/ directory:\n```\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n```\n_Example:_\n```\n# pam-auth-update --enable pwhistory\n```\n",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_pwhistory\\.so/) print FILENAME}' /usr/share/pam-configs/*\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
    "python_script": "\nimport re\nimport subprocess\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if password history is enforced for the root user.\"\"\"\n    file_path = '/etc/pam.d/common-password'\n    pattern = r'\\bpam_pwhistory\\.so.*\\benforce_for_root\\b'\n    try:\n        with open(file_path, 'r') as file:\n            for line in file:\n                if re.search(pattern, line):\n                    return True\n    except FileNotFoundError:\n        print(f\"File {file_path} not found.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding enforce_for_root to pwhistory line in necessary files.\"\"\"\n    config_dir = Path('/usr/share/pam-configs/')\n    modified_profiles = []\n\n    # Find and modify files\n    for file in config_dir.glob('*.cfg'):\n        try:\n            with open(file, 'r+') as f:\n                content = f.readlines()\n                in_password_section = False\n                modified = False\n                for i, line in enumerate(content):\n                    if line.strip() == 'Password-Type: Primary':\n                        in_password_section = True\n                    elif in_password_section and 'pam_pwhistory.so' in line:\n                        if 'enforce_for_root' not in line:\n                            content[i] = re.sub(r'(pam_pwhistory\\.so[^ ]*)', r'\\1 enforce_for_root', line)\n                            modified = True\n                        in_password_section = False\n                if modified:\n                    f.seek(0)\n                    f.writelines(content)\n                    f.truncate()\n                    modified_profiles.append(file.stem)\n                    print(f\"Modified {file.name} to include enforce_for_root.\")\n        except Exception as e:\n            print(f\"Error modifying {file.name}: {e}\")\n\n    # Update PAM configs for modified profiles\n    for profile in modified_profiles:\n        try:\n            subprocess.run(['pam-auth-update', '--enable', profile], check=True)\n            print(f\"Enabled {profile} via pam-auth-update.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Failed to enable {profile} via pam-auth-update: {e}\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    else:\n        print(\"Vulnerability already mitigated.\")\n"
  },
  {
    "name": "Ensure pam_pwhistory includes use_authtok",
    "id": "5.3.3.3.3",
    "type": "Automated",
    "start_page": 637,
    "end_page": 638,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "use_authtok - When password changing enforce the module to set the new password to the one provided by a previously stacked password module",
    "rationale": "use_authtok allows multiple pam modules to confirm a new password before it is accepted.",
    "audit_details": "Run the following command to verify that the use_authtok argument exists on the pwhistory line in /etc/pam.d/common-password:\n# grep -Psi -'^\n  *password\\s+[^#\\n\\r]+\\s+pam_pwhistory\\.so\\s+([^#\\n\\r]+\\s+)?use_authtok\\b'\n/etc/pam.d/common-password\nOutput should be similar to:\npassword  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok",
    "audit_code": "# grep -Psi -'^\n  *password\\s+[^#\\n\\r]+\\s+pam_pwhistory\\.so\\s+([^#\\n\\r]+\\s+)?use_authtok\\b'\n/etc/pam.d/common-password",
    "remediation_details": "Edit any returned files and add the use_authtok argument to the pam_pwhistory line in the Password section:\nExample File:\nName: pwhistory password history checking\nDefault: yes\nPriority: 1024\nPassword-Type: Primary\nPassword:\n  requisite  pam_pwhistory.so remember=24 enforce_for_root try_first_pass use_authtok # <- **ensure line includes use_authtok**\nRun the following command to update the files in the /etc/pam.d/ directory:\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\nExample:\n# pam-auth-update --enable pwhistory",
    "remediation_code": "# pam-auth-update --enable pwhistory",
    "python_script": "\nimport re\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if pam_pwhistory includes use_authtok in /etc/pam.d/common-password.\n    \n    Returns:\n        bool: True if use_authtok is present, False otherwise.\n    \"\"\"\n    file_path = '/etc/pam.d/common-password'\n    pattern = r'^\\s*password\\s+[^#*\\r\\n]+\\s+pam_pwhistory\\.so\\s+([^#*\\r\\n]+)?\\s*use_authtok\\b'\n    \n    try:\n        with open(file_path, 'r') as file:\n            for line in file:\n                if re.match(pattern, line):\n                    return True\n    except OSError as e:\n        print(f\"Error reading {file_path}: {e}\")\n    \n    return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by ensuring pam_pwhistory includes use_authtok in /etc/pam.d/common-password\n    and update using pam-auth-update.\n    \"\"\"\n    file_path = '/etc/pam.d/common-password'\n    profile_name = 'pwhistory'\n    modified_lines = []\n    modification_needed = False\n    \n    pattern = r'^(\\s*password\\s+[^#*\\r\\n]+\\s+pam_pwhistory\\.so\\s+[^\\s#*\\r\\n]+)'\n    replacement = r'\\1 use_authtok'\n    \n    try:\n        with open(file_path, 'r') as file:\n            for line in file:\n                if re.match(pattern, line) and 'use_authtok' not in line:\n                    modified_line = re.sub(pattern, replacement, line)\n                    modified_lines.append(modified_line)\n                    modification_needed = True\n                else:\n                    modified_lines.append(line)\n        \n        if modification_needed:\n            with open(file_path, 'w') as file:\n                file.writelines(modified_lines)\n            print(f\"Added 'use_authtok' to pam_pwhistory line in {file_path}.\")\n        \n        # Update using pam-auth-update only if a modification was made\n        if modification_needed:\n            subprocess.run(['pam-auth-update', '--enable', profile_name], check=True)\n            print(f\"Enabled profile '{profile_name}' using pam-auth-update.\")\n    \n    except OSError as e:\n        print(f\"Error writing to {file_path}: {e}\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running pam-auth-update: {e}\")\n"
  },
  {
    "name": "Ensure pam_unix does not include nullok",
    "id": "5.3.3.4.1",
    "type": "Automated",
    "start_page": 640,
    "end_page": 642,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The nullok argument overrides the default action of pam_unix.so to not permit the user access to a service if their official password is blank.",
    "rationale": "Using a strong password is essential to helping protect personal and sensitive information from unauthorized access",
    "audit_details": "Run the following command to verify that the nullok argument is not set on the\npam_unix.so module:\n# grep -PH -- '^\n\\h*\\^\n\\h*[^#\\n\\r]+\\h+pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bnullok\\b'\n\nOutput should be similar to:\n/etc/pam.d/common-password:password  [success=1 default=ignore] \npam_unix.so obscure use_authtok try_first_pass yescrypt\n/etc/pam.d/common-auth:auth  [success=2 default=ignore]  pam_unix.so\ntry_first_pass\n/etc/pam.d/common-account:account  [success=1 new_authtok_reqd=done\ndefault=ignore]  pam_unix.so\n/etc/pam.d/common-session:session  required  pam_unix.so\n/etc/pam.d/common-session-noninteractive:session  required  pam_unix.so",
    "audit_code": "# grep -PH -- '^\n\\h*\\^\n\\h*[^#\\n\\r]+\\h+pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bnullok\\b'",
    "remediation_details": "Run the following command:\n# grep -PH -- '^\n\\h*([^#\\n\\r]+\\h+)?pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?nullok\\b'\n/usr/share/pam-configs/*\n\nEdit any files returned and remove the nullok argument for the pam_unix lines Example File:\nName: Unix authentication\nDefault: yes\nPriority: 256\nAuth-Type: Primary\nAuth:\n    [success=end default=ignore]  pam_unix.so try_first_pass # <**ensure line does not include nullok**>\nAuth-Initial:\n    [success=end default=ignore]  pam_unix.so # <- **ensure line does not include nullok**\nAccount-Type: Primary\nAccount:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nAccount-Initial:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nSession-Type: Additional\nSession:\n    required    pam_unix.so\nSession-Initial:\n    required    pam_unix.so\nPassword-Type: Primary\nPassword:\n    [success=end default=ignore]  pam_unix.so obscure use_authtok\ntry_first_pass yescrypt\nPassword-Initial:\n    [success=end default=ignore]  pam_unix.so obscure yescrypt\n\nRun the following command to update the files in the /etc/pam.d/ directory:\n# pam-auth-update --enable <EDITED_PROFILE_NAME>",
    "remediation_code": "# grep -PH -- '^\n\\h*([^#\\n\\r]+\\h+)?pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?nullok\\b'\n/usr/share/pam-configs/*\n# pam-auth-update --enable <EDITED_PROFILE_NAME>\n# pam-auth-update --enable unix",
    "python_script": "\nimport pathlib\nimport re\nimport subprocess\n\n# Define the paths and regex pattern\npam_config_dir = pathlib.Path('/usr/share/pam-configs/')\npam_d_dir = pathlib.Path('/etc/pam.d/')\npattern = re.compile(r'pam_unix\\.so\\s*[^#]*\\bnullok\\b')\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if nullok is present in pam_unix.so lines.\"\"\"\n    for file in pam_d_dir.glob('common*'):\n        with file.open('r') as f:\n            for line in f:\n                if pattern.search(line):\n                    print(f\"Found 'nullok' in {file}: {line.strip()}\")\n                    return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by removing nullok from pam_unix.so lines and updating PAM config.\"\"\"\n    for file in pam_config_dir.glob('*.cfg'):\n        edited = False\n        new_lines = []\n        with file.open('r') as f:\n            for line in f:\n                new_line = pattern.sub(lambda m: m.group().replace(' nullok', ''), line)\n                if new_line!= line:\n                    edited = True\n                    print(f\"Removed 'nullok' from {file}: {line.strip()} -> {new_line.strip()}\")\n                new_lines.append(new_line)\n        if edited:\n            with file.open('w') as f:\n                f.writelines(new_lines)\n            profile_name = file.stem\n            print(f\"Updating PAM config with profile {profile_name}...\")\n            subprocess.run(['pam-auth-update', '--enable', profile_name])\n"
  },
  {
    "name": "Ensure pam_unix does not include remember",
    "id": "5.3.3.4.2",
    "type": "Automated",
    "start_page": 643,
    "end_page": 644,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The remember=n argument saves the last n passwords for each user in /etc/security/opasswd in order to force password change history and keep the user from alternating between the same password too frequently. The MD5 password hash algorithm is used for storing the old passwords. Instead of this option the pam_pwhistory module should be used. The pam_pwhistory module saves the last n passwords for each user in /etc/security/opasswd using the password hash algorithm set on the pam_unix module. This allows for the yescrypt or sha512 hash algorithm to be used.",
    "rationale": "The remember=n argument should be removed to ensure a strong password hashing algorithm is being used. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local user's old passwords stored in /etc/security/opasswd.",
    "audit_details": "Run the following command to verify that the remember argument is not set on the pam_unix.so module:\n# grep -PH -- '^\n\\h*\\^\n\\h*[^#\\n\\r]+\\h+pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bremember=\\d+\\b'\n\nOutput should be similar to:\n/etc/pam.d/common-password:password  [success=1 default=ignore]  pam_unix.so obscure yescrypt\n/etc/pam.d/common-auth:auth  [success=1 default=ignore]  pam_unix.so\n/etc/pam.d/common-account:account  [success=1 new_authtok_reqd=done default=ignore]  pam_unix.so\n/etc/pam.d/common-session:session  required  pam_unix.so\n/etc/pam.d/common-session-noninteractive:session  required  pam_unix.so",
    "audit_code": "# grep -PH -- '^\n\\h*\\^\n\\h*[^#\\n\\r]+\\h+pam_unix\\.so\\b' /etc/pam.d/common{password,auth,account,session,session-noninteractive} | grep -Pv -'\\bremember=\\d+\\b'",
    "remediation_details": "Run the following command:\n# grep -PH -- '^\n\\h*([^#\\n\\r]+\\h+)?pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?remember\\b' /usr/share/pam-configs/*\n\nEdit any files returned and remove the remember=_<N>_ argument for the pam_unix lines\nExample output:\n[success=end default=ignore]  pam_unix.so obscure use_authtok try_first_pass yescrypt remember=5 # **<- remove remember=<N>**\n\nRun the following command to update the files in the /etc/pam.d/ directory:\n# pam-auth-update --enable <EDITED_PROFILE_NAME>\n\nExample:\n# pam-auth-update --enable unix\n\nNote: If custom files are being used, the corresponding files in /etc/pam.d/ would need to be edited directly, and the pam-auth-update --enable <EDITED_PROFILE_NAME> command skipped",
    "remediation_code": "# grep -PH -- '^\n\\h*([^#\\n\\r]+\\h+)?pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?remember\\b' /usr/share/pam-configs/*",
    "python_script": "\nimport re\nimport glob\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if pam_unix includes 'remember' argument.\"\"\"\n    pam_d_files = ['/etc/pam.d/common-password', '/etc/pam.d/common-auth', \n                   '/etc/pam.d/common-account', '/etc/pam.d/common-session', \n                   '/etc/pam.d/common-session-noninteractive']\n    \n    for file in pam_d_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            if re.search(r'\\bpam_unix\\.so\\b.*\\bremember=\\d+\\b', content):\n                print(f\"Vulnerability found in {file}\")\n                return False\n    print(\"No vulnerability found\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate pam_unix 'remember' argument vulnerability.\"\"\"\n    # 1. Find files needing update\n    config_files = glob.glob('/usr/share/pam-configs/*')\n    files_to_edit = []\n    for file in config_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            if re.search(r'\\bpam_unix\\.so\\b.*\\bremember=\\d+\\b', content):\n                files_to_edit.append(file)\n    \n    # 2. Edit files\n    for file in files_to_edit:\n        with open(file, 'r+') as f:\n            content = f.read()\n            new_content = re.sub(r'(\\bpam_unix\\.so\\b[^#]*?)\\bremember=\\d+\\b', r'\\1', content)\n            f.seek(0)\n            f.write(new_content)\n            f.truncate()\n        print(f\"Edited {file}, removed 'remember' argument\")\n    \n    # 3. Update `/etc/pam.d/` files\n    for file in files_to_edit:\n        profile_name = file.split('/')[-1].split('.')[0]\n        subprocess.run(f\"pam-auth-update --enable {profile_name}\", shell=True, check=True)\n        print(f\"Updated /etc/pam.d/ files for profile {profile_name} using pam-auth-update\")\n```\n**Example Usage:**\n```python\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure pam_unix includes a strong password hashing algorithm",
    "id": "5.3.3.4.3",
    "type": "Automated",
    "start_page": 645,
    "end_page": 648,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password.\n\nThe pam_unix module can be configured to use one of the following hashing algorithms for user's passwords:\n\n  - `md5 - When a user changes their password next, encrypt it with the MD5 algorithm.`\n\n  - `bigcrypt - When a user changes their password next, encrypt it with the DEC C2 algorithm.`\n\n  - `sha256 - When a user changes their password next, encrypt it with the SHA256 algorithm. The SHA256 algorithm must be supported by the crypt(3) function.`\n\n  - `sha512 - When a user changes their password next, encrypt it with the SHA512 algorithm. The SHA512 algorithm must be supported by the crypt(3) function.`\n\n  - `blowfish - When a user changes their password next, encrypt it with the blowfish algorithm. The blowfish algorithm must be supported by the crypt(3) function.`\n\n  - `gost_yescrypt - When a user changes their password next, encrypt it with the gost-yescrypt algorithm. The gost-yescrypt algorithm must be supported by the crypt(3) function.`\n\n  - `yescrypt - When a user changes their password next, encrypt it with the yescrypt algorithm. The yescrypt algorithm must be supported by the crypt(3) function.",
    "rationale": "The SHA-512 and yescrypt algorithms provide a stronger hash than other algorithms used by Linux for password hash generation. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local user passwords.\n\n**Note: These changes only apply to the local system.**",
    "audit_details": "Run the following command to verify that a strong password hashing algorithm is set on the pam_unix.so module:\n```\n# grep -PH -'^\n\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\n\\b' /etc/pam.d/common-password\n```\nOutput should be similar to:\n```\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt\n```\nVerify that the line(s) include either sha512 **- OR -** `yescrypt`",
    "audit_code": "# grep -PH -'^\n\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?(sha512|yescrypt)\\n\\b' /etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n```\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n```\nEdit any returned files and edit or add a strong hashing algorithm, either sha512 or yescrypt, that meets local site policy to the pam_unix lines in the Password section:\n_Example File:_\n```\nName: Unix authentication\nDefault: yes\nPriority: 256\nAuth-Type: Primary # <- Start of \"Auth\" section\nAuth:\n    [success=end default=ignore]  pam_unix.so try_first_pass\nAuth-Initial:\n    [success=end default=ignore]  pam_unix.so\nAccount-Type: Primary # <- Start of \"Account\" section\nAccount:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nAccount-Initial:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nSession-Type: Additional # <- Start of \"Session\" section\nSession:\n    required    pam_unix.so\nSession-Initial:\n    required    pam_unix.so\nPassword-Type: Primary # <- Start of \"Password\" section\nPassword:\n    [success=end default=ignore]  pam_unix.so obscure use_authtok try_first_pass yescrypt # <- **ensure hashing algorithm is either sha512 or yescrypt**\nPassword-Initial:\n    [success=end default=ignore]  pam_unix.so obscure yescrypt # <**ensure hashing algorithm is either sha512 or yescrypt**\n```\nRun the following command to update the files in the /etc/pam.d/ directory:\n```\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>\n```\n_Example:_\n```\n# pam-auth-update --enable unix\n```\n",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
    "python_script": "\nimport re\nimport subprocess\nimport fileinput\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if pam_unix uses a strong password hashing algorithm.\"\"\"\n    try:\n        with open('/etc/pam.d/common-password', 'r') as file:\n            content = file.read()\n            pattern = r'pam_unix\\.so.*?(sha512|yescrypt)'\n            if re.search(pattern, content):\n                return True\n    except FileNotFoundError:\n        print(\"Error: /etc/pam.d/common-password not found.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by ensuring pam_unix uses a strong password hashing algorithm.\"\"\"\n    # Identify affected files\n    affected_files_cmd = \"awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\\\.so/) print FILENAME}' /usr/share/pam-configs/*\"\n    affected_files = subprocess.check_output(affected_files_cmd, shell=True).decode('utf-8').splitlines()\n\n    # Update identified files to use yescrypt (chosen for example; switch to sha512 if preferred)\n    target_algorithm = 'yescrypt'\n    for file in affected_files:\n        print(f\"Updating {file} to use {target_algorithm}...\")\n        for line in fileinput.input(file, inplace=True):\n            if 'pam_unix.so' in line and 'Password-Type:' in fileinput.file().name:\n                line = re.sub(r'(pam_unix\\.so[^ ]*)', rf'\\1 {target_algorithm}', line)\n            print(line, end='')\n\n    # Update PAM configuration for each modified profile\n    for file in affected_files:\n        profile_name = file.split('/')[-1].split('.')[0]\n        print(f\"Running pam-auth-update --enable {profile_name}...\")\n        subprocess.run(['pam-auth-update', '--enable', profile_name])\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"Strong password hashing algorithm already in use.\")\n"
  },
  {
    "name": "Ensure pam_unix includes use_authtok",
    "id": "5.3.3.4.4",
    "type": "Automated",
    "start_page": 649,
    "end_page": 651,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "use_authtok - When password changing enforce the module to set the new password to the one provided by a previously stacked password module",
    "rationale": "use_authtok allows multiple pam modules to confirm a new password before it is accepted.",
    "audit_details": "Run the following command to verify that use_authtok is set on the pam_unix.so module lines in the password stack:\n# grep -PH -'^\\\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b'\n/etc/pam.d/common-password\n\nOutput should be similar to:\n/etc/pam.d/common-password:password  [success=1 default=ignore] pam_unix.so obscure use_authtok try_first_pass yescrypt\n\nVerify that the line(s) include use_authtok",
    "audit_code": "# grep -PH -'^\\\\h*password\\h+([^#\\n\\r]+)\\h+pam_unix\\.so\\h+([^#\\n\\r]+\\h+)?use_authtok\\b'\n/etc/pam.d/common-password",
    "remediation_details": "Run the following command:\n# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n\nEdit any returned files add use_authtok to the pam_unix line in the Password section under Password: subsection: Note: The if the file's Password section includes a Password-Initial: subsection, use_authtok should not be added to the pam_unix line in the Password-Initial: subsection Example File:\nName: Unix authentication\nDefault: yes\nPriority: 256\nAuth-Type: Primary # <- Start of \"Auth\" section\nAuth:\n    [success=end default=ignore]  pam_unix.so try_first_pass\nAuth-Initial:\n    [success=end default=ignore]  pam_unix.so\nAccount-Type: Primary # <- Start of \"Account\" section\nAccount:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nAccount-Initial:\n    [success=end new_authtok_reqd=done default=ignore]   pam_unix.so\nSession-Type: Additional # <- Start of \"Session\" section\nSession:\n    required    pam_unix.so\nSession-Initial:\n    required    pam_unix.so\nPassword-Type: Primary # <- Start of \"Password\" section\nPassword:\n    [success=end default=ignore]  pam_unix.so obscure use_authtok try_first_pass yescrypt # <- **ensure line includes use_authtok**\nPassword-Initial:\n    [success=end default=ignore]  pam_unix.so obscure yescrypt # <**Password-Initial: subsection does not include use_authtok\nRun the following command to update the files in the /etc/pam.d/ directory:",
    "remediation_code": "# awk '/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\.so/) print FILENAME}' /usr/share/pam-configs/*\n\n# pam-auth-update --enable <MODIFIED_PROFILE_NAME>",
    "python_script": "\nimport re\nimport fileinput\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if use_authtok is set on pam_unix.so module lines in the password stack\"\"\"\n    pattern = r\"^password\\s+[^#]+\\s+pam_unix\\.so\\s+.*\\buse_authtok\\b\"\n    with open(\"/etc/pam.d/common-password\", \"r\") as file:\n        for line in file:\n            if re.match(pattern, line):\n                return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by adding use_authtok to pam_unix.so lines in the Password section\"\"\"\n    # Find and modify files in /usr/share/pam-configs/\n    for file in subprocess.check_output([\"awk\", \"/Password-Type:/{ f = 1;next } /-Type:/{ f = 0 } f {if (/pam_unix\\\\.so/) print FILENAME}\", \"/usr/share/pam-configs/*\"]).decode().splitlines():\n        file_path = file.strip()\n        print(f\"Modifying file: {file_path}\")\n        with fileinput.input(file_path, inplace=True) as file:\n            in_password_section = False\n            for line in file:\n                if line.startswith(\"Password-Type:\"):\n                    in_password_section = True\n                elif in_password_section and \"pam_unix.so\" in line:\n                    if \"use_authtok\" not in line:\n                        line = re.sub(r\"(pam_unix\\.so)(\\s+[^#\\n\\r]+)\", r\"\\1 use_authtok\\2\", line)\n                        print(f\"Added use_authtok to: {line.strip()}\")\n                print(line, end='')\n        subprocess.run([\"pam-auth-update\", \"--enable\", file_path.split(\"/\")[-1]])\n        print(f\"Updated /etc/pam.d/ directory for: {file_path.split('/')[-1]}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure password expiration is configured",
    "id": "5.4.1.1",
    "type": "Automated",
    "start_page": 654,
    "end_page": 657,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PASS_MAX_DAYS parameter in /etc/login.defs allows an administrator to force passwords to expire once they reach a defined age.\n\n`PASS_MAX_DAYS` _<N> - The maximum number of days a password may be used. If the_ password is older than this, a password change will be forced. If not specified, -1 will be assumed (which disables the restriction).",
    "rationale": "The window of opportunity for an attacker to leverage compromised credentials or successfully compromise credentials via an online brute force attack is limited by the age of the password. Therefore, reducing the maximum age of a password also reduces an attacker's window of opportunity.\n\nWe recommend a yearly password change. This is primarily because for all their good intentions users will share credentials across accounts. Therefore, even if a breach is publicly identified, the user may not see this notification, or forget they have an account on that site. This could leave a shared credential vulnerable indefinitely. Having an organizational policy of a 1-year (annual) password expiration is a reasonable compromise to mitigate this with minimal user burden.",
    "audit_details": "Run the following command and verify PASS_MAX_DAYS is set to 365 days or less and conforms to local site policy:\n\n```\n# grep -Pi -- '^\th*PASS_MAX_DAYS\th+\b' /etc/login.defs\n```\n\n_Example output:_\n\n```\nPASS_MAX_DAYS 365\n```\n\nRun the following command and Review list of users and PASS_MAX_DAYS to verify that all users PASS_MAX_DAYS conforms to site policy (no more than 365 days): Run the following command to verify all passwords have a PASS_MAX_DAYS of 365 days or less and greater than 0 days:\n```\n# awk -F: '($2~/^\b.+\b/) {if($5 > 365 || $5 < 1)print \"User: \" $1 \" PASS_MAX_DAYS: \" $5}' /etc/shadow\n```\nNothing should be returned",
    "audit_code": "# grep -Pi -- '^\th*PASS_MAX_DAYS\th+\b' /etc/login.defs\n# awk -F: '($2~/^\b.+\b/) {if($5 > 365 || $5 < 1)print \"User: \" $1 \" PASS_MAX_DAYS: \" $5}' /etc/shadow",
    "remediation_details": "Set the PASS_MAX_DAYS parameter to conform to site policy in /etc/login.defs :\n\n```\nPASS_MAX_DAYS 365\n```\n\nModify user parameters for all users with a password set to match:\n```\n# chage --maxdays 365 <user>\n```\n\nEdit /etc/login.defs and set PASS_MAX_DAYS to a value greater than 0 that follows local site policy:\n_Example:_\n```\nPASS_MAX_DAYS 365\n```\n\nRun the following command to modify user parameters for all users with a password set to a maximum age no greater than 356 or less than 1 that follows local site policy:\n```\n# chage --maxdays <N> <user>\n```\n_Example:_\n```\n# awk -F: '($2~/^\b.+\b/) {if($5 > 365 || $5 < 1)system (\"chage --maxdays 365 \" $1)}' /etc/shadow\n```\n**Default Value:**\nPASS_MAX_DAYS 99999",
    "remediation_code": "# chage --maxdays 365 <user>\n# awk -F: '($2~/^\b.+\b/) {if($5 > 365 || $5 < 1)system (\"chage --maxdays 365 \" $1)}' /etc/shadow",
    "python_script": "\nimport configparser\nimport pwd\nimport spwd\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit password expiration configuration\"\"\"\n    max_days_allowed = 365\n\n    # Check /etc/login.defs\n    config = configparser.ConfigParser()\n    config.read('/etc/login.defs')\n    pass_max_days = config.getint('DEFAULT', 'PASS_MAX_DAYS', fallback=-1)\n    if pass_max_days == -1 or pass_max_days > max_days_allowed:\n        print(f\"PASS_MAX_DAYS in /etc/login.defs is not set or exceeds {max_days_allowed} days ({pass_max_days})\")\n        return False\n\n    # Check /etc/shadow\n    for user in pwd.getpwall():\n        if user.pw_shell and user.pw-shell!= '/usr/sbin/nologin':  # skip system users\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_max > max_days_allowed or shadow_entry.sp_max < 1:\n                print(f\"User {user.pw_name} has PASS_MAX_DAYS set to {shadow_entry.sp_max}, which exceeds {max_days_allowed} days or is less than 1\")\n                return False\n\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password expiration configuration\"\"\"\n    desired_max_days = 365\n\n    # Update /etc/login.defs\n    config = configparser.ConfigParser()\n    config.read('/etc/login.defs')\n    if not config.has_section('DEFAULT'):\n        config.add_section('DEFAULT')\n    config.set('DEFAULT', 'PASS_MAX_DAYS', str(desired_max_days))\n    with open('/etc/login.defs', 'w') as config_file:\n        config.write(config_file)\n    print(f\"Updated PASS_MAX_DAYS in /etc/login.defs to {desired_max_days}\")\n\n    # Update user parameters in /etc/shadow\n    for user in pwd.getpwall():\n        if user.pw_shell and user.pw_shell!= '/usr/sbin/nologin':  # skip system users\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_max!= desired_max_days:\n                subprocess.run(['chage', '--maxdays', str(desired_max_days), user.pw_name])\n                print(f\"Updated PASS_MAX_DAYS for user {user.pw_name} to {desired_max_days}\")\n"
  },
  {
    "name": "Ensure password expiration warning days is configured",
    "id": "5.4.1.3",
    "type": "Automated",
    "start_page": 661,
    "end_page": 662,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The PASS_WARN_AGE parameter in /etc/login.defs allows an administrator to notify users that their password will expire in a defined number of days.\n\n`PASS_WARN_AGE` _<N> - The number of days warning given before a password expires. A_ zero means warning is given only upon the day of expiration, a negative value means no warning is given. If not specified, no warning will be provided.",
    "rationale": "Providing an advance warning that a password will be expiring gives users time to think of a secure password. Users caught unaware may choose a simple password or write it down where it may be discovered.",
    "audit_details": "Run the following command and verify PASS_WARN_AGE is 7 or more and follows local site policy:\n\n```\n# grep -Pi -- '^\\\\h*PASS_WARN_AGE\\\\h+\\\\d+\\\\b' /etc/login.defs\n```\n\n_Example output:_\n\n```\nPASS_WARN_AGE 7\n```\n\nRun the following command to verify all passwords have a PASS_WARN_AGE of 7 or more:\n```\n# awk -F: '($2~/^\\\\$.+\\\\$/) {if($6 < 7)print \"User: \" $1 \" PASS_WARN_AGE: \" $6}' /etc/shadow\n```\n\nNothing should be returned",
    "audit_code": "# grep -Pi -- '^\nh*PASS_WARN_AGE\th+\td+\b' /etc/login.defs\n\n# awk -F: '($2~/^\\",
    "remediation_details": "Edit /etc/login.defs and set PASS_WARN_AGE to a value of 7 or more that follows local site policy:\n_Example:_\n```\nPASS_WARN_AGE 7\n```\nRun the following command to modify user parameters for all users with a password set to a minimum warning to 7 or more days that follows local site policy:\n```\n# chage --warndays <N> <user>\n```\n_Example:_\n```\n# awk -F: '($2~/^\\\\$.+\\\\$/) {if($6 < 7)system (\"chage --warndays 7 \" $1)}' /etc/shadow\n``",
    "remediation_code": "# chage --warndays 7 <user>\n# awk -F: '($2~/^\\\\$.+\\\\$/) {if($6 < 7)system (\"chage --warndays 7 \" $1)}' /etc/shadow\n",
    "python_script": "\nimport configparser\nimport subprocess\nimport pwd\nimport spwd\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit password expiration warning days configuration\"\"\"\n    # 1. Check PASS_WARN_AGE in /etc/login.defs\n    config = configparser.ConfigParser()\n    config.read('/etc/login.defs')\n    pass_warn_age = config.getint('DEFAULT', 'PASS_WARN_AGE', fallback=None)\n    if pass_warn_age is None or pass_warn_age < 7:\n        print(\"PASS_WARN_AGE not set or less than 7 in /etc/login.defs\")\n        return False\n\n    # 2. Verify all users have PASS_WARN_AGE of 7 or more\n    for user in pwd.getpwall():\n        try:\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_warn < 7:\n                print(f\"User: {user.pw_name} PASS_WARN_AGE: {shadow_entry.sp_warn}\")\n                return False\n        except KeyError:\n            # User not found in /etc/shadow (e.g., system user without password)\n            continue\n\n    return True\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate password expiration warning days configuration\"\"\"\n    # 1. Edit /etc/login.defs to set PASS_WARN_AGE to 7 or more\n    config = configparser.ConfigParser()\n    config.read('/etc/login.defs')\n    if not config.has_section('DEFAULT'):\n        config.add_section('DEFAULT')\n    config.set('DEFAULT', 'PASS_WARN_AGE', '7')\n    with open('/etc/login.defs', 'w') as config_file:\n        config.write(config_file)\n    print(\"Set PASS_WARN_AGE to 7 in /etc/login.defs\")\n\n    # 2. Update password expiration warning days for all users with a value less than 7\n    for user in pwd.getpwall():\n        try:\n            shadow_entry = spwd.getspnam(user.pw_name)\n            if shadow_entry.sp_warn < 7:\n                subprocess.run(['chage', '--warndays', '7', user.pw_name])\n                print(f\"Updated PASS_WARN_AGE to 7 for user: {user.pw_name}\")\n        except KeyError:\n            # User not found in /etc/shadow (e.g., system user without password)\n            continue\n"
  },
  {
    "name": "Ensure strong password hashing algorithm is configured",
    "id": "5.4.1.4",
    "type": "Automated",
    "start_page": 663,
    "end_page": 665,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "A cryptographic hash function converts an arbitrary-length input into a fixed length output. Password hashing performs a one-way transformation of a password, turning the password into another string, called the hashed password.\n```\nENCRYPT_METHOD (string) - This defines the system default encryption algorithm for encrypting passwords (if no algorithm are specified on the command line). It can take one of these values:\n\n  - `MD5 - MD5-based algorithm will be used for encrypting password`\n\n  - `SHA256 - SHA256-based algorithm will be used for encrypting password`\n\n  - `SHA512 - SHA512-based algorithm will be used for encrypting password`\n\n  - `BCRYPT - BCRYPT-based algorithm will be used for encrypting password`\n\n  - `YESCRYPT - YESCRYPT-based algorithm will be used for encrypting password`\n\n  - `DES - DES-based algorithm will be used for encrypting password (default)`\n\n**Note:**\n\n  - This parameter overrides the deprecated MD5_CRYPT_ENAB variable.\n\n  - This parameter will only affect the generation of group passwords.\n\n  - The generation of user passwords is done by PAM and subject to the PAM configuration.\n\n  - It is recommended to set this variable consistently with the PAM configuration.",
    "rationale": "The SHA-512 and yescrypt algorithms provide a stronger hash than other algorithms used by Linux for password hash generation. A stronger hash provides additional protection to the system by increasing the level of effort needed for an attacker to successfully determine local group passwords.",
    "audit_details": "Run the following command to verify the hashing algorithm is sha512 or yescrypt in /etc/login.defs:\n```\n# grep -Pi -- '^\n\\h*ENCRYPT_METHOD\\h+(SHA512|yescrypt)\\b' /etc/login.defs\n```\n_Example output:_\n```\nENCRYPT_METHOD SHA512\n - OR ENCRYPT_METHOD YESCRYPT\n```\n",
    "audit_code": "# grep -Pi -- '^\n\\h*ENCRYPT_METHOD\\h+(SHA512|yescrypt)\\b' /etc/login.defs",
    "remediation_details": "Edit /etc/login.defs and set the ENCRYPT_METHOD to SHA512 or YESCRYPT:\n```\nENCRYPT_METHOD <HASHING_ALGORITHM>\n```\n_Example:_\n```\nENCRYPT_METHOD YESCRYPT\n```\n**Note:**\n\n  - This only effects local groups' passwords created after updating the file to use sha512 or yescrypt.\n\n  - If it is determined that the password algorithm being used is not sha512 or yescrypt, once it is changed, it is recommended that all group passwords be updated to use the stronger hashing algorithm.\n\n  - It is recommended that the chosen hashing algorithm is consistent across /etc/login.defs and the PAM configuration.",
    "remediation_code": "Edit /etc/login.defs and set the ENCRYPT_METHOD to SHA512 or YESCRYPT:\n```\nENCRYPT_METHOD <HASHING_ALGORITHM>\n```",
    "python_script": "\nimport re\nimport os\n\n# Define the desired hashing algorithms (for ease of modification if needed)\ndesired_algorithms = ['SHA512', 'yescrypt']\nconfig_file_path = '/etc/login.defs'\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if the ENCRYPT_METHOD in /etc/login.defs is set to a strong hashing algorithm (SHA512 or yescrypt).\n    \n    Returns:\n        bool: True if a strong hashing algorithm is configured, False otherwise.\n    \"\"\"\n    try:\n        with open(config_file_path, 'r') as file:\n            for line in file:\n                match = re.match(r'^\\s*ENCRYPT_METHOD\\s+([A-Z]+)', line)\n                if match:\n                    return match.group(1) in desired_algorithms\n    except FileNotFoundError:\n        print(f\"File {config_file_path} not found.\")\n        return False\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting ENCRYPT_METHOD to SHA512 in /etc/login.defs.\n    \"\"\"\n    new_config_line = f\"ENCRYPT_METHOD {desired_algorithms[0]}\\n\"  # Default to SHA512 for remediation\n    try:\n        with open(config_file_path, 'r+') as file:\n            lines = file.readlines()\n            file.seek(0)\n            config_updated = False\n            for line in lines:\n                if line.startswith('ENCRYPT_METHOD'):\n                    file.write(new_config_line)\n                    config_updated = True\n                else:\n                    file.write(line)\n            if not config_updated:\n                file.write(new_config_line)\n            file.truncate()\n        print(f\"Set ENCRYPT_METHOD to {desired_algorithms[0]} in {config_file_path}.\")\n    except PermissionError:\n        print(f\"Permission denied to modify {config_file_path}. Run with elevated privileges.\")\n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n"
  },
  {
    "name": "Ensure inactive password lock is configured",
    "id": "5.4.1.5",
    "type": "Automated",
    "start_page": 666,
    "end_page": 668,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "User accounts that have been inactive for over a given period of time can be automatically disabled.\n```\nINACTIVE - Defines the number of days after the password exceeded its maximum age\n```\nwhere the user is expected to replace this password.\nThe value is stored in the shadow password file. An input of 0 will disable an expired password with no delay. An input of -1 will blank the respective field in the shadow password file.",
    "rationale": "Inactive accounts pose a threat to system security since the users are not logging in to notice failed login attempts or other anomalies.",
    "audit_details": "Run the following command and verify INACTIVE conforms to site policy (no more than 45 days):\n```\n# useradd -D | grep INACTIVE\nINACTIVE=45\n```\nVerify all users with a password have Password inactive no more than 45 days after password expires\nVerify all users with a password have Password inactive no more than 45 days after password expires: Run the following command and Review list of users and INACTIVE to verify that all users INACTIVE conforms to site policy (no more than 45 days):\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)print \"User: \" $1 \" INACTIVE: \" $7}' /etc/shadow\n```\nNothing should be returned",
    "audit_code": "# useradd -D | grep INACTIVE\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)print \"User: \" $1 \" INACTIVE: \" $7}' /etc/shadow",
    "remediation_details": "Run the following command to set the default password inactivity period to 45 days or less that meets local site policy:\n```\n# useradd -D -f <N>\n```\n_Example:_\n```\n# useradd -D -f 45\n```\nRun the following command to modify user parameters for all users with a password set to an inactive age of 45 days or less that follows local site policy:\n```\n# chage --inactive <N> <user>\n```\n_Example:_\n```\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)system (\"chage --inactive 45 \" $1)}' /etc/shadow\n```",
    "remediation_code": "# useradd -D -f <N>\n# useradd -D -f 45\n# chage --inactive <N> <user>\n# awk -F: '($2~/^\\$.+\\$/) {if($7 > 45 || $7 < 0)system (\"chage --inactive 45 \" $1)}' /etc/shadow",
    "python_script": "```python\nimport subprocess\nimport re\nimport pwd\nimport spwd\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the system for inactive password lock configuration.\n    Returns True if the system is compliant, False otherwise.\n    \"\"\"\n    # Verify default INACTIVE value\n    default_inactive = subprocess.check_output(['useradd', '-D']).decode('utf-8')\n    if not re.search(r'INACTIVE=[0-9]+', default_inactive):\n        print(\"Default INACTIVE value not found or not correctly formatted.\")\n        return False\n    default_days = int(re.search(r'INACTIVE=([0-9]+)', default_inactive).group(1))\n    if default_days > 45:\n        print(f\"Default INACTIVE value ({default_days}) exceeds 45 days.\")\n        return False\n\n    # Check all users with a password\n    for user in pwd.getpwall():\n        if user.pw_shell and user.pw_shell!= '/usr/sbin/nologin':  # Assuming active users have a valid shell\n            try:\n                shadow_entry = spwd.getspnam(user.pw_name)\n                if shadow_entry.sp_inact > 45 or shadow_entry.sp_inact < 0:\n                    print(f\"User {user.pw_name} has INACTIVE value {shadow_entry.sp_inact}, not within compliance.\")\n                    return False\n            except KeyError:\n                # Handle user not found in shadow database (e.g., NIS/LDAP users)\n                print(f\"User {user.pw_name} not found in shadow database, skipping.\")\n                continue\n\n    print(\"All users and default INACTIVE value are within compliance.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the system to ensure inactive password lock is configured correctly.\n    \"\"\"\n    # Set default INACTIVE value to 45 days if not compliant\n    default_inactive_cmd = subprocess.check_output(['useradd', '-D']).decode('utf-8')\n    if not re.search(r'INACTIVE=45', default_inactive_cmd):\n        subprocess.check_call(['useradd', '-D', '-f', '45'])\n        print(\"Updated default INACTIVE value to 45 days.\")\n\n    # Update INACTIVE value for non-compliant users\n    with open('/etc/shadow', 'r+') as shadow_file:\n        lines = shadow_file.readlines()\n        shadow_file.seek(0)\n        for line in lines:\n            fields = line.split(':')\n            if len(fields) >= 8 and (int(fields[7]) > 45 or int(fields[7]) < 0):\n                fields[7] = '45'  # Update INACTIVE value to 45\n                shadow_file.write(':'.join(fields))\n            else:\n                shadow_file.write(line)\n        shadow_file.truncate()\n        print(f\"Updated INACTIVE value for non-compliant user {fields[0]} to 45 days.\")\n\n    # Alternatively, for updating users directly via `chage` (less preferred due to potential for missed users without a shadow entry):\n    # for user in pwd.getpwall():\n    #     if user.pw_shell and user.pw_shell!= '/usr/sbin/nologin':\n    #         try:\n    #             shadow_entry = spwd.getspnam(user.pw_name)\n    #             if shadow_entry.sp_inact > 45 or shadow_entry.sp_inact < 0:\n    #                 subprocess.check_call(['chage', '--inactive', '45', user.pw_name])\n    #                 print(f\"Updated INACTIVE value for user {user.pw_name} to 45 days.\")\n    #         except KeyError:\n    #             continue\n```\n**Important Notes:**\n\n1. **Security Caution**: Directly editing `/etc/shadow` (as done in the `remediate_vuln` function) is a security risk if not done carefully. Ensure this script is run with appropriate privileges and in a controlled environment. Always back up sensitive files before modifying them.\n\n2. **Testing**: Before running the remediation function on a production system, test it thoroughly in a staging or virtual environment to ensure it works as expected.\n\n3. **Site Policy Compliance**: The value \"45\" used in this script is based on the problem statement. Ensure it aligns with your organization's security policy. If a different value is required, adjust the script accordingly."
  },
  {
    "name": "Ensure all users last password change date is in the past",
    "id": "5.4.1.6",
    "type": "Automated",
    "start_page": 669,
    "end_page": 670,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "All users should have a password change date in the past.",
    "rationale": "If a user's recorded password change date is in the future, then they could bypass any set password expiration.",
    "audit_details": "Run the following command and verify nothing is returned\n```\n{\n  while IFS= read -r l_user; do\n   l_change=$(date -d \"$(chage --list $l_user | grep '^Last password\nchange' | cut -d: -f2 | grep -v 'never$')\" +%s)\n   if [[ \"$l_change\" -gt \"$(date +%s)\" ]]; then\n     echo \"User: \\\"$l_user\\\" last password change was \\\"$(chage --list\n$l_user | grep '^Last password change' | cut -d: -f2)\\\"\"\n   fi\n  done < <(awk -F: '$2~/^\\$.+\\$/{print $1}' /etc/shadow)\n}\n```",
    "audit_code": "Run the following command and verify nothing is returned\n```\n{\n  while IFS= read -r l_user; do\n   l_change=$(date -d \"$(chage --list $l_user | grep '^Last password\nchange' | cut -d: -f2 | grep -v 'never$')\" +%s)\n   if [[ \"$l_change\" -gt \"$(date +%s)\" ]]; then\n     echo \"User: \\\"$l_user\\\" last password change was \\\"$(chage --list\n$l_user | grep '^Last password change' | cut -d: -f2)\\\"\"\n   fi\n  done < <(awk -F: '$2~/^\\$.+\\$/{print $1}' /etc/shadow)\n}\n```",
    "remediation_details": "Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate.",
    "remediation_code": "Investigate any users with a password change date in the future and correct them. Locking the account, expiring the password, or resetting the password manually may be appropriate.",
    "python_script": ""
  },
  {
    "name": "Ensure root is the only UID 0 account",
    "id": "5.4.2.1",
    "type": "Automated",
    "start_page": 672,
    "end_page": 672,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Any account with UID 0 has superuser privileges on the system.",
    "rationale": "This access must be limited to only the default root account and only from the system console. Administrative access must be through an unprivileged account using an approved mechanism as noted in Item 5.6 Ensure access to the su command is restricted.",
    "audit_details": "Run the following command and verify that only \"root\" is returned:\n```\n# awk -F: '($3 == 0) { print $1 }' /etc/passwd\nroot\n```\n",
    "audit_code": "# awk -F: '($3 == 0) { print $1 }' /etc/passwd",
    "remediation_details": "Run the following command to change the root account UID to 0:\n```\n# usermod -u 0 root\n```\n\nModify any users other than root with UID 0 and assign them a new UID.",
    "remediation_code": "# usermod -u 0 root",
    "python_script": "\nimport pwd\nimport grp\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if only 'root' has UID 0\"\"\"\n    extra_root_users = [user.pw_name for user in pwd.getpwall() if user.pw_uid == 0 and user.pw_name!= 'root']\n    return len(extra_root_users) == 0\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate users with UID 0 (other than 'root')\"\"\"\n    # Find users with UID 0 (other than 'root')\n    users_to_remediate = [user for user in pwd.getpwall() if user.pw_uid == 0 and user.pw_name!= 'root']\n\n    # Assign a new, unique UID to each user\n    for user in users_to_remediate:\n        new_uid = find_available_uid()\n        print(f\"Renaming user '{user.pw_name}' from UID 0 to {new_uid}...\")\n        os.system(f\"usermod -u {new_uid} {user.pw_name}\")\n\ndef find_available_uid() -> int:\n    \"\"\"Find the next available UID (above 1000, assuming system/users < 1000)\"\"\"\n    used_uids = [user.pw_uid for user in pwd.getpwall()]\n    new_uid = 1001\n    while new_uid in used_uids:\n        new_uid += 1\n    return new_uid\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure root is the only GID 0 account",
    "id": "5.4.2.2",
    "type": "Automated",
    "start_page": 673,
    "end_page": 674,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The usermod command can be used to specify which group the root account belongs to. This affects permissions of files that are created by the root account.",
    "rationale": "Using GID 0 for the root account helps prevent root -owned files from accidentally becoming accessible to non-privileged users.",
    "audit_details": "Run the following command to verify the root user's primary GID is 0, and no other user's have GID 0 as their primary GID:\n```\n# awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1\":\"$4}' /etc/passwd\nroot:0\n```\n**Note: User's: sync, shutdown, halt, and operator are excluded from the check for other user's with GID 0**",
    "audit_code": "# awk -F: '($1 !~ /^(sync|shutdown|halt|operator)/ && $4==\"0\") {print $1\":\"$4}' /etc/passwd",
    "remediation_details": "Run the following command to set the root user's GID to 0:\n```\n# usermod -g 0 root\n```\nRun the following command to set the root group's GID to 0:\n```\n# groupmod -g 0 root\n```\nRemove any users other than the root user with GID 0 or assign them a new GID if appropriate.",
    "remediation_code": "# usermod -g 0 root\n# groupmod -g 0 root",
    "python_script": "\nimport pwd\nimport grp\nimport subprocess\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if root is the only GID 0 account.\n    \n    Returns:\n    bool: True if compliant, False otherwise\n    \"\"\"\n    excluded_users = ['sync', 'shutdown', 'halt', 'operator']\n    root_gid_compliant = False\n    other_gid_zero_users = []\n\n    with open(\"/etc/passwd\", \"r\") as passwd_file:\n        for line in passwd_file:\n            fields = line.split(\":\")\n            username, _, _, gid, _ = fields[0], fields[1], fields[2], int(fields[3]), fields[4]\n            if username in excluded_users:\n                continue\n            if username == \"root\":\n                root_gid_compliant = (gid == 0)\n            elif gid == 0:\n                other_gid_zero_users.append(username)\n\n    return root_gid_compliant and not other_gid_zero_users\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by ensuring root's GID is 0 and no other user has GID 0.\n    \"\"\"\n    # Set root user's GID to 0\n    try:\n        subprocess.run([\"usermod\", \"-g\", \"0\", \"root\"], check=True)\n        print(\"Set root user's GID to 0.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to set root's GID: {e}\")\n\n    # Set root group's GID to 0\n    try:\n        subprocess.run([\"groupmod\", \"-g\", \"0\", \"root\"], check=True)\n        print(\"Set root group's GID to 0.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to set root group's GID: {e}\")\n\n    # Update any non-root users with GID 0\n    new_gid = 1001\n    while pwd.getpwnam(\"user\" + str(new_gid)) if os.system(\"getent passwd user\" + str(new_gid)) == 0 else False:\n        new_gid += 1\n\n    with open(\"/etc/passwd\", \"r+\") as passwd_file:\n        lines = passwd_file.readlines()\n        passwd_file.seek(0)\n        for line in lines:\n            fields = line.split(\":\")\n            username, gid = fields[0], int(fields[3])\n            if username != \"root\" and gid == 0:\n                fields[3] = str(new_gid)\n                newline = \":\".join(fields)\n                print(f\"Updated GID for {username} to {new_gid}.\")\n            passwd_file.write(\":\".join(fields) if username == \"root\" or gid != 0 else newline)\n        passwd_file.truncate()\n"
  },
  {
    "name": "Ensure group root is the only GID 0 group",
    "id": "5.4.2.3",
    "type": "Automated",
    "start_page": 675,
    "end_page": 676,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The groupmod command can be used to specify which group the root group belongs to.\nThis affects permissions of files that are group owned by the root group.",
    "rationale": "Using GID 0 for the root group helps prevent root group owned files from accidentally becoming accessible to non-privileged users.",
    "audit_details": "Run the following command to verify no group other than root is assigned GID 0:\n```\n# awk -F: '$3==\"0\"{print $1\":\"$3}' /etc/group\nroot:0\n```",
    "audit_code": "# awk -F: '$3==\"0\"{print $1\":\"$3}' /etc/group\nroot:0",
    "remediation_details": "Run the following command to set the root group's GID to 0:\n```\n# groupmod -g 0 root\n```\n\nRemove any groups other than the root group with GID 0 or assign them a new GID if appropriate.",
    "remediation_code": "# groupmod -g 0 root",
    "python_script": "\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if any group other than 'root' has GID 0.\"\"\"\n    for g in grp.getgrall():\n        if g.gr_gid == 0 and g.gr_name!= 'root':\n            print(f\"Found group '{g.gr_name}' with GID 0, which is not 'root'.\")\n            return True\n    print(\"No groups other than 'root' found with GID 0.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate the vulnerability by ensuring 'root' has GID 0 and reassigning other groups with GID 0.\"\"\"\n    \n    # Ensure 'root' group's GID is 0\n    try:\n        root_group = grp.getgrnam('root')\n        if root_group.gr_gid!= 0:\n            subprocess.run(['groupmod', '-g', '0', 'root'], check=True)\n            print(\"Set 'root' group's GID to 0.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to set 'root' GID to 0: {e}\")\n    \n    # Reassign any non-'root' group with GID 0\n    for g in grp.getgrall():\n        if g.gr_gid == 0 and g.gr_name!= 'root':\n            new_gid = max(grp.getgrall(), key=lambda x: x.gr_gid).gr_gid + 1\n            subprocess.run(['groupmod', '-g', str(new_gid), g.gr_name], check=True)\n            print(f\"Reassigned GID of group '{g.gr_name}' from 0 to {new_gid}.\")\n"
  },
  {
    "name": "Ensure root password is set",
    "id": "5.4.2.4",
    "type": "Automated",
    "start_page": 677,
    "end_page": 678,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are a number of methods to access the root account directly. Without a password set any user would be able to gain access and thus control over the entire system.",
    "rationale": "Access to root should be secured at all times.",
    "audit_details": "Run the following command to verify the root user's password is set:\n```\n# passwd -S root | awk '$2 ~ /^P/ {print \"User: \\\"\" $1 \"\\\" Password is set\"}'\nUser: \"root\" Password is set\n```\n",
    "audit_code": "# passwd -S root | awk '$2 ~ /^P/ {print \"User: \\\"\" $1 \"\\\" Password is set\"}'",
    "remediation_details": "Run the following command to set a password for the root user:\n```\n# passwd root\n```\n",
    "remediation_code": "# passwd root\n",
    "python_script": "\nimport pwd\nimport spwd\nimport getpass\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the root user's password is set.\n    \n    Returns:\n        bool: True if the password is set, False otherwise.\n    \"\"\"\n    try:\n        root_user = pwd.getpwnam('root')\n        root_shadow = spwd.getspnam('root')\n        return root_shadow.sp_pwd!= '*'\n    except (KeyError, spwd.error) as e:\n        print(f\"Error auditing root password: {e}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by setting a password for the root user.\n    \"\"\"\n    new_password = getpass.getpass(\"Enter new password for root: \")\n    confirm_password = getpass.getpass(\"Confirm new password for root: \")\n    \n    if new_password!= confirm_password:\n        print(\"Passwords do not match. Remediation cancelled.\")\n        return\n    \n    try:\n        import crypt\n        encrypted_password = crypt.crypt(new_password, 'salt')\n        # Note: Directly modifying /etc/shadow is generally discouraged.\n        #       This example uses the crypt module to illustrate the process.\n        #       In a real-world scenario, consider using a more secure approach,\n        #       such as invoking the passwd command with subprocess for simplicity.\n        with open('/etc/shadow', 'r+') as shadow_file:\n            lines = shadow_file.readlines()\n            shadow_file.seek(0)\n            for line in lines:\n                if line.split(':')[0] == 'root':\n                    line = line.split(':')[0] + ':' + encrypted_password + ':' + ':'.join(line.split(':')[2:])\n                shadow_file.write(line)\n            shadow_file.truncate()\n        print(\"Set password for `root` user.\")\n    except Exception as e:\n        print(f\"Error remediating root password: {e}\")\n\n# Example Usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure root path integrity",
    "id": "5.4.2.5",
    "type": "Automated",
    "start_page": 679,
    "end_page": 681,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The root user can execute any command on the system and could be fooled into executing programs unintentionally if the PATH is not set correctly.",
    "rationale": "Including the current working directory (.) or other writable directory in root's executable path makes it likely that an attacker can gain superuser access by forcing an administrator operating as root to execute a Trojan horse program.",
    "audit_details": "Run the following script to verify root's path does not include:\n\n - Locations that are not directories\n\n - An empty directory (::)\n\n - A trailing (:)\n\n - Current working directory (.)\n\n - Non root owned directories\n\n - Directories that less restrictive than mode 0755",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output2=\"\"\n  l_pmask=\"0022\"\n  l_maxperm=\"$( printf '%o' $(( 0777 & ~$l_pmask )) )\"\n  l_root_path=\"$(sudo -Hiu root env | grep '^PATH' | cut -d= -f2)\"\n  unset a_path_loc && IFS=\":\" read -ra a_path_loc <<< \"$l_root_path\"\n  grep -q \"::\" <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains a empty directory (::)\"\n  grep -Pq \":\\h*$\" <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains a trailing (:)\"\n  grep -Pq '(\\\\h+|:)\\.(:|\\h*$)' <<< \"$l_root_path\" && l_output2=\"$l_output2\\n - root's path contains current working directory (.)\"\n  while read -r l_path; do\n   if [ -d \"$l_path\" ]; then\n     while read -r l_fmode l_fown; do\n      [ \"$l_fown\" != \"root\" ] && l_output2=\"$l_output2\\n - Directory: \\\"$l_path\\\" is owned by: \\\"$l_fown\\\" should be owned by \\\"root\\\"\"\n      [ $(( $l_fmode & $l_pmask )) -gt 0 ] && l_output2=\"$l_output2\\n Directory: \\\"$l_path\\\" is mode: \\\"$l_fmode\\\" and should be mode: \\\"$l_maxperm\\\" or more restrictive\"\n     done <<< \"$(stat -Lc '%#a %U' \"$l_path\")\"\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_path\\\" is not a directory\"\n   fi\n  done <<< \"$(printf \"%s\\n\" \"${a_path_loc[@]}\")\"\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n *** PASS ***\\n - Root's path is correctly configured\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n  fi\n}",
    "remediation_details": "Correct or justify any:\n\n - Locations that are not directories\n\n - Empty directories (::)\n\n - Trailing (:)\n\n - Current working directory (.)\n\n - Non root owned directories\n\n - Directories that less restrictive than mode 0755",
    "remediation_code": "",
    "python_script": "\nimport os\nimport pwd\nimport stat\nimport subprocess\n\ndef audit_vuln() -> bool:\n    root_path = get_root_path()\n    audit_result = True\n    issues = []\n\n    # Check for '::' and trailing ':'\n    if '::' in root_path or root_path.endswith(':'):\n        issues.append(\"PATH contains empty directory '::' or trailing ':'\")\n\n    # Split PATH into directories\n    path_dirs = root_path.split(':')\n\n    for dir in path_dirs:\n        # Skip empty strings (from '::' or leading/trailing ':')\n        if not dir:\n            continue\n        \n        # Check for current working directory '.'\n        if dir == '.':\n            issues.append(\"PATH contains current working directory '.'\")\n            continue\n\n        # Check if directory exists\n        if not os.path.isdir(dir):\n            issues.append(f\"'{dir}' is not a directory\")\n            continue\n\n        # Check ownership\n        dir_stat = os.stat(dir)\n        if dir_stat.st_uid!= pwd.getpwnam('root').pw_uid:\n            issues.append(f\"Directory '{dir}' is owned by '{pwd.getpwuid(dir_stat.st_uid).pw_name}' instead of 'root'\")\n        \n        # Check permissions\n        if dir_stat.st_mode & 0o022 > 0:\n            issues.append(f\"Directory '{dir}' has permissions '{stat.filemode(dir_stat.st_mode)}' which are less restrictive than 0755\")\n\n    if issues:\n        print(\"\\n- Audit Result:\\n** FAIL **\")\n        print(\"- * Reasons for audit failure *:\")\n        for issue in issues:\n            print(issue)\n        return False\n    else:\n        print(\"\\n- Audit Result:\\n*** PASS ***\")\n        print(\"- Root's path is correctly configured\")\n        return True\n\ndef remediate_vuln() -> None:\n    root_path = get_root_path()\n    new_path = root_path\n\n    # Remove '::' and trailing ':'\n    new_path = new_path.replace('::', '').rstrip(':')\n    if new_path!= root_path:\n        set_root_path(new_path)\n        print(\"Removed empty directory '::' and trailing ':' from root's PATH\")\n\n    # Split PATH into directories\n    path_dirs = new_path.split(':')\n\n    for dir in path_dirs:\n        # Skip empty strings (from '::' or leading/trailing ':')\n        if not dir:\n            continue\n        \n        # Correct/Remove '.' if present\n        if dir == '.':\n            new_path = new_path.replace(':', '', 1) if new_path.startswith('.') else new_path.replace(':', '')\n            set_root_path(new_path)\n            print(\"Removed current working directory '.' from root's PATH\")\n            continue\n\n        # Correct non-directory paths (this would actually be skipped in audit due to 'continue', but left for completeness)\n        if not os.path.isdir(dir):\n            new_path = new_path.replace(f\"{dir}:\", '')\n            set_root_path(new_path)\n            print(f\"Removed non-directory path '{dir}' from root's PATH\")\n            continue\n\n        # Change ownership of non-root owned directories to root\n        dir_stat = os.stat(dir)\n        if dir_stat.st_uid!= pwd.getpwnam('root').pw_uid:\n            subprocess.run(['chown', 'root', dir])\n            print(f\"Changed ownership of directory '{dir}' to 'root'\")\n\n        # Restrict permissions of directories to 0755 or more restrictive\n        if dir_stat.st_mode & 0o022 > 0:\n            subprocess.run(['chmod', '0755', dir])\n            print(f\"Restricted permissions of directory '{dir}' to 0755\")\n\ndef get_root_path():\n    return subprocess.run(['sudo', '-Hiu', 'root', 'env', 'PATH'], stdout=subprocess.PIPE, text=True).stdout.strip().split('=', 1)[1]\n\ndef set_root_path(new_path):\n    subprocess.run(['sudo', 'bash', '-c', f'echo \"export PATH={new_path}\" >> /root/.bashrc'])\n\n# Example usage:\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n    audit_vuln()  # Re-audit after remediation to verify\n"
  },
  {
    "name": "Ensure root user umask is configured",
    "id": "5.4.2.6",
    "type": "Automated",
    "start_page": 682,
    "end_page": 684,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The user file-creation mode mask (umask) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw-rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode. umask can be set with either Octal or Symbolic values: - Octal (Numeric) Value - Represented by either three or four digits. ie umask 0027 or umask 027. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively. - Symbolic Value - Represented by a comma separated list for User u, group g, and world/other o. The permissions listed are not masked by umask. ie a umask set by umask u=rwx,g=rx,o= is the Symbolic equivalent of the Octal umask 027. This umask would set a newly created directory with file mode drwxr-x--- and a newly created file with file mode rw-r-----.",
    "rationale": "Setting a secure value for umask ensures that users make a conscious choice about their file permissions. A permissive umask value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users.",
    "audit_details": "Run the following to verify the root user umask is set to enforce a newly created directories' permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive:\n```\ngrep -Psi -- '^\\\\h*umask\\\b(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][06]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' /root/.bash_profile /root/.bashrc\nNothing should be returned\n```",
    "audit_code": "grep -Psi -- '^[\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][0-7][06]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' /root/.bash_profile /root/.bashrc",
    "remediation_details": "Edit /root/.bash_profile and /root/.bashrc and remove, comment out, or update any line with umask to be 0027 or more restrictive.",
    "remediation_code": "Edit /root/.bash_profile and /root/.bashrc and remove, comment out, or update any line with umask to be 0027 or more restrictive.",
    "python_script": "\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit umask configuration in root user's bash files\"\"\"\n    files_to_audit = ['/root/.bash_profile', '/root/.bashrc']\n    pattern = re.compile(r'^\\s*umask\\b(?:([0-7]{3,4})|(u=[rwx]{1,3},)?(g=[rwx]{1,3},)?(o=[rwx]{1,3}))\\b')\n    for file in files_to_audit:\n        try:\n            with open(file, 'r') as f:\n                for line in f:\n                    if pattern.match(line):\n                        # If a match is found, the audit fails\n                        return False\n        except FileNotFoundError:\n            # If the file doesn't exist, it's not a vulnerability\n            pass\n    # No matches found in any file, audit passes\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate umask configuration in root user's bash files\"\"\"\n    files_to_remediate = ['/root/.bash_profile', '/root/.bashrc']\n    secure_umask = '0027'\n    pattern = re.compile(r'^\\s*umask\\b')\n    for file in files_to_remediate:\n        try:\n            with open(file, 'r+') as f:\n                lines = f.readlines()\n                f.seek(0)\n                updated = False\n                for line in lines:\n                    if pattern.match(line):\n                        # Update or comment out existing umask line\n                        f.write(f'# {line.strip()}\\n')  # Comment out original line\n                        updated = True\n                    else:\n                        f.write(line)\n                if not updated:\n                    # Add secure umask if no existing umask line was found\n                    f.write(f'\\numask {secure_umask}\\n')\n                f.truncate()\n            print(f\"Updated umask to {secure_umask} in {file}\")\n        except FileNotFoundError:\n            # Create the file with the secure umask if it doesn't exist\n            with open(file, 'w') as f:\n                f.write(f'umask {secure_umask}\\n')\n            print(f\"Created {file} with secure umask {secure_umask}\")\n"
  },
  {
    "name": "Ensure system accounts do not have a valid login shell",
    "id": "5.4.2.7",
    "type": "Automated",
    "start_page": 685,
    "end_page": 687,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide an interactive shell.",
    "rationale": "It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.",
    "audit_details": "Run the following command to verify system accounts, except for root, halt, sync, shutdown or nfsnobody, do not have a valid login shell:\n#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '\\$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"\\$l_valid_shells\" -F:\n'(\\\\$1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && (\\\\$3<\"$(awk '/^\\s*UID_MIN/{print \\$2}' /etc/login.defs)\" || \\$3 == 65534) && \\$(NF) ~ pat)\n{print \"Service account: \\\"\" \\$1 \"\\\" has a valid shell: \" \\$7}' /etc/passwd\n}",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '\\$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"\\$l_valid_shells\" -F:\n'(\\\\$1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && (\\\\$3<\"$(awk '/^\\s*UID_MIN/{print \\$2}' /etc/login.defs)\" || \\$3 == 65534) && \\$(NF) ~ pat)\n{print \"Service account: \\\"\" \\$1 \"\\\" has a valid shell: \" \\$7}' /etc/passwd\n}",
    "remediation_details": "Run the following command to set the shell for any service accounts returned by the audit to nologin:\n\n# usermod -s $(command -v nologin) <user>\n\n_Example script:_\n#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '\\$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"\\$l_valid_shells\" -F:\n'(\\\\$1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && (\\\\$3<\"$(awk '/^\\s*UID_MIN/{print \\$2}' /etc/login.defs)\" || \\$3 == 65534) && \\$(NF) ~ pat)\n{system (\"usermod -s '\"$(command -v nologin)\"' \" \\$1)}' /etc/passwd\n}",
    "remediation_code": "# usermod -s $(command -v nologin) <user>\n\n#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '\\$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  awk -v pat=\"\\$l_valid_shells\" -F:\n'(\\\\$1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && (\\\\$3<\"$(awk '/^\\s*UID_MIN/{print \\$2}' /etc/login.defs)\" || \\$3 == 65534) && \\$(NF) ~ pat)\n{system (\"usermod -s '\"$(command -v nologin)\"' \" \\$1)}' /etc/passwd\n}",
    "python_script": "\nimport pwd\nimport subprocess\nimport os\n\n# Constants\nVALID_SHELLS_FILE = '/etc/shells'\nLOGIN_DEFS_FILE = '/etc/login.defs'\nEXCLUDED_ACCOUNTS = {'root', 'halt', 'sync', 'shutdown', 'nfsnobody'}\nNOLGIN_SHELL_PATH = '/usr/sbin/nologin'  # Common path, adjust if necessary\n\ndef get_uid_min():\n    \"\"\"Retrieve UID_MIN from /etc/login.defs\"\"\"\n    with open(LOGIN_DEFS_FILE, 'r') as file:\n        for line in file:\n            if line.startswith('UID_MIN'):\n                return int(line.split()[1])\n    return None  # Could not find, consider a default or raise an exception\n\ndef get_valid_shells(exclude_nologin=True):\n    \"\"\"Retrieve valid shells from /etc/shells, excluding nologin if specified\"\"\"\n    valid_shells = []\n    with open(VALID_SHELLS_FILE, 'r') as file:\n        for shell in file:\n            shell = shell.strip()\n            if not exclude_nologin or shell!= NOLGIN_SHELL_PATH:\n                valid_shells.append(shell)\n    return valid_shells\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if system accounts have valid login shells\"\"\"\n    uid_min = get_uid_min()\n    if uid_min is None:\n        print(\"Warning: Could not determine UID_MIN from /etc/login.defs. Assuming a default of 1000.\")\n        uid_min = 1000  # Default for many systems, adjust based on your needs\n    \n    valid_shells = get_valid_shells()\n    vuln_found = False\n    \n    for user in pwd.getpwall():\n        if (user.pw_name not in EXCLUDED_ACCOUNTS and \n            (user.pw_uid < uid_min or user.pw_uid == 65534) and \n            user.pw_shell in valid_shells):\n            print(f\"Service account: \\\"{user.pw_name}\\\" has a valid shell: {user.pw_shell}\")\n            vuln_found = True\n    \n    return vuln_found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting shell to nologin for offending accounts\"\"\"\n    uid_min = get_uid_min()\n    if uid_min is None:\n        print(\"Warning: Could not determine UID_MIN from /etc/login.defs. Assuming a default of 1000.\")\n        uid_min = 1000  \n    \n    valid_shells = get_valid_shells()\n    \n    for user in pwd.getpwall():\n        if (user.pw_name not in EXCLUDED_ACCOUNTS and \n            (user.pw_uid < uid_min or user.pw_uid == 65534) and \n            user.pw_shell in valid_shells):\n            try:\n                subprocess.run(['usermod', '-s', NOLGIN_SHELL_PATH, user.pw_name], check=True)\n                print(f\" Disabled login shell for service account: {user.pw_name}\")\n            except subprocess.CalledProcessError as e:\n                print(f\"Error remediating {user.pw_name}: {e}\")\n\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure accounts without a valid login shell are locked",
    "id": "5.4.2.8",
    "type": "Automated",
    "start_page": 688,
    "end_page": 689,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "There are a number of accounts provided with most distributions that are used to manage applications and are not intended to provide an interactive shell. Furthermore, a user may add special accounts that are not intended to provide an interactive shell.",
    "rationale": "It is important to make sure that accounts that are not being used by regular users are prevented from being used to provide an interactive shell. By default, most distributions set the password field for these accounts to an invalid string, but it is also recommended that the shell field in the password file be set to the nologin shell. This prevents the account from potentially being used to run any commands.",
    "audit_details": "Run the following script to verify all non-root accounts without a valid login shell are locked. `#!/usr/bin/env bash { l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\/({s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\" while IFS= read -r l_user; do passwd -S \"$l_user\" | awk '$2 !~ /^L/ {print \"Account: \\\"\" $1 \"\\\" does not have a valid login shell and is not locked\"}' done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat) {print $1}' /etc/passwd) }` Nothing should be returned",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\/({s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  while IFS= read -r l_user; do\n   passwd -S \"$l_user\" | awk '$2 !~ /^L/ {print \"Account: \\\"\" $1 \"\\\" does not have a valid login shell and is not locked\"}'\n  done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat) {print $1}' /etc/passwd)\n}",
    "remediation_details": "Run the following command to lock any non-root accounts without a valid login shell returned by the audit: `# usermod -L <user>`",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($(awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\/({s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  while IFS= read -r l_user; do\n   passwd -S \"$l_user\" | awk '$2 !~ /^L/ {system (\"usermod -L \" $1)}'\n  done < <(awk -v pat=\"$l_valid_shells\" -F: '($1 != \"root\" && $(NF) !~ pat) {print $1}' /etc/passwd)\n}",
    "python_script": "\nimport pwd\nimport spwd\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for non-root accounts without a valid login shell that are not locked.\"\"\"\n    valid_shells = [shell.split(\"/\")[-1] for shell in open(\"/etc/shells\").readlines()]\n    vulnerable_accounts = False\n    \n    for user in pwd.getpwall():\n        if user.pw_name == \"root\":\n            continue\n        if user.pw_shell.split(\"/\")[-1] not in valid_shells:\n            # Check if account is locked\n            if spwd.getspnam(user.pw_name).sp_pwd == \"*\":\n                continue\n            print(f\"Account: \\\"{user.pw_name}\\\" does not have a valid login shell and is not locked\")\n            vulnerable_accounts = True\n    \n    return vulnerable_accounts\n\ndef remediate_vuln() -> None:\n    \"\"\"Lock non-root accounts without a valid login shell.\"\"\"\n    valid_shells = [shell.split(\"/\")[-1] for shell in open(\"/etc/shells\").readlines()]\n    \n    for user in pwd.getpwall():\n        if user.pw_name == \"root\":\n            continue\n        if user.pw_shell.split(\"/\")[-1] not in valid_shells:\n            # Check if account is already locked\n            if spwd.getspnam(user.pw_name).sp_pwd!= \"*\":\n                # Lock the account using usermod command via subprocess\n                subprocess.run([\"usermod\", \"-L\", user.pw_name])\n                print(f\"Locked account: \\\"{user.pw_name}\\\"\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure default user shell timeout is configured",
    "id": "5.4.3.2",
    "type": "Automated",
    "start_page": 692,
    "end_page": 695,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "TMOUT is an environmental setting that determines the timeout of a shell in seconds.\n\n- TMOUT=n - Sets the shell timeout to n seconds. A setting of TMOUT=0 disables timeout.\n\n- readonly TMOUT- Sets the TMOUT environmental variable as readonly, preventing unwanted modification during run-time.\n\n- export TMOUT - exports the TMOUT variable\n\n**System Wide Shell Configuration Files:**\n\n- `/etc/profile - used to set system wide environmental variables on users shells.`\nThe variables are sometimes the same ones that are in the .bash_profile,\nhowever this file is used to set an initial PATH or PS1 for all shell users of the\nsystem. is only executed for interactive login shells, or shells executed with\nthe --login parameter.\n\n- `/etc/profile.d - /etc/profile will execute the scripts within`\n    `/etc/profile.d/*.sh. It is recommended to place your configuration in a shell\nscript within /etc/profile.d to set your own system wide environmental\nvariables.\n\n- `/etc/bashrc - System wide version of .bashrc. In Fedora derived distributions,\n    /etc/bashrc also invokes /etc/profile.d/*.sh if non-login shell, but redirects output\nto /dev/null if non-interactive. **Is only executed for interactive shells or if**\n    BASH_ENV is set to /etc/bashrc.",
    "rationale": "Setting a timeout value reduces the window of opportunity for unauthorized user access to another user's shell session that has been left unattended. It also ends the inactive session and releases the resources associated with that session.",
    "audit_details": "Run the following script to verify that TMOUT is configured to: include a timeout of no more than 900 seconds, to be readonly, to be exported, and is not being changed to a longer timeout.",
    "audit_code": "#!/usr/bin/env bash\n{\n  output1=\"\" output2=\"\"\n  [ -f /etc/bashrc ] && BRC=\"/etc/bashrc\"\n  for f in \"$BRC\" /etc/profile /etc/profile.d/*.sh ; do\n   grep -Pq '^\n' \"${f}\" && grep -Pq\n'^\n' \"${f}\" && grep -Pq\n'^\n' \"${f}\" && \n  output1=\"${f}\"\n  done\n  grep -Pq '^\n' /etc/profile /etc/profile.d/*.sh \"$BRC\" && output2=$(grep -Ps\n'^\n' /etc/profile /etc/profile.d/*.sh \"$BRC\")\n  if [ -n \"$output1\" ] && [ -z \"$output2\" ]; then\n   echo -e \"\\nPASSED\\n\\nTMOUT is configured in: \\\"${output1}\\\"\\n\"\n  else\n   [ -z \"$output1\" ] && echo -e \"\\nFAILED\\n\\nTMOUT is not configured\\n\"\n   [ -n \"$output2\" ] && echo -e \"\\nFAILED\\n\\nTMOUT is incorrectly configured in: \\\"${output2}\\\"\\n\"\n  fi\n}\n",
    "remediation_details": "Review /etc/bashrc, /etc/profile, and all files ending in *.sh in the /etc/profile.d/\ndirectory and remove or edit all TMOUT=_n_ entries to follow local site policy. TMOUT\nshould not exceed 900 or be equal to 0.\nConfigure TMOUT in one of the following files:\n\n- A file in the /etc/profile.d/ directory ending in .sh\n\n- `/etc/profile`\n\n- `/etc/bashrc`\nTMOUT configuration examples:\nAs multiple lines:\nTMOUT=900\nreadonly TMOUT\nexport TMOUT\nAs a single line:\nreadonly TMOUT=900 ; export TMOUT\n",
    "remediation_code": "TMOUT=900\nreadonly TMOUT\nexport TMOUT",
    "python_script": "\nimport os\nimport re\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit TMOUT configuration in system-wide shell config files.\"\"\"\n    config_files = ['/etc/bashrc', '/etc/profile'] + glob.glob('/etc/profile.d/*.sh')\n    pattern = re.compile(r'^\\s*(readonly\\s+)?TMOUT=(\\d+)(\\s*;\\s*export\\s+TMOUT)?\\s*$')\n    \n    for file in config_files:\n        try:\n            with open(file, 'r') as f:\n                for line in f:\n                    match = pattern.match(line)\n                    if match:\n                        timeout = int(match.group(2))\n                        if (match.group(1) is not None) and (match.group(3) is not None) and (0 < timeout <= 900):\n                            continue  # Correctly configured, check other files\n                        else:\n                            print(f\"FAILED\\nTMOUT is incorrectly configured in: \\\"{file}\\\"\")\n                            return False\n        except FileNotFoundError:\n            pass  # File not found, continue with the next one\n    \n    print(\"PASSED\\nTMOUT is correctly configured.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate TMOUT configuration in system-wide shell config files.\"\"\"\n    config_dir = '/etc/profile.d/'\n    config_file = os.path.join(config_dir, 'tmout_config.sh')\n    \n    # Choose a file to configure TMOUT, /etc/profile.d/ is recommended\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)\n    \n    # Write or modify the TMOUT configuration\n    with open(config_file, 'w') as f:\n        f.write('readonly TMOUT=900 ; export TMOUT\\n')\n    \n    print(f\"Created/configured TMOUT in: \\\"{config_file}\\\"\")\n    \n    # Ensure the file has proper permissions\n    os.chmod(config_file, 0o644)\n    print(f\"Set permissions to 644 for: \\\"{config_file}\\\"\")\n\nimport glob  # Import glob for config file pattern matching\n```\n**Example Usage:**\n```python\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure default user umask is configured",
    "id": "5.4.3.3",
    "type": "Automated",
    "start_page": 696,
    "end_page": 702,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The user file-creation mode mask (umask) is used to determine the file permission for newly created directories and files. In Linux, the default permissions for any newly created directory is 0777 (rwxrwxrwx), and for any newly created file it is 0666 (rw-rw-rw-). The umask modifies the default Linux permissions by restricting (masking) these permissions. The umask is not simply subtracted, but is processed bitwise. Bits set in the umask are cleared in the resulting file mode. umask can be set with either Octal or Symbolic values: - `Octal (Numeric) Value - Represented by either three or four digits. ie umask 0027 or umask 027. If a four digit umask is used, the first digit is ignored. The remaining three digits effect the resulting permissions for user, group, and world/other respectively. - `Symbolic Value - Represented by a comma separated list for User u, group g, and world/other o. The permissions listed are not masked by umask. ie a umask set by umask u=rwx,g=rx,o= is the Symbolic equivalent of the Octal `umask 027.` This umask would set a newly created directory with file mode drwxr-x--- and a newly created file with file mode rw-r-----.The default umask can be set to use the pam_umask module or in a System Wide Shell Configuration File. The user creating the directories or files has the discretion of changing the permissions via the chmod command, or choosing a different default umask by adding the umask command into a User Shell Configuration File, (.bash_profile or .bashrc), in their home directory.",
    "rationale": "Setting a secure default value for umask ensures that users make a conscious choice about their file permissions. A permissive umask value could result in directories or files with excessive permissions that can be read and/or written to by unauthorized users.",
    "audit_details": "Run the following to verify the default user umask is set to enforce a newly created directories' permissions to be 750 (drwxr-x---), and a newly created file's permissions be 640 (rw-r-----), or more restrictive: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" file_umask_chk() { if grep -Psiq -- '^-\\h*umask\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\h*#.*)?$' \"$l_file\"; then l_output=\"$l_output\\n - umask is set correctly in \\\"$l_file\\\"\"; elif grep -Psiq -- '^-\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][07][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"; fi } while IFS= read -r -d $'\\0' l_file; do file_umask_chk done < <(find /etc/profile.d/ -type f -name '*.sh' -print0) [ -z \"$l_output\" ] && l_file=\"/etc/profile\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/bashrc\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/bash.bashrc\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/pam.d/postlogin\" if [ -z \"$l_output\" ]; then if grep -Psiq -'^-\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(0?[0-7][27]7)\\b' \"$l_file\"; then l_output1=\"$l_output1\\n - umask is set correctly in \\\"$l_file\\\"\"; elif grep -Psiq '^-\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(([0-7][07][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"; fi } [ -z \"$l_output\" ] && l_file=\"/etc/login.defs\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/default/login\" && file_umask_chk [[ -z \"$l_output\" && -z \"$l_output2\" ]] && l_output2=\"$l_output2\\n umask is not set\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\\n$l_output\\n\"; else echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"; [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *:\\n$l_output\\n\"; fi }",
    "audit_code": "#!/usr/bin/env bash { l_output=\"\" l_output2=\"\" file_umask_chk() { if grep -Psiq -- '^-\\h*umask\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\h*#.*)?$' \"$l_file\"; then l_output=\"$l_output\\n - umask is set correctly in \\\"$l_file\\\"\"; elif grep -Psiq -- '^-\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][07][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"; fi } while IFS= read -r -d $'\\0' l_file; do file_umask_chk done < <(find /etc/profile.d/ -type f -name '*.sh' -print0) [ -z \"$l_output\" ] && l_file=\"/etc/profile\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/bashrc\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/bash.bashrc\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/pam.d/postlogin\" if [ -z \"$l_output\" ]; then if grep -Psiq -'^-\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(0?[0-7][27]7)\\b' \"$l_file\"; then l_output1=\"$l_output1\\n - umask is set correctly in \\\"$l_file\\\"\"; elif grep -Psiq '^-\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(([0-7][07][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then l_output2=\"$l_output2\\n - umask is incorrectly set in \\\"$l_file\\\"\"; fi } [ -z \"$l_output\" ] && l_file=\"/etc/login.defs\" && file_umask_chk [ -z \"$l_output\" ] && l_file=\"/etc/default/login\" && file_umask_chk [[ -z \"$l_output\" && -z \"$l_output2\" ]] && l_output2=\"$l_output2\\n umask is not set\" if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\\n$l_output\\n\"; else echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"; [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *:\\n$l_output\\n\"; fi }",
    "remediation_details": "Run the following script and perform the instructions in the output:\n#!/usr/bin/env bash {\n  l_output=\"\" l_output2=\"\" l_out=\"\"\n  file_umask_chk()\n  {\n   if grep -Psiq -- '^-\\h*umask\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\h*#.*)?$' \"$l_file\"; then\n     l_out=\"$l_out\\n - umask is set correctly in \\\"$l_file\\\"\"\n   elif grep -Psiq -- '^-\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][07][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then\n     l_output2=\"$l_output2\\n  - \\\"$l_file\\\"\"\n   fi\n  }\n  while IFS= read -r -d $'\\0' l_file; do\n   file_umask_chk\n  done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)\n  [ -n \"$l_out\" ] && l_output=\"$l_out\"\n  l_file=\"/etc/profile\" && file_umask_chk\n  l_file=\"/etc/bashrc\" && file_umask_chk\n  l_file=\"/etc/bash.bashrc\" && file_umask_chk\n  l_file=\"/etc/pam.d/postlogin\"\n  if grep -Psiq\n'^[\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(([0-7][07][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then\n   l_output2=\"$l_output2\\n  - \\\"$l_file\\\"\"\n  fi\n  l_file=\"/etc/login.defs\" && file_umask_chk\n  l_file=\"/etc/default/login\" && file_umask_chk\n  if [ -z \"$l_output2\" ]; then\n   echo -e \" - No files contain a UMASK that is not restrictive enough\\n \nNo UMASK updates required to existing files\"\n  else\n   echo -e \"\\n - UMASK is not restrictive enough in the following\nfile(s):$l_output2\\n\\n- Remediation Procedure:\\n - Update these files and\ncomment out the UMASK line\\n  or update umask to be \\\"0027\\\" or more restrictive\"\n  fi\n  if [ -n \"$l_output\" ]; then\n   echo -e \"$l_output\"\n  else\n   echo -e \" - Configure UMASK in a file in the \\\"/etc/profile.d/\\\" directory ending in \\\".sh\\\"\\n\\n  Example Command (Hash to represent being run at a root prompt):\\n\\n# printf '%s\\\\\\n' \\\"umask 027\\\" > /etc/profile.d/50-systemwide_umask.sh\\n\"\n  fi\n}",
    "remediation_code": "#!/usr/bin/env bash {\n  l_output=\"\" l_output2=\"\" l_out=\"\"\n  file_umask_chk()\n  {\n   if grep -Psiq -- '^-\\h*umask\\h+(0?[0-7][27]7|u(=[rwx]{0,3}),g=([rx]{0,2}),o=)(\\h*#.*)?$' \"$l_file\"; then\n     l_out=\"$l_out\\n - umask is set correctly in \\\"$l_file\\\"\"\n   elif grep -Psiq -- '^-\\h*umask\\h+(([0-7][0-7][01][0-7]\\b|[0-7][0-7][07][0-6]\\b)|([0-7][01][0-7]\\b|[0-7][0-7][06]\\b)|(u=[rwx]{1,3},)?(((g=[rx]?[rx]?w[rx]?[rx]?\\b)(,o=[rwx]{1,3})?)|((g=[wrx]{1,3},)?o=[wrx]{1,3}\\b)))' \"$l_file\"; then\n     l_output2=\"$l_output2\\n  - \\\"$l_file\\\"\"\n   fi\n  }\n  while IFS= read -r -d $'\\0' l_file; do\n   file_umask_chk\n  done < <(find /etc/profile.d/ -type f -name '*.sh' -print0)\n  [ -n \"$l_out\" ] && l_output=\"$l_out\"\n  l_file=\"/etc/profile\" && file_umask_chk\n  l_file=\"/etc/bashrc\" && file_umask_chk\n  l_file=\"/etc/bash.bashrc\" && file_umask_chk\n  l_file=\"/etc/pam.d/postlogin\"\n  if grep -Psiq\n'^[\\h*session\\h+[^#\\n\\r]+\\h+pam_umask\\.so\\h+([^#\\n\\r]+\\h+)?umask=(([0-7][07][01][0-7]\\b|[0-7][0-7][0-7][0-6]\\b)|([0-7][01][0-7]\\b))' \"$l_file\"; then\n   l_output2=\"$l_output2\\n  - \\\"$l_file\\\"\"\n  fi\n  l_file=\"/etc/login.defs\" && file_umask_chk\n  l_file=\"/etc/default/login\" && file_umask_chk\n  if [ -z \"$l_output2\" ]; then\n   echo -e \" - No files contain a UMASK that is not restrictive enough\\n \nNo UMASK updates required to existing files\"\n  else\n   echo -e \"\\n - UMASK is not restrictive enough in the following\nfile(s):$l_output2\\n\\n- Remediation Procedure:\\n - Update these files and\ncomment out the UMASK line\\n  or update umask to be \\\"0027\\\" or more restrictive\"\n  fi\n  if [ -n \"$l_output\" ]; then\n   echo -e \"$l_output\"\n  else\n   echo -e \" - Configure UMASK in a file in the \\\"/etc/profile.d/\\\" directory ending in \\\".sh\\\"\\n\\n  Example Command (Hash to represent being run at a root prompt):\\n\\n# printf '%s\\\\\\n' \\\"umask 027\\\" > /etc/profile.d/50-systemwide_umask.sh\\n\"\n  fi\n}",
    "python_script": "\nimport glob\nimport re\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the default user umask is configured to be restrictive.\n    \n    :return: True if a restrictive umask is found, False otherwise\n    \"\"\"\n    expected_umask_pattern = re.compile(r'^\\s*umask\\s+(0?[0-7][27]7|u=[rwx]{0,3},g=[rx]{0,2},o=)')\n    \n    for file in glob.glob('/etc/profile.d/*.sh') + [\n        '/etc/profile', '/etc/bashrc', '/etc/bash.bashrc', \n        '/etc/pam.d/postlogin', '/etc/login.defs', '/etc/default/login'\n    ]:\n        try:\n            with open(file, 'r') as f:\n                for line in f:\n                    if expected_umask_pattern.match(line):\n                        print(f\"Found restrictive umask in {file}\")\n                        return True\n        except FileNotFoundError:\n            pass  # File might not exist, continue checking others\n    \n    print(\"No restrictive umask found in scanned files.\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by updating or adding a restrictive umask configuration.\n    \"\"\"\n    non_restrictive_files = []\n    expected_umask = 'umask 027'\n    \n    # Identify files with non-restrictive umasks\n    for file in glob.glob('/etc/profile.d/*.sh') + [\n        '/etc/profile', '/etc/bashrc', '/etc/bash.bashrc', \n        '/etc/pam.d/postlogin', '/etc/login.defs', '/etc/default/login'\n    ]:\n        try:\n            with open(file, 'r') as f:\n                content = f.readlines()\n                if not any(re.compile(r'^\\s*umask\\s+(0?[0-7][27]7|u=[rwx]{0,3},g=[rx]{0,2},o=)').match(line) for line in content):\n                    non_restrictive_files.append(file)\n        except FileNotFoundError:\n            pass  # File might not exist, continue checking others\n    \n    # Update or add configuration\n    if non_restrictive_files:\n        for file in non_restrictive_files:\n            print(f\"Updating {file} with restrictive umask...\")\n            try:\n                with open(file, 'a') as f:\n                    f.write('\\n' + expected_umask + '\\n')\n            except PermissionError:\n                print(f\"Permission denied updating {file}. Run with elevated privileges.\")\n    else:\n        new_file = '/etc/profile.d/50-systemwide_umask.sh'\n        print(f\"Creating {new_file} with restrictive umask...\")\n        try:\n            with open(new_file, 'w') as f:\n                f.write(expected_umask + '\\n')\n            os.chmod(new_file, 0o755)  # Ensure executable\n        except PermissionError:\n            print(f\"Permission denied creating {new_file}. Run with elevated privileges.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure AIDE is installed",
    "id": "6.1.1",
    "type": "Automated",
    "start_page": 705,
    "end_page": 706,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "AIDE takes a snapshot of filesystem state including modification times, permissions, and file hashes which can then be used to compare against the current state of the filesystem to detect modifications to the system.",
    "rationale": "By monitoring the filesystem state compromised files can be detected to prevent or limit the exposure of accidental or malicious misconfigurations or modified binaries.",
    "audit_details": "Run the following command to verify aide is installed:\n```\n# dpkg-query -s aide &>/dev/null && echo \"aide is installed\"\naide is installed\n```\nRun the following command to verify aide-common is installed:\n```\n# dpkg-query -s aide-common &>/dev/null && echo \"aide-common is installed\"\naide-common is installed\n```\n",
    "audit_code": "# dpkg-query -s aide &>/dev/null && echo \"aide is installed\"\naide is installed\n\n# dpkg-query -s aide-common &>/dev/null && echo \"aide-common is installed\"\naide-common is installed\n",
    "remediation_details": "Install AIDE using the appropriate package manager or manual installation:\n```\n# apt install aide aide-common\n```\nConfigure AIDE as appropriate for your environment. Consult the AIDE documentation for options.\nRun the following commands to initialize AIDE:\n```\n# aideinit\n# mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n```",
    "remediation_code": "# apt install aide aide-common\n\n# aideinit\n# mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if AIDE and AIDE-common are installed\"\"\"\n    # Use dpkg-query to check package statuses\n    aide_installed = subprocess.call(['dpkg-query', '-s', 'aide'], stdout=subprocess.DEVNULL) == 0\n    aide_common_installed = subprocess.call(['dpkg-query', '-s', 'aide-common'], stdout=subprocess.DEVNULL) == 0\n    # Return True if either package is not installed (vulnerability present)\n    return not (aide_installed and aide_common_installed)\n\ndef remediate_vuln() -> None:\n    \"\"\"Install and initialize AIDE\"\"\"\n    # Install AIDE and AIDE-common using apt\n    subprocess.run(['apt', 'update'], check=True)\n    subprocess.run(['apt', 'install', '-y', 'aide', 'aide-common'], check=True)\n    print(\"Installed AIDE and AIDE-common via apt.\")\n    \n    # Initialize AIDE\n    subprocess.run(['aideinit'], check=True)\n    print(\"Initialized AIDE database.\")\n    \n    # Move the new AIDE database to the expected location\n    subprocess.run(['mv', '/var/lib/aide/aide.db.new', '/var/lib/aide/aide.db'], check=True)\n    print(\"Updated AIDE database location.\")\n\nif __name__ == \"__main__\":\n    if sys.argv[1] == \"audit\":\n        is_vulnerable = audit_vuln()\n        print(f\"AIDE vulnerability present: {is_vulnerable}\")\n    elif sys.argv[1] == \"remediate\":\n        remediate_vuln()\n    else:\n        print(\"Usage: python aide_script.py [audit|remediate]\")\n"
  },
  {
    "name": "Ensure filesystem integrity is regularly checked",
    "id": "6.1.2",
    "type": "Automated",
    "start_page": 707,
    "end_page": 709,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Periodic checking of the filesystem integrity is needed to detect changes to the filesystem.",
    "rationale": "Periodic file checking allows the system administrator to determine on a regular basis if critical files have been changed in an unauthorized fashion.",
    "audit_details": "Run the following commands to verify a cron job scheduled to run the aide check.\n```\n# grep -Prs '^([^#\\n\\r]+\\h+)?(\\/usr\\/s?bin\\/?|^\\h*)aide(\\.wrapper)?\\h+(-(check|update)|([^#\\n\\r]+\\h+)?$AIDEARGS)\\b' /etc/cron.* /etc/crontab\n/var/spool/cron/\n```\nEnsure a cron job in compliance with site policy is returned.\n\n**- OR -**\nRun the following commands to verify that aidecheck.service and aidecheck.timer are enabled and aidecheck.timer is running\n```\n# systemctl is-enabled aidecheck.service\n# systemctl is-enabled aidecheck.timer\n# systemctl status aidecheck.timer\n```\nPage 706",
    "audit_code": "# grep -Prs '^([^#\\n\\r]+\\h+)?(\\/usr\\/s?bin\\/?|^\\h*)aide(\\.wrapper)?\\h+(-(check|update)|([^#\\n\\r]+\\h+)?$AIDEARGS)\\b' /etc/cron.* /etc/crontab\n/var/spool/cron/\n\n# systemctl is-enabled aidecheck.service\n# systemctl is-enabled aidecheck.timer\n# systemctl status aidecheck.timer",
    "remediation_details": "If cron will be used to schedule and run aide check:\nRun the following command:\n```\n# crontab -u root -e\n```\nAdd the following line to the crontab:\n```\n0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n```\n\n**- OR - If aidecheck.service and aidecheck.timer will be used to schedule and run aide check:**\nCreate or edit the file /etc/systemd/system/aidecheck.service and add the following lines:\n```\n[Unit]\nDescription=Aide Check\n[Service]\nType=simple\nExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n[Install]\nWantedBy=multi-user.target\n```\nCreate or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:\n```\n[Unit]\nDescription=Aide check every day at 5AM\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n[Install]\nWantedBy=multi-user.target\n```\nRun the following commands:\n```\n# chown root:root /etc/systemd/system/aidecheck.*\n# chmod 0644 /etc/systemd/system/aidecheck.*\n# systemctl daemon-reload\n# systemctl enable aidecheck.service\n# systemctl --now enable aidecheck.timer\n```\n**References:**\n1. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.service\n2. https://github.com/konstruktoid/hardening/blob/master/config/aidecheck.timer\nPage 707",
    "remediation_code": "# crontab -u root -e\n\n0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n\nCreate or edit the file /etc/systemd/system/aidecheck.service and add the following lines:\n```\n[Unit]\nDescription=Aide Check\n[Service]\nType=simple\nExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n[Install]\nWantedBy=multi-user.target\n```\n\nCreate or edit the file /etc/systemd/system/aidecheck.timer and add the following lines:\n```\n[Unit]\nDescription=Aide check every day at 5AM\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n[Install]\nWantedBy=multi-user.target\n```\n\n# chown root:root /etc/systemd/system/aidecheck.*\n# chmod 0644 /etc/systemd/system/aidecheck.*\n# systemctl daemon-reload\n# systemctl enable aidecheck.service\n# systemctl --now enable aidecheck.timer",
    "python_script": "\nimport subprocess\nimport os\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit filesystem integrity check configuration.\"\"\"\n    \n    # Check for cron job\n    cron_check = subprocess.run(\n        ['grep', '-Prs', '^([^#\\\\n\\\\r]+\\\\h+)?(\\\\/usr\\\\/s?bin\\\\/?|^\\\\h*)aide(\\\\.wrapper)?\\\\h+(-(check|update)|([^#\\\\n\\\\r]+\\\\h+)?$AIDEARGS)\\\\b', \n         '/etc/cron.*', '/etc/crontab', '/var/spool/cron/'], \n        stdout=subprocess.PIPE, stderr=subprocess.PIPE\n    )\n    if cron_check.returncode == 0:\n        return True\n    \n    # Check for systemd units\n    systemctl_checks = [\n        ['systemctl', 'is-enabled', 'aidecheck.service'],\n        ['systemctl', 'is-enabled', 'aidecheck.timer'],\n        ['systemctl', 'status', 'aidecheck.timer']\n    ]\n    for check in systemctl_checks:\n        if subprocess.run(check, stdout=subprocess.PIPE, stderr=subprocess.PIPE).returncode!= 0:\n            return False\n    return True\n\ndef remediate_vuln(use_systemd: bool = True) -> None:\n    \"\"\"Remediate filesystem integrity check configuration.\"\"\"\n    \n    if use_systemd:\n        # Create aidecheck.service\n        service_path = Path('/etc/systemd/system/aidecheck.service')\n        service_content = '''[Unit]\nDescription=Aide Check\n[Service]\nType=simple\nExecStart=/usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\n[Install]\nWantedBy=multi-user.target\n'''\n        service_path.write_text(service_content)\n        print(f\"Created {service_path} with Aide Check configuration.\")\n        \n        # Create aidecheck.timer\n        timer_path = Path('/etc/systemd/system/aidecheck.timer')\n        timer_content = '''[Unit]\nDescription=Aide check every day at 5AM\n[Timer]\nOnCalendar=*-*-* 05:00:00\nUnit=aidecheck.service\n[Install]\nWantedBy=multi-user.target\n'''\n        timer_path.write_text(timer_content)\n        print(f\"Created {timer_path} with daily schedule.\")\n        \n        # Set permissions, reload daemon, enable, and start\n        subprocess.run(['chown', 'root:root', service_path])\n        subprocess.run(['chown', 'root:root', timer_path])\n        subprocess.run(['chmod', '0644', service_path])\n        subprocess.run(['chmod', '0644', timer_path])\n        subprocess.run(['systemctl', 'daemon-reload'])\n        subprocess.run(['systemctl', 'enable', 'aidecheck.service'])\n        subprocess.run(['systemctl', '--now', 'enable', 'aidecheck.timer'])\n        print(\"Set permissions, reloaded daemon, enabled, and started aidecheck.timer.\")\n    \n    else:\n        # Add to root's crontab\n        cron_line = '0 5 * * * /usr/bin/aide.wrapper --config /etc/aide/aide.conf --update\\n'\n        with open('/etc/crontab', 'a') as crontab:\n            crontab.write(cron_line)\n        print(\"Added daily Aide check to root's crontab.\")\n```\n\n**Usage**:\n```python\nif __name__ == '__main__':\n    if audit_vuln():\n        print(\"System is compliant.\")\n    else:\n        print(\"System is NOT compliant. Remediation required.\")\n        remediate_vuln()  # Use systemd by default\n        # remediate_vuln(use_systemd=False)  # To use cron instead\n"
  },
  {
    "name": "Ensure journald service is enabled and active",
    "id": "6.2.1.1.1",
    "type": "Automated",
    "start_page": 716,
    "end_page": 717,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Ensure that the systemd-journald service is enabled to allow capturing of logging events.",
    "rationale": "If the systemd-journald service is not enabled to start on boot, the system will not capture logging events.",
    "audit_details": "Run the following command to verify systemd-journald is enabled:\n```\n# systemctl is-enabled systemd-journald.service\nstatic\n```\n**Note: By default the systemd-journald service does not have an [Install] section and** thus cannot be enabled / disabled. It is meant to be referenced as Requires or Wants by other unit files. As such, if the status of systemd-journald is not static, investigate why\nRun the following command to verify systemd-journald is active:\n```\n# systemctl is-active systemd-journald.service\nactive\n```\n",
    "audit_code": "systemctl is-enabled systemd-journald.service\nsystemctl is-active systemd-journald.service",
    "remediation_details": "Run the following commands to unmask and start systemd-journald.service\n```\n# systemctl unmask systemd-journald.service\n# systemctl start systemd-journald.service\n```\n",
    "remediation_code": "systemctl unmask systemd-journald.service\nsystemctl start systemd-journald.service",
    "python_script": "\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits if systemd-journald.service is in the expected state.\n    \n    Expected state: \n    - Enabled status is 'static' (cannot be changed, by design)\n    - Service is 'active'\n    \n    Returns:\n    bool: True if the service is in the expected state, False otherwise.\n    \"\"\"\n    # Check if systemd-journald.service is enabled (expected to be 'static')\n    enable_status = subprocess.getoutput(\"systemctl is-enabled systemd-journald.service\")\n    if enable_status!= 'static':\n        print(f\"Warning: systemd-journald.service enable status is '{enable_status}', expected 'static'.\")\n        return False\n    \n    # Check if systemd-journald.service is active\n    active_status = subprocess.getoutput(\"systemctl is-active systemd-journald.service\")\n    if active_status!= 'active':\n        print(f\"systemd-journald.service is not active, current status: '{active_status}'.\")\n        return False\n    \n    print(\"systemd-journald.service is in the expected state.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediation for systemd-journald.service.\n    \n    Attempts to unmask the service (if necessary) and ensures it's started.\n    \"\"\"\n    # Check if systemd-journald.service is masked\n    mask_status = subprocess.getoutput(\"systemctl is-enabled systemd-journald.service\")\n    if mask_status == 'masked':\n        subprocess.run([\"systemctl\", \"unmask\", \"systemd-journald.service\"])\n        print(\"Unmasked systemd-journald.service.\")\n    \n    # Check if systemd-journald.service is active and start it if not\n    active_status = subprocess.getoutput(\"systemctl is-active systemd-journald.service\")\n    if active_status!= 'active':\n        subprocess.run([\"systemctl\", \"start\", \"systemd-journald.service\"])\n        print(\"Started systemd-journald.service.\")\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure journald ForwardToSyslog is disabled",
    "id": "6.2.1.1.4",
    "type": "Automated",
    "start_page": 722,
    "end_page": 725,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Data from journald should be kept in the confines of the service and not forwarded to other services.",
    "rationale": "Logs of the system should be handled by journald and not forwarded to other logging mechanisms.",
    "audit_details": "Run the following script to verify ForwardToSyslog in not set to yes: #!/usr/bin/env bash { l_output=\"\" l_output2=\"\" a_parlist=(\"ForwardToSyslog=yes\") l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file config_file_parameter_chk() { unset A_out; declare -A A_out # Check config file(s) setting while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\"; else l_systemd_parameter=\"\"; grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" && A_out+(\"$l_systemd_parameter\"=\"$l_file\"); fi; fi; done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b') ); if (( ${#A_out[@]} > 0 )); then while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"; l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"; if ! grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<< \"$l_systemd_file_parameter_value\"; then l_output=\"$l_output\\n - \\\"$l_systemd_file_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"; else l_output2=\"$l_output2\\n - \\\"$l_systemd_file_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"; fi; done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\" ); } else { l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure **\\n\"; } } while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"; l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"; config_file_parameter_chk; done < <(printf '%s\\n' \"${a_parlist[@]}\" ); if [ -z \"$l_output2\" ]; then echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"; else echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"; [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"; fi; } }",
    "audit_code": "#!/usr/bin/env bash\n{\nl_output=\"\" l_output2=\"\"\na_parlist=(\"ForwardToSyslog=yes\")\nl_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\nconfig_file_parameter_chk()\n{\nunset A_out; declare -A A_out # Check config file(s) setting\nwhile read -r l_out; do\nif [ -n \"$l_out\" ]; then\nif [[ $l_out =~ ^\\s*# ]]; then\nl_file=\"${l_out//# /}\"\nelse\nl_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\ngrep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([$l_systemd_parameter]=\"$l_file\")\nfi\nfi\ndone < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\h*([^#\\n\\r]+|#\\h*\\/[^#\\n\\r\\h]+\\.conf\\b)')\nif (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\nwhile IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\nl_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\nl_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\nif ! grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<< \"$l_systemd_file_parameter_value\"; then\nl_output=\"$l_output\\n - \\\"$l_systemd_file_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\nelse\nl_output2=\"$l_output2\\n - \\\"$l_systemd_file_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\nfi\ndone < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\nelse\nl_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure **\\n\"\nfi\n}\nwhile IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\nl_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\nl_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\nconfig_file_parameter_chk\ndone < <(printf '%s\\n' \"${a_parlist[@]}\")\nif [ -z \"$l_output2\" ]; then # Provide output from checks\necho -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\nelse\necho -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\\n\"\n[ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\nfi\n}",
    "remediation_details": "Set the following parameter in the [Journal] section in /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf: ForwardToSyslog=no",
    "remediation_code": "#!/usr/bin/env bash\n{\n[ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\nif grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\nprintf '%s\\n' \"ForwardToSyslog=no\" >> /etc/systemd/journald.conf.d/60journald.conf\nelse\nprintf '%s\\n' \"[Journal]\" \"ForwardToSyslog=no\" >>/etc/systemd/journald.conf.d/60-journald.conf\nfi\n} Note: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service: # systemctl reload-or-restart systemd-journald",
    "python_script": "\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if ForwardToSyslog is disabled\"\"\"\n    config_file = pathlib.Path(\"/etc/systemd/journald.conf\")\n    included_configs = list(pathlib.Path(\"/etc/systemd/journald.conf.d/\").glob(\"*.conf\"))\n\n    all_configs = [config_file] + included_configs\n\n    for config in all_configs:\n        try:\n            with open(config, 'r') as file:\n                for line in file:\n                    line = line.strip()\n                    if line.startswith(\"[Journal]\"):\n                        for next_line in file:\n                            next_line = next_line.strip()\n                            if next_line.startswith(\"ForwardToSyslog=\"):\n                                value = next_line.split(\"=\")[1]\n                                if value.lower() == \"yes\":\n                                    print(f\"- 'ForwardToSyslog' is incorrectly set to 'yes' in {config}\")\n                                    return False\n                                else:\n                                    print(f\"- 'ForwardToSyslog' is correctly set to '{value}' in {config}\")\n        except Exception as e:\n            print(f\"Error reading {config}: {e}\")\n\n    print(\"- 'ForwardToSyslog' not found in any config file (might be set in an ignored file)\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting ForwardToSyslog=no\"\"\"\n    config_dir = pathlib.Path(\"/etc/systemd/journald.conf.d/\")\n    config_dir.mkdir(exist_ok=True)\n    config_file = config_dir / \"60-journald.conf\"\n\n    if config_file.exists() and \"[Journal]\" in config_file.read_text():\n        with open(config_file, 'a') as file:\n            file.write(\"ForwardToSyslog=no\\n\")\n    else:\n        with open(config_file, 'w') as file:\n            file.write(\"[Journal]\\nForwardToSyslog=no\\n\")\n\n    print(f\"Configured 'ForwardToSyslog=no' in {config_file}\")\n\n    # Reload systemd-journald\n    subprocess.run([\"systemctl\", \"reload-or-restart\", \"systemd-journald\"])\n    print(\"Reloaded-or-restarted systemd-journald service\")\n"
  },
  {
    "name": "Ensure journald Storage is configured",
    "id": "6.2.1.1.5",
    "type": "Automated",
    "start_page": 726,
    "end_page": 729,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Data from journald may be stored in volatile memory or persisted locally on the server. Logs in memory will be lost upon a system reboot. By persisting logs to local disk on the server they are protected from loss due to a reboot.",
    "rationale": "Writing log data to disk will provide the ability to forensically reconstruct events which may have impacted the operations or security of a system even after a system crash or reboot.",
    "audit_details": "Run the following script to verify Storage is set to persistent:\n```\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Storage=persistent\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=( [\"$l_systemd_parameter\"]=\"$l_file\" )\n      fi\n     fi\n   done < <( /usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\nh*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n      l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n      l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n      if grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<< \"$l_systemd_file_parameter_value\"; then\n        l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value matching: \\\"$l_systemd_parameter_value\\\"\\n\"\n      fi\n     done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\n   l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n   l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n   config_file_parameter_chk\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}\n\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Storage=persistent\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=( [\"$l_systemd_parameter\"]=\"$l_file\" )\n      fi\n     fi\n   done < <( /usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\nh*([^#\\n\\r]+|#\\h*/[^#\\n\\r\\h]+\\.conf\\b)')\n   if (( ${#A_out[@]} > 0 )); then # Assess output from files and generate output\n     while IFS=\"=\" read -r l_systemd_file_parameter_name l_systemd_file_parameter_value; do\n      l_systemd_file_parameter_name=\"${l_systemd_file_parameter_name// /}\"\n      l_systemd_file_parameter_value=\"${l_systemd_file_parameter_value// /}\"\n      if grep -Piq \"^\\h*$l_systemd_parameter_value\\b\" <<< \"$l_systemd_file_parameter_value\"; then\n        l_output=\"$l_output\\n - \\\"$l_systemd_parameter_name\\\" is correctly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\"\\n\"\n      else\n        l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is incorrectly set to \\\"$l_systemd_file_parameter_value\\\" in \\\"$(printf '%s' \"${A_out[@]}\")\\\" and should have a value matching: \\\"$l_systemd_parameter_value\\\"\\n\"\n      fi\n     done < <(grep -Pio -- \"^\\h*$l_systemd_parameter_name\\h*=\\h*\\H+\" \"${A_out[@]}\")\n   else\n     l_output2=\"$l_output2\\n - \\\"$l_systemd_parameter_name\\\" is not set in an included file\\n ** Note: \\\"$l_systemd_parameter_name\\\" May be set in a file that's ignored by load procedure **\\n\"\n   fi\n  }\n  while IFS=\"=\" read -r l_systemd_parameter_name l_systemd_parameter_value; do # Assess and\ncheck parameters\n   l_systemd_parameter_name=\"${l_systemd_parameter_name// /}\"\n   l_systemd_parameter_value=\"${l_systemd_parameter_value// /}\"\n   config_file_parameter_chk\n  done < <(printf '%s\\n' \"${a_parlist[@]}\")\n  if [ -z \"$l_output2\" ]; then # Provide output from checks\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - Reason(s) for audit failure:\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- Correctly set:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Set the following parameter in the [Journal] section in /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf:\n\n```\nStorage=persistent\n```\n### Example:\n```\n#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\nh*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\\n' \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\\n' \"[Journal]\" \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n```\n",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\nh*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\\n' \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\\n' \"[Journal]\" \"Storage=persistent\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n}\n\nNote: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n`\n# systemctl reload-or-restart systemd-journald\n`",
    "python_script": "\nimport os\nimport configparser\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit journald storage configuration\"\"\"\n    config_file = \"/etc/systemd/journald.conf\"\n    config_dir = \"/etc/systemd/journald.conf.d/\"\n    config_param = \"Storage\"\n    config_value = \"persistent\"\n\n    config = configparser.ConfigParser()\n    config.read([config_file] + [os.path.join(config_dir, f) for f in os.listdir(config_dir) if f.endswith('.conf')])\n\n    if 'Journal' in config and config_param in config['Journal']:\n        return config['Journal'][config_param] == config_value\n    else:\n        print(f\"- '{config_param}' is not set in an included file (or section '[Journal]' is missing)\")\n        return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate journald storage configuration\"\"\"\n    config_dir = \"/etc/systemd/journald.conf.d/\"\n    config_file = os.path.join(config_dir, \"60-journald.conf\")\n    config_param = \"Storage\"\n    config_value = \"persistent\"\n\n    if not os.path.exists(config_dir):\n        os.makedirs(config_dir)\n        print(f\"Created directory '{config_dir}'\")\n\n    config = configparser.ConfigParser()\n    if os.path.exists(config_file):\n        config.read(config_file)\n\n    if 'Journal' not in config:\n        config.add_section('Journal')\n\n    config.set('Journal', config_param, config_value)\n\n    with open(config_file, 'w') as f:\n        config.write(f)\n        print(f\"Set '{config_param}' to '{config_value}' in '{config_file}'\")\n\n    # Reload systemd-journald service\n    import subprocess\n    subprocess.run(['systemctl', 'reload-or-restart', 'systemd-journald'])\n    print(\" Reloaded systemd-journald service\")\n"
  },
  {
    "name": "Ensure journald Compress is configured",
    "id": "6.2.1.1.6",
    "type": "Automated",
    "start_page": 730,
    "end_page": 733,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The journald system includes the capability of compressing overly large files to avoid filling up the system with logs or making the logs unmanageably large.",
    "rationale": "Uncompressed large files may unexpectedly fill a filesystem leading to resource unavailability. Compressing logs prior to write can prevent sudden, unexpected filesystem impacts.",
    "audit_details": "Run the following script to verify Compress is set to yes:\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_parlist=(\"Compress=yes\")\n  l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file\n  config_file_parameter_chk()\n  {\n   unset A_out; declare -A A_out # Check config file(s) setting\n   while read -r l_out; do\n     if [ -n \"$l_out\" ]; then\n      if [[ $l_out =~ ^\\s*# ]]; then\n        l_file=\"${l_out//# /}\"\n      else\n        l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\"\n        grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" &&\nA_out+=([\"$l_systemd_parameter\"]=\"$l_file\")\n      fi\n     fi\n   done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\",
    "audit_code": ". # Run the following script to check if Compress is set to yes\n#!/usr/bin/env bash \n{  l_output=\"\" l_output2=\"\" a_parlist=(\"Compress=yes\") l_systemd_config_file=\"/etc/systemd/journald.conf\" # Main systemd configuration file config_file_parameter_chk() { unset A_out; declare -A A_out while read -r l_out; do if [ -n \"$l_out\" ]; then if [[ $l_out =~ ^\\s*# ]]; then l_file=\"${l_out//# /}\" else l_systemd_parameter=\"$(awk -F= '{print $1}' <<< \"$l_out\" | xargs)\" grep -Piq -- \"^\\h*$l_systemd_parameter_name\\b\" <<< \"$l_systemd_parameter\" && A_out+=([\"$l_systemd_parameter\"]=\"$l_file\") fi fi done < <(/usr/bin/systemd-analyze cat-config \"$l_systemd_config_file\" | grep -Pio '^\\",
    "remediation_details": "Set the following parameter in the [Journal] section in /etc/systemd/journald.conf or a file in /etc/systemd/journald.conf.d/ ending in .conf:Compress=yes",
    "remediation_code": "#!/usr/bin/env bash\n{\n  [ ! -d /etc/systemd/journald.conf.d/ ] && mkdir /etc/systemd/journald.conf.d/\n  if grep -Psq -- '^\\h*\\[Journal\\]' /etc/systemd/journald.conf.d/60journald.conf; then\n   printf '%s\\n' \"Compress=yes\" >> /etc/systemd/journald.conf.d/60journald.conf\n  else\n   printf '%s\\n' \"[Journal]\" \"Compress=yes\" >> /etc/systemd/journald.conf.d/60-journald.conf\n  fi\n} \n\nNote: If this setting appears in a canonically later file, or later in the same file, the setting will be overwritten Run to following command to update the parameters in the service:\n\n# systemctl reload-or-restart systemd-journald\n",
    "python_script": "\nimport configparser\nimport os\nimport pathlib\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if Compress is set to yes in journald config.\"\"\"\n    config_files = [\"/etc/systemd/journald.conf\"]\n    config_files.extend(pathlib.Path(\"/etc/systemd/journald.conf.d/\").glob(\"*.conf\"))\n    \n    config = configparser.ConfigParser()\n    for file in config_files:\n        config.read(file)\n        if 'Journal' in config and 'Compress' in config['Journal']:\n            return config['Journal']['Compress'].lower() == 'yes'\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate by setting Compress=yes in journald config and update the service.\"\"\"\n    config_dir = pathlib.Path(\"/etc/systemd/journald.conf.d/\")\n    config_file = config_dir / \"60journald.conf\"\n    \n    # Ensure directory exists\n    if not config_dir.exists():\n        print(f\"Created directory {config_dir}\")\n        config_dir.mkdir()\n    \n    # Check for existing [Journal] section\n    config = configparser.ConfigParser()\n    if config_file.exists():\n        config.read(config_file)\n        if 'Journal' in config:\n            # Append to existing file if [Journal] section found\n            if 'Compress' not in config['Journal']:\n                print(f\"Appending 'Compress=yes' to {config_file}\")\n                with open(config_file, 'a') as f:\n                    f.write(\"Compress=yes\\n\")\n            else:\n                print(f\"Updating 'Compress' to 'yes' in {config_file}\")\n                config['Journal']['Compress'] = 'yes'\n                with open(config_file, 'w') as f:\n                    config.write(f)\n        else:\n            # Create [Journal] section if not found\n            print(f\"Adding [Journal] section with 'Compress=yes' to {config_file}\")\n            with open(config_file, 'a') as f:\n                f.write(\"[Journal]\\nCompress=yes\\n\")\n    else:\n        # Create new file with [Journal] section\n        print(f\"Creating {config_file} with 'Compress=yes'\")\n        with open(config_file, 'w') as f:\n            f.write(\"[Journal]\\nCompress=yes\\n\")\n    \n    # Update systemd-journald service\n    print(\"Updating systemd-journald service...\")\n    subprocess.run([\"systemctl\", \"reload-or-restart\", \"systemd-journald\"])\n"
  },
  {
    "name": "Ensure systemd-journal-remote is installed",
    "id": "6.2.1.2.1",
    "type": "Automated",
    "start_page": 735,
    "end_page": 736,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Journald systemd-journal-remote supports the ability to send log events it gathers to a remote log host or to receive messages from remote hosts, thus enabling centralized log management.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit_details": "Run the following command to verify systemd-journal-remote is installed.\n```\n# dpkg-query -s systemd-journal-remote &>/dev/null && echo \"systemd-journal-remote is installed\"\nsystemd-journal-remote is installed\n```\n",
    "audit_code": "# dpkg-query -s systemd-journal-remote &>/dev/null && echo \"systemd-journal-remote is installed\"\nsystemd-journal-remote is installed",
    "remediation_details": "Run the following command to install systemd-journal-remote:\n```\n# apt install systemd-journal-remote\n```\n",
    "remediation_code": "# apt install systemd-journal-remote",
    "python_script": "\nimport subprocess\nimport pkg_resources\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Checks if systemd-journal-remote is installed.\n    \n    Returns:\n        bool: True if systemd-journal-remote is not installed, False otherwise.\n    \"\"\"\n    try:\n        pkg_resources.get_distribution('systemd-journal-remote')\n        return False\n    except pkg_resources.DistributionNotFound:\n        # If the package is not found, try querying dpkg as a fallback\n        result = subprocess.run(['dpkg-query', '-s', 'systemd-journal-remote'], \n                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        return result.returncode!= 0\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Installs systemd-journal-remote if it's not already installed.\n    \"\"\"\n    if audit_vuln():\n        print(\"Installing systemd-journal-remote...\")\n        result = subprocess.run(['apt', 'install', '-y', 'systemd-journal-remote'], \n                                stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if result.returncode == 0:\n            print(\"Successfully installed systemd-journal-remote.\")\n        else:\n            print(f\"Failed to install systemd-journal-remote: {result.stderr.decode().strip()}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Attempting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"systemd-journal-remote is already installed. No action needed.\")\n"
  },
  {
    "name": "Ensure systemd-journal-upload is enabled and active",
    "id": "6.2.1.2.3",
    "type": "Automated",
    "start_page": 739,
    "end_page": 740,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Journald systemd-journal-upload supports the ability to send log events it gathers to a remote log host.",
    "rationale": "Storing log data on a remote host protects log integrity from local attacks. If an attacker gains root access on the local system, they could tamper with or remove log data that is stored on the local system.",
    "audit_details": "Run the following command to verify systemd-journal-upload is enabled.\n```\n# systemctl is-enabled systemd-journal-upload.service\nenabled\n```\nRun the following command to verify systemd-journal-upload is active:\n```\n# systemctl is-active systemd-journal-upload.service\nactive\n```",
    "audit_code": "# systemctl is-enabled systemd-journal-upload.service\nenabled\n\n# systemctl is-active systemd-journal-upload.service\nactive",
    "remediation_details": "Run the following commands to unmask, enable and start systemd-journal-upload:\n```\n# systemctl unmask systemd-journal-upload.service\n# systemctl --now enable systemd-journal-upload.service\n```",
    "remediation_code": "# systemctl unmask systemd-journal-upload.service\n# systemctl --now enable systemd-journal-upload.service",
    "python_script": "\nimport subprocess\nimport sys\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Check if systemd-journal-upload is enabled and active.\"\"\"\n    # Check if service is enabled\n    enabled_check = subprocess.run(['systemctl', 'is-enabled', 'systemd-journal-upload.service'],\n                                   stdout=subprocess.PIPE, text=True)\n    is_enabled = enabled_check.stdout.strip() == 'enabled'\n\n    # Check if service is active\n    active_check = subprocess.run(['systemctl', 'is-active', 'systemd-journal-upload.service'],\n                                  stdout=subprocess.PIPE, text=True)\n    is_active = active_check.stdout.strip() == 'active'\n\n    # Vulnerability present if not both enabled and active\n    return not (is_enabled and is_active)\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure systemd-journal-upload is enabled and active.\"\"\"\n    # Unmask the service\n    subprocess.run(['systemctl', 'unmask', 'systemd-journal-upload.service'])\n    print(\"Unmasked `systemd-journal-upload` systemd service.\")\n\n    # Enable and start the service immediately\n    subprocess.run(['systemctl', '--now', 'enable', 'systemd-journal-upload.service'])\n    print(\"Enabled and started `systemd-journal-upload` systemd service.\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1 and sys.argv[1] == 'remediate':\n        remediate_vuln()\n    else:\n        vuln_present = audit_vuln()\n        print(f\"Vulnerability present: {vuln_present}\", file=sys.stderr)\n        sys.exit(1 if vuln_present else 0)\n"
  },
  {
    "name": "Ensure systemd-journal-remote service is not in use",
    "id": "6.2.1.2.4",
    "type": "Automated",
    "start_page": 741,
    "end_page": 742,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Journald systemd-journal-remote supports the ability to receive messages from remote hosts, thus acting as a log server. Clients should not receive data from other hosts.\n\nNOTE:\n\n- The same package, systemd-journal-remote, is used for both sending logs to remote hosts and receiving incoming logs.\n\n- With regards to receiving logs, there are two services; systemd-journal-remote.socket and systemd-journal-remote.service.",
    "rationale": "If a client is configured to also receive data, thus turning it into a server, the client system is acting outside its operational boundary.",
    "audit_details": "Run the following command to verify systemd-journal-remote.socket and systemd-journal-remote.service are not enabled:\n# systemctl is-enabled systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^enabled'\nNothing should be returned\n\nRun the following command to verify systemd-journal-remote.socket and systemd-journal-remote.service are not active:\n# systemctl is-active systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^active'\nNothing should be returned",
    "audit_code": "# systemctl is-enabled systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^enabled'\n# systemctl is-active systemd-journal-remote.socket systemd-journal-remote.service | grep -P -- '^active'",
    "remediation_details": "Run the following commands to stop and mask systemd-journal-remote.socket and systemd-journal-remote.service:\n# systemctl stop systemd-journal-remote.socket systemd-journal-remote.service\n# systemctl mask systemd-journal-remote.socket systemd-journal-remote.service",
    "remediation_code": "# systemctl stop systemd-journal-remote.socket systemd-journal-remote.service\n# systemctl mask systemd-journal-remote.socket systemd-journal-remote.service",
    "python_script": "\nimport systemd.daemon\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Check if systemd-journal-remote services are enabled or active\"\"\"\n    services = ['systemd-journal-remote.socket', 'systemd-journal-remote.service']\n    for service in services:\n        if systemd.daemon.isValidUnit(service):\n            if systemd.daemon.Unit.New(service).Get('UnitFileState') == 'enabled' or \\\n               systemd.daemon.Unit.New(service).Get('ActiveState') == 'active':\n                return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Stop and mask systemd-journal-remote services if enabled or active\"\"\"\n    services = ['systemd-journal-remote.socket', 'systemd-journal-remote.service']\n    for service in services:\n        if systemd.daemon.isValidUnit(service):\n            if systemd.daemon.Unit.New(service).Get('UnitFileState') == 'enabled':\n                print(f\"Stopping `{service}` service...\")\n                subprocess.run(['systemctl', 'stop', service])\n                print(f\"Masking `{service}` service...\")\n                subprocess.run(['systemctl', 'mask', service])\n            if systemd.daemon.Unit.New(service).Get('ActiveState') == 'active':\n                print(f\"Stopping `{service}` service (already active)...\")\n                subprocess.run(['systemctl', 'stop', service])\n\n# Example usage:\nif __name__ == '__main__':\n    if audit_vuln():\n        print(\"Vulnerability detected. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability detected.\")\n"
  },
  {
    "name": "Ensure access to all logfiles has been configured",
    "id": "6.2.2.1",
    "type": "Automated",
    "start_page": 744,
    "end_page": 749,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Log files contain information from many services on the local system, or in the event of a centralized log server, others systems logs as well.\n\nIn general log files are found in /var/log/, although application can be configured to store logs elsewhere. Should your application store logs in another, ensure to run the same test on that location.",
    "rationale": "It is important that log files have the correct permissions to ensure that sensitive data is protected and that only the appropriate users / groups have access to them.",
    "audit_details": "Run the following script to verify that files in /var/log/ have appropriate permissions and ownership:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_op2=\"\" l_output2=\"\"\n  l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n  file_test_chk()\n  {\n   l_op2=\"\"\n   if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n     l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\"\n   fi\n   if [[ ! \"$l_user\" =~ $l_auser ]]; then\n     l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\"\n   fi\n   if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n     l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by\\n\\\"${l_agroup//|/ or }\\\"\"\n   fi\n   [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n  }\n  unset a_file && a_file=() # clear and initialize array\n  # Loop to create array with stat of files that could possibly fail one of the audits\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \"$l_file\" ] && a_file+=($(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\"))\n  done < <(find -L /var/log -type f ( -perm /0137 -o ! -user root -o ! -group root ) -print0)\n  while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n   l_bname=\"$(basename \"$l_fname\")\"\n   case \"$l_bname\" in\n     lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README)\n      perm_mask='0113'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"root\"\n      l_agroup=\"(root|utmp)\"\n      file_test_chk\n      ;;\n     secure | auth.log | syslog | messages)\n      perm_mask='0137'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      file_test_chk\n      ;;\n     SSSD | sssd)\n      perm_mask='0117'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"(root|SSSD)\"\n      l_agroup=\"(root|SSSD)\"\n      file_test_chk      \n      ;;\n     gdm | gdm3)\n      perm_mask='0117'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"root\"\n      l_agroup=\"(root|gdm|gdm3)\"\n      file_test_chk  \n      ;;\n     *.journal | *.journal~)\n      perm_mask='0137'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"root\"\n      l_agroup=\"(root|systemd-journal)\"\n      file_test_chk\n      ;;\n     *)\n      perm_mask='0137'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then\n        if [[ ! \"$l_user\" =~ $l_auser ]]; then\n          l_auser=\"(root|syslog|$l_user)\"\n        fi\n        if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n         l_tst=\"\"\n         while l_out3=\"\" read -r l_duid; do\n           [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed\n         done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\"\n         [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\"\n        fi\n      fi\n      file_test_chk\n      ;;\n   esac\n  done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\"\n  unset a_file # Clear array\n  # If all files passed, then we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Results:\\n ** Pass **\\n- All files in \\\"/var/log/\\\" have appropriate\npermissions and ownership\\n\"\n  else\n   # print the reason why we are failing\n   echo -e \"\\n- Audit Results:\\n ** Fail **\\n$l_output2\"\n  fi\n}\n",
    "remediation_details": "Run the following script to update permissions and ownership on files in /var/log. Although the script is not destructive, ensure that the output of the audit procedure is captured in the event that the remediation causes issues.",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_op2=\"\" l_output2=\"\"\n  l_uidmin=\"$(awk '/^\\s*UID_MIN/{print $2}' /etc/login.defs)\"\n  file_test_fix()\n  {\n   l_op2=\"\"\n   l_fuser=\"root\"\n   l_fgroup=\"root\"\n   if [ $(( $l_mode & $perm_mask )) -gt 0 ]; then\n     l_op2=\"$l_op2\\n - Mode: \\\"$l_mode\\\" should be \\\"$maxperm\\\" or more restrictive\\n  Removing excess permissions\"\n     chmod \"$l_rperms\" \"$l_fname\"\n   fi\n   if [[ ! \"$l_user\" =~ $l_auser ]]; then\n     l_op2=\"$l_op2\\n - Owned by: \\\"$l_user\\\" and should be owned by \\\"${l_auser//|/ or }\\\"\\n - Changing ownership to: \\\"$l_fuser\\\"\"\n     chown \"$l_fuser\" \"$l_fname\"\n   fi\n   if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n     l_op2=\"$l_op2\\n - Group owned by: \\\"$l_group\\\" and should be group owned by\\n\\\"${l_agroup//|/ or }\\\"\\n  - Changing group ownership to: \\\"$l_fgroup\\\"\"\n     chgrp \"$l_fgroup\" \"$l_fname\"\n   fi\n   [ -n \"$l_op2\" ] && l_output2=\"$l_output2\\n - File: \\\"$l_fname\\\" is:$l_op2\\n\"\n  }\n  unset a_file && a_file=() # clear and initialize array\n  # Loop to create array with stat of files that could possibly fail one of the audits\n  while IFS= read -r -d $'\\0' l_file; do\n   [ -e \"$l_file\" ] && a_file+=($(stat -Lc '%n^%#a^%U^%u^%G^%g' \"$l_file\"))\n  done < <(find -L /var/log -type f ( -perm /0137 -o ! -user root -o ! -group root ) -print0)\n  while IFS=\"^\" read -r l_fname l_mode l_user l_uid l_group l_gid; do\n   l_bname=\"$(basename \"$l_fname\")\"\n   case \"$l_bname\" in\n     lastlog | lastlog.* | wtmp | wtmp.* | wtmp-* | btmp | btmp.* | btmp-* | README)\n      perm_mask='0113'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_rperms=\"ug-x,o-wx\"\n      l_auser=\"root\"\n      l_agroup=\"(root|utmp)\"\n      file_test_fix\n      ;;\n     secure | auth.log | syslog | messages)\n      perm_mask='0137'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_rperms=\"u-x,g-wx,o-rwx\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      file_test_fix\n      ;;\n     SSSD | sssd)\n      perm_mask='0117'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_rperms=\"ug-x,o-rwx\"\n      l_auser=\"(root|SSSD)\"\n      l_agroup=\"(root|SSSD)\"\n      file_test_fix      \n      ;;\n     gdm | gdm3)\n      perm_mask='0117'\n      l_rperms=\"ug-x,o-rwx\"\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_auser=\"root\"\n      l_agroup=\"(root|gdm|gdm3)\"\n      file_test_fix  \n      ;;\n     *.journal | *.journal~)\n      perm_mask='0137'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_rperms=\"u-x,g-wx,o-rwx\"\n      l_auser=\"root\"\n      l_agroup=\"(root|systemd-journal)\"    \n      file_test_fix\n      ;;\n     *)\n      perm_mask='0137'\n      maxperm=\"$(printf '%o' $(( 0777 & ~$perm_mask)))\"\n      l_rperms=\"u-x,g-wx,o-rwx\"\n      l_auser=\"(root|syslog)\"\n      l_agroup=\"(root|adm)\"\n      if [ \"$l_uid\" -lt \"$l_uidmin\" ] && [ -z \"$(awk -v grp=\"$l_group\" -F: '$1==grp {print $4}' /etc/group)\" ]; then\n        if [[ ! \"$l_user\" =~ $l_auser ]]; then\n         l_auser=\"(root|syslog|$l_user)\"\n        fi\n        if [[ ! \"$l_group\" =~ $l_agroup ]]; then\n         l_tst=\"\"\n         while l_out3=\"\" read -r l_duid; do\n           [ \"$l_duid\" -ge \"$l_uidmin\" ] && l_tst=failed\n         done <<< \"$(awk -F: '$4=='\"$l_gid\"' {print $3}' /etc/passwd)\"\n         [ \"$l_tst\" != \"failed\" ] && l_agroup=\"(root|adm|$l_group)\"\n        fi\n      fi\n      file_test_fix\n      ;;\n   esac\n  done <<< \"$(printf '%s\\n' \"${a_file[@]}\")\"\n  unset a_file # Clear array\n  # If all files passed, then we report no changes\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"- All files in \\\"/var/log/\\\" have appropriate permissions and ownership\\n - No\nchanges required\\n\"\n  else\n   # print report of changes\n   echo -e \"\\n$l_output2\"\n  fi\n}  \n\n### Note: You may also need to change the configuration for your logging software or services for any logs that had incorrect permissions. If there are services that log to other locations, ensure that those log files have the appropriate permissions.\n\nReferences:\n\n1. NIST SP 800-53 Rev. 5: AC-3, MP-2\n\n### CIS Controls:\nControls\nControl IG 1 IG 2 IG 3 Version\n\n3.3 Configure Data Access Control Lists\nv8 Configure data access control lists based on a user's need to know. Apply data \u25cf \u25cf \u25cf\n\naccess control lists, also known as access permissions, to local and remote file systems, databases, and applications.\n\n### 14.6 Protect Information through Access Control Lists\nProtect all information stored on systems with file system, network share,\n\n### v7 claims, application, or database specific access control lists. These controls will \u25cf \u25cf \u25cf\n\n### enforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.\n\n### MITRE ATT&CK Mappings:\nTechniques / Sub Tactics Mitigations techniques\n\nT1070, T1070.002, T1083,\nTA0007 M1028 T1083.000\n\n",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit logfile permissions and ownership in /var/log/\"\"\"\n    failed_audit = False\n    uid_min = pwd.getpwnam('nobody').pw_uid  # Get the minimum UID\n\n    for root, dirs, files in os.walk('/var/log'):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_stat = os.stat(file_path)\n\n            # Define expected permissions and ownership based on filename\n            if file in ['lastlog', 'lastlog.*', 'wtmp', 'wtmp.*', 'wtmp-*', 'btmp', 'btmp.*', 'btmp-*', 'README']:\n                perm_mask = 0o0113\n                expected_user = 'root'\n                expected_group = ['root', 'utmp']\n            elif file in ['secure', 'auth.log', 'syslog', 'messages', '*.journal', '*.journal~']:\n                perm_mask = 0o0137\n                expected_user = 'root'\n                expected_group = ['root', 'adm', 'syslog', 'systemd-journal']\n            elif file in ['SSSD', 'sssd']:\n                perm_mask = 0o0117\n                expected_user = 'root'\n                expected_group = ['root', 'SSSD']\n            elif file in ['gdm', 'gdm3']:\n                perm_mask = 0o0117\n                expected_user = 'root'\n                expected_group = ['root', 'gdm', 'gdm3']\n            else:\n                perm_mask = 0o0137\n                expected_user = 'root'\n                expected_group = ['root', 'adm']\n\n                # Adjust expected user/group if file's UID/GID is below uid_min and not in expected groups\n                if file_stat.st_uid < uid_min:\n                    try:\n                        expected_user = pwd.getpwuid(file_stat.st_uid).pw_name\n                    except KeyError:\n                        pass\n                    if grp.getgrgid(file_stat.st_gid).gr_name not in expected_group:\n                        expected_group.append(grp.getgrgid(file_stat.st_gid).gr_name)\n\n            # Check permissions\n            if file_stat.st_mode & perm_mask:\n                print(f\"File: {file_path} - Mode: {stat.filemode(file_stat.st_mode)} should be more restrictive\")\n                failed_audit = True\n\n            # Check ownership\n            if pwd.getpwuid(file_stat.st_uid).pw_name not in expected_user and isinstance(expected_user, str):\n                print(f\"File: {file_path} - Owned by: {pwd.getpwuid(file_stat.st_uid).pw_name} and should be owned by {expected_user}\")\n                failed_audit = True\n            elif pwd.getpwuid(file_stat.st_uid).pw_name not in expected_user and isinstance(expected_user, list):\n                if pwd.getpwuid(file_stat.st_uid).pw_name not in expected_user:\n                    print(f\"File: {file_path} - Owned by: {pwd.getpwuid(file_stat.st_uid).pw_name} and should be owned by one of {expected_user}\")\n                    failed_audit = True\n\n            if grp.getgrgid(file_stat.st_gid).gr_name not in expected_group and isinstance(expected_group, str):\n                print(f\"File: {file_path} - Group owned by: {grp.getgrgid(file_stat.st_gid).gr_name} and should be group owned by {expected_group}\")\n                failed_audit = True\n            elif grp.getgrgid(file_stat.st_gid).gr_name not in expected_group and isinstance(expected_group, list):\n                if grp.getgrgid(file_stat.st_gid).gr_name not in expected_group:\n                    print(f\"File: {file_path} - Group owned by: {grp.getgrgid(file_stat.st_gid).gr_name} and should be group owned by one of {expected_group}\")\n                    failed_audit = True\n\n    return not failed_audit\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate logfile permissions and ownership issues in /var/log/\"\"\"\n    uid_min = pwd.getpwnam('nobody').pw_uid  # Get the minimum UID\n\n    for root, dirs, files in os.walk('/var/log'):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_stat = os.stat(file_path)\n\n            # Define expected permissions and ownership based on filename\n            if file in ['lastlog', 'lastlog.*', 'wtmp', 'wtmp.*', 'wtmp-*', 'btmp', 'btmp.*', 'btmp-*', 'README']:\n                perm_mask = 0o0113\n                expected_user = 'root'\n                expected_group = ['root', 'utmp']\n                new_perm = 0o0640\n            elif file in ['secure', 'auth.log', 'syslog', 'messages', '*.journal', '*.journal~']:\n                perm_mask = 0o0137\n                expected_user = 'root'\n                expected_group = ['root', 'adm', 'syslog', 'systemd-journal']\n                new_perm = 0o0640\n            elif file in ['SSSD', 'sssd']:\n                perm_mask = 0o0117\n                expected_user = 'root'\n                expected_group = ['root', 'SSSD']\n                new_perm = 0o0640\n            elif file in ['gdm', 'gdm3']:\n                perm_mask = 0o0117\n                expected_user = 'root'\n                expected_group = ['root', 'gdm', 'gdm3']\n                new_perm = 0o0640\n            else:\n                perm_mask = 0o0137\n                expected_user = 'root'\n                expected_group = ['root', 'adm']\n                new_perm = 0o0640\n\n                # Adjust expected user/group if file's UID/GID is below uid_min and not in expected groups\n                if file_stat.st_uid < uid_min:\n                    try:\n                        expected_user = pwd.getpwuid(file_stat.st_uid).pw_name\n                    except KeyError:\n                        pass\n                    if grp.getgrgid(file_stat.st_gid).gr_name not in expected_group:\n                        expected_group.append(grp.getgrgid(file_stat.st_gid).gr_name)\n\n            # Remediate permissions\n            if file_stat.st_mode & perm_mask:\n                os.chmod(file_path, new_perm)\n                print(f\"Updated permissions for {file_path} to {stat.filemode(new_perm)}\")\n\n            # Remediate ownership\n            if pwd.getpwuid(file_stat.st_uid).pw_name not in expected_user and isinstance(expected_user, str):\n                os.chown(file_path, pwd.getpwnam(expected_user).pw_uid, -1)\n                print(f\"Updated ownership for {file_path} to {expected_user}\")\n            elif pwd.getpwuid(file_stat.st_uid).pw_name not in expected_user and isinstance(expected_user, list):\n                if pwd.getpwuid(file_stat.st_uid).pw_name not in expected_user:\n                    os.chown(file_path, pwd.getpwnam(expected_user[0]).pw_uid, -1)\n                    print(f\"Updated ownership for {file_path} to {expected_user[0]}\")\n\n            if grp.getgrgid(file_stat.st_gid).gr_name not in expected_group and isinstance(expected_group, str):\n                os.chown(file_path, -1, grp.getgrnam(expected_group).gr_gid)\n                print(f\"Updated group ownership for {file_path} to {expected_group}\")\n            elif grp.getgrgid(file_stat.st_gid).gr_name not in expected_group and isinstance(expected_group, list):\n                if grp.getgrgid(file_stat.st_gid).gr_name not in expected_group:\n                    os.chown(file_path, -1, grp.getgrnam(expected_group[0]).gr_gid)\n                    print(f\"Updated group ownership for {file_path} to {expected_group[0]}\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Remediating vulnerabilities...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerabilities found.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/passwd are configured",
    "id": "7.1.1",
    "type": "Automated",
    "start_page": 879,
    "end_page": 880,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/passwd file contains user account information that is used by many system utilities and therefore must be readable for these utilities to operate.",
    "rationale": "It is critical to ensure that the /etc/passwd file is protected from unauthorized write access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/passwd is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/passwd\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/passwd\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd:",
    "remediation_code": "# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions, owner, and group of /etc/passwd.\"\"\"\n    passwd_file = '/etc/passwd'\n    stat_result = os.stat(passwd_file)\n    \n    # Check permissions (644 or more restrictive)\n    expected_perms = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    if stat_result.st_mode & ~expected_perms!= 0:\n        print(f\"Permissions of {passwd_file} are not 644 or more restrictive.\")\n        return False\n    \n    # Check owner (0/root)\n    if stat_result.st_uid!= 0 or pwd.getpwuid(stat_result.st_uid).pw_name!= 'root':\n        print(f\"Owner of {passwd_file} is not root (UID 0).\")\n        return False\n    \n    # Check group (0/root)\n    if stat_result.st_gid!= 0 or grp.getgrgid(stat_result.st_gid).gr_name!= 'root':\n        print(f\"Group of {passwd_file} is not root (GID 0).\")\n        return False\n    \n    print(f\"All checks for {passwd_file} passed.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions, owner, and group issues of /etc/passwd.\"\"\"\n    passwd_file = '/etc/passwd'\n    \n    # Remove excess permissions (ensure 644)\n    os.chmod(passwd_file, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)\n    print(f\"Removed excess permissions on {passwd_file}, set to 644.\")\n    \n    # Set owner to root\n    os.chown(passwd_file, 0, -1)  # -1 keeps the group unchanged\n    print(f\"Set owner of {passwd_file} to root (UID 0).\")\n    \n    # Set group to root\n    os.chown(passwd_file, -1, 0)  # -1 keeps the owner unchanged\n    print(f\"Set group of {passwd_file} to root (GID 0).\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        audit_vuln()  # Re-audit after remediation\n"
  },
  {
    "name": "Ensure permissions on /etc/passwd- are configured",
    "id": "7.1.2",
    "type": "Automated",
    "start_page": 881,
    "end_page": 882,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/passwd- file contains backup user account information.",
    "rationale": "It is critical to ensure that the /etc/passwd- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/passwd- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/passwdAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: { 0/ root)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: { %g/ %G)' /etc/passwd\n",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/passwd-:\n```\n# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd\n```\n",
    "remediation_code": "# chmod u-x,go-wx /etc/passwd\n# chown root:root /etc/passwd\n",
    "python_script": "\nimport pathlib\nimport stat\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability: Ensure permissions on /etc/passwd- are configured\"\"\"\n    file_path = pathlib.Path(\"/etc/passwd-\")\n    file_stat = file_path.stat()\n    \n    # Check mode (permissions)\n    expected_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    if file_stat.st_mode!= expected_mode:\n        return True  # Vulnerability present: incorrect mode\n    \n    # Check Uid (owner)\n    if file_stat.st_uid!= 0:\n        return True  # Vulnerability present: incorrect owner\n    \n    # Check Gid (group)\n    if file_stat.st_gid!= 0:\n        return True  # Vulnerability present: incorrect group\n    \n    return False  # No vulnerability found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability: Ensure permissions on /etc/passwd- are configured\"\"\"\n    file_path = pathlib.Path(\"/etc/passwd-\")\n    \n    # Remove excess permissions (set to 644)\n    new_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    file_path.chmod(new_mode)\n    print(f\"Set permissions of {file_path} to 0644 (-rw-r--r--).\")\n    \n    # Set owner to root (Uid 0)\n    os.chown(file_path, 0, -1)  # -1 to keep the current group\n    print(f\"Set owner of {file_path} to root (Uid 0).\")\n    \n    # Set group to root (Gid 0)\n    os.chown(file_path, -1, 0)  # -1 to keep the current owner\n    print(f\"Set group of {file_path} to root (Gid 0).\")\n"
  },
  {
    "name": "Ensure permissions on /etc/group are configured",
    "id": "7.1.3",
    "type": "Automated",
    "start_page": 883,
    "end_page": 884,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/group file contains a list of all the valid groups defined in the system. The command below allows read/write access for root and read access for everyone else.",
    "rationale": "The /etc/group file needs to be protected from unauthorized changes by non-privileged users, but needs to be readable as this information is used with many non-privileged programs.",
    "audit_details": "Run the following command to verify /etc/group is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group:\n# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "remediation_code": "# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "python_script": "\nimport os\nimport stat\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerabilities in /etc/group permissions and ownership.\"\"\"\n    group_file = '/etc/group'\n    file_stat = os.stat(group_file)\n    \n    # Check file mode (permissions)\n    mode = stat.filemode(file_stat.st_mode)\n    if mode != '-rw-r--r--' and not (mode < '-rw-r--r--'):  # More restrictive than 0644\n        print(f\"Permissions for {group_file} are not 0644 or more restrictive (currently {mode}).\")\n        return False\n    \n    # Check UID and GID\n    if file_stat.st_uid != 0 or file_stat.st_gid != 0:\n        print(f\"Owner or Group for {group_file} is not set to root (UID: {file_stat.st_uid}, GID: {file_stat.st_gid}).\")\n        return False\n    \n    print(f\"Permissions and ownership for {group_file} are correctly configured.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerabilities in /etc/group permissions and ownership.\"\"\"\n    group_file = '/etc/group'\n    \n    # Remove excess permissions and set to 0644\n    desired_mode = 0o644\n    os.chmod(group_file, desired_mode)\n    print(f\"Set permissions for {group_file} to 0644.\")\n    \n    # Set owner and group to root\n    root_uid, root_gid = 0, 0\n    os.chown(group_file, root_uid, root_gid)\n    print(f\"Set owner and group for {group_file} to root (UID: {root_uid}, GID: {root_gid}).\")\n\n# Example usage\nif not audit_vuln():\n    remediate_vuln()\n    print(\"Re-auditing after remediation...\")\n    audit_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/group- are configured",
    "id": "7.1.4",
    "type": "Automated",
    "start_page": 885,
    "end_page": 886,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/group- file contains a backup list of all the valid groups defined in the system.",
    "rationale": "It is critical to ensure that the /etc/group- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/group- is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/groupAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/group",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/group-:\n# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "remediation_code": "# chmod u-x,go-wx /etc/group\n# chown root:root /etc/group",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit permissions on /etc/group-\n    \n    Returns:\n        bool: True if vulnerable, False otherwise\n    \"\"\"\n    file_path = \"/etc/group-\"\n    file_stat = os.stat(file_path)\n    \n    # Check mode (permissions)\n    expected_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    if file_stat.st_mode & 0o777!= expected_mode:\n        return True\n    \n    # Check Uid (owner)\n    expected_uid = pwd.getpwnam(\"root\").pw_uid\n    if file_stat.st_uid!= expected_uid:\n        return True\n    \n    # Check Gid (group)\n    expected_gid = grp.getgrnam(\"root\").gr_gid\n    if file_stat.st_gid!= expected_gid:\n        return True\n    \n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate permissions on /etc/group-\n    \"\"\"\n    file_path = \"/etc/group-\"\n    \n    # Remove excess permissions (set to 644)\n    new_mode = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH\n    os.chmod(file_path, new_mode)\n    print(f\"Set permissions of '{file_path}' to 644.\")\n    \n    # Set owner to root\n    root_uid = pwd.getpwnam(\"root\").pw_uid\n    os.chown(file_path, root_uid, -1)\n    print(f\"Set owner of '{file_path}' to root (UID {root_uid}).\")\n    \n    # Set group to root\n    root_gid = grp.getgrnam(\"root\").gr_gid\n    os.chown(file_path, -1, root_gid)\n    print(f\"Set group of '{file_path}' to root (GID {root_gid}).\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/shadow are configured",
    "id": "7.1.5",
    "type": "Automated",
    "start_page": 887,
    "end_page": 888,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/shadow file is used to store the information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert the user accounts.",
    "audit_details": "Run the following command to verify /etc/shadow is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or ({GID}/ shadow):\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow\n```\n\n_Example:_\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/shadow to root and group to either root or shadow:\n```\n# chown root:shadow /etc/shadow\n -OR# chown root:root /etc/shadow\n```\nRun the following command to remove excess permissions form /etc/shadow:\n```\n# chmod u-x,g-wx,o-rwx /etc/shadow\n```",
    "remediation_code": "# chown root:shadow /etc/shadow\n# chmod u-x,g-wx,o-rwx /etc/shadow",
    "python_script": "\nimport os\nimport stat\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audits the permissions, UID, and GID of /etc/shadow.\n    \n    Returns:\n    bool: True if the vulnerability is not present, False otherwise.\n    \"\"\"\n    shadow_path = '/etc/shadow'\n    try:\n        file_stat = os.stat(shadow_path)\n        \n        # Check permissions (mode 0640 or more restrictive)\n        if file_stat.st_mode & 0o777 != 0o640:\n            print(f\"Permissions on {shadow_path} are not 0640 or more restrictive.\")\n            return False\n        \n        # Check UID (should be 0/root)\n        if file_stat.st_uid != 0:\n            print(f\"UID of {shadow_path} is not 0 (root).\")\n            return False\n        \n        # Check GID (should be 0/root or {GID}/shadow)\n        shadow_gid = grp.getgrnam('shadow').gr_gid\n        if file_stat.st_gid not in (0, shadow_gid):\n            print(f\"GID of {shadow_path} is neither 0 (root) nor {shadow_gid} (shadow).\")\n            return False\n        \n        return True\n    \n    except FileNotFoundError:\n        print(f\"{shadow_path} not found.\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred during audit: {e}\")\n        return False\n\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by setting the correct ownership and permissions on /etc/shadow.\n    \"\"\"\n    shadow_path = '/etc/shadow'\n    try:\n        # Set ownership to root:shadow (using shadow's GID as it's more specific)\n        shadow_gid = grp.getgrnam('shadow').gr_gid\n        os.chown(shadow_path, 0, shadow_gid)\n        print(f\"Set ownership of {shadow_path} to root:shadow.\")\n        \n        # Remove excess permissions (set mode to 0640)\n        os.chmod(shadow_path, 0o640)\n        print(f\"Set permissions of {shadow_path} to 0640.\")\n    \n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/shadow- are configured",
    "id": "7.1.6",
    "type": "Automated",
    "start_page": 889,
    "end_page": 890,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/shadow- file is used to store backup information about user accounts that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/shadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/shadow- is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or {GID}/shadow:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow\n```\n\n_Example:_\n\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/shadow- to root and group to either root or shadow:\n```\n# chown root:shadow /etc/shadow -OR# chown root:root /etc/shadow\n```\nRun the following command to remove excess permissions form /etc/shadow-:\n```\n# chmod u-x,g-wx,o-rwx /etc/shadow\n```",
    "remediation_code": "# chown root:shadow /etc/shadow  \n# chown root:root /etc/shadow  \n# chmod u-x,g-wx,o-rwx /etc/shadow",
    "python_script": "\nimport os\nimport stat\nimport grp\nimport pwd\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit permissions on /etc/shadow-.\n    \n    Returns:\n        bool: True if permissions are correctly configured, False otherwise.\n    \"\"\"\n    file_path = \"/etc/shadow-\"\n    file_stat = os.stat(file_path)\n    \n    # Verify file mode is 640 or more restrictive\n    mode_is_restricted = (file_stat.st_mode & 0o777) <= 0o640\n    \n    # Verify Uid is 0/root\n    uid_is_root = file_stat.st_uid == 0\n    \n    # Verify Gid is 0/root or {GID}/shadow\n    gid_is_valid = (file_stat.st_gid == 0) or (grp.getgrgid(file_stat.st_gid).gr_name == 'shadow')\n    \n    return all([mode_is_restricted, uid_is_root, gid_is_valid])\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate permissions on /etc/shadow-.\n    \"\"\"\n    file_path = \"/etc/shadow-\"\n    \n    # Set ownership to root:shadow (preferred) or root:root\n    try:\n        os.chown(file_path, pwd.getpwnam(\"root\").pw_uid, grp.getgrnam(\"shadow\").gr_gid)\n        print(f\"Set ownership of {file_path} to root:shadow.\")\n    except KeyError:  # shadow group might not exist, default to root:root\n        os.chown(file_path, 0, 0)\n        print(f\"Set ownership of {file_path} to root:root (shadow group not found).\")\n    \n    # Remove excess permissions (resulting in 640 or more restrictive)\n    new_mode = file_stat.st_mode & ~stat.S_IWGRP & ~stat.S_IXUSR & ~stat.S_IWUSR & ~stat.S_IXGRP & ~stat.S_IRWXO\n    os.chmod(file_path, new_mode)\n    print(f\"Restricted permissions on {file_path} to 640 or more restrictive.\")\n```\n**Example Usage:**\n```python\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"/etc/shadow- permissions are correctly configured.\")\n    else:\n        print(\"/etc/shadow- permissions need remediation. Applying fixes...\")\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/gshadow are configured",
    "id": "7.1.7",
    "type": "Automated",
    "start_page": 891,
    "end_page": 892,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/gshadow file is used to store the information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "If attackers can gain read access to the /etc/gshadow file, they can easily run a password cracking program against the hashed password to break it. Other security information that is stored in the /etc/gshadow file (such as group administrators) could also be useful to subvert the group.",
    "audit_details": "Run the following command to verify /etc/gshadow is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or `{GID}/shadow: # stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow _Example:_ Access: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/gshadow to root and group to either root or shadow: # chown root:shadow /etc/gshadow -OR# chown root:root /etc/gshadow Run the following command to remove excess permissions form /etc/gshadow: # chmod u-x,g-wx,o-rwx /etc/gshadow",
    "remediation_code": "# chown root:shadow /etc/gshadow # chmod u-x,g-wx,o-rwx /etc/gshadow",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions, ownership, and group ownership of /etc/gshadow\"\"\"\n    gshadow_path = '/etc/gshadow'\n    \n    # Check permissions\n    perms = stat.S_IMODE(os.stat(gshadow_path).st_mode)\n    if perms!= 0o640 and not (perms < 0o640 and (perms & 0o700) == 0o600 and (perms & 0o070) == 0o040 and (perms & 0o007) == 0):\n        print(f\"Permissions on {gshadow_path} are not 0640 or more restrictive ({oct(perms)}).\")\n        return False\n    \n    # Check ownership\n    uid = os.stat(gshadow_path).st_uid\n    if uid!= 0 or pwd.getpwuid(uid).pw_name!= 'root':\n        print(f\"Uid of {gshadow_path} is not 0 (root), but {uid} ({pwd.getpwuid(uid).pw_name}).\")\n        return False\n    \n    # Check group ownership\n    gid = os.stat(gshadow_path).st_gid\n    if gid not in (0, grp.getgrnam('shadow').gr_gid) or (gid!= 0 and grp.getgrgid(gid).gr_name!= 'shadow'):\n        print(f\"Gid of {gshadow_path} is not 0 (root) or the GID of 'shadow' group, but {gid} ({grp.getgrgid(gid).gr_name}).\")\n        return False\n    \n    print(f\"All checks for {gshadow_path} passed.\")\n    return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerabilities in /etc/gshadow permissions and ownership\"\"\"\n    gshadow_path = '/etc/gshadow'\n    \n    # Set ownership to root:shadow\n    try:\n        os.chown(gshadow_path, 0, grp.getgrnam('shadow').gr_gid)\n        print(f\"Set ownership of {gshadow_path} to root:shadow.\")\n    except KeyError:\n        # If 'shadow' group not found, set to root:root as fallback\n        os.chown(gshadow_path, 0, 0)\n        print(f\"Set ownership of {gshadow_path} to root:root (shadow group not found).\")\n    \n    # Adjust permissions to 0640\n    os.chmod(gshadow_path, 0o640)\n    print(f\"Adjusted permissions of {gshadow_path} to 0640.\")\n"
  },
  {
    "name": "Ensure permissions on /etc/gshadow- are configured",
    "id": "7.1.8",
    "type": "Automated",
    "start_page": 893,
    "end_page": 894,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The /etc/gshadow- file is used to store backup information about groups that is critical to the security of those accounts, such as the hashed password and other security information.",
    "rationale": "It is critical to ensure that the /etc/gshadow- file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/gshadow- is mode 640 or more restrictive, Uid is 0/root and Gid is 0/root or {GID}/shadow:\n\n```\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow\n```\n\n_Example:_\n\n```\nAccess: (0640/-rw-r-----) Uid: ( 0/ root) Gid: ( 42/ shadow)\n```\n",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/gshadow",
    "remediation_details": "Run one of the following commands to set ownership of /etc/gshadow- to root and group to either root or shadow:\n```\n# chown root:shadow /etc/gshadow -OR# chown root:root /etc/gshadow\n```\nRun the following command to remove excess permissions form /etc/gshadow-:\n```\n# chmod u-x,g-wx,o-rwx /etc/gshadow\n```\n",
    "remediation_code": "# chown root:shadow /etc/gshadow -OR# chown root:root /etc/gshadow\n# chmod u-x,g-wx,o-rwx /etc/gshadow\n",
    "python_script": "\nimport os\nimport stat\nimport grp\nimport pwd\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit vulnerability of /etc/gshadow- permissions\"\"\"\n    file_path = \"/etc/gshadow-\"\n    file_stat = os.stat(file_path)\n    \n    # Verify file permissions are mode 640 or more restrictive\n    perms_ok = (file_stat.st_mode & 0o777) == 0o640\n    \n    # Verify Uid is 0/root\n    uid_ok = file_stat.st_uid == 0\n    root_uid = pwd.getpwnam('root').pw_uid\n    uid_root_match = file_stat.st_uid == root_uid\n    \n    # Verify Gid is 0/root or {GID}/shadow\n    gid_ok = file_stat.st_gid in [0, grp.getgrnam('shadow').gr_gid]\n    root_gid = grp.getgrnam('root').gr_gid\n    shadow_gid = grp.getgrnam('shadow').gr_gid\n    gid_root_or_shadow_match = file_stat.st_gid in [root_gid, shadow_gid]\n    \n    return all([perms_ok, uid_ok and uid_root_match, gid_root_or_shadow_match])\n\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate vulnerability of /etc/gshadow- permissions\"\"\"\n    file_path = \"/etc/gshadow-\"\n    \n    # Set ownership to root:shadow (using root's gid, which is 0, for compatibility)\n    root_uid = pwd.getpwnam('root').pw_uid\n    shadow_gid = grp.getgrnam('shadow').gr_gid\n    os.chown(file_path, root_uid, shadow_gid)\n    print(f\"Set ownership of {file_path} to root:shadow\")\n    \n    # Remove excess permissions to achieve mode 640\n    desired_perms = stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP\n    os.chmod(file_path, desired_perms)\n    print(f\"Adjusted permissions of {file_path} to 640\")\n"
  },
  {
    "name": "Ensure permissions on /etc/shells are configured",
    "id": "7.1.9",
    "type": "Automated",
    "start_page": 895,
    "end_page": 896,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "/etc/shells is a text file which contains the full pathnames of valid login shells. This file is consulted by chsh and available to be queried by other programs.",
    "rationale": "It is critical to ensure that the /etc/shells file is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following command to verify /etc/shells is mode 644 or more restrictive, Uid is 0/root and Gid is 0/root:\n# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shells\nAccess: (0644/-rw-r--r--) Uid: ( 0/ root) Gid: ( 0/ root)",
    "audit_code": "# stat -Lc 'Access: (%#a/%A) Uid: ( %u/ %U) Gid: ( %g/ %G)' /etc/shells",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/shells:\n# chmod u-x,go-wx /etc/shells\n# chown root:root /etc/shells",
    "remediation_code": "# chmod u-x,go-wx /etc/shells\n# chown root:root /etc/shells",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions on /etc/shells\"\"\"\n    shells_path = '/etc/shells'\n    expected_mode = 0o644\n    expected_uid = 0\n    expected_gid = 0\n\n    file_stat = os.stat(shells_path)\n    actual_mode = file_stat.st_mode & 0o777  # Mask to get permission bits\n    actual_uid = file_stat.st_uid\n    actual_gid = file_stat.st_gid\n\n    if (actual_mode <= expected_mode and \n        actual_uid == expected_uid and \n        actual_gid == expected_gid):\n        return True\n    else:\n        print(f\"Unexpected settings for {shells_path}:\")\n        print(f\"  Mode: {stat.filemode(actual_mode)} (expected <= {stat.filemode(expected_mode)})\")\n        print(f\"  Uid: {actual_uid}/{pwd.getpwuid(actual_uid).pw_name} (expected 0/root)\")\n        print(f\"  Gid: {actual_gid}/{grp.getgrgid(actual_gid).gr_name} (expected 0/root)\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions on /etc/shells\"\"\"\n    shells_path = '/etc/shells'\n    expected_mode = 0o644\n    expected_uid = 0\n    expected_gid = 0\n\n    # Modify permissions\n    current_mode = os.stat(shells_path).st_mode\n    if current_mode & 0o777 > expected_mode:\n        new_mode = (current_mode & ~0o777) | expected_mode\n        os.chmod(shells_path, new_mode)\n        print(f\"Set mode of {shells_path} to {stat.filemode(expected_mode)}\")\n\n    # Set owner\n    if os.stat(shells_path).st_uid!= expected_uid:\n        os.chown(shells_path, expected_uid, -1)  # -1 to keep gid unchanged\n        print(f\"Set owner of {shells_path} to {expected_uid}/root\")\n\n    # Set group\n    if os.stat(shells_path).st_gid!= expected_gid:\n        os.chown(shells_path, -1, expected_gid)  # -1 to keep uid unchanged\n        print(f\"Set group of {shells_path} to {expected_gid}/root\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n        print(\"Re-auditing after remediation:\")\n        audit_vuln()\n"
  },
  {
    "name": "Ensure permissions on /etc/security/opasswd are configured",
    "id": "7.1.10",
    "type": "Automated",
    "start_page": 897,
    "end_page": 898,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "/etc/security/opasswd and it's backup /etc/security/opasswd.old hold user's previous passwords if pam_unix or pam_pwhistory is in use on the system",
    "rationale": "It is critical to ensure that /etc/security/opasswd is protected from unauthorized access. Although it is protected by default, the file permissions could be changed either inadvertently or through malicious actions.",
    "audit_details": "Run the following commands to verify /etc/security/opasswd and /etc/security/opasswd.old are mode 600 or more restrictive, Uid is 0/root and Gid is 0/root if they exist:\n# [ -e \"/etc/security/opasswd\" ] && stat -Lc '%n Access: (%#a/%A) Uid: (%u/%U) Gid: (%g/%G)' /etc/security/opasswd\n/etc/security/opasswd Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n -ORNothing is returned\n# [ -e \"/etc/security/opasswd.old\" ] && stat -Lc '%n Access: (%#a/%A) Uid: (%u/%U) Gid: (%g/%G)' /etc/security/opasswd.old\n/etc/security/opasswd.old Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)\n -ORNothing is returned",
    "audit_code": "# [ -e \"/etc/security/opasswd\" ] && stat -Lc '%n Access: (%#a/%A) Uid: (%u/%U) Gid: (%g/%G)' /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && stat -Lc '%n Access: (%#a/%A) Uid: (%u/%U) Gid: (%g/%G)' /etc/security/opasswd.old",
    "remediation_details": "Run the following commands to remove excess permissions, set owner, and set group on /etc/security/opasswd and /etc/security/opasswd.old is they exist:\n# [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd\n# [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old\n# [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old",
    "remediation_code": "# [ -e \"/etc/security/opasswd\" ] && chmod u-x,go-rwx /etc/security/opasswd\n# [ -e \"/etc/security/opasswd\" ] && chown root:root /etc/security/opasswd\n# [ -e \"/etc/security/opasswd.old\" ] && chmod u-x,go-rwx /etc/security/opasswd.old\n# [ -e \"/etc/security/opasswd.old\" ] && chown root:root /etc/security/opasswd.old",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit permissions, UID, and GID of /etc/security/opasswd and /etc/security/opasswd.old\"\"\"\n    files = [\"/etc/security/opasswd\", \"/etc/security/opasswd.old\"]\n    vuln_found = False\n\n    for file in files:\n        if os.path.exists(file):\n            file_stat = os.stat(file)\n            if file_stat.st_mode!= stat.S_IMODE(0o600) or file_stat.st_uid!= 0 or file_stat.st_gid!= 0:\n                print(f\"Permissions, UID, or GID issue found for {file}:\")\n                print(f\"  Mode: {stat.filemode(file_stat.st_mode)} (expected: 0600)\")\n                print(f\"  UID: {file_stat.st_uid} ({pwd.getpwuid(file_stat.st_uid).pw_name}) (expected: 0/root)\")\n                print(f\"  GID: {file_stat.st_gid} ({grp.getgrgid(file_stat.st_gid).gr_name}) (expected: 0/root)\")\n                vuln_found = True\n\n    return vuln_found\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate permissions, UID, and GID issues for /etc/security/opasswd and /etc/security/opasswd.old\"\"\"\n    files = [\"/etc/security/opasswd\", \"/etc/security/opasswd.old\"]\n\n    for file in files:\n        if os.path.exists(file):\n            # Set permissions to 600\n            os.chmod(file, stat.S_IMODE(0o600))\n            print(f\"Set permissions to 0600 for {file}\")\n\n            # Set owner and group to root:root\n            os.chown(file, 0, 0)\n            print(f\"Set owner and group to root:root for {file}\")\n        else:\n            print(f\"{file} does not exist, no remediation necessary\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    if audit_vuln():\n        print(\"Vulnerability found, remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found\")\n"
  },
  {
    "name": "Ensure world writable files and directories are secured",
    "id": "7.1.11",
    "type": "Automated",
    "start_page": 899,
    "end_page": 902,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "World writable files are the least secure. Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity. See the chmod(2) man page for more information.\n\nSetting the sticky bit on world writable directories prevents users from deleting or renaming files in that directory that are not owned by them.",
    "rationale": "Data in world-writable files can be modified and compromised by any user on the system. World writable files may also indicate an incorrectly written script or program that could potentially be the cause of a larger compromise to the system's integrity.\n\nThis feature prevents the ability to delete or rename files in world writable directories (such as /tmp ) that are owned by another user.",
    "audit_details": "Run the following script to verify:\n\n  - No world writable files exist\n  - No world writable directories without the sticky bit exist",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  l_smask='01000'\n  a_file=(); a_dir=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/*\" -a ! -path \"/snap/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      [ -f \"$l_file\" ] && a_file+=(\"$l_file\") # Add WR files\n      if [ -d \"$l_file\" ]; then # Add directories w/o sticky bit\n        l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n        [ ! $(( $l_mode & $l_smask )) -gt 0 ] && a_dir+=(\"$l_file\")\n      fi\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\\/run\\/user\\/|\\/tmp|\\/var\\/tmp)/){print $2}')\n  if ! (( ${#a_file[@]} > 0 )); then\n   l_output=\"$l_output\\n - No world writable files exist on the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_file[@]}\")\\\" World writable files on the system.\\n  - The following is a list of World writable files:\\n$(printf '%s\\n' \"${a_file[@]}\")\\n  - end of list\\n\"\n  fi\n  if ! (( ${#a_dir[@]} > 0 )); then\n   l_output=\"$l_output\\n - Sticky bit is set on world writable directories on the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_dir[@]}\")\\\" World writable directories without the sticky bit on the system.\\n  - The following is a list of World writable directories without the sticky bit:\\n$(printf '%s\\n' \"${a_dir[@]}\")\\n  - end of list\\n\"\n  fi\n  unset a_path; unset a_arr; unset a_file; unset a_dir # Remove arrays\n  # If l_output2 is empty, we pass\n  if [ -z \"$l_output2\" ]; then\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"- * Correctly configured *:\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "  - World Writable Files:\n`o` It is recommended that write access is removed from other with the command ( chmod o-w <filename> ), but always consult relevant vendor documentation to avoid breaking any application dependencies on a given file.\n\n  - World Writable Directories:\n`o` Set the sticky bit on all world writable directories with the command (\n```\n       chmod a+t <directory_name> )\n\n### Run the following script to:\n```\n  - Remove other write permission from any world writable files\n\n  - Add the sticky bit to all world writable directories",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_smask='01000'\n  a_file=(); a_dir=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path \"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path \"*/kubelet/plugins/*\" -a ! -path \"/sys/*\" -a ! -path \"/snap/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      l_mode=\"$(stat -Lc '%#a' \"$l_file\")\"\n      if [ -f \"$l_file\" ]; then # Remove excess permissions from WW files\n        echo -e \" - File: \\\"$l_file\\\" is mode: \\\"$l_mode\\\"\\n removing write permission on \\\"$l_file\\\" from \\\"other\\\"\"\n        chmod o-w \"$l_file\"\n      fi\n      if [ -d \"$l_file\" ]; then # Add sticky bit\n        if [ ! $(( $l_mode & $l_smask )) -gt 0 ]; then\n         echo -e \" - Directory: \\\"$l_file\\\" is mode: \\\"$l_mode\\\" and doesn't have the sticky bit set\\n - Adding the sticky bit\"\n         chmod a+t \"$l_file\"\n        fi\n      fi\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type d \\) -perm -0002 -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^(\\/run\\/user\\/|\\/tmp|\\/var\\/tmp)/){print $2}') \n}",
    "python_script": "\nimport os\nimport stat\nfrom pathlib import Path\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for world writable files and directories without the sticky bit.\"\"\"\n    vulnerable = False\n    excluded_paths = [\"/run/user/*\", \"/proc/*\", \"*/containerd/*\", \"*/kubelet/pods/*\", \"*/kubelet/plugins/*\", \"/sys/*\", \"/snap/*\"]\n    \n    for mount in Path('/').rglob('**/*'):\n        if any(match in str(mount) for match in excluded_paths):\n            continue\n        \n        if mount.is_file() and (mount.stat().st_mode & stat.S_IWOTH):\n            print(f\" - File: \\\"{mount}\\\" is world writable.\")\n            vulnerable = True\n        \n        elif mount.is_dir() and (mount.stat().st_mode & stat.S_IWOTH) and not (mount.stat().st_mode & stat.S_ISVTX):\n            print(f\" - Directory: \\\"{mount}\\\" is world writable without the sticky bit.\")\n            vulnerable = True\n    \n    return not vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate world writable files and directories by removing other write permissions and adding the sticky bit respectively.\"\"\"\n    excluded_paths = [\"/run/user/*\", \"/proc/*\", \"*/containerd/*\", \"*/kubelet/pods/*\", \"*/kubelet/plugins/*\", \"/sys/*\", \"/snap/*\"]\n    \n    for mount in Path('/').rglob('**/*'):\n        if any(match in str(mount) for match in excluded_paths):\n            continue\n        \n        if mount.is_file() and (mount.stat().st_mode & stat.S_IWOTH):\n            os.chmod(mount, mount.stat().st_mode & ~stat.S_IWOTH)\n            print(f\" - Removed write permission from 'other' for file: \\\"{mount}\\\"\")\n        \n        elif mount.is_dir() and (mount.stat().st_mode & stat.S_IWOTH) and not (mount.stat().st_mode & stat.S_ISVTX):\n            os.chmod(mount, mount.stat().st_mode | stat.S_ISVTX)\n            print(f\" - Added the sticky bit to directory: \\\"{mount}\\\"\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerabilities found. Starting remediation...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerabilities found.\")\n"
  },
  {
    "name": "Ensure no files or directories without an owner and a group exist",
    "id": "7.1.12",
    "type": "Automated",
    "start_page": 903,
    "end_page": 905,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Administrators may delete users or groups from the system and neglect to remove all files and/or directories owned by those users or groups.",
    "rationale": "A new user or group who is assigned a deleted user's user ID or group ID may then end up \"owning\" a deleted user or group's files, and thus have more access on the system than was intended.",
    "audit_details": "Run the following script to verify no unowned or ungrouped files or directories exist:",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\"\n  a_nouser=(); a_nogroup=() # Initialize arrays\n  a_path=(! -path \"/run/user/*\" -a ! -path \"/proc/*\" -a ! -path\n\"*/containerd/*\" -a ! -path \"*/kubelet/pods/*\" -a ! -path\n\"*/kubelet/plugins/*\" -a ! -path \"/sys/fs/cgroup/memory/*\" -a ! -path\n\"/var/*/private/*\")\n  while IFS= read -r l_mount; do\n   while IFS= read -r -d $'\\0' l_file; do\n     if [ -e \"$l_file\" ]; then\n      while IFS=: read -r l_user l_group; do\n        [ \"$l_user\" = \"UNKNOWN\" ] && a_nouser+=(\"$l_file\")\n        [ \"$l_group\" = \"UNKNOWN\" ] && a_nogroup+=(\"$l_file\")\n      done < <(stat -Lc '%U:%G' \"$l_file\")\n     fi\n   done < <(find \"$l_mount\" -xdev \\( \"${a_path[@]}\" \\) \\( -type f -o -type\nd \\) \\( -nouser -o -nogroup \\) -print0 2> /dev/null)\n  done < <(findmnt -Dkerno fstype,target | awk '($1 !~ /^\\s*(nfs|proc|smb|vfat|iso9660|efivarfs|selinuxfs)/ && $2 !~ /^\\/run\\/user\\//){print $2}')\n  if ! (( ${#a_nouser[@]} > 0 )); then\n   l_output=\"$l_output\\n - No files or directories without a owner exist on the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nouser[@]}\")\\\" unowned files or directories on the system.\\n  - The following is a list of unowned files and/or directories:\\n$(printf '%s\\n' \"${a_nouser[@]}\")\\n  - end of list\"\n  fi\n  if ! (( ${#a_nogroup[@]} > 0 )); then\n   l_output=\"$l_output\\n - No files or directories without a group exist on the local filesystem.\"\n  else\n   l_output2=\"$l_output2\\n - There are \\\"$(printf '%s' \"${#a_nogroup[@]}\")\\\" ungrouped files or directories on the system.\\n  - The following is a list of ungrouped files and/or directories:\\n$(printf '%s\\n' \"${a_nogroup[@]}\")\\n  - end of list\"\n  fi \n  unset a_path; unset a_arr ; unset a_nouser; unset a_nogroup # Remove arrays\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *\\n$l_output\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *\\n$l_output\\n\"\n  fi\n}",
    "remediation_details": "Remove or set ownership and group ownership of these files and/or directories to an active user on the system as appropriate.",
    "remediation_code": "",
    "python_script": "\nimport os\nimport pwd\nimport grp\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit the system for files/directories without an owner or group.\n    \n    Returns:\n    bool: True if no unowned/ungrouped files/directories exist, False otherwise.\n    \"\"\"\n    unowned = []\n    ungrouped = []\n    \n    # Exclude paths\n    exclude_paths = [\"/run/user/*\", \"/proc/*\", \"*/containerd/*\", \"*/kubelet/pods/*\", \n                     \"*/kubelet/plugins/*\", \"/sys/fs/cgroup/memory/*\", \"/var/*/private/*\"]\n    \n    # Iterate over mounted filesystems (excluding unwanted types)\n    for root, dirs, files in os.walk('/'):\n        for dir in dirs + files:\n            path = os.path.join(root, dir)\n            # Check if path matches any exclude patterns\n            if any(os.fnmatch(path, exclude) for exclude in exclude_paths):\n                continue\n                \n            try:\n                # Try to get owner and group\n                owner = pwd.getpwuid(os.stat(path).st_uid).pw_name\n                group = grp.getgrgid(os.stat(path).st_gid).gr_name\n            except (KeyError, OSError):\n                # If owner or group is unknown, add to respective list\n                if owner == 'UNKNOWN':\n                    unowned.append(path)\n                if group == 'UNKNOWN':\n                    ungrouped.append(path)\n    \n    # Print findings (similar to original audit script's output)\n    if unowned or ungrouped:\n        print(\"\\n- Audit Result:\\n ** FAIL **\")\n        if unowned:\n            print(f\" - There are {len(unowned)} unowned files or directories on the system.\")\n            print(\" - The following is a list of unowned files and/or directories:\")\n            for file in unowned:\n                print(file)\n            print(\" - end of list\")\n        if ungrouped:\n            print(f\" - There are {len(ungrouped)} ungrouped files or directories on the system.\")\n            print(\" - The following is a list of ungrouped files and/or directories:\")\n            for file in ungrouped:\n                print(file)\n            print(\" - end of list\")\n        return False\n    else:\n        print(\"\\n- Audit Result:\\n ** PASS **\")\n        print(\" - No files or directories without a owner or group exist on the local filesystem.\")\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by setting ownership and group ownership of unowned/ungrouped files/directories.\n    \"\"\"\n    default_user = pwd.getpwuid(os.getuid()).pw_name  # Use current user as default\n    default_group = grp.getgrgid(os.getgid()).gr_name  # Use current group as default\n    \n    # Reuse audit logic to find unowned/ungrouped files/directories\n    unowned = []\n    ungrouped = []\n    \n    #... (reuse audit's path iteration and checks)\n    \n    for path in unowned:\n        shutil.chown(path, user=default_user)\n        print(f\"Set owner of `{path}` to `{default_user}`.\")\n    \n    for path in ungrouped:\n        shutil.chown(path, group=default_group)\n        print(f\"Set group of `{path}` to `{default_group}`.\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure accounts in /etc/passwd use shadowed passwords",
    "id": "7.2.1",
    "type": "Automated",
    "start_page": 910,
    "end_page": 912,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Local accounts can uses shadowed passwords. With shadowed passwords, The passwords are saved in shadow password file, /etc/shadow, encrypted by a salted oneway hash. Accounts with a shadowed password have an x in the second field in \n/etc/passwd.",
    "rationale": "The /etc/passwd file also contains information like user ID's and group ID's that are used by many system programs. Therefore, the /etc/passwd file must remain world readable. In spite of encoding the password with a randomly-generated one-way hash function, an attacker could still break the system if they got access to the /etc/passwd file. This can be mitigated by using shadowed passwords, thus moving the passwords in the /etc/passwd file to /etc/shadow. The /etc/shadow file is set so only root will be able to read and write. This helps mitigate the risk of an attacker gaining access to the encoded passwords with which to perform a dictionary attack.",
    "audit_details": "Run the following command and verify that no output is returned:\n# awk -F: '($2 != \"x\" ) { print \"User: \\\"\" $1 \"\\\" is not set to shadowed passwords \"}' /etc/passwd",
    "audit_code": "# awk -F: '($2 != \"x\" ) { print \"User: \\\"\" $1 \"\\\" is not set to shadowed passwords \"}' /etc/passwd",
    "remediation_details": "Run the following command to set accounts to use shadowed passwords and migrate passwords in /etc/passwd to /etc/shadow:\n\nInvestigate to determine if the account is logged in and what it is being used for, to determine if it needs to be forced off.",
    "remediation_code": "# pwconv",
    "python_script": "\nimport pwd\nimport spwd\nimport subprocess\nimport getpass\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if all accounts in /etc/passwd use shadowed passwords.\n    \n    Returns:\n    bool: True if all accounts use shadowed passwords, False otherwise.\n    \"\"\"\n    try:\n        for user in pwd.getpwall():\n            if user.pw_passwd != 'x':\n                print(f\"User: \\\"{user.pw_name}\\\" is not set to shadowed passwords\")\n                return False\n        return True\n    except Exception as e:\n        print(f\"Audit error: {str(e)}\")\n        return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate by setting accounts to use shadowed passwords and migrating \n    passwords in /etc/passwd to /etc/shadow using pwconv.\n    \"\"\"\n    try:\n        # Check if running as root\n        if getpass.getuser() != 'root':\n            print(\"Running pwconv requires root privileges. Please run with sudo or as root.\")\n            return\n        \n        # Run pwconv to migrate passwords to /etc/shadow\n        subprocess.run(['pwconv'], check=True)\n        print(\"Successfully migrated passwords to /etc/shadow using pwconv.\")\n        \n        # Verify post-remediation state (optional, for assurance)\n        if audit_vuln():\n            print(\"All accounts are now set to use shadowed passwords.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error running pwconv: {e}\")\n    except Exception as e:\n        print(f\"Remediation error: {str(e)}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    print(\"Auditing vulnerability...\")\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediating...\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure /etc/shadow password fields are not empty",
    "id": "7.2.2",
    "type": "Automated",
    "start_page": 913,
    "end_page": 914,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "An account with an empty password field means that anybody may log in as that user without providing a password.",
    "rationale": "All accounts must have passwords or be locked to prevent the account from being used by an unauthorized user.",
    "audit_details": "Run the following command and verify that no output is returned:\n\n```\n# awk -F: '($2 == \"\" ) { print $1 \" does not have a password \" }' /etc/shadow\n```\n",
    "audit_code": "# awk -F: '($2 == \"\" ) { print $1 \" does not have a password \" }' /etc/shadow",
    "remediation_details": "If any accounts in the /etc/shadow file do not have a password, run the following command to lock the account until it can be determined why it does not have a password:\n\n```\n# passwd -l <username>\n```\n\nAlso, check to see if the account is logged in and investigate what it is being used for to determine if it needs to be forced off.",
    "remediation_code": "# passwd -l <username>",
    "python_script": "\nimport subprocess\nimport pwd\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if any accounts in /etc/shadow have empty password fields.\n    \n    Returns:\n    bool: True if vulnerable accounts are found, False otherwise.\n    \"\"\"\n    try:\n        with open(\"/etc/shadow\", \"r\") as shadow_file:\n            for line in shadow_file:\n                fields = line.split(\":\")\n                if len(fields) >= 2 and fields[1] == \"\":\n                    print(f\"User '{fields[0]}' does not have a password.\")\n                    return True\n    except FileNotFoundError:\n        print(\"Error: /etc/shadow file not found.\")\n    except Exception as e:\n        print(f\"An error occurred during audit: {e}\")\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate vulnerable accounts by locking them.\n    \"\"\"\n    try:\n        with open(\"/etc/shadow\", \"r\") as shadow_file:\n            for line in shadow_file:\n                fields = line.split(\":\")\n                if len(fields) >= 2 and fields[1] == \"\":\n                    username = fields[0]\n                    print(f\"Locking user '{username}' due to empty password...\")\n                    subprocess.run(f\"passwd -l {username}\", shell=True, check=True)\n                    # Additional step as per remediation details (investigation not automatized)\n                    print(f\"**Manual Investigation Required**: Check if '{username}' is logged in and investigate its usage.\")\n    except FileNotFoundError:\n        print(\"Error: /etc/shadow file not found.\")\n    except subprocess.CalledProcessError as e:\n        print(f\"Error locking user: {e}\")\n    except Exception as e:\n        print(f\"An error occurred during remediation: {e}\")\n\n# Example usage\nif __name__ == \"__main__\":\n    if audit_vuln():\n        response = input(\"Vulnerable accounts found. Remediate? (yes/no): \")\n        if response.lower() == \"yes\":\n            remediate_vuln()\n        else:\n            print(\"Remediation cancelled.\")\n    else:\n        print(\"No vulnerable accounts found.\")\n"
  },
  {
    "name": "Ensure all groups in /etc/passwd exist in /etc/group",
    "id": "7.2.3",
    "type": "Automated",
    "start_page": 915,
    "end_page": 916,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Over time, system administration errors and changes can lead to groups being defined in /etc/passwd but not in /etc/group.",
    "rationale": "Groups defined in the /etc/passwd file but not in the /etc/group file pose a threat to system security since group permissions are not properly managed.",
    "audit_details": "Run the following script to verify all GIDs in /etc/passwd exist in /etc/group:\n```\n#!/usr/bin/env bash\n{\n  a_passwd_group_gid=(\"$(awk -F: '{print $4}' /etc/passwd | sort -u)\")\n  a_group_gid=(\"$(awk -F: '{print $3}' /etc/group | sort -u)\")\n  a_passwd_group_diff=(\"$(printf '%s\\n' \"${a_group_gid[@]}\" \"${a_passwd_group_gid[@]}\" | sort | uniq -u)\")\n  while IFS= read -r l_gid; do\n   awk -F: '($4 == \"",
    "audit_code": "#!/usr/bin/env bash\n{\n  a_passwd_group_gid=(\"$(awk -F: '{print $4}' /etc/passwd | sort -u)\")\n  a_group_gid=(\"$(awk -F: '{print $3}' /etc/group | sort -u)\")\n  a_passwd_group_diff=(\"$(printf '%s\\n' \"${a_group_gid[@]}\" \"${a_passwd_group_gid[@]}\" | sort | uniq -u)\")\n  while IFS= read -r l_gid; do\n   awk -F: '($4 == \"",
    "remediation_details": "Analyze the output of the Audit step above and perform the appropriate action to correct any discrepancies found.",
    "remediation_code": "",
    "python_script": "\nimport pwd\nimport grp\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit if all groups in /etc/passwd exist in /etc/group.\"\"\"\n    passwd_gids = [entry.pw_gid for entry in pwd.getpwall()]\n    group_gids = [entry.gr_gid for entry in grp.getgrall()]\n    \n    missing_groups = set(passwd_gids) - set(group_gids)\n    \n    if missing_groups:\n        print(f\"Found {len(missing_groups)} missing groups in /etc/passwd:\")\n        for gid in missing_groups:\n            print(f\"  - GID {gid}\")\n        return False\n    else:\n        print(\"All groups in /etc/passwd are accounted for in /etc/group.\")\n        return True\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate missing groups by adding them to /etc/group.\"\"\"\n    passwd_gids = [entry.pw_gid for entry in pwd.getpwall()]\n    group_gids = [entry.gr_gid for entry in grp.getgrall()]\n    missing_groups = set(passwd_gids) - set(group_gids)\n    \n    if not missing_groups:\n        print(\"No missing groups to remediate.\")\n        return\n    \n    with open(\"/etc/group\", \"a\") as group_file:\n        for gid in missing_groups:\n            # Default group name convention\n            group_name = f\"missing_group_{gid}\"\n            new_entry = f\"{group_name}:x:{gid}:\\n\"\n            group_file.write(new_entry)\n            print(f\"Added '{group_name}' (GID {gid}) to /etc/group. **PLEASE REVIEW AND UPDATE GROUP NAME AS NEEDED.**\")\n\n# Example Usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        response = input(\"Vulnerability found. Remediate? (y/n): \")\n        if response.lower() == 'y':\n            remediate_vuln()\n        else:\n            print(\"Remediation cancelled.\")\n    else:\n        print(\"System is compliant.\")\n"
  },
  {
    "name": "Ensure shadow group is empty",
    "id": "7.2.4",
    "type": "Automated",
    "start_page": 917,
    "end_page": 918,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The shadow group allows system programs which require access the ability to read the /etc/shadow file. No users should be assigned to the shadow group.",
    "rationale": "Any users assigned to the shadow group would be granted read access to the /etc/shadow file. If attackers can gain read access to the /etc/shadow file, they can easily run a password cracking program against the hashed passwords to break them. Other security information that is stored in the /etc/shadow file (such as expiration) could also be useful to subvert additional user accounts.",
    "audit_details": "Run the following commands and verify no results are returned:\n```\n# awk -F: '($1==\"shadow\") {print $NF}' /etc/group\n# awk -F: '($4 == '\"$(getent group shadow | awk -F: '{print $3}' | xargs)\"') {print \" - user: \\\" \" $1 \" \\\" primary group is the shadow group\"}' /etc/passwd\n```\n",
    "audit_code": "# awk -F: '($1==\"shadow\") {print $NF}' /etc/group\n# awk -F: '($4 == '\"$(getent group shadow | awk -F: '{print $3}' | xargs)\"') {print \" - user: \\\" \" $1 \" \\\" primary group is the shadow group\"}' /etc/passwd\n",
    "remediation_details": "Run the following command to remove all users from the shadow group\n```\n# sed -ri 's/(^shadow:[^:]*:[^:]*:)([^:]+$)/\\1/' /etc/group\n```\n\nChange the primary group of any users with shadow as their primary group.\n```\n# usermod -g <primary group> <user>\n```\n",
    "remediation_code": "# sed -ri 's/(^shadow:[^:]*:[^:]*:)([^:]+$)/\\1/' /etc/group\n# usermod -g <primary group> <user>",
    "python_script": "```python\nimport pwd\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit if the shadow group is empty and no users have it as their primary group.\n    \n    Returns:\n        bool: True if the vulnerability is present, False otherwise.\n    \"\"\"\n    shadow_gid = grp.getgrnam('shadow').gr_gid\n    for user in pwd.getpwall():\n        if user.pw_gid == shadow_gid:  # Primary group is shadow\n            print(f\"Found user '{user.pw_name}' with shadow as primary group.\")\n            return True\n        if shadow_gid in user.pw_gid:  # Shadow is in supplementary groups\n            print(f\"Found user '{user.pw_name}' in the shadow group.\")\n            return True\n    return False\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate the vulnerability by removing all users from the shadow group \n    and changing the primary group of users who had shadow as their primary group.\n    \"\"\"\n    shadow_gid = grp.getgrnam('shadow').gr_gid\n    for user in pwd.getpwall():\n        if user.pw_gid == shadow_gid:  \n            # Change primary group to the first non-shadow group (assuming it exists)\n            for group in pwd.getpwall()[0].pw_gid:\n                if group!= shadow_gid:\n                    new_gid = group\n                    break\n            subprocess.run(f\"usermod -g {new_gid} {user.pw_name}\", shell=True)\n            print(f\"Changed primary group of user '{user.pw_name}' to gid {new_gid}.\")\n        if shadow_gid in user.pw_gid:\n            # Remove user from shadow group (note: this part is complex as we're modifying /etc/group directly)\n            # For simplicity and avoiding potential issues, we'll suggest a manual approach here.\n            print(f\"Warning: User '{user.pw_name}' is in the shadow group. Manual intervention recommended.\")\n            print(\"   - Edit /etc/group, find the shadow group line, and remove the user's name from it.\")\n            # If you still want to automate this risky part, consider using the 'grp' module with caution:\n            # grp.modify_group(grp.getgrnam('shadow'),..., [remove user from list here])\n            # However, this approach is not directly supported and might require platform-specific handling.\n```\n**Important Note**: The remediation for removing a user from the supplementary groups (shadow group in this case) directly via Python is not straightforward due to the complexity of parsing and writing to `/etc/group` while ensuring consistency and avoiding potential system issues. Therefore, for the user removal from the supplementary shadow group, a manual approach is recommended to ensure safety and integrity of the system configuration. If automation is still desired for this part, careful platform-specific handling and testing are strongly advised."
  },
  {
    "name": "Ensure no duplicate UIDs exist",
    "id": "7.2.5",
    "type": "Automated",
    "start_page": 919,
    "end_page": 919,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the useradd program will not let you create a duplicate User ID (UID), it is possible for an administrator to manually edit the /etc/passwd file and change the UID field.",
    "rationale": "Users must be assigned unique UIDs for accountability and to ensure appropriate access protections.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n while read -r l_count l_uid; do\n  if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate UID: \\\"$l_uid\\\" Users: \\\"$(awk -F: '($3 == n) {print $1 }' n=$l_uid /etc/passwd | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c)\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n while read -r l_count l_uid; do\n  if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate UID: \\\"$l_uid\\\" Users: \\\"$(awk -F: '($3 == n) {print $1 }' n=$l_uid /etc/passwd | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/passwd | sort -n | uniq -c)\n}",
    "remediation_details": "Based on the results of the audit script, establish unique UIDs and review all files owned by the shared UIDs to determine which UID they are supposed to belong to.",
    "remediation_code": "",
    "python_script": "\nimport pwd\nimport fileinput\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for duplicate UIDs in /etc/passwd\"\"\"\n    uids = [user.pw_uid for user in pwd.getpwall()]\n    return len(uids)!= len(set(uids))\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate duplicate UIDs by assigning unique UIDs and updating file ownership\"\"\"\n    # Collect all users\n    all_users = {user.pw_name: user for user in pwd.getpwall()}\n    \n    # Find duplicate UIDs\n    uids = [user.pw_uid for user in pwd.getpwall()]\n    duplicate_uids = [uid for uid in set(uids) if uids.count(uid) > 1]\n    \n    # Map of new UIDs to assign\n    new_uid_map = {}\n    next_available_uid = max(uids) + 1\n    \n    for duplicate_uid in duplicate_uids:\n        # Find users with the duplicate UID\n        users_with_duplicate_uid = [name for name, user in all_users.items() if user.pw_uid == duplicate_uid]\n        \n        # Assign a new UID to all but the first user\n        for user_name in users_with_duplicate_uid[1:]:\n            new_uid = next_available_uid\n            next_available_uid += 1\n            new_uid_map[user_name] = new_uid\n            print(f\"Assigning new UID {new_uid} to user {user_name}\")\n    \n    # Update /etc/passwd with new UIDs\n    with fileinput.input(\"/etc/passwd\", inplace=True) as file:\n        for line in file:\n            fields = line.split(\":\")\n            if fields[0] in new_uid_map:\n                fields[2] = str(new_uid_map[fields[0]])\n                line = \":\".join(fields)\n            print(line, end='')\n    \n    # Update file ownership (assuming the first user with the UID is the \"correct\" owner)\n    for user_name, new_uid in new_uid_map.items():\n        correct_owner_name = next(name for name, user in all_users.items() if user.pw_uid == new_uid and name!= user_name)\n        print(f\"Updating file ownership for {user_name} to match {correct_owner_name}'s UID ({new_uid})\")\n        os.system(f\"find / -uid {new_uid} -exec chown {correct_owner_name} {{}} \\;\")\n"
  },
  {
    "name": "Ensure no duplicate GIDs exist",
    "id": "7.2.6",
    "type": "Automated",
    "start_page": 920,
    "end_page": 921,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the groupadd program will not let you create a duplicate Group ID (GID), it is possible for an administrator to manually edit the /etc/group file and change the GID field.",
    "rationale": "User groups must be assigned unique GIDs for accountability and to ensure appropriate access protections.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n  while read -r l_count l_gid; do\n   if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate GID: \\\"$l_gid\\\" Groups: \\\"$(awk -F: '($3 == n) {print $1 }' n=$l_gid /etc/group | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/group | sort -n | uniq -c)\n} \n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  while read -r l_count l_gid; do\n   if [ \"$l_count\" -gt 1 ]; then\n   echo -e \"Duplicate GID: \\\"$l_gid\\\" Groups: \\\"$(awk -F: '($3 == n) {print $1 }' n=$l_gid /etc/group | xargs)\\\"\"\n  fi\n done < <(cut -f3 -d\":\" /etc/group | sort -n | uniq -c)\n}",
    "remediation_details": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to.",
    "remediation_code": "Based on the results of the audit script, establish unique GIDs and review all files owned by the shared GID to determine which group they are supposed to belong to.",
    "python_script": "\nimport os\nimport pwd\nimport grp\nimport subprocess\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for duplicate GIDs in /etc/group\"\"\"\n    gid_counts = {}\n    with open(\"/etc/group\", \"r\") as group_file:\n        for line in group_file:\n            fields = line.split(\":\")\n            if len(fields) < 3:\n                continue\n            gid = fields[2]\n            if gid in gid_counts:\n                gid_counts[gid] += 1\n            else:\n                gid_counts[gid] = 1\n\n    vulnerable = False\n    for gid, count in gid_counts.items():\n        if count > 1:\n            vulnerable = True\n            affected_groups = [line.split(\":\")[0] for line in open(\"/etc/group\") if line.split(\":\")[2] == gid]\n            print(f\"Duplicate GID: \\\"{gid}\\\" Groups: \\\"{', '.join(affected_groups)}\\\"\")\n\n    return not vulnerable\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate duplicate GIDs by assigning new GIDs and updating file ownerships\"\"\"\n    gid_counts = {}\n    with open(\"/etc/group\", \"r\") as group_file:\n        for line in group_file:\n            fields = line.split(\":\")\n            if len(fields) < 3:\n                continue\n            gid = fields[2]\n            if gid in gid_counts:\n                gid_counts[gid].append(fields[0])\n            else:\n                gid_counts[gid] = [fields[0]]\n\n    for gid, groups in gid_counts.items():\n        if len(groups) > 1:\n            # List files owned by the shared GID\n            files_owned = []\n            for root, dirs, files in os.walk(\"/\"):\n                for file in files + dirs:\n                    file_path = os.path.join(root, file)\n                    try:\n                        stat_info = os.lstat(file_path)\n                        if str(stat_info.st_gid) == gid:\n                            files_owned.append(file_path)\n                    except OSError:\n                        pass\n\n            # Prompt user for each file to decide group ownership\n            for file in files_owned:\n                while True:\n                    new_group = input(f\"Enter new group for {file} (or 'skip' to leave as is, 'auto' to assign to first group in list): \")\n                    if new_group.lower() == 'skip':\n                        break\n                    elif new_group.lower() == 'auto':\n                        new_group = groups[0]\n                        break\n                    elif new_group in groups:\n                        break\n                    else:\n                        print(\"Invalid input. Please enter a group from the list or 'skip/auto'.\")\n                \n                if new_group!= 'skip':\n                    try:\n                        group = pwd.getpwnam(new_group)\n                        os.chown(file, -1, group.pw_gid)\n                        print(f\"Updated ownership of {file} to group {new_group}\")\n                    except KeyError:\n                        print(f\"Error: Group {new_group} not found. Skipping...\")\n                    except Exception as e:\n                        print(f\"An error occurred while updating {file}: {e}\")\n\n            # Assign a new, unique GID to one of the conflicting groups\n            last_gid = max([int(g) for g in grp.getgrall()], key=lambda x: x.gr_gid).gr_gid\n            new_gid = last_gid + 1\n            group_to_update = groups[1]  # Arbitrarily choosing the second group for update\n            with open(\"/etc/group\", \"r+\") as file:\n                content = file.readlines()\n                file.seek(0)\n                for line in content:\n                    if line.split(\":\")[0] == group_to_update:\n                        file.write(line.replace(gid, str(new_gid)))\n                    else:\n                        file.write(line)\n                file.truncate()\n            print(f\"Updated GID of group {group_to_update} to {new_gid}\")\n            subprocess.run([\"groupmod\", \"-g\", str(new_gid), group_to_update])\n\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        response = input(\"Vulnerability found. Remediate? (yes/no): \")\n        if response.lower() == 'yes':\n            remediate_vuln()\n"
  },
  {
    "name": "Ensure no duplicate user names exist",
    "id": "7.2.7",
    "type": "Automated",
    "start_page": 922,
    "end_page": 923,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the useradd program will not let you create a duplicate user name, it is possible for an administrator to manually edit the /etc/passwd file and change the user name.",
    "rationale": "If a user is assigned a duplicate user name, it will create and have access to files with the first UID for that username in /etc/passwd . For example, if \"test4\" has a UID of 1000 and a subsequent \"test4\" entry has a UID of 2000, logging in as \"test4\" will use UID 1000. Effectively, the UID is shared, which is a security problem.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n  while read -r l_count l_user; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate User: \\\"$l_user\\\" Users: \\\"$(awk -F: '($1 == n) {\nprint $1 }' n=$l_user /etc/passwd | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  while read -r l_count l_user; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate User: \\\"$l_user\\\" Users: \\\"$(awk -F: '($1 == n) {\nprint $1 }' n=$l_user /etc/passwd | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}",
    "remediation_details": "Based on the results of the audit script, establish unique user names for the users. File ownerships will automatically reflect the change as long as the users have unique UIDs.",
    "remediation_code": "",
    "python_script": "\nimport pwd\nimport subprocess\nfrom collections import defaultdict\nimport os\nimport shutil\n\ndef audit_vuln() -> bool:\n    \"\"\"\n    Audit for duplicate user names in /etc/passwd.\n    \n    Returns:\n        bool: True if duplicates found, False otherwise.\n    \"\"\"\n    user_counts = defaultdict(int)\n    for entry in pwd.getpwall():\n        user_counts[entry.pw_name] += 1\n    \n    duplicates_found = False\n    for user, count in user_counts.items():\n        if count > 1:\n            duplicates_found = True\n            print(f\"Duplicate User: \\\"{user}\\\"\")\n            uids = [entry.pw_uid for entry in pwd.getpwall() if entry.pw_name == user]\n            print(f\"UIDs: {uids}\")\n    \n    return duplicates_found\n\ndef remediate_vuln() -> None:\n    \"\"\"\n    Remediate duplicate user names by renaming them with a suffix (_1, _2, etc.).\n    \"\"\"\n    user_counts = defaultdict(int)\n    for entry in pwd.getpwall():\n        user_counts[entry.pw_name] += 1\n    \n    # Backup /etc/passwd before making changes\n    original_passwd_path = \"/etc/passwd\"\n    backup_passwd_path = \"/etc/passwd.backup\"\n    shutil.copy(original_passwd_path, backup_passwd_path)\n    print(f\"Created backup of /etc/passwd at {backup_passwd_path}\")\n    \n    with open(original_passwd_path, 'r') as original, open(backup_passwd_path, 'w') as updated:\n        for line in original:\n            fields = line.split(\":\")\n            user = fields[0]\n            if user_counts[user] > 1:\n                suffix = user_counts[user]\n                new_user = f\"{user}_{suffix-1}\" if suffix > 1 else user\n                user_counts[user] -= 1\n                fields[0] = new_user\n                # Optionally update home directory if it follows /home/<username> format\n                if os.path.dirname(fields[5]) == \"/home\":\n                    new_home_dir = f\"/home/{new_user}\"\n                    subprocess.run(f\"usermod -d {new_home_dir} {new_user}\", shell=True)\n                    print(f\"Updated home directory for {new_user} to {new_home_dir}\")\n                line = \":\".join(fields)\n            updated.write(line)\n    \n    # Replace original with updated (this step could be more atomic, but for simplicity...)\n    os.replace(backup_passwd_path, original_passwd_path)\n    print(f\"Updated /etc/passwd with unique user names\")\n"
  },
  {
    "name": "Ensure no duplicate group names exist",
    "id": "7.2.8",
    "type": "Automated",
    "start_page": 924,
    "end_page": 925,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "Although the groupadd program will not let you create a duplicate group name, it is possible for an administrator to manually edit the /etc/group file and change the group name.",
    "rationale": "If a group is assigned a duplicate group name, it will create and have access to files with the first GID for that group in /etc/group . Effectively, the GID is shared, which is a security problem.",
    "audit_details": "Run the following script and verify no results are returned:\n```\n#!/usr/bin/env bash\n{\n  while read -r l_count l_group; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate Group: \\\"$l_group\\\" Groups: \\\"$(awk -F: '($1 == n) { print $1 }' n=$l_group /etc/group | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}\n```\n",
    "audit_code": "#!/usr/bin/env bash\n{\n  while read -r l_count l_group; do\n   if [ \"$l_count\" -gt 1 ]; then\n     echo -e \"Duplicate Group: \\\"$l_group\\\" Groups: \\\"$(awk -F: '($1 == n) { print $1 }' n=$l_group /etc/group | xargs)\\\"\"\n   fi\n  done < <(cut -f1 -d\":\" /etc/group | sort -n | uniq -c)\n}",
    "remediation_details": "Based on the results of the audit script, establish unique names for the user groups. File group ownerships will automatically reflect the change as long as the groups have unique GIDs.",
    "remediation_code": "",
    "python_script": "\nimport grp\nimport pwd\nimport os\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit for duplicate group names in /etc/group\"\"\"\n    group_names = [g.gr_name for g in grp.getgrall()]\n    return len(group_names) == len(set(group_names))\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate duplicate group names by renaming them\"\"\"\n    group_dict = {(g.gr_gid, g.gr_name): g for g in grp.getgrall()}\n    unique_names = set()\n    \n    for (gid, name), group in list(group_dict.items()):\n        if name in unique_names:\n            # Generate a new unique name\n            base, extension = name, 1\n            while True:\n                new_name = f\"{base}_{extension}\"\n                if new_name not in unique_names:\n                    break\n                extension += 1\n            \n            # Update the group name in /etc/group\n            with open(\"/etc/group\", \"r+\") as file:\n                content = file.readlines()\n                file.seek(0)\n                for line in content:\n                    if line.startswith(f\"{name}:\"):\n                        file.write(line.replace(name, new_name, 1))\n                    else:\n                        file.write(line)\n                file.truncate()\n            \n            print(f\"Renamed duplicate group '{name}' to '{new_name}'\")\n        unique_names.add(name)\n\n# Example Usage\nif __name__ == \"__main__\":\n    if not audit_vuln():\n        print(\"Vulnerability found. Remediation required.\")\n        remediate_vuln()\n    else:\n        print(\"No vulnerability found.\")\n"
  },
  {
    "name": "Ensure local interactive user home directories are configured",
    "id": "7.2.9",
    "type": "Automated",
    "start_page": 926,
    "end_page": 930,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "The user home directory is space defined for the particular user to set local environment variables and to store personal files. While the system administrator can establish secure permissions for users' home directories, the users can easily override these. Users can be defined in /etc/passwd without a home directory or with a home directory that does not actually exist.",
    "rationale": "Since the user is accountable for files stored in the user home directory, the user must be the owner of the directory. Group or world-writable user home directories may enable malicious users to steal or modify other users' data or to gain another user's system privileges. If the user's home directory does not exist or is unassigned, the user will be placed in \"/\" and will not be able to write any files or have local environment variables set.",
    "audit_details": "Run the following script to Ensure:\n\n  - local interactive user home directories exist\n\n  - Ensure local interactive users own their home directories\n\n  - Ensure local interactive user home directories are mode 750 or more restrictive\n\n```bash\n#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_heout2=\"\" l_hoout2=\"\" l_haout2=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\/\\/{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home location\n   a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n  [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running check\\n\"\n  while read -r l_user l_home; do\n   if [ -d \"$l_home\" ]; then\n     l_mask='0027'\n     l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n     while read -r l_own l_mode; do\n      [ \"$l_user\" != \"$l_own\" ] && l_hoout2=\"$l_hoout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\"\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n        l_haout2=\"$l_haout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\"\n      fi\n     done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n   else\n     l_heout2=\"$l_heout2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\"\n   fi\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  [ -z \"$l_heout2\" ] && l_output=\"$l_output\\n  - home directories exist\" || l_output2=\"$l_output2$l_heout2\"\n  [ -z \"$l_hoout2\" ] && l_output=\"$l_output\\n  - own their home directory\" || l_output2=\"$l_output2$l_hoout2\"\n  [ -z \"$l_haout2\" ] && l_output=\"$l_output\\n  - home directories are mode: \\\"$l_max\\\" or more restrictive\" || l_output2=\"$l_output2$l_haout2\"\n  [ -n \"$l_output\" ] && l_output=\" - All local interactive users:$l_output\"\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\\n$l_output\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\"\n   [ -n \"$l_output\" ] && echo -e \"\\n- * Correctly configured *:\\n$l_output\"\n  fi\n}\n```",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_heout2=\"\" l_hoout2=\"\" l_haout2=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\/\\/{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home location\n   a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n  [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running check\\n\"\n  while read -r l_user l_home; do\n   if [ -d \"$l_home\" ]; then\n     l_mask='0027'\n     l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n     while read -r l_own l_mode; do\n      if [ \"$l_user\" != \"$l_own\" ]; then\n        l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\"\n        chown \"$l_user\" \"$l_home\"\n      fi\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n        l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\"\n        chmod g-w,o-rwx \"$l_home\"\n      fi\n     done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n   else\n     l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\"\n   fi\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \" - No modification needed to local interactive users home directories\"\n  else\n   echo -e \"\\n$l_output2\"\n  fi\n}",
    "remediation_details": "If a local interactive users' home directory is undefined and/or doesn't exist, follow local site policy and perform one of the following:\n\n  - Lock the user account\n\n  - Remove the user from the system\n\n  - create a directory for the user. If undefined, edit /etc/passwd and add the absolute path to the directory to the last field of the user.\n\nRun the following script to:\n\n  - Remove excessive permissions from local interactive users home directories\n\n  - Update the home directory's owner",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_output2=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \"nologin\" {print}' /etc/shells | sed -rn '/^\\/\\/{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home location\n   a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\"$l_valid_shells\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n  [ \"$l_asize \" -gt \"10000\" ] && echo -e \"\\n ** INFO **\\n - \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running process\\n\"\n  while read -r l_user l_home; do\n   if [ -d \"$l_home\" ]; then\n     l_mask='0027'\n     l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n     while read -r l_own l_mode; do\n      if [ \"$l_user\" != \"$l_own\" ]; then\n        l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is owned by: \\\"$l_own\\\"\\n - changing ownership to: \\\"$l_user\\\"\\n\"\n        chown \"$l_user\" \"$l_home\"\n      fi\n      if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n        l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" is mode: \\\"$l_mode\\\" should be mode: \\\"$l_max\\\" or more restrictive\\n - removing excess permissions\\n\"\n        chmod g-w,o-rwx \"$l_home\"\n      fi\n     done <<< \"$(stat -Lc '%U %#a' \"$l_home\")\"\n   else\n     l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home \\\"$l_home\\\" Doesn't exist\\n - Please create a home in accordance with local site policy\"\n   fi\n  done <<< \"$(printf '%s\\n' \"${a_uarr[@]}\")\"\n  if [ -z \"$l_output2\" ]; then # If l_output2 is empty, we pass\n   echo -e \" - No modification needed to local interactive users home directories\"\n  else\n   echo -e \"\\n$l_output2\"\n  fi\n}",
    "python_script": "\nimport pwd\nimport os\nimport stat\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit local interactive user home directories.\"\"\"\n    compliant = True\n    valid_shells = [shell for shell in pwd.getpwall() if shell.pw_shell not in [\"/sbin/nologin\", \"/bin/false\"]]\n    for user in valid_shells:\n        home_dir = user.pw_dir\n        if not os.path.exists(home_dir):\n            print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" Doesn't exist\")\n            compliant = False\n        else:\n            stat_info = os.stat(home_dir)\n            if stat_info.st_uid!= user.pw_uid:\n                print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" is owned by: \\\"{pwd.getpwuid(stat_info.st_uid).pw_name}\\\"\")\n                compliant = False\n            if (stat_info.st_mode & 0o027)!= 0:\n                print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" is mode: {stat.filemode(stat_info.st_mode)} should be mode: 750 or more restrictive\")\n                compliant = False\n    return compliant\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate local interactive user home directory vulnerabilities.\"\"\"\n    valid_shells = [shell for shell in pwd.getpwall() if shell.pw_shell not in [\"/sbin/nologin\", \"/bin/false\"]]\n    for user in valid_shells:\n        home_dir = user.pw_dir\n        if not os.path.exists(home_dir):\n            print(f\"- User: \\\"{user.pw_name}\\\" Home \\\"{home_dir}\\\" Doesn't exist - Please create a home in accordance with local site policy\")\n        else:\n            stat_info = os.stat(home_dir)\n            if stat_info.st_uid!= user.pw_uid:\n                os.chown(home_dir, user.pw_uid, -1)\n                print(f\"- Changed ownership of \\\"{home_dir}\\\" to \\\"{user.pw_name}\\\"\")\n            if (stat_info.st_mode & 0o027)!= 0:\n                os.chmod(home_dir, stat_info.st_mode & ~0o027)\n                print(f\"- Removed excess permissions from \\\"{home_dir}\\\"\")\n\nif __name__ == \"__main__\":\n    print(\"Audit Result:\")\n    if audit_vuln():\n        print(\"** PASS **\")\n        print(\"- All local interactive users' home directories are correctly configured.\")\n    else:\n        print(\"** FAIL **\")\n        print(\"Running remediation...\")\n        remediate_vuln()\n"
  },
  {
    "name": "Ensure local interactive user dot files access is configured",
    "id": "7.2.10",
    "type": "Automated",
    "start_page": 931,
    "end_page": 936,
    "profiles": [
      "level-1-server",
      "level-1-workstation"
    ],
    "description": "While the system administrator can establish secure permissions for users' \"dot\" files, the users can easily override these. - `.forward file specifies an email address to forward the user's mail to.` - `.rhost file provides the \"remote authentication\" database for the rcp, rlogin, and rsh commands and the rcmd() function. These files bypass the standard password-based user authentication mechanism. They specify remote hosts and users that are considered trusted (i.e. are allowed to access the local system without supplying a password) - `.netrc file contains data for logging into a remote host or passing authentication to an API. - `.bash_history file keeps track of the user\u2019s commands.",
    "rationale": "User configuration files with excessive or incorrect access may enable malicious users to steal or modify other users' data or to gain another user's system privileges.",
    "audit_details": "Run the following script to verify local interactive user dot files: - Don't include .forward, .rhost, or .netrc files - Are mode 0644 or more restrictive - Are owned by the local interactive user - Are group owned by the user's primary group\n\n```\n.bash_history is mode 0600 or more restrictive\n\n### Note: If a .netrc file is required, and follows local site policy, it should be mode 0600 or more restrictive.\n```\nPage 930",
    "audit_code": "#!/usr/bin/env bash\n{\n  l_output=\"\" l_output2=\"\" l_output3=\"\"\n  l_bf=\"\" l_df=\"\" l_nf=\"\" l_hf=\"\"\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \\\"nologin\\\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home location\n   [[ -n \\\"$l_epu\\\" && -n \\\"$l_eph\\\" ]] && a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\\\"$l_valid_shells\\\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n  l_maxsize=\"1000\" # Maximun number of local interactive users before warning (Default 1,000)\n  [ \\\"$l_asize \\\" -gt \\\"$l_maxsize\\\" ] && echo -e \"\\n ** INFO **\\n \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running check\\n\"\n  file_access_chk()\n  {\n   l_facout2=\"\"\n   l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n   if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n     l_facout2=\"$l_facout2\\n - File: \\\"$l_hdfile\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_max\\\" or more restrictive\"\n   fi\n   if [[ ! \\\"$l_owner\\\" =~ ($l_user) ]]; then\n     l_facout2=\"$l_facout2\\n - File: \\\"$l_hdfile\\\" owned by:\\n\\\"$l_owner\\\" and should be owned by \\\"${l_user//|/ or }\\\"\"\n   fi\n   if [[ ! \\\"$l_gowner\\\" =~ ($l_group) ]]; then\n     l_facout2=\"$l_facout2\\n - File: \\\"$l_hdfile\\\" group owned by:\\n\\\"$l_gowner\\\" and should be group owned by \\\"${l_group//|/ or }\\\"\"\n   fi\n  }\n  while read -r l_user l_home; do\n   l_fe=\"\" l_nout2=\"\" l_nout3=\"\" l_dfout2=\"\" l_hdout2=\"\" l_bhout2=\"\"\n   if [ -d \\\"$l_home\\\" ]; then\n     l_group=\"$(id -gn \\\"$l_user\\\" | xargs)\"\n     l_group=\"${l_group// /|}\"\n     while IFS= read -r -d $'\\0' l_hdfile; do\n      while read -r l_mode l_owner l_gowner; do\n        case \\\"$(basename \\\"$l_hdfile\\\")\\\" in\n         .forward | .rhost )\n           l_fe=\"Y\" && l_bf=\"Y\"\n           l_dfout2=\"$l_dfout2\\n - File: \\\"$l_hdfile\\\" exists\" ;;\n         .netrc )\n           l_mask='0177'\n           file_access_chk\n           if [ -n \\\"$l_facout2\\\" ]; then\n            l_fe=\"Y\" && l_nf=\"Y\"\n            l_nout2=\"$l_facout2\"\n           else\n            l_nout3=\"  - File: \\\"$l_hdfile\\\" exists\"\n           fi ;;\n\n         .bash_history )\n           l_mask='0177'\n           file_access_chk\n           if [ -n \\\"$l_facout2\\\" ]; then\n            l_fe=\"Y\" && l_hf=\"Y\"\n            l_bhout2=\"$l_facout2\"\n           fi ;;\n         * )\n           l_mask='0133'\n           file_access_chk\n           if [ -n \\\"$l_facout2\\\" ]; then\n            l_fe=\"Y\" && l_df=\"Y\"\n            l_hdout2=\"$l_facout2\"\n           fi ;;\n         esac\n      done <<< \\\"$(stat -Lc '%#a %U %G' \\\"$l_hdfile\\\")\\\"\n     done < <(find \\\"$l_home\\\" -xdev -type f -name '.*' -print0)\n   fi\n   if [ \\\"$l_fe\\\" = \\\"Y\\\" ]; then\n     l_output2=\"$l_output2\\n - User: \\\"$l_user\\\" Home Directory:\\n\\\"$l_home\\\"\"\n     [ -n \\\"$l_dfout2\\\" ] && l_output2=\"$l_output2$l_dfout2\"\n     [ -n \\\"$l_nout2\\\" ] && l_output2=\"$l_output2$l_nout2\"\n     [ -n \\\"$l_bhout2\\\" ] && l_output2=\"$l_output2$l_bhout2\"\n     [ -n \\\"$l_hdout2\\\" ] && l_output2=\"$l_output2$l_hdout2\"\n   fi\n   [ -n \\\"$l_nout3\\\" ] && l_output3=\"$l_output3\\n - User: \\\"$l_user\\\" Home Directory: \\\"$l_home\\\"\\n$l_nout3\"\n  done <<< \\\"$(printf '%s\\n' \\\"${a_uarr[@]}\\\")\\\"\n  unset a_uarr # Remove array\n  [ -n \\\"$l_output3\\\" ] && l_output3=\" - ** Warning **\\n - \\\".netrc\\\" files should be removed unless deemed necessary\\n  and in accordance with local site policy:$l_output3\"\n  [ -z \\\"$l_bf\\\" ] && l_output=\"$l_output\\n  - \\\".forward\\\" or \\\".rhost\\\" files\"\n  [ -z \\\"$l_nf\\\" ] && l_output=\"$l_output\\n  - \\\".netrc\\\" files with incorrect access configured\"\n  [ -z \\\"$l_hf\\\" ] && l_output=\"$l_output\\n  - \\\".bash_history\\\" files with incorrect access configured\"\n  [ -z \\\"$l_df\\\" ] && l_output=\"$l_output\\n  - \\\"dot\\\" files with incorrect access configured\"\n  [ -n \\\"$l_output\\\" ] && l_output=\" - No local interactive users home directories contain:$l_output\"\n  if [ -z \\\"$l_output2\\\" ]; then # If l_output2 is empty, we pass\n   echo -e \"\\n- Audit Result:\\n ** PASS **\\n - * Correctly configured *:\\n$l_output\\n\"\n   echo -e \"$l_output3\\n\"\n  else\n   echo -e \"\\n- Audit Result:\\n ** FAIL **\\n - * Reasons for audit failure * :\\n$l_output2\\n\"\n   echo -e \"[ -n \\\"$l_output\\\" ] && echo -e \"- * Correctly configured *:\\n$l_output\\n\"\n  fi\n}\n",
    "remediation_details": "Making global modifications to users' files without alerting the user community can result in unexpected outages and unhappy users. Therefore, it is recommended that a monitoring policy be established to report user dot file permissions and determine the action to be taken in accordance with site policy. The following script will: - remove excessive permissions on dot files within interactive users' home directories - change ownership of dot files within interactive users' home directories to the user - change group ownership of dot files within interactive users' home directories to the user's primary group - list .forward and .rhost files to be investigated and manually deleted",
    "remediation_code": "#!/usr/bin/env bash\n{\n  l_valid_shells=\"^($( awk -F\\/ '$NF != \\\"nologin\\\" {print}' /etc/shells | sed -rn '/^\\//{s,/,\\\\/,g;p}' | paste -s -d '|' - ))$\"\n  unset a_uarr && a_uarr=() # Clear and initialize array\n  while read -r l_epu l_eph; do # Populate array with users and user home location\n   [[ -n \\\"$l_epu\\\" && -n \\\"$l_eph\\\" ]] && a_uarr+=(\"$l_epu $l_eph\")\n  done <<< \"$(awk -v pat=\\\"$l_valid_shells\\\" -F: '$(NF) ~ pat { print $1 \" \" $(NF-1) }' /etc/passwd)\"\n  l_asize=\"${#a_uarr[@]}\" # Here if we want to look at number of users before proceeding \n  l_maxsize=\"1000\" # Maximum number of local interactive users before warning (Default 1,000)\n  [ \\\"$l_asize \\\" -gt \\\"$l_maxsize\\\" ] && echo -e \"\\n ** INFO **\\n \\\"$l_asize\\\" Local interactive users found on the system\\n - This may be a long running check\\n\"\n  file_access_fix()\n  {\n   l_facout2=\"\"\n   l_max=\"$( printf '%o' $(( 0777 & ~$l_mask)) )\"\n   if [ $(( $l_mode & $l_mask )) -gt 0 ]; then\n     echo -e \" - File: \\\"$l_hdfile\\\" is mode: \\\"$l_mode\\\" and should be mode: \\\"$l_max\\\" or more restrictive\\n  - Changing to mode \\\"$l_max\\\"\"\n     chmod \\\"$l_chp\\\" \\\"$l_hdfile\\\"\n   fi\n   if [[ ! \\\"$l_owner\\\" =~ ($l_user) ]]; then\n     echo -e \" - File: \\\"$l_hdfile\\\" owned by: \\\"$l_owner\\\" and should be owned by \\\"${l_user//|/ or }\\\"\\n  - Changing ownership to \\\"$l_user\\\"\"\n     chown \\\"$l_user\\\" \\\"$l_hdfile\\\"\n   fi\n   if [[ ! \\\"$l_gowner\\\" =~ ($l_group) ]]; then\n     echo -e \" - File: \\\"$l_hdfile\\\" group owned by: \\\"$l_gowner\\\" and should be group owned by \\\"${l_group//|/ or }\\\"\\n  - Changing group ownership to \\\"$l_group\\\"\"\n     chgrp \\\"$l_group\\\" \\\"$l_hdfile\\\"\n   fi\n  }\n  while read -r l_user l_home; do\n   if [ -d \\\"$l_home\\\" ]; then\n     echo -e \"\\n - Checking user: \\\"$l_user\\\" home directory: \\\"$l_home\\\"\"\n     l_group=\"$(id -gn \\\"$l_user\\\" | xargs)\"\n     l_group=\"${l_group// /|}\"\n     while IFS= read -r -d $'\\0' l_hdfile; do\n      while read -r l_mode l_owner l_gowner; do\n        case \\\"$(basename \\\"$l_hdfile\\\")\\\" in\n         .forward | .rhost )\n           echo -e \" - File: \\\"$l_hdfile\\\" exists\\n  - Please investigate and manually delete \\\"$l_hdfile\\\"\"\n         ;;\n         .netrc )\n           l_mask='0177'\n           l_chp=\"u-x,go-rwx\"\n           file_access_fix ;; \n         .bash_history )\n           l_mask='0177'\n           l_chp=\"u-x,go-rwx\"\n           file_access_fix ;;\n         * )\n           l_mask='0133'\n           l_chp=\"u-x,go-wx\"\n           file_access_fix ;;\n         esac\n      done <<< \\\"$(stat -Lc '%#a %U %G' \\\"$l_hdfile\\\")\\\"\n     done < <(find \\\"$l_home\\\" -xdev -type f -name '.*' -print0)\n   fi\n  done <<< \"$(printf '%s\\n' \\\"${a_uarr[@]}\\\")\"\n  unset a_uarr # Remove array\n}\n\n### References:\n\n 1. NIST SP 800-53 Rev. 5: CM-1, CM-2, CM-6, CM-7, IA-5\n\n CIS Controls:\n\n Controls Control IG 1 IG 2 IG 3 Version\n\n 3.3 Configure Data Access Control Lists v8 Configure data access control lists based on a user\u2019s need to know. Apply data \u25cf \u25cf \u25cf\naccess control lists, also known as access permissions, to local and remote file systems, databases, and applications.\n\n### 14.6 Protect Information through Access Control Lists Protect all information stored on systems with file system, network share,\n\n### v7 claims, application, or database specific access control lists. These controls will \u25cf \u25cf \u25cf\n\nenforce the principle that only authorized individuals should have access to the information based on their need to access the information as a part of their responsibilities.\n\n### MITRE ATT&CK Mappings:\n\n Techniques / Sub Tactics Mitigations techniques\n \n T1222, T1222.001, T1222.002, T1552, TA0005 M1022\n T1552.003, T1552.004\n\nPage 935",
    "python_script": "\nimport os\nimport stat\nimport pwd\nimport grp\n\ndef audit_vuln() -> bool:\n    \"\"\"Audit local interactive user dot files access\"\"\"\n    failed = False\n    for user in pwd.getpwall():\n        if user.pw_shell and not user.pw_shell.endswith('/nologin'):\n            home_dir = user.pw_dir\n            if os.path.isdir(home_dir):\n                for root, dirs, files in os.walk(home_dir):\n                    for file in files:\n                        if file.startswith('.'):\n                            file_path = os.path.join(root, file)\n                            file_stat = os.stat(file_path)\n                            if file in ['.netrc', '.bash_history']:\n                                if file_stat.st_mode & 0o177:\n                                    print(f\" - File: '{file_path}' is mode: {stat.filemode(file_stat.st_mode)} and should be mode: 0600 or more restrictive\")\n                                    failed = True\n                            else:\n                                if file not in ['.forward', '.rhost']:\n                                    if file_stat.st_mode & 0o133:\n                                        print(f\" - File: '{file_path}' is mode: {stat.filemode(file_stat.st_mode)} and should be mode: 0644 or more restrictive\")\n                                        failed = True\n                            if file_stat.st_uid!= user.pw_uid:\n                                print(f\" - File: '{file_path}' owned by: {file_stat.st_uid} and should be owned by {user.pw_name}\")\n                                failed = True\n                            user_group = grp.getgrgid(user.pw_gid).gr_name\n                            if file_stat.st_gid!= user.pw_gid:\n                                print(f\" - File: '{file_path}' group owned by: {file_stat.st_gid} and should be group owned by {user_group}\")\n                                failed = True\n    return not failed\n\ndef remediate_vuln() -> None:\n    \"\"\"Remediate local interactive user dot files access issues\"\"\"\n    for user in pwd.getpwall():\n        if user.pw_shell and not user.pw_shell.endswith('/nologin'):\n            home_dir = user.pw_dir\n            if os.path.isdir(home_dir):\n                for root, dirs, files in os.walk(home_dir):\n                    for file in files:\n                        if file.startswith('.'):\n                            file_path = os.path.join(root, file)\n                            file_stat = os.stat(file_path)\n                            if file in ['.netrc', '.bash_history']:\n                                if file_stat.st_mode & 0o177:\n                                    print(f\" - Changing mode of '{file_path}' to 0600\")\n                                    os.chmod(file_path, 0o600)\n                            else:\n                                if file not in ['.forward', '.rhost']:\n                                    if file_stat.st_mode & 0o133:\n                                        print(f\" - Changing mode of '{file_path}' to 0644\")\n                                        os.chmod(file_path, 0o644)\n                            if file_stat.st_uid!= user.pw_uid:\n                                print(f\" - Changing ownership of '{file_path}' to {user.pw_name}\")\n                                os.chown(file_path, user.pw_uid, -1)\n                            user_group = grp.getgrgid(user.pw_gid).gr_name\n                            if file_stat.st_gid!= user.pw_gid:\n                                print(f\" - Changing group ownership of '{file_path}' to {user_group}\")\n                                os.chown(file_path, -1, user.pw_gid)\n                            if file in ['.forward', '.rhost']:\n                                print(f\" - Please investigate and manually delete '{file_path}'\")\n"
  }
]